#include<iostream>
#include<chrono>
#include<deque>
#include<cassert>
#include<climits>
#include<unordered_map>
#include<algorithm>

#define FAIL -1

using namespace std;

int m;
int i;
string I;
typedef pair<int,int> key;
const long long base = 10000; // for hash

namespace std {
  template <>
  class hash<std::pair<int, int>> {
    public:
    size_t operator()(const std::pair<int, int>& x) const {
      return base * x.second + x.first;
    }
  };
}
unordered_map<key,deque<int>> memo;

deque<int> parse_File();
deque<int> parse_slash6();
deque<int> parse_slash11();
deque<int> parse_while14();
deque<int> parse_while22();
deque<int> parse__();
deque<int> parse_while35();
deque<int> parse_slash40();
deque<int> parse_slash45();
deque<int> parse_slash50();
deque<int> parse___();
deque<int> parse_not60();
deque<int> parse_S();
deque<int> parse_BLOCKCOMMENT();
deque<int> parse_while71();
deque<int> parse_not73();
deque<int> parse_LINECOMMENT();
deque<int> parse_while89();
deque<int> parse_not91();
deque<int> parse_EOL();
deque<int> parse_slash105();
deque<int> parse_slash110();
deque<int> parse_slash114();
deque<int> parse_slash119();
deque<int> parse_not121();
deque<int> parse_EOT();
deque<int> parse_not128();
deque<int> parse_KEYWORD();
deque<int> parse_slash137();
deque<int> parse_not147();
deque<int> parse_slash156();
deque<int> parse_not164();
deque<int> parse_slash173();
deque<int> parse_not182();
deque<int> parse_slash191();
deque<int> parse_not198();
deque<int> parse_slash207();
deque<int> parse_not213();
deque<int> parse_slash222();
deque<int> parse_not228();
deque<int> parse_slash237();
deque<int> parse_not244();
deque<int> parse_slash253();
deque<int> parse_not259();
deque<int> parse_slash268();
deque<int> parse_not275();
deque<int> parse_slash284();
deque<int> parse_not291();
deque<int> parse_slash300();
deque<int> parse_not310();
deque<int> parse_slash319();
deque<int> parse_not328();
deque<int> parse_slash337();
deque<int> parse_not345();
deque<int> parse_slash354();
deque<int> parse_not358();
deque<int> parse_slash367();
deque<int> parse_not373();
deque<int> parse_slash382();
deque<int> parse_not388();
deque<int> parse_slash397();
deque<int> parse_not406();
deque<int> parse_slash415();
deque<int> parse_not422();
deque<int> parse_slash431();
deque<int> parse_not438();
deque<int> parse_slash447();
deque<int> parse_not456();
deque<int> parse_slash465();
deque<int> parse_not472();
deque<int> parse_slash481();
deque<int> parse_not486();
deque<int> parse_slash495();
deque<int> parse_not501();
deque<int> parse_slash510();
deque<int> parse_not514();
deque<int> parse_slash523();
deque<int> parse_not535();
deque<int> parse_slash544();
deque<int> parse_not552();
deque<int> parse_slash561();
deque<int> parse_not573();
deque<int> parse_slash582();
deque<int> parse_not593();
deque<int> parse_slash602();
deque<int> parse_not607();
deque<int> parse_slash616();
deque<int> parse_not622();
deque<int> parse_slash631();
deque<int> parse_not639();
deque<int> parse_slash648();
deque<int> parse_not653();
deque<int> parse_slash662();
deque<int> parse_not668();
deque<int> parse_slash677();
deque<int> parse_not686();
deque<int> parse_slash695();
deque<int> parse_not704();
deque<int> parse_slash713();
deque<int> parse_not724();
deque<int> parse_slash733();
deque<int> parse_not741();
deque<int> parse_slash750();
deque<int> parse_not758();
deque<int> parse_slash767();
deque<int> parse_not774();
deque<int> parse_slash783();
deque<int> parse_not791();
deque<int> parse_slash800();
deque<int> parse_not810();
deque<int> parse_slash819();
deque<int> parse_not826();
deque<int> parse_slash835();
deque<int> parse_not843();
deque<int> parse_slash852();
deque<int> parse_not866();
deque<int> parse_slash875();
deque<int> parse_not881();
deque<int> parse_slash890();
deque<int> parse_not898();
deque<int> parse_slash907();
deque<int> parse_not914();
deque<int> parse_slash923();
deque<int> parse_not934();
deque<int> parse_slash943();
deque<int> parse_not949();
deque<int> parse_slash958();
deque<int> parse_not963();
deque<int> parse_slash972();
deque<int> parse_not978();
deque<int> parse_slash987();
deque<int> parse_not997();
deque<int> parse_slash1006();
deque<int> parse_not1013();
deque<int> parse_TopLevel();
deque<int> parse_slash1026();
deque<int> parse_slash1031();
deque<int> parse_slash1036();
deque<int> parse_PackageDeclaration();
deque<int> parse_slash1045();
deque<int> parse_slash1050();
deque<int> parse_not1060();
deque<int> parse_ImportDeclaration();
deque<int> parse_not1080();
deque<int> parse_slash1091();
deque<int> parse_not1099();
deque<int> parse_slash1108();
deque<int> parse_PackageName();
deque<int> parse_slash1122();
deque<int> parse_not1125();
deque<int> parse_not1133();
deque<int> parse_slash1141();
deque<int> parse_TypeDeclaration();
deque<int> parse_slash1148();
deque<int> parse_slash1153();
deque<int> parse_slash1158();
deque<int> parse_Annotations();
deque<int> parse_while1167();
deque<int> parse_Annotation();
deque<int> parse_slash1179();
deque<int> parse_slash1192();
deque<int> parse_slash1197();
deque<int> parse_slash1204();
deque<int> parse_slash1220();
deque<int> parse_ElementValuePairList();
deque<int> parse_while1231();
deque<int> parse_ElementValuePair();
deque<int> parse_not1246();
deque<int> parse_ElementValue();
deque<int> parse_slash1259();
deque<int> parse_slash1264();
deque<int> parse_slash1269();
deque<int> parse_ElementValueArrayInitializer();
deque<int> parse_slash1281();
deque<int> parse_slash1286();
deque<int> parse_slash1292();
deque<int> parse_slash1298();
deque<int> parse_ElementValueList();
deque<int> parse_while1307();
deque<int> parse_VariableDeclaration();
deque<int> parse_slash1322();
deque<int> parse_slash1327();
deque<int> parse_VariableModifier();
deque<int> parse_slash1338();
deque<int> parse_slash1343();
deque<int> parse_not1350();
deque<int> parse_VariableModifiers();
deque<int> parse_while1362();
deque<int> parse_InitDeclList();
deque<int> parse_while1373();
deque<int> parse_InitDecl();
deque<int> parse_slash1390();
deque<int> parse_not1393();
deque<int> parse_slash1403();
deque<int> parse_VarName();
deque<int> parse_while1409();
deque<int> parse_slash1417();
deque<int> parse_slash1422();
deque<int> parse_Initializer();
deque<int> parse_slash1436();
deque<int> parse_slash1441();
deque<int> parse_ArrayInitializer();
deque<int> parse_slash1453();
deque<int> parse_while1457();
deque<int> parse_slash1469();
deque<int> parse_slash1475();
deque<int> parse_slash1481();
deque<int> parse_ClassDeclaration();
deque<int> parse_slash1491();
deque<int> parse_slash1496();
deque<int> parse_slash1501();
deque<int> parse_not1509();
deque<int> parse_slash1522();
deque<int> parse_slash1527();
deque<int> parse_slash1533();
deque<int> parse_slash1538();
deque<int> parse_while1541();
deque<int> parse_slash1552();
deque<int> parse_slash1557();
deque<int> parse_slash1562();
deque<int> parse_not1569();
deque<int> parse_while1579();
deque<int> parse_ClassModifiers();
deque<int> parse_while1593();
deque<int> parse_ClassModifier();
deque<int> parse_slash1605();
deque<int> parse_slash1610();
deque<int> parse_not1618();
deque<int> parse_slash1627();
deque<int> parse_not1638();
deque<int> parse_slash1647();
deque<int> parse_not1656();
deque<int> parse_slash1665();
deque<int> parse_not1675();
deque<int> parse_slash1684();
deque<int> parse_not1691();
deque<int> parse_slash1700();
deque<int> parse_not1708();
deque<int> parse_slash1717();
deque<int> parse_not1727();
deque<int> parse_SuperClass();
deque<int> parse_not1744();
deque<int> parse_SuperInterfaces();
deque<int> parse_not1765();
deque<int> parse_EnumBody();
deque<int> parse_slash1779();
deque<int> parse_slash1787();
deque<int> parse_slash1792();
deque<int> parse_slash1798();
deque<int> parse_slash1804();
deque<int> parse_while1812();
deque<int> parse_slash1824();
deque<int> parse_slash1832();
deque<int> parse_slash1837();
deque<int> parse_slash1843();
deque<int> parse_slash1849();
deque<int> parse_slash1855();
deque<int> parse_slash1861();
deque<int> parse_EnumeratorList();
deque<int> parse_while1871();
deque<int> parse_Enumerator();
deque<int> parse_slash1886();
deque<int> parse_slash1891();
deque<int> parse_slash1899();
deque<int> parse_slash1907();
deque<int> parse_slash1912();
deque<int> parse_slash1919();
deque<int> parse_slash1925();
deque<int> parse_slash1930();
deque<int> parse_ClassBody();
deque<int> parse_while1937();
deque<int> parse_ClassBodyDeclaration();
deque<int> parse_slash1952();
deque<int> parse_slash1957();
deque<int> parse_slash1962();
deque<int> parse_not1970();
deque<int> parse_slash1981();
deque<int> parse_ClassMemberDeclaration();
deque<int> parse_slash1990();
deque<int> parse_slash1995();
deque<int> parse_slash2000();
deque<int> parse_slash2005();
deque<int> parse_slash2010();
deque<int> parse_InterfaceDeclaration();
deque<int> parse_slash2020();
deque<int> parse_slash2025();
deque<int> parse_slash2030();
deque<int> parse_not2042();
deque<int> parse_slash2055();
deque<int> parse_slash2060();
deque<int> parse_while2063();
deque<int> parse_slash2074();
deque<int> parse_slash2079();
deque<int> parse_slash2084();
deque<int> parse_not2099();
deque<int> parse_InterfaceModifier();
deque<int> parse_slash2116();
deque<int> parse_slash2121();
deque<int> parse_not2129();
deque<int> parse_slash2138();
deque<int> parse_not2149();
deque<int> parse_slash2158();
deque<int> parse_not2167();
deque<int> parse_slash2176();
deque<int> parse_not2186();
deque<int> parse_slash2195();
deque<int> parse_not2203();
deque<int> parse_slash2212();
deque<int> parse_not2222();
deque<int> parse_InterfaceModifiers();
deque<int> parse_while2234();
deque<int> parse_ExtendsInterfaces();
deque<int> parse_not2250();
deque<int> parse_InterfaceBody();
deque<int> parse_while2264();
deque<int> parse_InterfaceMemberDeclaration();
deque<int> parse_slash2279();
deque<int> parse_slash2284();
deque<int> parse_slash2289();
deque<int> parse_slash2294();
deque<int> parse_slash2299();
deque<int> parse_AnnotationTypeBody();
deque<int> parse_while2309();
deque<int> parse_AnnotationTypeMemberDeclaration();
deque<int> parse_slash2324();
deque<int> parse_slash2329();
deque<int> parse_slash2334();
deque<int> parse_slash2339();
deque<int> parse_slash2344();
deque<int> parse_AnnotationTypeElementDeclaration();
deque<int> parse_slash2354();
deque<int> parse_slash2359();
deque<int> parse_slash2375();
deque<int> parse_slash2380();
deque<int> parse_AnnotationTypeElementModifier();
deque<int> parse_slash2390();
deque<int> parse_slash2395();
deque<int> parse_not2403();
deque<int> parse_slash2412();
deque<int> parse_not2422();
deque<int> parse_AnnotationTypeElementModifiers();
deque<int> parse_while2434();
deque<int> parse_AnnotationTypeElementDefaultValue();
deque<int> parse_not2450();
deque<int> parse_FieldDeclaration();
deque<int> parse_slash2464();
deque<int> parse_slash2469();
deque<int> parse_FieldModifiers();
deque<int> parse_while2482();
deque<int> parse_FieldModifier();
deque<int> parse_slash2494();
deque<int> parse_slash2499();
deque<int> parse_not2507();
deque<int> parse_slash2516();
deque<int> parse_not2527();
deque<int> parse_slash2536();
deque<int> parse_not2545();
deque<int> parse_slash2554();
deque<int> parse_not2561();
deque<int> parse_slash2570();
deque<int> parse_not2578();
deque<int> parse_slash2587();
deque<int> parse_not2598();
deque<int> parse_slash2607();
deque<int> parse_not2617();
deque<int> parse_ConstantDeclaration();
deque<int> parse_slash2630();
deque<int> parse_slash2635();
deque<int> parse_ConstantModifiers();
deque<int> parse_while2648();
deque<int> parse_ConstantModifier();
deque<int> parse_slash2660();
deque<int> parse_slash2665();
deque<int> parse_not2673();
deque<int> parse_slash2682();
deque<int> parse_not2693();
deque<int> parse_slash2702();
deque<int> parse_not2709();
deque<int> parse_slash2718();
deque<int> parse_not2726();
deque<int> parse_MethodDeclaration();
deque<int> parse_slash2739();
deque<int> parse_slash2744();
deque<int> parse_slash2750();
deque<int> parse_slash2757();
deque<int> parse_slash2762();
deque<int> parse_slash2766();
deque<int> parse_slash2784();
deque<int> parse_slash2789();
deque<int> parse_slash2795();
deque<int> parse_slash2800();
deque<int> parse_MethodModifiers();
deque<int> parse_while2809();
deque<int> parse_MethodModifier();
deque<int> parse_slash2821();
deque<int> parse_slash2826();
deque<int> parse_not2834();
deque<int> parse_slash2843();
deque<int> parse_not2854();
deque<int> parse_slash2863();
deque<int> parse_not2872();
deque<int> parse_slash2881();
deque<int> parse_not2888();
deque<int> parse_slash2897();
deque<int> parse_not2905();
deque<int> parse_slash2914();
deque<int> parse_not2928();
deque<int> parse_slash2937();
deque<int> parse_not2948();
deque<int> parse_slash2957();
deque<int> parse_not2967();
deque<int> parse_InterfaceMethodDeclaration();
deque<int> parse_slash2980();
deque<int> parse_slash2985();
deque<int> parse_slash2991();
deque<int> parse_slash2998();
deque<int> parse_slash3003();
deque<int> parse_slash3007();
deque<int> parse_slash3025();
deque<int> parse_slash3030();
deque<int> parse_slash3036();
deque<int> parse_slash3041();
deque<int> parse_InterfaceMethodModifier();
deque<int> parse_slash3051();
deque<int> parse_slash3056();
deque<int> parse_not3064();
deque<int> parse_slash3073();
deque<int> parse_not3084();
deque<int> parse_slash3093();
deque<int> parse_not3102();
deque<int> parse_slash3111();
deque<int> parse_not3119();
deque<int> parse_InterfaceMethodModifiers();
deque<int> parse_while3131();
deque<int> parse_MethodParamList();
deque<int> parse_slash3143();
deque<int> parse_while3145();
deque<int> parse_slash3159();
deque<int> parse_slash3164();
deque<int> parse_while3168();
deque<int> parse_slash3180();
deque<int> parse_MethodParam();
deque<int> parse_slash3188();
deque<int> parse_slash3193();
deque<int> parse_VarParam();
deque<int> parse_slash3204();
deque<int> parse_slash3209();
deque<int> parse_Throws();
deque<int> parse_not3228();
deque<int> parse_ConstructorDeclaration();
deque<int> parse_slash3242();
deque<int> parse_slash3247();
deque<int> parse_slash3263();
deque<int> parse_slash3268();
deque<int> parse_ConstructorModifiers();
deque<int> parse_while3276();
deque<int> parse_ConstructorModifier();
deque<int> parse_slash3288();
deque<int> parse_slash3293();
deque<int> parse_not3301();
deque<int> parse_slash3310();
deque<int> parse_not3321();
deque<int> parse_slash3330();
deque<int> parse_not3339();
deque<int> parse_ConstructorBody();
deque<int> parse_slash3355();
deque<int> parse_slash3360();
deque<int> parse_while3363();
deque<int> parse_slash3368();
deque<int> parse_slash3373();
deque<int> parse_ExplicitConstructorInvocation();
deque<int> parse_slash3389();
deque<int> parse_slash3394();
deque<int> parse_slash3399();
deque<int> parse_slash3410();
deque<int> parse_slash3415();
deque<int> parse_slash3425();
deque<int> parse_slash3430();
deque<int> parse_slash3435();
deque<int> parse_slash3446();
deque<int> parse_slash3451();
deque<int> parse_slash3461();
deque<int> parse_not3466();
deque<int> parse_slash3476();
deque<int> parse_slash3481();
deque<int> parse_slash3492();
deque<int> parse_slash3497();
deque<int> parse_Type();
deque<int> parse_slash3511();
deque<int> parse_slash3516();
deque<int> parse_PrimitiveType();
deque<int> parse_slash3525();
deque<int> parse_slash3532();
deque<int> parse_UnannoPrimitiveType();
deque<int> parse_slash3541();
deque<int> parse_slash3546();
deque<int> parse_NumericType();
deque<int> parse_slash3555();
deque<int> parse_slash3560();
deque<int> parse_IntegralType();
deque<int> parse_slash3569();
deque<int> parse_not3575();
deque<int> parse_slash3584();
deque<int> parse_not3590();
deque<int> parse_slash3599();
deque<int> parse_not3606();
deque<int> parse_slash3615();
deque<int> parse_not3620();
deque<int> parse_slash3629();
deque<int> parse_not3635();
deque<int> parse_FloatingPointType();
deque<int> parse_slash3648();
deque<int> parse_not3655();
deque<int> parse_slash3664();
deque<int> parse_not3672();
deque<int> parse_BooleanType();
deque<int> parse_not3689();
deque<int> parse_ReferenceType();
deque<int> parse_slash3701();
deque<int> parse_slash3706();
deque<int> parse_slash3711();
deque<int> parse_ArrayType();
deque<int> parse_slash3720();
deque<int> parse_slash3725();
deque<int> parse_slash3730();
deque<int> parse_slash3738();
deque<int> parse_slash3743();
deque<int> parse_while3752();
deque<int> parse_slash3757();
deque<int> parse_slash3762();
deque<int> parse_ClassOrInterfaceType();
deque<int> parse_slash3779();
deque<int> parse_slash3784();
deque<int> parse_ClassType();
deque<int> parse_slash3795();
deque<int> parse_slash3800();
deque<int> parse_InterfaceType();
deque<int> parse_TypeVariable();
deque<int> parse_slash3810();
deque<int> parse_slash3817();
deque<int> parse_TypeParameter();
deque<int> parse_slash3826();
deque<int> parse_slash3833();
deque<int> parse_UnannoTypeParameter();
deque<int> parse_slash3844();
deque<int> parse_not3853();
deque<int> parse_while3863();
deque<int> parse_not3866();
deque<int> parse_slash3880();
deque<int> parse_TypeParameters();
deque<int> parse_not3885();
deque<int> parse_while3894();
deque<int> parse_not3906();
deque<int> parse_TypeArgument();
deque<int> parse_slash3917();
deque<int> parse_slash3922();
deque<int> parse_slash3927();
deque<int> parse_slash3932();
deque<int> parse_slash3941();
deque<int> parse_slash3946();
deque<int> parse_not3955();
deque<int> parse_slash3964();
deque<int> parse_not3971();
deque<int> parse_slash3983();
deque<int> parse_TypeArguments();
deque<int> parse_not3989();
deque<int> parse_slash3999();
deque<int> parse_while4003();
deque<int> parse_slash4015();
deque<int> parse_not4019();
deque<int> parse_Void();
deque<int> parse_not4031();
deque<int> parse_TypeOrVoid();
deque<int> parse_slash4043();
deque<int> parse_slash4048();
deque<int> parse_NonArrayType();
deque<int> parse_slash4057();
deque<int> parse_slash4062();
deque<int> parse_ClassOrInterfaceTypes();
deque<int> parse_while4070();
deque<int> parse_Block();
deque<int> parse_while4085();
deque<int> parse_slash4090();
deque<int> parse_slash4095();
deque<int> parse_LocalDeclaration();
deque<int> parse_slash4111();
deque<int> parse_slash4119();
deque<int> parse_Statement();
deque<int> parse_slash4128();
deque<int> parse_slash4133();
deque<int> parse_not4141();
deque<int> parse_slash4154();
deque<int> parse_not4157();
deque<int> parse_slash4167();
deque<int> parse_slash4174();
deque<int> parse_not4178();
deque<int> parse_slash4199();
deque<int> parse_not4205();
deque<int> parse_slash4216();
deque<int> parse_slash4220();
deque<int> parse_not4228();
deque<int> parse_slash4247();
deque<int> parse_not4254();
deque<int> parse_slash4273();
deque<int> parse_not4277();
deque<int> parse_not4292();
deque<int> parse_slash4312();
deque<int> parse_not4317();
deque<int> parse_slash4331();
deque<int> parse_slash4336();
deque<int> parse_slash4345();
deque<int> parse_slash4350();
deque<int> parse_slash4359();
deque<int> parse_slash4364();
deque<int> parse_slash4373();
deque<int> parse_not4378();
deque<int> parse_slash4397();
deque<int> parse_slash4402();
deque<int> parse_slash4411();
deque<int> parse_slash4416();
deque<int> parse_slash4425();
deque<int> parse_not4430();
deque<int> parse_slash4444();
deque<int> parse_slash4449();
deque<int> parse_not4457();
deque<int> parse_slash4472();
deque<int> parse_not4478();
deque<int> parse_slash4492();
deque<int> parse_not4502();
deque<int> parse_slash4513();
deque<int> parse_slash4518();
deque<int> parse_slash4525();
deque<int> parse_not4532();
deque<int> parse_slash4543();
deque<int> parse_slash4548();
deque<int> parse_slash4555();
deque<int> parse_not4563();
deque<int> parse_slash4574();
deque<int> parse_slash4579();
deque<int> parse_slash4586();
deque<int> parse_not4591();
deque<int> parse_while4603();
deque<int> parse_slash4614();
deque<int> parse_not4623();
deque<int> parse_slash4634();
deque<int> parse_slash4638();
deque<int> parse_not4643();
deque<int> parse_while4653();
deque<int> parse_not4668();
deque<int> parse_slash4679();
deque<int> parse_not4684();
deque<int> parse_while4696();
deque<int> parse_slash4705();
deque<int> parse_not4712();
deque<int> parse_slash4726();
deque<int> parse_not4740();
deque<int> parse_slash4759();
deque<int> parse_not4765();
deque<int> parse_not4776();
deque<int> parse_while4783();
deque<int> parse_not4785();
deque<int> parse_not4791();
deque<int> parse_not4801();
deque<int> parse_not4810();
deque<int> parse_slash4827();
deque<int> parse_not4836();
deque<int> parse_not4845();
deque<int> parse_while4852();
deque<int> parse_not4854();
deque<int> parse_not4860();
deque<int> parse_slash4877();
deque<int> parse_not4882();
deque<int> parse_slash4890();
deque<int> parse_slash4898();
deque<int> parse_ResourceStatement();
deque<int> parse_while4910();
deque<int> parse_slash4924();
deque<int> parse_slash4930();
deque<int> parse_Resource();
deque<int> parse_slash4940();
deque<int> parse_slash4945();
deque<int> parse_not4953();
deque<int> parse_CatchBlock();
deque<int> parse_not4968();
deque<int> parse_CatchParameter();
deque<int> parse_slash4990();
deque<int> parse_slash4995();
deque<int> parse_while5002();
deque<int> parse_not5005();
deque<int> parse_Expression();
deque<int> parse_slash5022();
deque<int> parse_slash5027();
deque<int> parse_Expressions();
deque<int> parse_while5035();
deque<int> parse_AssignmentExpression();
deque<int> parse_slash5050();
deque<int> parse_slash5059();
deque<int> parse_addAssignmentOperator();
deque<int> parse_slash5068();
deque<int> parse_not5071();
deque<int> parse_slash5079();
deque<int> parse_slash5086();
deque<int> parse_slash5093();
deque<int> parse_slash5100();
deque<int> parse_slash5107();
deque<int> parse_slash5114();
deque<int> parse_slash5122();
deque<int> parse_slash5130();
deque<int> parse_slash5139();
deque<int> parse_slash5146();
deque<int> parse_slash5153();
deque<int> parse_ConstantExpression();
deque<int> parse_ConditionalExpression();
deque<int> parse_while5166();
deque<int> parse_not5174();
deque<int> parse_LogicalOrExpression();
deque<int> parse_while5190();
deque<int> parse_LogicalAndExpression();
deque<int> parse_while5205();
deque<int> parse_InclusiveOrExpression();
deque<int> parse_while5220();
deque<int> parse_not5223();
deque<int> parse_ExclusiveOrExpression();
deque<int> parse_while5239();
deque<int> parse_not5242();
deque<int> parse_AndExpression();
deque<int> parse_while5258();
deque<int> parse_not5261();
deque<int> parse_EqualityExpression();
deque<int> parse_while5277();
deque<int> parse_slash5282();
deque<int> parse_slash5289();
deque<int> parse_relationalOperator();
deque<int> parse_slash5306();
deque<int> parse_slash5313();
deque<int> parse_slash5320();
deque<int> parse_not5323();
deque<int> parse_slash5331();
deque<int> parse_not5334();
deque<int> parse_RelationalExpression();
deque<int> parse_while5345();
deque<int> parse_slash5350();
deque<int> parse_slash5357();
deque<int> parse_not5369();
deque<int> parse_ShiftExpression();
deque<int> parse_while5387();
deque<int> parse_slash5392();
deque<int> parse_not5396();
deque<int> parse_slash5404();
deque<int> parse_not5408();
deque<int> parse_slash5416();
deque<int> parse_not5421();
deque<int> parse_AdditiveExpression();
deque<int> parse_while5438();
deque<int> parse_slash5443();
deque<int> parse_not5446();
deque<int> parse_slash5454();
deque<int> parse_not5457();
deque<int> parse_slash5462();
deque<int> parse_slash5466();
deque<int> parse_MultiplicativeExpression();
deque<int> parse_while5484();
deque<int> parse_slash5489();
deque<int> parse_not5492();
deque<int> parse_slash5500();
deque<int> parse_not5503();
deque<int> parse_slash5511();
deque<int> parse_not5514();
deque<int> parse_CastNewExpression();
deque<int> parse_slash5532();
deque<int> parse_slash5545();
deque<int> parse_UnaryExpression();
deque<int> parse_slash5554();
deque<int> parse_slash5559();
deque<int> parse_slash5568();
deque<int> parse_slash5577();
deque<int> parse_not5580();
deque<int> parse_slash5590();
deque<int> parse_not5593();
deque<int> parse_slash5598();
deque<int> parse_slash5602();
deque<int> parse_slash5613();
deque<int> parse_slash5621();
deque<int> parse_not5624();
deque<int> parse_PostfixExpression();
deque<int> parse_while5637();
deque<int> parse_slash5642();
deque<int> parse_slash5647();
deque<int> parse_slash5652();
deque<int> parse_slash5657();
deque<int> parse_slash5662();
deque<int> parse_slash5667();
deque<int> parse_slash5672();
deque<int> parse_addMethodCall();
deque<int> parse_not5683();
deque<int> parse_slash5693();
deque<int> parse_slash5698();
deque<int> parse_slash5709();
deque<int> parse_slash5714();
deque<int> parse_addInstanceCreation();
deque<int> parse_not5722();
deque<int> parse_not5732();
deque<int> parse_slash5743();
deque<int> parse_slash5748();
deque<int> parse_slash5754();
deque<int> parse_slash5759();
deque<int> parse_slash5770();
deque<int> parse_slash5775();
deque<int> parse_slash5784();
deque<int> parse_slash5789();
deque<int> parse_addArgumentExpressionList();
deque<int> parse_while5795();
deque<int> parse_addIndex();
deque<int> parse_addField();
deque<int> parse_not5817();
deque<int> parse_not5826();
deque<int> parse_addMethodReference();
deque<int> parse_slash5839();
deque<int> parse_slash5844();
deque<int> parse_addInc();
deque<int> parse_addDec();
deque<int> parse_PrimaryExpression();
deque<int> parse_slash5863();
deque<int> parse_slash5868();
deque<int> parse_slash5873();
deque<int> parse_slash5878();
deque<int> parse_slash5889();
deque<int> parse_slash5894();
deque<int> parse_not5899();
deque<int> parse_not5910();
deque<int> parse_slash5919();
deque<int> parse_not5924();
deque<int> parse_not5936();
deque<int> parse_slash5945();
deque<int> parse_slash5950();
deque<int> parse_slash5955();
deque<int> parse_slash5960();
deque<int> parse_slash5965();
deque<int> parse_ClassLiteral();
deque<int> parse_not5974();
deque<int> parse_not5986();
deque<int> parse_This();
deque<int> parse_not5999();
deque<int> parse_Super();
deque<int> parse_not6013();
deque<int> parse_MethodInvocationExpression();
deque<int> parse_slash6030();
deque<int> parse_slash6035();
deque<int> parse_InstanceCreationExpression();
deque<int> parse_not6045();
deque<int> parse_slash6056();
deque<int> parse_slash6061();
deque<int> parse_slash6067();
deque<int> parse_slash6072();
deque<int> parse_slash6083();
deque<int> parse_slash6088();
deque<int> parse_slash6097();
deque<int> parse_slash6102();
deque<int> parse_ArrayCreationExpression();
deque<int> parse_slash6109();
deque<int> parse_not6114();
deque<int> parse_slash6125();
deque<int> parse_slash6130();
deque<int> parse_slash6138();
deque<int> parse_slash6143();
deque<int> parse_while6154();
deque<int> parse_slash6159();
deque<int> parse_slash6164();
deque<int> parse_while6179();
deque<int> parse_slash6184();
deque<int> parse_slash6189();
deque<int> parse_slash6203();
deque<int> parse_not6208();
deque<int> parse_slash6219();
deque<int> parse_slash6224();
deque<int> parse_slash6232();
deque<int> parse_slash6237();
deque<int> parse_while6246();
deque<int> parse_slash6251();
deque<int> parse_slash6256();
deque<int> parse_MethodReference();
deque<int> parse_slash6282();
deque<int> parse_slash6287();
deque<int> parse_slash6293();
deque<int> parse_slash6298();
deque<int> parse_not6303();
deque<int> parse_LambdaExpression();
deque<int> parse_LambdaParameters();
deque<int> parse_slash6325();
deque<int> parse_slash6330();
deque<int> parse_slash6338();
deque<int> parse_slash6343();
deque<int> parse_slash6350();
deque<int> parse_InferredFormalParameterList();
deque<int> parse_while6364();
deque<int> parse_LambdaBody();
deque<int> parse_slash6379();
deque<int> parse_slash6384();
deque<int> parse_Identifier();
deque<int> parse_QualifiedName();
deque<int> parse_while6397();
deque<int> parse_not6400();
deque<int> parse_W();
deque<int> parse_NAME();
deque<int> parse_not6416();
deque<int> parse_not6422();
deque<int> parse_not6426();
deque<int> parse_while6436();
deque<int> parse_Literal();
deque<int> parse_slash6448();
deque<int> parse_slash6453();
deque<int> parse_slash6458();
deque<int> parse_slash6463();
deque<int> parse_slash6468();
deque<int> parse_slash6473();
deque<int> parse_Constant();
deque<int> parse_NullLiteral();
deque<int> parse_not6486();
deque<int> parse_BooleanLiteral();
deque<int> parse_slash6498();
deque<int> parse_not6504();
deque<int> parse_slash6513();
deque<int> parse_not6520();
deque<int> parse_IntegerLiteral();
deque<int> parse_slash6533();
deque<int> parse_slash6538();
deque<int> parse_slash6543();
deque<int> parse_slash6548();
deque<int> parse_slash6556();
deque<int> parse_slash6561();
deque<int> parse_slash6566();
deque<int> parse_DECIMAL();
deque<int> parse_slash6575();
deque<int> parse_not6578();
deque<int> parse_slash6584();
deque<int> parse_while6587();
deque<int> parse_while6589();
deque<int> parse_HEXADECIMAL();
deque<int> parse_while6608();
deque<int> parse_while6610();
deque<int> parse_BINARY();
deque<int> parse_while6627();
deque<int> parse_while6629();
deque<int> parse_OCTAL();
deque<int> parse_while6643();
deque<int> parse_while6645();
deque<int> parse_DIGIT();
deque<int> parse_HEX();
deque<int> parse_INT_SUFFIX();
deque<int> parse_FloatingPointLiteral();
deque<int> parse_slash6667();
deque<int> parse_slash6674();
deque<int> parse_slash6679();
deque<int> parse_slash6685();
deque<int> parse_FLOAT();
deque<int> parse_slash6698();
deque<int> parse_slash6705();
deque<int> parse_slash6710();
deque<int> parse_slash6714();
deque<int> parse_while6718();
deque<int> parse_FLOAT_SUFFIX();
deque<int> parse_FRACTION();
deque<int> parse_slash6735();
deque<int> parse_not6737();
deque<int> parse_while6742();
deque<int> parse_while6744();
deque<int> parse_while6760();
deque<int> parse_while6762();
deque<int> parse_slash6776();
deque<int> parse_while6780();
deque<int> parse_while6782();
deque<int> parse_EXPONENT();
deque<int> parse_slash6802();
deque<int> parse_slash6806();
deque<int> parse_while6811();
deque<int> parse_while6813();
deque<int> parse_StringLiteral();
deque<int> parse_while6828();
deque<int> parse_CharacterLiteral();
deque<int> parse_while6841();
deque<int> parse_STRING_CONTENT();
deque<int> parse_slash6856();
deque<int> parse_slash6861();
deque<int> parse_not6863();
deque<int> parse_CHAR_CONTENT();
deque<int> parse_slash6874();
deque<int> parse_slash6879();
deque<int> parse_not6881();
deque<int> parse_ESCAPE();
deque<int> parse_slash6892();
deque<int> parse_slash6897();
deque<int> parse_slash6902();
deque<int> parse_SIMPLE_ESCAPE();
deque<int> parse_OCTAL_ESCAPE();
deque<int> parse_slash6914();
deque<int> parse_slash6921();
deque<int> parse_slash6927();
deque<int> parse_HEX_ESCAPE();
deque<int> parse_while6935();
deque<int> parse_HEX4();

deque<int> parse_File(){
  if(memo.count(key(0,i))) {
    return memo[key(0,i)];
  }
  int backtracking_ptr_for_packrat0=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (_) */
    deque<int> next_prev2;
    for(int i1=0;i1<(int)prev.size();++i1) {
      if( prev[i1] == FAIL ) {
        if(!(!next_prev2.empty() && next_prev2.front() == FAIL )) {
          next_prev2.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1];
      tmp = parse__();
      
      for(int i1=0;i1<(int)tmp.size();++i1) {
        if( tmp[i1] == FAIL ) {
          if(!( !next_prev2.empty() && next_prev2[0] == FAIL )) {
            next_prev2.push_front(FAIL);
          }
        } else {
          next_prev2.push_back(tmp[i1]);
        }
      }
    }
    prev = next_prev2;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Prioritized Choice */
      deque<int> next_prev4;
      deque<int> prioritized_choice_final_prev5;
      next_prev4.clear();
      for(int i3=0;i3<(int)prev.size();++i3) {
        i = prev[i3];
        tmp = parse_slash6();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4.push_back(prev[i3]); }
        for(int i10=0;i10<(int)tmp.size();++i10) {
          if( tmp[i10] != FAIL ) {
            prioritized_choice_final_prev5.push_back(tmp[i10]);
          }
        }
      }
      prev = next_prev4;
      next_prev4.clear();
      for(int i3=0;i3<(int)prev.size();++i3) {
        i = prev[i3];
        tmp = parse_slash11();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4.push_back(prev[i3]); }
        for(int i13=0;i13<(int)tmp.size();++i13) {
          if( tmp[i13] != FAIL ) {
            prioritized_choice_final_prev5.push_back(tmp[i13]);
          }
        }
      }
      prev = next_prev4;
      if(!prev.empty()) {
        if(!(!prioritized_choice_final_prev5.empty() && prioritized_choice_final_prev5.front() == FAIL )) {
          prioritized_choice_final_prev5.push_front(FAIL);
        }
      }
      prev = prioritized_choice_final_prev5;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Star */
      deque<int> next_prev18;
      deque<int> star_final_prev19;
      while(!((int)prev.size()==1&&prev.front()==FAIL)) {
        next_prev18.clear();
        for(int i20=0;i20<(int)prev.size();++i20) {
          i = prev[i20];
          tmp = parse_while14();
          if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
            star_final_prev19.push_back(prev[i20]);
          }
          for(int i21=0;i21<(int)tmp.size();++i21) {
            if(tmp[i21]==FAIL) {
              if(!( !next_prev18.empty() && next_prev18.front() == FAIL )) {
                next_prev18.push_front(FAIL);
              }
            } else {
              next_prev18.push_back(tmp[i21]);
            }
          }
        }
        prev = next_prev18;
      }
      prev = star_final_prev19;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Star */
      deque<int> next_prev26;
      deque<int> star_final_prev27;
      while(!((int)prev.size()==1&&prev.front()==FAIL)) {
        next_prev26.clear();
        for(int i28=0;i28<(int)prev.size();++i28) {
          i = prev[i28];
          tmp = parse_while22();
          if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
            star_final_prev27.push_back(prev[i28]);
          }
          for(int i29=0;i29<(int)tmp.size();++i29) {
            if(tmp[i29]==FAIL) {
              if(!( !next_prev26.empty() && next_prev26.front() == FAIL )) {
                next_prev26.push_front(FAIL);
              }
            } else {
              next_prev26.push_back(tmp[i29]);
            }
          }
        }
        prev = next_prev26;
      }
      prev = star_final_prev27;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (_) */
    deque<int> next_prev31;
    for(int i30=0;i30<(int)prev.size();++i30) {
      if( prev[i30] == FAIL ) {
        if(!(!next_prev31.empty() && next_prev31.front() == FAIL )) {
          next_prev31.push_front(FAIL);
        }
        continue;
      }
      i = prev[i30];
      tmp = parse__();
      
      for(int i30=0;i30<(int)tmp.size();++i30) {
        if( tmp[i30] == FAIL ) {
          if(!( !next_prev31.empty() && next_prev31[0] == FAIL )) {
            next_prev31.push_front(FAIL);
          }
        } else {
          next_prev31.push_back(tmp[i30]);
        }
      }
    }
    prev = next_prev31;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (EOT) */
    deque<int> next_prev33;
    for(int i32=0;i32<(int)prev.size();++i32) {
      if( prev[i32] == FAIL ) {
        if(!(!next_prev33.empty() && next_prev33.front() == FAIL )) {
          next_prev33.push_front(FAIL);
        }
        continue;
      }
      i = prev[i32];
      tmp = parse_EOT();
      
      for(int i32=0;i32<(int)tmp.size();++i32) {
        if( tmp[i32] == FAIL ) {
          if(!( !next_prev33.empty() && next_prev33[0] == FAIL )) {
            next_prev33.push_front(FAIL);
          }
        } else {
          next_prev33.push_back(tmp[i32]);
        }
      }
    }
    prev = next_prev33;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i0=0;i0<(int)prev.size();++i0) {
    if( prev[i0] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i0]);
    }
  }
  return memo[key(0,backtracking_ptr_for_packrat0)] = result;
}

inline deque<int> parse_slash6() { 
  if(memo.count(key(1,i))) {
    return memo[key(1,i)];
  }
  int backtracking_ptr_for_packrat1=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (PackageDeclaration) */
    deque<int> next_prev9;
    for(int i8=0;i8<(int)prev.size();++i8) {
      if( prev[i8] == FAIL ) {
        if(!(!next_prev9.empty() && next_prev9.front() == FAIL )) {
          next_prev9.push_front(FAIL);
        }
        continue;
      }
      i = prev[i8];
      tmp = parse_PackageDeclaration();
      
      for(int i8=0;i8<(int)tmp.size();++i8) {
        if( tmp[i8] == FAIL ) {
          if(!( !next_prev9.empty() && next_prev9[0] == FAIL )) {
            next_prev9.push_front(FAIL);
          }
        } else {
          next_prev9.push_back(tmp[i8]);
        }
      }
    }
    prev = next_prev9;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i7=0;i7<(int)prev.size();++i7) {
    if( prev[i7] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i7]);
    }
  }
  return memo[key(1,backtracking_ptr_for_packrat1)] = result;
}

inline deque<int> parse_slash11() { 
  if(memo.count(key(2,i))) {
    return memo[key(2,i)];
  }
  int backtracking_ptr_for_packrat2=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i12=0;i12<(int)prev.size();++i12) {
    if( prev[i12] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i12]);
    }
  }
  return memo[key(2,backtracking_ptr_for_packrat2)] = result;
}

inline deque<int> parse_while14() { 
  if(memo.count(key(3,i))) {
    return memo[key(3,i)];
  }
  int backtracking_ptr_for_packrat3=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ImportDeclaration) */
    deque<int> next_prev17;
    for(int i16=0;i16<(int)prev.size();++i16) {
      if( prev[i16] == FAIL ) {
        if(!(!next_prev17.empty() && next_prev17.front() == FAIL )) {
          next_prev17.push_front(FAIL);
        }
        continue;
      }
      i = prev[i16];
      tmp = parse_ImportDeclaration();
      
      for(int i16=0;i16<(int)tmp.size();++i16) {
        if( tmp[i16] == FAIL ) {
          if(!( !next_prev17.empty() && next_prev17[0] == FAIL )) {
            next_prev17.push_front(FAIL);
          }
        } else {
          next_prev17.push_back(tmp[i16]);
        }
      }
    }
    prev = next_prev17;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i15=0;i15<(int)prev.size();++i15) {
    if( prev[i15] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i15]);
    }
  }
  return memo[key(3,backtracking_ptr_for_packrat3)] = result;
}

inline deque<int> parse_while22() { 
  if(memo.count(key(4,i))) {
    return memo[key(4,i)];
  }
  int backtracking_ptr_for_packrat4=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (TypeDeclaration) */
    deque<int> next_prev25;
    for(int i24=0;i24<(int)prev.size();++i24) {
      if( prev[i24] == FAIL ) {
        if(!(!next_prev25.empty() && next_prev25.front() == FAIL )) {
          next_prev25.push_front(FAIL);
        }
        continue;
      }
      i = prev[i24];
      tmp = parse_TypeDeclaration();
      
      for(int i24=0;i24<(int)tmp.size();++i24) {
        if( tmp[i24] == FAIL ) {
          if(!( !next_prev25.empty() && next_prev25[0] == FAIL )) {
            next_prev25.push_front(FAIL);
          }
        } else {
          next_prev25.push_back(tmp[i24]);
        }
      }
    }
    prev = next_prev25;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i23=0;i23<(int)prev.size();++i23) {
    if( prev[i23] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i23]);
    }
  }
  return memo[key(4,backtracking_ptr_for_packrat4)] = result;
}

deque<int> parse__(){
  if(memo.count(key(5,i))) {
    return memo[key(5,i)];
  }
  int backtracking_ptr_for_packrat5=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev55;
    deque<int> star_final_prev56;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev55.clear();
      for(int i57=0;i57<(int)prev.size();++i57) {
        i = prev[i57];
        tmp = parse_while35();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev56.push_back(prev[i57]);
        }
        for(int i58=0;i58<(int)tmp.size();++i58) {
          if(tmp[i58]==FAIL) {
            if(!( !next_prev55.empty() && next_prev55.front() == FAIL )) {
              next_prev55.push_front(FAIL);
            }
          } else {
            next_prev55.push_back(tmp[i58]);
          }
        }
      }
      prev = next_prev55;
    }
    prev = star_final_prev56;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i34=0;i34<(int)prev.size();++i34) {
    if( prev[i34] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i34]);
    }
  }
  return memo[key(5,backtracking_ptr_for_packrat5)] = result;
}

inline deque<int> parse_while35() { 
  if(memo.count(key(6,i))) {
    return memo[key(6,i)];
  }
  int backtracking_ptr_for_packrat6=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev38;
  deque<int> prioritized_choice_final_prev39;
  next_prev38.clear();
  for(int i37=0;i37<(int)prev.size();++i37) {
    i = prev[i37];
    tmp = parse_slash40();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev38.push_back(prev[i37]); }
    for(int i44=0;i44<(int)tmp.size();++i44) {
      if( tmp[i44] != FAIL ) {
        prioritized_choice_final_prev39.push_back(tmp[i44]);
      }
    }
  }
  prev = next_prev38;
  next_prev38.clear();
  for(int i37=0;i37<(int)prev.size();++i37) {
    i = prev[i37];
    tmp = parse_slash45();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev38.push_back(prev[i37]); }
    for(int i49=0;i49<(int)tmp.size();++i49) {
      if( tmp[i49] != FAIL ) {
        prioritized_choice_final_prev39.push_back(tmp[i49]);
      }
    }
  }
  prev = next_prev38;
  next_prev38.clear();
  for(int i37=0;i37<(int)prev.size();++i37) {
    i = prev[i37];
    tmp = parse_slash50();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev38.push_back(prev[i37]); }
    for(int i54=0;i54<(int)tmp.size();++i54) {
      if( tmp[i54] != FAIL ) {
        prioritized_choice_final_prev39.push_back(tmp[i54]);
      }
    }
  }
  prev = next_prev38;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev39.empty() && prioritized_choice_final_prev39.front() == FAIL )) {
      prioritized_choice_final_prev39.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev39;
  for(int i36=0;i36<(int)prev.size();++i36) {
    if( prev[i36] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i36]);
    }
  }
  return memo[key(6,backtracking_ptr_for_packrat6)] = result;
}

inline deque<int> parse_slash40() { 
  if(memo.count(key(7,i))) {
    return memo[key(7,i)];
  }
  int backtracking_ptr_for_packrat7=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (S) */
    deque<int> next_prev43;
    for(int i42=0;i42<(int)prev.size();++i42) {
      if( prev[i42] == FAIL ) {
        if(!(!next_prev43.empty() && next_prev43.front() == FAIL )) {
          next_prev43.push_front(FAIL);
        }
        continue;
      }
      i = prev[i42];
      tmp = parse_S();
      
      for(int i42=0;i42<(int)tmp.size();++i42) {
        if( tmp[i42] == FAIL ) {
          if(!( !next_prev43.empty() && next_prev43[0] == FAIL )) {
            next_prev43.push_front(FAIL);
          }
        } else {
          next_prev43.push_back(tmp[i42]);
        }
      }
    }
    prev = next_prev43;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i41=0;i41<(int)prev.size();++i41) {
    if( prev[i41] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i41]);
    }
  }
  return memo[key(7,backtracking_ptr_for_packrat7)] = result;
}

inline deque<int> parse_slash45() { 
  if(memo.count(key(8,i))) {
    return memo[key(8,i)];
  }
  int backtracking_ptr_for_packrat8=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (BLOCKCOMMENT) */
    deque<int> next_prev48;
    for(int i47=0;i47<(int)prev.size();++i47) {
      if( prev[i47] == FAIL ) {
        if(!(!next_prev48.empty() && next_prev48.front() == FAIL )) {
          next_prev48.push_front(FAIL);
        }
        continue;
      }
      i = prev[i47];
      tmp = parse_BLOCKCOMMENT();
      
      for(int i47=0;i47<(int)tmp.size();++i47) {
        if( tmp[i47] == FAIL ) {
          if(!( !next_prev48.empty() && next_prev48[0] == FAIL )) {
            next_prev48.push_front(FAIL);
          }
        } else {
          next_prev48.push_back(tmp[i47]);
        }
      }
    }
    prev = next_prev48;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i46=0;i46<(int)prev.size();++i46) {
    if( prev[i46] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i46]);
    }
  }
  return memo[key(8,backtracking_ptr_for_packrat8)] = result;
}

inline deque<int> parse_slash50() { 
  if(memo.count(key(9,i))) {
    return memo[key(9,i)];
  }
  int backtracking_ptr_for_packrat9=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (LINECOMMENT) */
    deque<int> next_prev53;
    for(int i52=0;i52<(int)prev.size();++i52) {
      if( prev[i52] == FAIL ) {
        if(!(!next_prev53.empty() && next_prev53.front() == FAIL )) {
          next_prev53.push_front(FAIL);
        }
        continue;
      }
      i = prev[i52];
      tmp = parse_LINECOMMENT();
      
      for(int i52=0;i52<(int)tmp.size();++i52) {
        if( tmp[i52] == FAIL ) {
          if(!( !next_prev53.empty() && next_prev53[0] == FAIL )) {
            next_prev53.push_front(FAIL);
          }
        } else {
          next_prev53.push_back(tmp[i52]);
        }
      }
    }
    prev = next_prev53;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i51=0;i51<(int)prev.size();++i51) {
    if( prev[i51] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i51]);
    }
  }
  return memo[key(9,backtracking_ptr_for_packrat9)] = result;
}

deque<int> parse___(){
  if(memo.count(key(10,i))) {
    return memo[key(10,i)];
  }
  int backtracking_ptr_for_packrat10=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Not */
    deque<int> next_prev65;
    for(int i64=0;i64<(int)prev.size();++i64) {
      i = prev[i64];
      tmp = parse_not60();
      if(!tmp.empty()&&tmp.front()==FAIL) {
        next_prev65.push_back(prev[i64]);
      } else {
        if(!(!next_prev65.empty()&&next_prev65.front()==FAIL)) {
          next_prev65.push_front(FAIL);
        }
      }
    }
    prev = next_prev65;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i59=0;i59<(int)prev.size();++i59) {
    if( prev[i59] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i59]);
    }
  }
  return memo[key(10,backtracking_ptr_for_packrat10)] = result;
}

inline deque<int> parse_not60() { 
  if(memo.count(key(11,i))) {
    return memo[key(11,i)];
  }
  int backtracking_ptr_for_packrat11=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (S) */
  deque<int> next_prev63;
  for(int i62=0;i62<(int)prev.size();++i62) {
    if( prev[i62] == FAIL ) {
      if(!(!next_prev63.empty() && next_prev63.front() == FAIL )) {
        next_prev63.push_front(FAIL);
      }
      continue;
    }
    i = prev[i62];
    tmp = parse_S();
    
    for(int i62=0;i62<(int)tmp.size();++i62) {
      if( tmp[i62] == FAIL ) {
        if(!( !next_prev63.empty() && next_prev63[0] == FAIL )) {
          next_prev63.push_front(FAIL);
        }
      } else {
        next_prev63.push_back(tmp[i62]);
      }
    }
  }
  prev = next_prev63;
  for(int i61=0;i61<(int)prev.size();++i61) {
    if( prev[i61] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i61]);
    }
  }
  return memo[key(11,backtracking_ptr_for_packrat11)] = result;
}

deque<int> parse_S(){
  if(memo.count(key(12,i))) {
    return memo[key(12,i)];
  }
  int backtracking_ptr_for_packrat12=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i67=0;i67<(int)prev.size();++i67) {
      if( prev[i67] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i67]<m&&(I[prev[i67]]==' '||I[prev[i67]]==(char)10||I[prev[i67]]==(char)13||I[prev[i67]]==(char)9)) {
        tmp.push_back(prev[i67]+1);
      } else {
        if(!( !tmp.empty() && tmp.front() == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i66=0;i66<(int)prev.size();++i66) {
    if( prev[i66] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i66]);
    }
  }
  return memo[key(12,backtracking_ptr_for_packrat12)] = result;
}

deque<int> parse_BLOCKCOMMENT(){
  if(memo.count(key(13,i))) {
    return memo[key(13,i)];
  }
  int backtracking_ptr_for_packrat13=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i69=0;i69<(int)prev.size();++i69) {
      if( prev[i69] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i69]<m&&I[prev[i69]]=='/') {
        tmp.push_back(prev[i69]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    tmp.clear();
    for(int i70=0;i70<(int)prev.size();++i70) {
      if( prev[i70] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i70]<m&&I[prev[i70]]=='*') {
        tmp.push_back(prev[i70]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev80;
    deque<int> star_final_prev81;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev80.clear();
      for(int i82=0;i82<(int)prev.size();++i82) {
        i = prev[i82];
        tmp = parse_while71();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev81.push_back(prev[i82]);
        }
        for(int i83=0;i83<(int)tmp.size();++i83) {
          if(tmp[i83]==FAIL) {
            if(!( !next_prev80.empty() && next_prev80.front() == FAIL )) {
              next_prev80.push_front(FAIL);
            }
          } else {
            next_prev80.push_back(tmp[i83]);
          }
        }
      }
      prev = next_prev80;
    }
    prev = star_final_prev81;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i84=0;i84<(int)prev.size();++i84) {
      if( prev[i84] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i84]<m&&I[prev[i84]]=='*') {
        tmp.push_back(prev[i84]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    tmp.clear();
    for(int i85=0;i85<(int)prev.size();++i85) {
      if( prev[i85] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i85]<m&&I[prev[i85]]=='/') {
        tmp.push_back(prev[i85]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i68=0;i68<(int)prev.size();++i68) {
    if( prev[i68] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i68]);
    }
  }
  return memo[key(13,backtracking_ptr_for_packrat13)] = result;
}

inline deque<int> parse_while71() { 
  if(memo.count(key(14,i))) {
    return memo[key(14,i)];
  }
  int backtracking_ptr_for_packrat14=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Not */
    deque<int> next_prev78;
    for(int i77=0;i77<(int)prev.size();++i77) {
      i = prev[i77];
      tmp = parse_not73();
      if(!tmp.empty()&&tmp.front()==FAIL) {
        next_prev78.push_back(prev[i77]);
      } else {
        if(!(!next_prev78.empty()&&next_prev78.front()==FAIL)) {
          next_prev78.push_front(FAIL);
        }
      }
    }
    prev = next_prev78;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i79=0;i79<(int)prev.size();++i79) {
      if( prev[i79] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i79]<m) {//any character
        tmp.push_back(prev[i79]+1);
      } else {
        if(!( !tmp.empty() && tmp.front() == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i72=0;i72<(int)prev.size();++i72) {
    if( prev[i72] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i72]);
    }
  }
  return memo[key(14,backtracking_ptr_for_packrat14)] = result;
}

inline deque<int> parse_not73() { 
  if(memo.count(key(15,i))) {
    return memo[key(15,i)];
  }
  int backtracking_ptr_for_packrat15=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i75=0;i75<(int)prev.size();++i75) {
    if( prev[i75] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i75]<m&&I[prev[i75]]=='*') {
      tmp.push_back(prev[i75]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  tmp.clear();
  for(int i76=0;i76<(int)prev.size();++i76) {
    if( prev[i76] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i76]<m&&I[prev[i76]]=='/') {
      tmp.push_back(prev[i76]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i74=0;i74<(int)prev.size();++i74) {
    if( prev[i74] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i74]);
    }
  }
  return memo[key(15,backtracking_ptr_for_packrat15)] = result;
}

deque<int> parse_LINECOMMENT(){
  if(memo.count(key(16,i))) {
    return memo[key(16,i)];
  }
  int backtracking_ptr_for_packrat16=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i87=0;i87<(int)prev.size();++i87) {
      if( prev[i87] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i87]<m&&I[prev[i87]]=='/') {
        tmp.push_back(prev[i87]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    tmp.clear();
    for(int i88=0;i88<(int)prev.size();++i88) {
      if( prev[i88] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i88]<m&&I[prev[i88]]=='/') {
        tmp.push_back(prev[i88]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev97;
    deque<int> star_final_prev98;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev97.clear();
      for(int i99=0;i99<(int)prev.size();++i99) {
        i = prev[i99];
        tmp = parse_while89();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev98.push_back(prev[i99]);
        }
        for(int i100=0;i100<(int)tmp.size();++i100) {
          if(tmp[i100]==FAIL) {
            if(!( !next_prev97.empty() && next_prev97.front() == FAIL )) {
              next_prev97.push_front(FAIL);
            }
          } else {
            next_prev97.push_back(tmp[i100]);
          }
        }
      }
      prev = next_prev97;
    }
    prev = star_final_prev98;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i86=0;i86<(int)prev.size();++i86) {
    if( prev[i86] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i86]);
    }
  }
  return memo[key(16,backtracking_ptr_for_packrat16)] = result;
}

inline deque<int> parse_while89() { 
  if(memo.count(key(17,i))) {
    return memo[key(17,i)];
  }
  int backtracking_ptr_for_packrat17=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Not */
    deque<int> next_prev95;
    for(int i94=0;i94<(int)prev.size();++i94) {
      i = prev[i94];
      tmp = parse_not91();
      if(!tmp.empty()&&tmp.front()==FAIL) {
        next_prev95.push_back(prev[i94]);
      } else {
        if(!(!next_prev95.empty()&&next_prev95.front()==FAIL)) {
          next_prev95.push_front(FAIL);
        }
      }
    }
    prev = next_prev95;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i96=0;i96<(int)prev.size();++i96) {
      if( prev[i96] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i96]<m) {//any character
        tmp.push_back(prev[i96]+1);
      } else {
        if(!( !tmp.empty() && tmp.front() == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i90=0;i90<(int)prev.size();++i90) {
    if( prev[i90] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i90]);
    }
  }
  return memo[key(17,backtracking_ptr_for_packrat17)] = result;
}

inline deque<int> parse_not91() { 
  if(memo.count(key(18,i))) {
    return memo[key(18,i)];
  }
  int backtracking_ptr_for_packrat18=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i93=0;i93<(int)prev.size();++i93) {
    if( prev[i93] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i93]<m&&I[prev[i93]]==(char)10) {
      tmp.push_back(prev[i93]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i92=0;i92<(int)prev.size();++i92) {
    if( prev[i92] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i92]);
    }
  }
  return memo[key(18,backtracking_ptr_for_packrat18)] = result;
}

deque<int> parse_EOL(){
  if(memo.count(key(19,i))) {
    return memo[key(19,i)];
  }
  int backtracking_ptr_for_packrat19=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev103;
    deque<int> prioritized_choice_final_prev104;
    next_prev103.clear();
    for(int i102=0;i102<(int)prev.size();++i102) {
      i = prev[i102];
      tmp = parse_slash105();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev103.push_back(prev[i102]); }
      for(int i118=0;i118<(int)tmp.size();++i118) {
        if( tmp[i118] != FAIL ) {
          prioritized_choice_final_prev104.push_back(tmp[i118]);
        }
      }
    }
    prev = next_prev103;
    next_prev103.clear();
    for(int i102=0;i102<(int)prev.size();++i102) {
      i = prev[i102];
      tmp = parse_slash119();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev103.push_back(prev[i102]); }
      for(int i126=0;i126<(int)tmp.size();++i126) {
        if( tmp[i126] != FAIL ) {
          prioritized_choice_final_prev104.push_back(tmp[i126]);
        }
      }
    }
    prev = next_prev103;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev104.empty() && prioritized_choice_final_prev104.front() == FAIL )) {
        prioritized_choice_final_prev104.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev104;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i101=0;i101<(int)prev.size();++i101) {
    if( prev[i101] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i101]);
    }
  }
  return memo[key(19,backtracking_ptr_for_packrat19)] = result;
}

inline deque<int> parse_slash105() { 
  if(memo.count(key(20,i))) {
    return memo[key(20,i)];
  }
  int backtracking_ptr_for_packrat20=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev108;
    deque<int> prioritized_choice_final_prev109;
    next_prev108.clear();
    for(int i107=0;i107<(int)prev.size();++i107) {
      i = prev[i107];
      tmp = parse_slash110();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev108.push_back(prev[i107]); }
      for(int i113=0;i113<(int)tmp.size();++i113) {
        if( tmp[i113] != FAIL ) {
          prioritized_choice_final_prev109.push_back(tmp[i113]);
        }
      }
    }
    prev = next_prev108;
    next_prev108.clear();
    for(int i107=0;i107<(int)prev.size();++i107) {
      i = prev[i107];
      tmp = parse_slash114();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev108.push_back(prev[i107]); }
      for(int i116=0;i116<(int)tmp.size();++i116) {
        if( tmp[i116] != FAIL ) {
          prioritized_choice_final_prev109.push_back(tmp[i116]);
        }
      }
    }
    prev = next_prev108;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev109.empty() && prioritized_choice_final_prev109.front() == FAIL )) {
        prioritized_choice_final_prev109.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev109;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i117=0;i117<(int)prev.size();++i117) {
      if( prev[i117] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i117]<m&&I[prev[i117]]==(char)10) {
        tmp.push_back(prev[i117]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i106=0;i106<(int)prev.size();++i106) {
    if( prev[i106] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i106]);
    }
  }
  return memo[key(20,backtracking_ptr_for_packrat20)] = result;
}

inline deque<int> parse_slash110() { 
  if(memo.count(key(21,i))) {
    return memo[key(21,i)];
  }
  int backtracking_ptr_for_packrat21=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i112=0;i112<(int)prev.size();++i112) {
    if( prev[i112] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i112]<m&&I[prev[i112]]==(char)13) {
      tmp.push_back(prev[i112]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i111=0;i111<(int)prev.size();++i111) {
    if( prev[i111] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i111]);
    }
  }
  return memo[key(21,backtracking_ptr_for_packrat21)] = result;
}

inline deque<int> parse_slash114() { 
  if(memo.count(key(22,i))) {
    return memo[key(22,i)];
  }
  int backtracking_ptr_for_packrat22=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i115=0;i115<(int)prev.size();++i115) {
    if( prev[i115] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i115]);
    }
  }
  return memo[key(22,backtracking_ptr_for_packrat22)] = result;
}

inline deque<int> parse_slash119() { 
  if(memo.count(key(23,i))) {
    return memo[key(23,i)];
  }
  int backtracking_ptr_for_packrat23=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Not */
    deque<int> next_prev125;
    for(int i124=0;i124<(int)prev.size();++i124) {
      i = prev[i124];
      tmp = parse_not121();
      if(!tmp.empty()&&tmp.front()==FAIL) {
        next_prev125.push_back(prev[i124]);
      } else {
        if(!(!next_prev125.empty()&&next_prev125.front()==FAIL)) {
          next_prev125.push_front(FAIL);
        }
      }
    }
    prev = next_prev125;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i120=0;i120<(int)prev.size();++i120) {
    if( prev[i120] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i120]);
    }
  }
  return memo[key(23,backtracking_ptr_for_packrat23)] = result;
}

inline deque<int> parse_not121() { 
  if(memo.count(key(24,i))) {
    return memo[key(24,i)];
  }
  int backtracking_ptr_for_packrat24=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i123=0;i123<(int)prev.size();++i123) {
    if( prev[i123] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i123]<m) {//any character
      tmp.push_back(prev[i123]+1);
    } else {
      if(!( !tmp.empty() && tmp.front() == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i122=0;i122<(int)prev.size();++i122) {
    if( prev[i122] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i122]);
    }
  }
  return memo[key(24,backtracking_ptr_for_packrat24)] = result;
}

deque<int> parse_EOT(){
  if(memo.count(key(25,i))) {
    return memo[key(25,i)];
  }
  int backtracking_ptr_for_packrat25=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Not */
    deque<int> next_prev132;
    for(int i131=0;i131<(int)prev.size();++i131) {
      i = prev[i131];
      tmp = parse_not128();
      if(!tmp.empty()&&tmp.front()==FAIL) {
        next_prev132.push_back(prev[i131]);
      } else {
        if(!(!next_prev132.empty()&&next_prev132.front()==FAIL)) {
          next_prev132.push_front(FAIL);
        }
      }
    }
    prev = next_prev132;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i127=0;i127<(int)prev.size();++i127) {
    if( prev[i127] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i127]);
    }
  }
  return memo[key(25,backtracking_ptr_for_packrat25)] = result;
}

inline deque<int> parse_not128() { 
  if(memo.count(key(26,i))) {
    return memo[key(26,i)];
  }
  int backtracking_ptr_for_packrat26=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i130=0;i130<(int)prev.size();++i130) {
    if( prev[i130] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i130]<m) {//any character
      tmp.push_back(prev[i130]+1);
    } else {
      if(!( !tmp.empty() && tmp.front() == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i129=0;i129<(int)prev.size();++i129) {
    if( prev[i129] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i129]);
    }
  }
  return memo[key(26,backtracking_ptr_for_packrat26)] = result;
}

deque<int> parse_KEYWORD(){
  if(memo.count(key(27,i))) {
    return memo[key(27,i)];
  }
  int backtracking_ptr_for_packrat27=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev135;
  deque<int> prioritized_choice_final_prev136;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash137();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i155=0;i155<(int)tmp.size();++i155) {
      if( tmp[i155] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i155]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash156();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i172=0;i172<(int)tmp.size();++i172) {
      if( tmp[i172] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i172]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash173();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i190=0;i190<(int)tmp.size();++i190) {
      if( tmp[i190] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i190]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash191();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i206=0;i206<(int)tmp.size();++i206) {
      if( tmp[i206] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i206]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash207();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i221=0;i221<(int)tmp.size();++i221) {
      if( tmp[i221] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i221]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash222();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i236=0;i236<(int)tmp.size();++i236) {
      if( tmp[i236] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i236]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash237();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i252=0;i252<(int)tmp.size();++i252) {
      if( tmp[i252] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i252]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash253();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i267=0;i267<(int)tmp.size();++i267) {
      if( tmp[i267] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i267]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash268();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i283=0;i283<(int)tmp.size();++i283) {
      if( tmp[i283] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i283]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash284();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i299=0;i299<(int)tmp.size();++i299) {
      if( tmp[i299] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i299]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash300();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i318=0;i318<(int)tmp.size();++i318) {
      if( tmp[i318] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i318]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash319();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i336=0;i336<(int)tmp.size();++i336) {
      if( tmp[i336] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i336]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash337();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i353=0;i353<(int)tmp.size();++i353) {
      if( tmp[i353] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i353]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash354();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i366=0;i366<(int)tmp.size();++i366) {
      if( tmp[i366] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i366]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash367();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i381=0;i381<(int)tmp.size();++i381) {
      if( tmp[i381] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i381]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash382();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i396=0;i396<(int)tmp.size();++i396) {
      if( tmp[i396] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i396]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash397();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i414=0;i414<(int)tmp.size();++i414) {
      if( tmp[i414] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i414]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash415();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i430=0;i430<(int)tmp.size();++i430) {
      if( tmp[i430] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i430]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash431();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i446=0;i446<(int)tmp.size();++i446) {
      if( tmp[i446] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i446]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash447();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i464=0;i464<(int)tmp.size();++i464) {
      if( tmp[i464] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i464]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash465();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i480=0;i480<(int)tmp.size();++i480) {
      if( tmp[i480] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i480]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash481();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i494=0;i494<(int)tmp.size();++i494) {
      if( tmp[i494] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i494]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash495();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i509=0;i509<(int)tmp.size();++i509) {
      if( tmp[i509] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i509]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash510();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i522=0;i522<(int)tmp.size();++i522) {
      if( tmp[i522] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i522]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash523();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i543=0;i543<(int)tmp.size();++i543) {
      if( tmp[i543] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i543]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash544();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i560=0;i560<(int)tmp.size();++i560) {
      if( tmp[i560] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i560]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash561();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i581=0;i581<(int)tmp.size();++i581) {
      if( tmp[i581] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i581]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash582();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i601=0;i601<(int)tmp.size();++i601) {
      if( tmp[i601] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i601]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash602();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i615=0;i615<(int)tmp.size();++i615) {
      if( tmp[i615] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i615]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash616();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i630=0;i630<(int)tmp.size();++i630) {
      if( tmp[i630] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i630]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash631();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i647=0;i647<(int)tmp.size();++i647) {
      if( tmp[i647] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i647]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash648();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i661=0;i661<(int)tmp.size();++i661) {
      if( tmp[i661] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i661]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash662();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i676=0;i676<(int)tmp.size();++i676) {
      if( tmp[i676] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i676]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash677();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i694=0;i694<(int)tmp.size();++i694) {
      if( tmp[i694] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i694]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash695();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i712=0;i712<(int)tmp.size();++i712) {
      if( tmp[i712] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i712]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash713();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i732=0;i732<(int)tmp.size();++i732) {
      if( tmp[i732] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i732]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash733();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i749=0;i749<(int)tmp.size();++i749) {
      if( tmp[i749] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i749]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash750();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i766=0;i766<(int)tmp.size();++i766) {
      if( tmp[i766] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i766]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash767();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i782=0;i782<(int)tmp.size();++i782) {
      if( tmp[i782] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i782]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash783();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i799=0;i799<(int)tmp.size();++i799) {
      if( tmp[i799] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i799]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash800();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i818=0;i818<(int)tmp.size();++i818) {
      if( tmp[i818] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i818]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash819();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i834=0;i834<(int)tmp.size();++i834) {
      if( tmp[i834] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i834]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash835();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i851=0;i851<(int)tmp.size();++i851) {
      if( tmp[i851] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i851]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash852();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i874=0;i874<(int)tmp.size();++i874) {
      if( tmp[i874] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i874]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash875();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i889=0;i889<(int)tmp.size();++i889) {
      if( tmp[i889] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i889]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash890();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i906=0;i906<(int)tmp.size();++i906) {
      if( tmp[i906] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i906]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash907();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i922=0;i922<(int)tmp.size();++i922) {
      if( tmp[i922] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i922]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash923();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i942=0;i942<(int)tmp.size();++i942) {
      if( tmp[i942] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i942]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash943();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i957=0;i957<(int)tmp.size();++i957) {
      if( tmp[i957] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i957]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash958();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i971=0;i971<(int)tmp.size();++i971) {
      if( tmp[i971] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i971]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash972();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i986=0;i986<(int)tmp.size();++i986) {
      if( tmp[i986] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i986]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash987();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i1005=0;i1005<(int)tmp.size();++i1005) {
      if( tmp[i1005] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i1005]);
      }
    }
  }
  prev = next_prev135;
  next_prev135.clear();
  for(int i134=0;i134<(int)prev.size();++i134) {
    i = prev[i134];
    tmp = parse_slash1006();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev135.push_back(prev[i134]); }
    for(int i1021=0;i1021<(int)tmp.size();++i1021) {
      if( tmp[i1021] != FAIL ) {
        prioritized_choice_final_prev136.push_back(tmp[i1021]);
      }
    }
  }
  prev = next_prev135;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev136.empty() && prioritized_choice_final_prev136.front() == FAIL )) {
      prioritized_choice_final_prev136.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev136;
  for(int i133=0;i133<(int)prev.size();++i133) {
    if( prev[i133] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i133]);
    }
  }
  return memo[key(27,backtracking_ptr_for_packrat27)] = result;
}

inline deque<int> parse_slash137() { 
  if(memo.count(key(28,i))) {
    return memo[key(28,i)];
  }
  int backtracking_ptr_for_packrat28=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i139=0;i139<(int)prev.size();++i139) {
        if( prev[i139] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i139]<m&&I[prev[i139]]=='a') {
          tmp.push_back(prev[i139]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i140=0;i140<(int)prev.size();++i140) {
        if( prev[i140] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i140]<m&&I[prev[i140]]=='b') {
          tmp.push_back(prev[i140]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i141=0;i141<(int)prev.size();++i141) {
        if( prev[i141] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i141]<m&&I[prev[i141]]=='s') {
          tmp.push_back(prev[i141]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i142=0;i142<(int)prev.size();++i142) {
        if( prev[i142] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i142]<m&&I[prev[i142]]=='t') {
          tmp.push_back(prev[i142]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i143=0;i143<(int)prev.size();++i143) {
        if( prev[i143] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i143]<m&&I[prev[i143]]=='r') {
          tmp.push_back(prev[i143]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i144=0;i144<(int)prev.size();++i144) {
        if( prev[i144] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i144]<m&&I[prev[i144]]=='a') {
          tmp.push_back(prev[i144]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i145=0;i145<(int)prev.size();++i145) {
        if( prev[i145] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i145]<m&&I[prev[i145]]=='c') {
          tmp.push_back(prev[i145]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i146=0;i146<(int)prev.size();++i146) {
        if( prev[i146] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i146]<m&&I[prev[i146]]=='t') {
          tmp.push_back(prev[i146]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev152;
      for(int i151=0;i151<(int)prev.size();++i151) {
        i = prev[i151];
        tmp = parse_not147();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev152.push_back(prev[i151]);
        } else {
          if(!(!next_prev152.empty()&&next_prev152.front()==FAIL)) {
            next_prev152.push_front(FAIL);
          }
        }
      }
      prev = next_prev152;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev154;
      for(int i153=0;i153<(int)prev.size();++i153) {
        if( prev[i153] == FAIL ) {
          if(!(!next_prev154.empty() && next_prev154.front() == FAIL )) {
            next_prev154.push_front(FAIL);
          }
          continue;
        }
        i = prev[i153];
        tmp = parse__();
        
        for(int i153=0;i153<(int)tmp.size();++i153) {
          if( tmp[i153] == FAIL ) {
            if(!( !next_prev154.empty() && next_prev154[0] == FAIL )) {
              next_prev154.push_front(FAIL);
            }
          } else {
            next_prev154.push_back(tmp[i153]);
          }
        }
      }
      prev = next_prev154;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i138=0;i138<(int)prev.size();++i138) {
    if( prev[i138] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i138]);
    }
  }
  return memo[key(28,backtracking_ptr_for_packrat28)] = result;
}

inline deque<int> parse_not147() { 
  if(memo.count(key(29,i))) {
    return memo[key(29,i)];
  }
  int backtracking_ptr_for_packrat29=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev150;
  for(int i149=0;i149<(int)prev.size();++i149) {
    if( prev[i149] == FAIL ) {
      if(!(!next_prev150.empty() && next_prev150.front() == FAIL )) {
        next_prev150.push_front(FAIL);
      }
      continue;
    }
    i = prev[i149];
    tmp = parse_W();
    
    for(int i149=0;i149<(int)tmp.size();++i149) {
      if( tmp[i149] == FAIL ) {
        if(!( !next_prev150.empty() && next_prev150[0] == FAIL )) {
          next_prev150.push_front(FAIL);
        }
      } else {
        next_prev150.push_back(tmp[i149]);
      }
    }
  }
  prev = next_prev150;
  for(int i148=0;i148<(int)prev.size();++i148) {
    if( prev[i148] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i148]);
    }
  }
  return memo[key(29,backtracking_ptr_for_packrat29)] = result;
}

inline deque<int> parse_slash156() { 
  if(memo.count(key(30,i))) {
    return memo[key(30,i)];
  }
  int backtracking_ptr_for_packrat30=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i158=0;i158<(int)prev.size();++i158) {
        if( prev[i158] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i158]<m&&I[prev[i158]]=='a') {
          tmp.push_back(prev[i158]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i159=0;i159<(int)prev.size();++i159) {
        if( prev[i159] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i159]<m&&I[prev[i159]]=='s') {
          tmp.push_back(prev[i159]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i160=0;i160<(int)prev.size();++i160) {
        if( prev[i160] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i160]<m&&I[prev[i160]]=='s') {
          tmp.push_back(prev[i160]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i161=0;i161<(int)prev.size();++i161) {
        if( prev[i161] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i161]<m&&I[prev[i161]]=='e') {
          tmp.push_back(prev[i161]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i162=0;i162<(int)prev.size();++i162) {
        if( prev[i162] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i162]<m&&I[prev[i162]]=='r') {
          tmp.push_back(prev[i162]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i163=0;i163<(int)prev.size();++i163) {
        if( prev[i163] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i163]<m&&I[prev[i163]]=='t') {
          tmp.push_back(prev[i163]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev169;
      for(int i168=0;i168<(int)prev.size();++i168) {
        i = prev[i168];
        tmp = parse_not164();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev169.push_back(prev[i168]);
        } else {
          if(!(!next_prev169.empty()&&next_prev169.front()==FAIL)) {
            next_prev169.push_front(FAIL);
          }
        }
      }
      prev = next_prev169;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev171;
      for(int i170=0;i170<(int)prev.size();++i170) {
        if( prev[i170] == FAIL ) {
          if(!(!next_prev171.empty() && next_prev171.front() == FAIL )) {
            next_prev171.push_front(FAIL);
          }
          continue;
        }
        i = prev[i170];
        tmp = parse__();
        
        for(int i170=0;i170<(int)tmp.size();++i170) {
          if( tmp[i170] == FAIL ) {
            if(!( !next_prev171.empty() && next_prev171[0] == FAIL )) {
              next_prev171.push_front(FAIL);
            }
          } else {
            next_prev171.push_back(tmp[i170]);
          }
        }
      }
      prev = next_prev171;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i157=0;i157<(int)prev.size();++i157) {
    if( prev[i157] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i157]);
    }
  }
  return memo[key(30,backtracking_ptr_for_packrat30)] = result;
}

inline deque<int> parse_not164() { 
  if(memo.count(key(31,i))) {
    return memo[key(31,i)];
  }
  int backtracking_ptr_for_packrat31=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev167;
  for(int i166=0;i166<(int)prev.size();++i166) {
    if( prev[i166] == FAIL ) {
      if(!(!next_prev167.empty() && next_prev167.front() == FAIL )) {
        next_prev167.push_front(FAIL);
      }
      continue;
    }
    i = prev[i166];
    tmp = parse_W();
    
    for(int i166=0;i166<(int)tmp.size();++i166) {
      if( tmp[i166] == FAIL ) {
        if(!( !next_prev167.empty() && next_prev167[0] == FAIL )) {
          next_prev167.push_front(FAIL);
        }
      } else {
        next_prev167.push_back(tmp[i166]);
      }
    }
  }
  prev = next_prev167;
  for(int i165=0;i165<(int)prev.size();++i165) {
    if( prev[i165] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i165]);
    }
  }
  return memo[key(31,backtracking_ptr_for_packrat31)] = result;
}

inline deque<int> parse_slash173() { 
  if(memo.count(key(32,i))) {
    return memo[key(32,i)];
  }
  int backtracking_ptr_for_packrat32=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i175=0;i175<(int)prev.size();++i175) {
        if( prev[i175] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i175]<m&&I[prev[i175]]=='b') {
          tmp.push_back(prev[i175]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i176=0;i176<(int)prev.size();++i176) {
        if( prev[i176] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i176]<m&&I[prev[i176]]=='o') {
          tmp.push_back(prev[i176]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i177=0;i177<(int)prev.size();++i177) {
        if( prev[i177] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i177]<m&&I[prev[i177]]=='o') {
          tmp.push_back(prev[i177]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i178=0;i178<(int)prev.size();++i178) {
        if( prev[i178] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i178]<m&&I[prev[i178]]=='l') {
          tmp.push_back(prev[i178]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i179=0;i179<(int)prev.size();++i179) {
        if( prev[i179] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i179]<m&&I[prev[i179]]=='e') {
          tmp.push_back(prev[i179]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i180=0;i180<(int)prev.size();++i180) {
        if( prev[i180] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i180]<m&&I[prev[i180]]=='a') {
          tmp.push_back(prev[i180]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i181=0;i181<(int)prev.size();++i181) {
        if( prev[i181] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i181]<m&&I[prev[i181]]=='n') {
          tmp.push_back(prev[i181]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev187;
      for(int i186=0;i186<(int)prev.size();++i186) {
        i = prev[i186];
        tmp = parse_not182();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev187.push_back(prev[i186]);
        } else {
          if(!(!next_prev187.empty()&&next_prev187.front()==FAIL)) {
            next_prev187.push_front(FAIL);
          }
        }
      }
      prev = next_prev187;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev189;
      for(int i188=0;i188<(int)prev.size();++i188) {
        if( prev[i188] == FAIL ) {
          if(!(!next_prev189.empty() && next_prev189.front() == FAIL )) {
            next_prev189.push_front(FAIL);
          }
          continue;
        }
        i = prev[i188];
        tmp = parse__();
        
        for(int i188=0;i188<(int)tmp.size();++i188) {
          if( tmp[i188] == FAIL ) {
            if(!( !next_prev189.empty() && next_prev189[0] == FAIL )) {
              next_prev189.push_front(FAIL);
            }
          } else {
            next_prev189.push_back(tmp[i188]);
          }
        }
      }
      prev = next_prev189;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i174=0;i174<(int)prev.size();++i174) {
    if( prev[i174] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i174]);
    }
  }
  return memo[key(32,backtracking_ptr_for_packrat32)] = result;
}

inline deque<int> parse_not182() { 
  if(memo.count(key(33,i))) {
    return memo[key(33,i)];
  }
  int backtracking_ptr_for_packrat33=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev185;
  for(int i184=0;i184<(int)prev.size();++i184) {
    if( prev[i184] == FAIL ) {
      if(!(!next_prev185.empty() && next_prev185.front() == FAIL )) {
        next_prev185.push_front(FAIL);
      }
      continue;
    }
    i = prev[i184];
    tmp = parse_W();
    
    for(int i184=0;i184<(int)tmp.size();++i184) {
      if( tmp[i184] == FAIL ) {
        if(!( !next_prev185.empty() && next_prev185[0] == FAIL )) {
          next_prev185.push_front(FAIL);
        }
      } else {
        next_prev185.push_back(tmp[i184]);
      }
    }
  }
  prev = next_prev185;
  for(int i183=0;i183<(int)prev.size();++i183) {
    if( prev[i183] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i183]);
    }
  }
  return memo[key(33,backtracking_ptr_for_packrat33)] = result;
}

inline deque<int> parse_slash191() { 
  if(memo.count(key(34,i))) {
    return memo[key(34,i)];
  }
  int backtracking_ptr_for_packrat34=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i193=0;i193<(int)prev.size();++i193) {
        if( prev[i193] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i193]<m&&I[prev[i193]]=='b') {
          tmp.push_back(prev[i193]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i194=0;i194<(int)prev.size();++i194) {
        if( prev[i194] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i194]<m&&I[prev[i194]]=='r') {
          tmp.push_back(prev[i194]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i195=0;i195<(int)prev.size();++i195) {
        if( prev[i195] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i195]<m&&I[prev[i195]]=='e') {
          tmp.push_back(prev[i195]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i196=0;i196<(int)prev.size();++i196) {
        if( prev[i196] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i196]<m&&I[prev[i196]]=='a') {
          tmp.push_back(prev[i196]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i197=0;i197<(int)prev.size();++i197) {
        if( prev[i197] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i197]<m&&I[prev[i197]]=='k') {
          tmp.push_back(prev[i197]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev203;
      for(int i202=0;i202<(int)prev.size();++i202) {
        i = prev[i202];
        tmp = parse_not198();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev203.push_back(prev[i202]);
        } else {
          if(!(!next_prev203.empty()&&next_prev203.front()==FAIL)) {
            next_prev203.push_front(FAIL);
          }
        }
      }
      prev = next_prev203;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev205;
      for(int i204=0;i204<(int)prev.size();++i204) {
        if( prev[i204] == FAIL ) {
          if(!(!next_prev205.empty() && next_prev205.front() == FAIL )) {
            next_prev205.push_front(FAIL);
          }
          continue;
        }
        i = prev[i204];
        tmp = parse__();
        
        for(int i204=0;i204<(int)tmp.size();++i204) {
          if( tmp[i204] == FAIL ) {
            if(!( !next_prev205.empty() && next_prev205[0] == FAIL )) {
              next_prev205.push_front(FAIL);
            }
          } else {
            next_prev205.push_back(tmp[i204]);
          }
        }
      }
      prev = next_prev205;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i192=0;i192<(int)prev.size();++i192) {
    if( prev[i192] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i192]);
    }
  }
  return memo[key(34,backtracking_ptr_for_packrat34)] = result;
}

inline deque<int> parse_not198() { 
  if(memo.count(key(35,i))) {
    return memo[key(35,i)];
  }
  int backtracking_ptr_for_packrat35=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev201;
  for(int i200=0;i200<(int)prev.size();++i200) {
    if( prev[i200] == FAIL ) {
      if(!(!next_prev201.empty() && next_prev201.front() == FAIL )) {
        next_prev201.push_front(FAIL);
      }
      continue;
    }
    i = prev[i200];
    tmp = parse_W();
    
    for(int i200=0;i200<(int)tmp.size();++i200) {
      if( tmp[i200] == FAIL ) {
        if(!( !next_prev201.empty() && next_prev201[0] == FAIL )) {
          next_prev201.push_front(FAIL);
        }
      } else {
        next_prev201.push_back(tmp[i200]);
      }
    }
  }
  prev = next_prev201;
  for(int i199=0;i199<(int)prev.size();++i199) {
    if( prev[i199] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i199]);
    }
  }
  return memo[key(35,backtracking_ptr_for_packrat35)] = result;
}

inline deque<int> parse_slash207() { 
  if(memo.count(key(36,i))) {
    return memo[key(36,i)];
  }
  int backtracking_ptr_for_packrat36=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i209=0;i209<(int)prev.size();++i209) {
        if( prev[i209] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i209]<m&&I[prev[i209]]=='b') {
          tmp.push_back(prev[i209]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i210=0;i210<(int)prev.size();++i210) {
        if( prev[i210] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i210]<m&&I[prev[i210]]=='y') {
          tmp.push_back(prev[i210]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i211=0;i211<(int)prev.size();++i211) {
        if( prev[i211] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i211]<m&&I[prev[i211]]=='t') {
          tmp.push_back(prev[i211]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i212=0;i212<(int)prev.size();++i212) {
        if( prev[i212] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i212]<m&&I[prev[i212]]=='e') {
          tmp.push_back(prev[i212]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev218;
      for(int i217=0;i217<(int)prev.size();++i217) {
        i = prev[i217];
        tmp = parse_not213();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev218.push_back(prev[i217]);
        } else {
          if(!(!next_prev218.empty()&&next_prev218.front()==FAIL)) {
            next_prev218.push_front(FAIL);
          }
        }
      }
      prev = next_prev218;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev220;
      for(int i219=0;i219<(int)prev.size();++i219) {
        if( prev[i219] == FAIL ) {
          if(!(!next_prev220.empty() && next_prev220.front() == FAIL )) {
            next_prev220.push_front(FAIL);
          }
          continue;
        }
        i = prev[i219];
        tmp = parse__();
        
        for(int i219=0;i219<(int)tmp.size();++i219) {
          if( tmp[i219] == FAIL ) {
            if(!( !next_prev220.empty() && next_prev220[0] == FAIL )) {
              next_prev220.push_front(FAIL);
            }
          } else {
            next_prev220.push_back(tmp[i219]);
          }
        }
      }
      prev = next_prev220;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i208=0;i208<(int)prev.size();++i208) {
    if( prev[i208] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i208]);
    }
  }
  return memo[key(36,backtracking_ptr_for_packrat36)] = result;
}

inline deque<int> parse_not213() { 
  if(memo.count(key(37,i))) {
    return memo[key(37,i)];
  }
  int backtracking_ptr_for_packrat37=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev216;
  for(int i215=0;i215<(int)prev.size();++i215) {
    if( prev[i215] == FAIL ) {
      if(!(!next_prev216.empty() && next_prev216.front() == FAIL )) {
        next_prev216.push_front(FAIL);
      }
      continue;
    }
    i = prev[i215];
    tmp = parse_W();
    
    for(int i215=0;i215<(int)tmp.size();++i215) {
      if( tmp[i215] == FAIL ) {
        if(!( !next_prev216.empty() && next_prev216[0] == FAIL )) {
          next_prev216.push_front(FAIL);
        }
      } else {
        next_prev216.push_back(tmp[i215]);
      }
    }
  }
  prev = next_prev216;
  for(int i214=0;i214<(int)prev.size();++i214) {
    if( prev[i214] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i214]);
    }
  }
  return memo[key(37,backtracking_ptr_for_packrat37)] = result;
}

inline deque<int> parse_slash222() { 
  if(memo.count(key(38,i))) {
    return memo[key(38,i)];
  }
  int backtracking_ptr_for_packrat38=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i224=0;i224<(int)prev.size();++i224) {
        if( prev[i224] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i224]<m&&I[prev[i224]]=='c') {
          tmp.push_back(prev[i224]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i225=0;i225<(int)prev.size();++i225) {
        if( prev[i225] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i225]<m&&I[prev[i225]]=='a') {
          tmp.push_back(prev[i225]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i226=0;i226<(int)prev.size();++i226) {
        if( prev[i226] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i226]<m&&I[prev[i226]]=='s') {
          tmp.push_back(prev[i226]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i227=0;i227<(int)prev.size();++i227) {
        if( prev[i227] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i227]<m&&I[prev[i227]]=='e') {
          tmp.push_back(prev[i227]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev233;
      for(int i232=0;i232<(int)prev.size();++i232) {
        i = prev[i232];
        tmp = parse_not228();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev233.push_back(prev[i232]);
        } else {
          if(!(!next_prev233.empty()&&next_prev233.front()==FAIL)) {
            next_prev233.push_front(FAIL);
          }
        }
      }
      prev = next_prev233;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev235;
      for(int i234=0;i234<(int)prev.size();++i234) {
        if( prev[i234] == FAIL ) {
          if(!(!next_prev235.empty() && next_prev235.front() == FAIL )) {
            next_prev235.push_front(FAIL);
          }
          continue;
        }
        i = prev[i234];
        tmp = parse__();
        
        for(int i234=0;i234<(int)tmp.size();++i234) {
          if( tmp[i234] == FAIL ) {
            if(!( !next_prev235.empty() && next_prev235[0] == FAIL )) {
              next_prev235.push_front(FAIL);
            }
          } else {
            next_prev235.push_back(tmp[i234]);
          }
        }
      }
      prev = next_prev235;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i223=0;i223<(int)prev.size();++i223) {
    if( prev[i223] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i223]);
    }
  }
  return memo[key(38,backtracking_ptr_for_packrat38)] = result;
}

inline deque<int> parse_not228() { 
  if(memo.count(key(39,i))) {
    return memo[key(39,i)];
  }
  int backtracking_ptr_for_packrat39=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev231;
  for(int i230=0;i230<(int)prev.size();++i230) {
    if( prev[i230] == FAIL ) {
      if(!(!next_prev231.empty() && next_prev231.front() == FAIL )) {
        next_prev231.push_front(FAIL);
      }
      continue;
    }
    i = prev[i230];
    tmp = parse_W();
    
    for(int i230=0;i230<(int)tmp.size();++i230) {
      if( tmp[i230] == FAIL ) {
        if(!( !next_prev231.empty() && next_prev231[0] == FAIL )) {
          next_prev231.push_front(FAIL);
        }
      } else {
        next_prev231.push_back(tmp[i230]);
      }
    }
  }
  prev = next_prev231;
  for(int i229=0;i229<(int)prev.size();++i229) {
    if( prev[i229] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i229]);
    }
  }
  return memo[key(39,backtracking_ptr_for_packrat39)] = result;
}

inline deque<int> parse_slash237() { 
  if(memo.count(key(40,i))) {
    return memo[key(40,i)];
  }
  int backtracking_ptr_for_packrat40=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i239=0;i239<(int)prev.size();++i239) {
        if( prev[i239] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i239]<m&&I[prev[i239]]=='c') {
          tmp.push_back(prev[i239]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i240=0;i240<(int)prev.size();++i240) {
        if( prev[i240] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i240]<m&&I[prev[i240]]=='a') {
          tmp.push_back(prev[i240]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i241=0;i241<(int)prev.size();++i241) {
        if( prev[i241] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i241]<m&&I[prev[i241]]=='t') {
          tmp.push_back(prev[i241]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i242=0;i242<(int)prev.size();++i242) {
        if( prev[i242] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i242]<m&&I[prev[i242]]=='c') {
          tmp.push_back(prev[i242]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i243=0;i243<(int)prev.size();++i243) {
        if( prev[i243] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i243]<m&&I[prev[i243]]=='h') {
          tmp.push_back(prev[i243]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev249;
      for(int i248=0;i248<(int)prev.size();++i248) {
        i = prev[i248];
        tmp = parse_not244();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev249.push_back(prev[i248]);
        } else {
          if(!(!next_prev249.empty()&&next_prev249.front()==FAIL)) {
            next_prev249.push_front(FAIL);
          }
        }
      }
      prev = next_prev249;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev251;
      for(int i250=0;i250<(int)prev.size();++i250) {
        if( prev[i250] == FAIL ) {
          if(!(!next_prev251.empty() && next_prev251.front() == FAIL )) {
            next_prev251.push_front(FAIL);
          }
          continue;
        }
        i = prev[i250];
        tmp = parse__();
        
        for(int i250=0;i250<(int)tmp.size();++i250) {
          if( tmp[i250] == FAIL ) {
            if(!( !next_prev251.empty() && next_prev251[0] == FAIL )) {
              next_prev251.push_front(FAIL);
            }
          } else {
            next_prev251.push_back(tmp[i250]);
          }
        }
      }
      prev = next_prev251;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i238=0;i238<(int)prev.size();++i238) {
    if( prev[i238] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i238]);
    }
  }
  return memo[key(40,backtracking_ptr_for_packrat40)] = result;
}

inline deque<int> parse_not244() { 
  if(memo.count(key(41,i))) {
    return memo[key(41,i)];
  }
  int backtracking_ptr_for_packrat41=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev247;
  for(int i246=0;i246<(int)prev.size();++i246) {
    if( prev[i246] == FAIL ) {
      if(!(!next_prev247.empty() && next_prev247.front() == FAIL )) {
        next_prev247.push_front(FAIL);
      }
      continue;
    }
    i = prev[i246];
    tmp = parse_W();
    
    for(int i246=0;i246<(int)tmp.size();++i246) {
      if( tmp[i246] == FAIL ) {
        if(!( !next_prev247.empty() && next_prev247[0] == FAIL )) {
          next_prev247.push_front(FAIL);
        }
      } else {
        next_prev247.push_back(tmp[i246]);
      }
    }
  }
  prev = next_prev247;
  for(int i245=0;i245<(int)prev.size();++i245) {
    if( prev[i245] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i245]);
    }
  }
  return memo[key(41,backtracking_ptr_for_packrat41)] = result;
}

inline deque<int> parse_slash253() { 
  if(memo.count(key(42,i))) {
    return memo[key(42,i)];
  }
  int backtracking_ptr_for_packrat42=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i255=0;i255<(int)prev.size();++i255) {
        if( prev[i255] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i255]<m&&I[prev[i255]]=='c') {
          tmp.push_back(prev[i255]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i256=0;i256<(int)prev.size();++i256) {
        if( prev[i256] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i256]<m&&I[prev[i256]]=='h') {
          tmp.push_back(prev[i256]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i257=0;i257<(int)prev.size();++i257) {
        if( prev[i257] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i257]<m&&I[prev[i257]]=='a') {
          tmp.push_back(prev[i257]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i258=0;i258<(int)prev.size();++i258) {
        if( prev[i258] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i258]<m&&I[prev[i258]]=='r') {
          tmp.push_back(prev[i258]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev264;
      for(int i263=0;i263<(int)prev.size();++i263) {
        i = prev[i263];
        tmp = parse_not259();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev264.push_back(prev[i263]);
        } else {
          if(!(!next_prev264.empty()&&next_prev264.front()==FAIL)) {
            next_prev264.push_front(FAIL);
          }
        }
      }
      prev = next_prev264;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev266;
      for(int i265=0;i265<(int)prev.size();++i265) {
        if( prev[i265] == FAIL ) {
          if(!(!next_prev266.empty() && next_prev266.front() == FAIL )) {
            next_prev266.push_front(FAIL);
          }
          continue;
        }
        i = prev[i265];
        tmp = parse__();
        
        for(int i265=0;i265<(int)tmp.size();++i265) {
          if( tmp[i265] == FAIL ) {
            if(!( !next_prev266.empty() && next_prev266[0] == FAIL )) {
              next_prev266.push_front(FAIL);
            }
          } else {
            next_prev266.push_back(tmp[i265]);
          }
        }
      }
      prev = next_prev266;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i254=0;i254<(int)prev.size();++i254) {
    if( prev[i254] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i254]);
    }
  }
  return memo[key(42,backtracking_ptr_for_packrat42)] = result;
}

inline deque<int> parse_not259() { 
  if(memo.count(key(43,i))) {
    return memo[key(43,i)];
  }
  int backtracking_ptr_for_packrat43=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev262;
  for(int i261=0;i261<(int)prev.size();++i261) {
    if( prev[i261] == FAIL ) {
      if(!(!next_prev262.empty() && next_prev262.front() == FAIL )) {
        next_prev262.push_front(FAIL);
      }
      continue;
    }
    i = prev[i261];
    tmp = parse_W();
    
    for(int i261=0;i261<(int)tmp.size();++i261) {
      if( tmp[i261] == FAIL ) {
        if(!( !next_prev262.empty() && next_prev262[0] == FAIL )) {
          next_prev262.push_front(FAIL);
        }
      } else {
        next_prev262.push_back(tmp[i261]);
      }
    }
  }
  prev = next_prev262;
  for(int i260=0;i260<(int)prev.size();++i260) {
    if( prev[i260] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i260]);
    }
  }
  return memo[key(43,backtracking_ptr_for_packrat43)] = result;
}

inline deque<int> parse_slash268() { 
  if(memo.count(key(44,i))) {
    return memo[key(44,i)];
  }
  int backtracking_ptr_for_packrat44=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i270=0;i270<(int)prev.size();++i270) {
        if( prev[i270] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i270]<m&&I[prev[i270]]=='c') {
          tmp.push_back(prev[i270]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i271=0;i271<(int)prev.size();++i271) {
        if( prev[i271] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i271]<m&&I[prev[i271]]=='l') {
          tmp.push_back(prev[i271]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i272=0;i272<(int)prev.size();++i272) {
        if( prev[i272] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i272]<m&&I[prev[i272]]=='a') {
          tmp.push_back(prev[i272]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i273=0;i273<(int)prev.size();++i273) {
        if( prev[i273] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i273]<m&&I[prev[i273]]=='s') {
          tmp.push_back(prev[i273]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i274=0;i274<(int)prev.size();++i274) {
        if( prev[i274] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i274]<m&&I[prev[i274]]=='s') {
          tmp.push_back(prev[i274]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev280;
      for(int i279=0;i279<(int)prev.size();++i279) {
        i = prev[i279];
        tmp = parse_not275();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev280.push_back(prev[i279]);
        } else {
          if(!(!next_prev280.empty()&&next_prev280.front()==FAIL)) {
            next_prev280.push_front(FAIL);
          }
        }
      }
      prev = next_prev280;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev282;
      for(int i281=0;i281<(int)prev.size();++i281) {
        if( prev[i281] == FAIL ) {
          if(!(!next_prev282.empty() && next_prev282.front() == FAIL )) {
            next_prev282.push_front(FAIL);
          }
          continue;
        }
        i = prev[i281];
        tmp = parse__();
        
        for(int i281=0;i281<(int)tmp.size();++i281) {
          if( tmp[i281] == FAIL ) {
            if(!( !next_prev282.empty() && next_prev282[0] == FAIL )) {
              next_prev282.push_front(FAIL);
            }
          } else {
            next_prev282.push_back(tmp[i281]);
          }
        }
      }
      prev = next_prev282;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i269=0;i269<(int)prev.size();++i269) {
    if( prev[i269] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i269]);
    }
  }
  return memo[key(44,backtracking_ptr_for_packrat44)] = result;
}

inline deque<int> parse_not275() { 
  if(memo.count(key(45,i))) {
    return memo[key(45,i)];
  }
  int backtracking_ptr_for_packrat45=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev278;
  for(int i277=0;i277<(int)prev.size();++i277) {
    if( prev[i277] == FAIL ) {
      if(!(!next_prev278.empty() && next_prev278.front() == FAIL )) {
        next_prev278.push_front(FAIL);
      }
      continue;
    }
    i = prev[i277];
    tmp = parse_W();
    
    for(int i277=0;i277<(int)tmp.size();++i277) {
      if( tmp[i277] == FAIL ) {
        if(!( !next_prev278.empty() && next_prev278[0] == FAIL )) {
          next_prev278.push_front(FAIL);
        }
      } else {
        next_prev278.push_back(tmp[i277]);
      }
    }
  }
  prev = next_prev278;
  for(int i276=0;i276<(int)prev.size();++i276) {
    if( prev[i276] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i276]);
    }
  }
  return memo[key(45,backtracking_ptr_for_packrat45)] = result;
}

inline deque<int> parse_slash284() { 
  if(memo.count(key(46,i))) {
    return memo[key(46,i)];
  }
  int backtracking_ptr_for_packrat46=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i286=0;i286<(int)prev.size();++i286) {
        if( prev[i286] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i286]<m&&I[prev[i286]]=='c') {
          tmp.push_back(prev[i286]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i287=0;i287<(int)prev.size();++i287) {
        if( prev[i287] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i287]<m&&I[prev[i287]]=='o') {
          tmp.push_back(prev[i287]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i288=0;i288<(int)prev.size();++i288) {
        if( prev[i288] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i288]<m&&I[prev[i288]]=='n') {
          tmp.push_back(prev[i288]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i289=0;i289<(int)prev.size();++i289) {
        if( prev[i289] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i289]<m&&I[prev[i289]]=='s') {
          tmp.push_back(prev[i289]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i290=0;i290<(int)prev.size();++i290) {
        if( prev[i290] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i290]<m&&I[prev[i290]]=='t') {
          tmp.push_back(prev[i290]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev296;
      for(int i295=0;i295<(int)prev.size();++i295) {
        i = prev[i295];
        tmp = parse_not291();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev296.push_back(prev[i295]);
        } else {
          if(!(!next_prev296.empty()&&next_prev296.front()==FAIL)) {
            next_prev296.push_front(FAIL);
          }
        }
      }
      prev = next_prev296;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev298;
      for(int i297=0;i297<(int)prev.size();++i297) {
        if( prev[i297] == FAIL ) {
          if(!(!next_prev298.empty() && next_prev298.front() == FAIL )) {
            next_prev298.push_front(FAIL);
          }
          continue;
        }
        i = prev[i297];
        tmp = parse__();
        
        for(int i297=0;i297<(int)tmp.size();++i297) {
          if( tmp[i297] == FAIL ) {
            if(!( !next_prev298.empty() && next_prev298[0] == FAIL )) {
              next_prev298.push_front(FAIL);
            }
          } else {
            next_prev298.push_back(tmp[i297]);
          }
        }
      }
      prev = next_prev298;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i285=0;i285<(int)prev.size();++i285) {
    if( prev[i285] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i285]);
    }
  }
  return memo[key(46,backtracking_ptr_for_packrat46)] = result;
}

inline deque<int> parse_not291() { 
  if(memo.count(key(47,i))) {
    return memo[key(47,i)];
  }
  int backtracking_ptr_for_packrat47=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev294;
  for(int i293=0;i293<(int)prev.size();++i293) {
    if( prev[i293] == FAIL ) {
      if(!(!next_prev294.empty() && next_prev294.front() == FAIL )) {
        next_prev294.push_front(FAIL);
      }
      continue;
    }
    i = prev[i293];
    tmp = parse_W();
    
    for(int i293=0;i293<(int)tmp.size();++i293) {
      if( tmp[i293] == FAIL ) {
        if(!( !next_prev294.empty() && next_prev294[0] == FAIL )) {
          next_prev294.push_front(FAIL);
        }
      } else {
        next_prev294.push_back(tmp[i293]);
      }
    }
  }
  prev = next_prev294;
  for(int i292=0;i292<(int)prev.size();++i292) {
    if( prev[i292] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i292]);
    }
  }
  return memo[key(47,backtracking_ptr_for_packrat47)] = result;
}

inline deque<int> parse_slash300() { 
  if(memo.count(key(48,i))) {
    return memo[key(48,i)];
  }
  int backtracking_ptr_for_packrat48=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i302=0;i302<(int)prev.size();++i302) {
        if( prev[i302] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i302]<m&&I[prev[i302]]=='c') {
          tmp.push_back(prev[i302]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i303=0;i303<(int)prev.size();++i303) {
        if( prev[i303] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i303]<m&&I[prev[i303]]=='o') {
          tmp.push_back(prev[i303]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i304=0;i304<(int)prev.size();++i304) {
        if( prev[i304] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i304]<m&&I[prev[i304]]=='n') {
          tmp.push_back(prev[i304]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i305=0;i305<(int)prev.size();++i305) {
        if( prev[i305] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i305]<m&&I[prev[i305]]=='t') {
          tmp.push_back(prev[i305]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i306=0;i306<(int)prev.size();++i306) {
        if( prev[i306] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i306]<m&&I[prev[i306]]=='i') {
          tmp.push_back(prev[i306]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i307=0;i307<(int)prev.size();++i307) {
        if( prev[i307] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i307]<m&&I[prev[i307]]=='n') {
          tmp.push_back(prev[i307]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i308=0;i308<(int)prev.size();++i308) {
        if( prev[i308] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i308]<m&&I[prev[i308]]=='u') {
          tmp.push_back(prev[i308]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i309=0;i309<(int)prev.size();++i309) {
        if( prev[i309] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i309]<m&&I[prev[i309]]=='e') {
          tmp.push_back(prev[i309]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev315;
      for(int i314=0;i314<(int)prev.size();++i314) {
        i = prev[i314];
        tmp = parse_not310();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev315.push_back(prev[i314]);
        } else {
          if(!(!next_prev315.empty()&&next_prev315.front()==FAIL)) {
            next_prev315.push_front(FAIL);
          }
        }
      }
      prev = next_prev315;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev317;
      for(int i316=0;i316<(int)prev.size();++i316) {
        if( prev[i316] == FAIL ) {
          if(!(!next_prev317.empty() && next_prev317.front() == FAIL )) {
            next_prev317.push_front(FAIL);
          }
          continue;
        }
        i = prev[i316];
        tmp = parse__();
        
        for(int i316=0;i316<(int)tmp.size();++i316) {
          if( tmp[i316] == FAIL ) {
            if(!( !next_prev317.empty() && next_prev317[0] == FAIL )) {
              next_prev317.push_front(FAIL);
            }
          } else {
            next_prev317.push_back(tmp[i316]);
          }
        }
      }
      prev = next_prev317;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i301=0;i301<(int)prev.size();++i301) {
    if( prev[i301] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i301]);
    }
  }
  return memo[key(48,backtracking_ptr_for_packrat48)] = result;
}

inline deque<int> parse_not310() { 
  if(memo.count(key(49,i))) {
    return memo[key(49,i)];
  }
  int backtracking_ptr_for_packrat49=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev313;
  for(int i312=0;i312<(int)prev.size();++i312) {
    if( prev[i312] == FAIL ) {
      if(!(!next_prev313.empty() && next_prev313.front() == FAIL )) {
        next_prev313.push_front(FAIL);
      }
      continue;
    }
    i = prev[i312];
    tmp = parse_W();
    
    for(int i312=0;i312<(int)tmp.size();++i312) {
      if( tmp[i312] == FAIL ) {
        if(!( !next_prev313.empty() && next_prev313[0] == FAIL )) {
          next_prev313.push_front(FAIL);
        }
      } else {
        next_prev313.push_back(tmp[i312]);
      }
    }
  }
  prev = next_prev313;
  for(int i311=0;i311<(int)prev.size();++i311) {
    if( prev[i311] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i311]);
    }
  }
  return memo[key(49,backtracking_ptr_for_packrat49)] = result;
}

inline deque<int> parse_slash319() { 
  if(memo.count(key(50,i))) {
    return memo[key(50,i)];
  }
  int backtracking_ptr_for_packrat50=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i321=0;i321<(int)prev.size();++i321) {
        if( prev[i321] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i321]<m&&I[prev[i321]]=='d') {
          tmp.push_back(prev[i321]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i322=0;i322<(int)prev.size();++i322) {
        if( prev[i322] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i322]<m&&I[prev[i322]]=='e') {
          tmp.push_back(prev[i322]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i323=0;i323<(int)prev.size();++i323) {
        if( prev[i323] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i323]<m&&I[prev[i323]]=='f') {
          tmp.push_back(prev[i323]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i324=0;i324<(int)prev.size();++i324) {
        if( prev[i324] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i324]<m&&I[prev[i324]]=='a') {
          tmp.push_back(prev[i324]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i325=0;i325<(int)prev.size();++i325) {
        if( prev[i325] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i325]<m&&I[prev[i325]]=='u') {
          tmp.push_back(prev[i325]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i326=0;i326<(int)prev.size();++i326) {
        if( prev[i326] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i326]<m&&I[prev[i326]]=='l') {
          tmp.push_back(prev[i326]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i327=0;i327<(int)prev.size();++i327) {
        if( prev[i327] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i327]<m&&I[prev[i327]]=='t') {
          tmp.push_back(prev[i327]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev333;
      for(int i332=0;i332<(int)prev.size();++i332) {
        i = prev[i332];
        tmp = parse_not328();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev333.push_back(prev[i332]);
        } else {
          if(!(!next_prev333.empty()&&next_prev333.front()==FAIL)) {
            next_prev333.push_front(FAIL);
          }
        }
      }
      prev = next_prev333;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev335;
      for(int i334=0;i334<(int)prev.size();++i334) {
        if( prev[i334] == FAIL ) {
          if(!(!next_prev335.empty() && next_prev335.front() == FAIL )) {
            next_prev335.push_front(FAIL);
          }
          continue;
        }
        i = prev[i334];
        tmp = parse__();
        
        for(int i334=0;i334<(int)tmp.size();++i334) {
          if( tmp[i334] == FAIL ) {
            if(!( !next_prev335.empty() && next_prev335[0] == FAIL )) {
              next_prev335.push_front(FAIL);
            }
          } else {
            next_prev335.push_back(tmp[i334]);
          }
        }
      }
      prev = next_prev335;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i320=0;i320<(int)prev.size();++i320) {
    if( prev[i320] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i320]);
    }
  }
  return memo[key(50,backtracking_ptr_for_packrat50)] = result;
}

inline deque<int> parse_not328() { 
  if(memo.count(key(51,i))) {
    return memo[key(51,i)];
  }
  int backtracking_ptr_for_packrat51=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev331;
  for(int i330=0;i330<(int)prev.size();++i330) {
    if( prev[i330] == FAIL ) {
      if(!(!next_prev331.empty() && next_prev331.front() == FAIL )) {
        next_prev331.push_front(FAIL);
      }
      continue;
    }
    i = prev[i330];
    tmp = parse_W();
    
    for(int i330=0;i330<(int)tmp.size();++i330) {
      if( tmp[i330] == FAIL ) {
        if(!( !next_prev331.empty() && next_prev331[0] == FAIL )) {
          next_prev331.push_front(FAIL);
        }
      } else {
        next_prev331.push_back(tmp[i330]);
      }
    }
  }
  prev = next_prev331;
  for(int i329=0;i329<(int)prev.size();++i329) {
    if( prev[i329] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i329]);
    }
  }
  return memo[key(51,backtracking_ptr_for_packrat51)] = result;
}

inline deque<int> parse_slash337() { 
  if(memo.count(key(52,i))) {
    return memo[key(52,i)];
  }
  int backtracking_ptr_for_packrat52=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i339=0;i339<(int)prev.size();++i339) {
        if( prev[i339] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i339]<m&&I[prev[i339]]=='d') {
          tmp.push_back(prev[i339]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i340=0;i340<(int)prev.size();++i340) {
        if( prev[i340] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i340]<m&&I[prev[i340]]=='o') {
          tmp.push_back(prev[i340]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i341=0;i341<(int)prev.size();++i341) {
        if( prev[i341] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i341]<m&&I[prev[i341]]=='u') {
          tmp.push_back(prev[i341]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i342=0;i342<(int)prev.size();++i342) {
        if( prev[i342] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i342]<m&&I[prev[i342]]=='b') {
          tmp.push_back(prev[i342]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i343=0;i343<(int)prev.size();++i343) {
        if( prev[i343] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i343]<m&&I[prev[i343]]=='l') {
          tmp.push_back(prev[i343]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i344=0;i344<(int)prev.size();++i344) {
        if( prev[i344] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i344]<m&&I[prev[i344]]=='e') {
          tmp.push_back(prev[i344]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev350;
      for(int i349=0;i349<(int)prev.size();++i349) {
        i = prev[i349];
        tmp = parse_not345();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev350.push_back(prev[i349]);
        } else {
          if(!(!next_prev350.empty()&&next_prev350.front()==FAIL)) {
            next_prev350.push_front(FAIL);
          }
        }
      }
      prev = next_prev350;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev352;
      for(int i351=0;i351<(int)prev.size();++i351) {
        if( prev[i351] == FAIL ) {
          if(!(!next_prev352.empty() && next_prev352.front() == FAIL )) {
            next_prev352.push_front(FAIL);
          }
          continue;
        }
        i = prev[i351];
        tmp = parse__();
        
        for(int i351=0;i351<(int)tmp.size();++i351) {
          if( tmp[i351] == FAIL ) {
            if(!( !next_prev352.empty() && next_prev352[0] == FAIL )) {
              next_prev352.push_front(FAIL);
            }
          } else {
            next_prev352.push_back(tmp[i351]);
          }
        }
      }
      prev = next_prev352;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i338=0;i338<(int)prev.size();++i338) {
    if( prev[i338] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i338]);
    }
  }
  return memo[key(52,backtracking_ptr_for_packrat52)] = result;
}

inline deque<int> parse_not345() { 
  if(memo.count(key(53,i))) {
    return memo[key(53,i)];
  }
  int backtracking_ptr_for_packrat53=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev348;
  for(int i347=0;i347<(int)prev.size();++i347) {
    if( prev[i347] == FAIL ) {
      if(!(!next_prev348.empty() && next_prev348.front() == FAIL )) {
        next_prev348.push_front(FAIL);
      }
      continue;
    }
    i = prev[i347];
    tmp = parse_W();
    
    for(int i347=0;i347<(int)tmp.size();++i347) {
      if( tmp[i347] == FAIL ) {
        if(!( !next_prev348.empty() && next_prev348[0] == FAIL )) {
          next_prev348.push_front(FAIL);
        }
      } else {
        next_prev348.push_back(tmp[i347]);
      }
    }
  }
  prev = next_prev348;
  for(int i346=0;i346<(int)prev.size();++i346) {
    if( prev[i346] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i346]);
    }
  }
  return memo[key(53,backtracking_ptr_for_packrat53)] = result;
}

inline deque<int> parse_slash354() { 
  if(memo.count(key(54,i))) {
    return memo[key(54,i)];
  }
  int backtracking_ptr_for_packrat54=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i356=0;i356<(int)prev.size();++i356) {
        if( prev[i356] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i356]<m&&I[prev[i356]]=='d') {
          tmp.push_back(prev[i356]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i357=0;i357<(int)prev.size();++i357) {
        if( prev[i357] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i357]<m&&I[prev[i357]]=='o') {
          tmp.push_back(prev[i357]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev363;
      for(int i362=0;i362<(int)prev.size();++i362) {
        i = prev[i362];
        tmp = parse_not358();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev363.push_back(prev[i362]);
        } else {
          if(!(!next_prev363.empty()&&next_prev363.front()==FAIL)) {
            next_prev363.push_front(FAIL);
          }
        }
      }
      prev = next_prev363;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev365;
      for(int i364=0;i364<(int)prev.size();++i364) {
        if( prev[i364] == FAIL ) {
          if(!(!next_prev365.empty() && next_prev365.front() == FAIL )) {
            next_prev365.push_front(FAIL);
          }
          continue;
        }
        i = prev[i364];
        tmp = parse__();
        
        for(int i364=0;i364<(int)tmp.size();++i364) {
          if( tmp[i364] == FAIL ) {
            if(!( !next_prev365.empty() && next_prev365[0] == FAIL )) {
              next_prev365.push_front(FAIL);
            }
          } else {
            next_prev365.push_back(tmp[i364]);
          }
        }
      }
      prev = next_prev365;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i355=0;i355<(int)prev.size();++i355) {
    if( prev[i355] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i355]);
    }
  }
  return memo[key(54,backtracking_ptr_for_packrat54)] = result;
}

inline deque<int> parse_not358() { 
  if(memo.count(key(55,i))) {
    return memo[key(55,i)];
  }
  int backtracking_ptr_for_packrat55=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev361;
  for(int i360=0;i360<(int)prev.size();++i360) {
    if( prev[i360] == FAIL ) {
      if(!(!next_prev361.empty() && next_prev361.front() == FAIL )) {
        next_prev361.push_front(FAIL);
      }
      continue;
    }
    i = prev[i360];
    tmp = parse_W();
    
    for(int i360=0;i360<(int)tmp.size();++i360) {
      if( tmp[i360] == FAIL ) {
        if(!( !next_prev361.empty() && next_prev361[0] == FAIL )) {
          next_prev361.push_front(FAIL);
        }
      } else {
        next_prev361.push_back(tmp[i360]);
      }
    }
  }
  prev = next_prev361;
  for(int i359=0;i359<(int)prev.size();++i359) {
    if( prev[i359] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i359]);
    }
  }
  return memo[key(55,backtracking_ptr_for_packrat55)] = result;
}

inline deque<int> parse_slash367() { 
  if(memo.count(key(56,i))) {
    return memo[key(56,i)];
  }
  int backtracking_ptr_for_packrat56=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i369=0;i369<(int)prev.size();++i369) {
        if( prev[i369] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i369]<m&&I[prev[i369]]=='e') {
          tmp.push_back(prev[i369]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i370=0;i370<(int)prev.size();++i370) {
        if( prev[i370] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i370]<m&&I[prev[i370]]=='l') {
          tmp.push_back(prev[i370]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i371=0;i371<(int)prev.size();++i371) {
        if( prev[i371] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i371]<m&&I[prev[i371]]=='s') {
          tmp.push_back(prev[i371]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i372=0;i372<(int)prev.size();++i372) {
        if( prev[i372] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i372]<m&&I[prev[i372]]=='e') {
          tmp.push_back(prev[i372]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev378;
      for(int i377=0;i377<(int)prev.size();++i377) {
        i = prev[i377];
        tmp = parse_not373();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev378.push_back(prev[i377]);
        } else {
          if(!(!next_prev378.empty()&&next_prev378.front()==FAIL)) {
            next_prev378.push_front(FAIL);
          }
        }
      }
      prev = next_prev378;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev380;
      for(int i379=0;i379<(int)prev.size();++i379) {
        if( prev[i379] == FAIL ) {
          if(!(!next_prev380.empty() && next_prev380.front() == FAIL )) {
            next_prev380.push_front(FAIL);
          }
          continue;
        }
        i = prev[i379];
        tmp = parse__();
        
        for(int i379=0;i379<(int)tmp.size();++i379) {
          if( tmp[i379] == FAIL ) {
            if(!( !next_prev380.empty() && next_prev380[0] == FAIL )) {
              next_prev380.push_front(FAIL);
            }
          } else {
            next_prev380.push_back(tmp[i379]);
          }
        }
      }
      prev = next_prev380;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i368=0;i368<(int)prev.size();++i368) {
    if( prev[i368] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i368]);
    }
  }
  return memo[key(56,backtracking_ptr_for_packrat56)] = result;
}

inline deque<int> parse_not373() { 
  if(memo.count(key(57,i))) {
    return memo[key(57,i)];
  }
  int backtracking_ptr_for_packrat57=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev376;
  for(int i375=0;i375<(int)prev.size();++i375) {
    if( prev[i375] == FAIL ) {
      if(!(!next_prev376.empty() && next_prev376.front() == FAIL )) {
        next_prev376.push_front(FAIL);
      }
      continue;
    }
    i = prev[i375];
    tmp = parse_W();
    
    for(int i375=0;i375<(int)tmp.size();++i375) {
      if( tmp[i375] == FAIL ) {
        if(!( !next_prev376.empty() && next_prev376[0] == FAIL )) {
          next_prev376.push_front(FAIL);
        }
      } else {
        next_prev376.push_back(tmp[i375]);
      }
    }
  }
  prev = next_prev376;
  for(int i374=0;i374<(int)prev.size();++i374) {
    if( prev[i374] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i374]);
    }
  }
  return memo[key(57,backtracking_ptr_for_packrat57)] = result;
}

inline deque<int> parse_slash382() { 
  if(memo.count(key(58,i))) {
    return memo[key(58,i)];
  }
  int backtracking_ptr_for_packrat58=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i384=0;i384<(int)prev.size();++i384) {
        if( prev[i384] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i384]<m&&I[prev[i384]]=='e') {
          tmp.push_back(prev[i384]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i385=0;i385<(int)prev.size();++i385) {
        if( prev[i385] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i385]<m&&I[prev[i385]]=='n') {
          tmp.push_back(prev[i385]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i386=0;i386<(int)prev.size();++i386) {
        if( prev[i386] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i386]<m&&I[prev[i386]]=='u') {
          tmp.push_back(prev[i386]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i387=0;i387<(int)prev.size();++i387) {
        if( prev[i387] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i387]<m&&I[prev[i387]]=='m') {
          tmp.push_back(prev[i387]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev393;
      for(int i392=0;i392<(int)prev.size();++i392) {
        i = prev[i392];
        tmp = parse_not388();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev393.push_back(prev[i392]);
        } else {
          if(!(!next_prev393.empty()&&next_prev393.front()==FAIL)) {
            next_prev393.push_front(FAIL);
          }
        }
      }
      prev = next_prev393;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev395;
      for(int i394=0;i394<(int)prev.size();++i394) {
        if( prev[i394] == FAIL ) {
          if(!(!next_prev395.empty() && next_prev395.front() == FAIL )) {
            next_prev395.push_front(FAIL);
          }
          continue;
        }
        i = prev[i394];
        tmp = parse__();
        
        for(int i394=0;i394<(int)tmp.size();++i394) {
          if( tmp[i394] == FAIL ) {
            if(!( !next_prev395.empty() && next_prev395[0] == FAIL )) {
              next_prev395.push_front(FAIL);
            }
          } else {
            next_prev395.push_back(tmp[i394]);
          }
        }
      }
      prev = next_prev395;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i383=0;i383<(int)prev.size();++i383) {
    if( prev[i383] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i383]);
    }
  }
  return memo[key(58,backtracking_ptr_for_packrat58)] = result;
}

inline deque<int> parse_not388() { 
  if(memo.count(key(59,i))) {
    return memo[key(59,i)];
  }
  int backtracking_ptr_for_packrat59=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev391;
  for(int i390=0;i390<(int)prev.size();++i390) {
    if( prev[i390] == FAIL ) {
      if(!(!next_prev391.empty() && next_prev391.front() == FAIL )) {
        next_prev391.push_front(FAIL);
      }
      continue;
    }
    i = prev[i390];
    tmp = parse_W();
    
    for(int i390=0;i390<(int)tmp.size();++i390) {
      if( tmp[i390] == FAIL ) {
        if(!( !next_prev391.empty() && next_prev391[0] == FAIL )) {
          next_prev391.push_front(FAIL);
        }
      } else {
        next_prev391.push_back(tmp[i390]);
      }
    }
  }
  prev = next_prev391;
  for(int i389=0;i389<(int)prev.size();++i389) {
    if( prev[i389] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i389]);
    }
  }
  return memo[key(59,backtracking_ptr_for_packrat59)] = result;
}

inline deque<int> parse_slash397() { 
  if(memo.count(key(60,i))) {
    return memo[key(60,i)];
  }
  int backtracking_ptr_for_packrat60=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i399=0;i399<(int)prev.size();++i399) {
        if( prev[i399] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i399]<m&&I[prev[i399]]=='e') {
          tmp.push_back(prev[i399]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i400=0;i400<(int)prev.size();++i400) {
        if( prev[i400] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i400]<m&&I[prev[i400]]=='x') {
          tmp.push_back(prev[i400]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i401=0;i401<(int)prev.size();++i401) {
        if( prev[i401] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i401]<m&&I[prev[i401]]=='t') {
          tmp.push_back(prev[i401]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i402=0;i402<(int)prev.size();++i402) {
        if( prev[i402] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i402]<m&&I[prev[i402]]=='e') {
          tmp.push_back(prev[i402]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i403=0;i403<(int)prev.size();++i403) {
        if( prev[i403] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i403]<m&&I[prev[i403]]=='n') {
          tmp.push_back(prev[i403]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i404=0;i404<(int)prev.size();++i404) {
        if( prev[i404] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i404]<m&&I[prev[i404]]=='d') {
          tmp.push_back(prev[i404]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i405=0;i405<(int)prev.size();++i405) {
        if( prev[i405] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i405]<m&&I[prev[i405]]=='s') {
          tmp.push_back(prev[i405]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev411;
      for(int i410=0;i410<(int)prev.size();++i410) {
        i = prev[i410];
        tmp = parse_not406();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev411.push_back(prev[i410]);
        } else {
          if(!(!next_prev411.empty()&&next_prev411.front()==FAIL)) {
            next_prev411.push_front(FAIL);
          }
        }
      }
      prev = next_prev411;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev413;
      for(int i412=0;i412<(int)prev.size();++i412) {
        if( prev[i412] == FAIL ) {
          if(!(!next_prev413.empty() && next_prev413.front() == FAIL )) {
            next_prev413.push_front(FAIL);
          }
          continue;
        }
        i = prev[i412];
        tmp = parse__();
        
        for(int i412=0;i412<(int)tmp.size();++i412) {
          if( tmp[i412] == FAIL ) {
            if(!( !next_prev413.empty() && next_prev413[0] == FAIL )) {
              next_prev413.push_front(FAIL);
            }
          } else {
            next_prev413.push_back(tmp[i412]);
          }
        }
      }
      prev = next_prev413;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i398=0;i398<(int)prev.size();++i398) {
    if( prev[i398] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i398]);
    }
  }
  return memo[key(60,backtracking_ptr_for_packrat60)] = result;
}

inline deque<int> parse_not406() { 
  if(memo.count(key(61,i))) {
    return memo[key(61,i)];
  }
  int backtracking_ptr_for_packrat61=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev409;
  for(int i408=0;i408<(int)prev.size();++i408) {
    if( prev[i408] == FAIL ) {
      if(!(!next_prev409.empty() && next_prev409.front() == FAIL )) {
        next_prev409.push_front(FAIL);
      }
      continue;
    }
    i = prev[i408];
    tmp = parse_W();
    
    for(int i408=0;i408<(int)tmp.size();++i408) {
      if( tmp[i408] == FAIL ) {
        if(!( !next_prev409.empty() && next_prev409[0] == FAIL )) {
          next_prev409.push_front(FAIL);
        }
      } else {
        next_prev409.push_back(tmp[i408]);
      }
    }
  }
  prev = next_prev409;
  for(int i407=0;i407<(int)prev.size();++i407) {
    if( prev[i407] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i407]);
    }
  }
  return memo[key(61,backtracking_ptr_for_packrat61)] = result;
}

inline deque<int> parse_slash415() { 
  if(memo.count(key(62,i))) {
    return memo[key(62,i)];
  }
  int backtracking_ptr_for_packrat62=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i417=0;i417<(int)prev.size();++i417) {
        if( prev[i417] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i417]<m&&I[prev[i417]]=='f') {
          tmp.push_back(prev[i417]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i418=0;i418<(int)prev.size();++i418) {
        if( prev[i418] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i418]<m&&I[prev[i418]]=='a') {
          tmp.push_back(prev[i418]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i419=0;i419<(int)prev.size();++i419) {
        if( prev[i419] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i419]<m&&I[prev[i419]]=='l') {
          tmp.push_back(prev[i419]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i420=0;i420<(int)prev.size();++i420) {
        if( prev[i420] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i420]<m&&I[prev[i420]]=='s') {
          tmp.push_back(prev[i420]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i421=0;i421<(int)prev.size();++i421) {
        if( prev[i421] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i421]<m&&I[prev[i421]]=='e') {
          tmp.push_back(prev[i421]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev427;
      for(int i426=0;i426<(int)prev.size();++i426) {
        i = prev[i426];
        tmp = parse_not422();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev427.push_back(prev[i426]);
        } else {
          if(!(!next_prev427.empty()&&next_prev427.front()==FAIL)) {
            next_prev427.push_front(FAIL);
          }
        }
      }
      prev = next_prev427;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev429;
      for(int i428=0;i428<(int)prev.size();++i428) {
        if( prev[i428] == FAIL ) {
          if(!(!next_prev429.empty() && next_prev429.front() == FAIL )) {
            next_prev429.push_front(FAIL);
          }
          continue;
        }
        i = prev[i428];
        tmp = parse__();
        
        for(int i428=0;i428<(int)tmp.size();++i428) {
          if( tmp[i428] == FAIL ) {
            if(!( !next_prev429.empty() && next_prev429[0] == FAIL )) {
              next_prev429.push_front(FAIL);
            }
          } else {
            next_prev429.push_back(tmp[i428]);
          }
        }
      }
      prev = next_prev429;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i416=0;i416<(int)prev.size();++i416) {
    if( prev[i416] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i416]);
    }
  }
  return memo[key(62,backtracking_ptr_for_packrat62)] = result;
}

inline deque<int> parse_not422() { 
  if(memo.count(key(63,i))) {
    return memo[key(63,i)];
  }
  int backtracking_ptr_for_packrat63=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev425;
  for(int i424=0;i424<(int)prev.size();++i424) {
    if( prev[i424] == FAIL ) {
      if(!(!next_prev425.empty() && next_prev425.front() == FAIL )) {
        next_prev425.push_front(FAIL);
      }
      continue;
    }
    i = prev[i424];
    tmp = parse_W();
    
    for(int i424=0;i424<(int)tmp.size();++i424) {
      if( tmp[i424] == FAIL ) {
        if(!( !next_prev425.empty() && next_prev425[0] == FAIL )) {
          next_prev425.push_front(FAIL);
        }
      } else {
        next_prev425.push_back(tmp[i424]);
      }
    }
  }
  prev = next_prev425;
  for(int i423=0;i423<(int)prev.size();++i423) {
    if( prev[i423] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i423]);
    }
  }
  return memo[key(63,backtracking_ptr_for_packrat63)] = result;
}

inline deque<int> parse_slash431() { 
  if(memo.count(key(64,i))) {
    return memo[key(64,i)];
  }
  int backtracking_ptr_for_packrat64=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i433=0;i433<(int)prev.size();++i433) {
        if( prev[i433] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i433]<m&&I[prev[i433]]=='f') {
          tmp.push_back(prev[i433]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i434=0;i434<(int)prev.size();++i434) {
        if( prev[i434] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i434]<m&&I[prev[i434]]=='i') {
          tmp.push_back(prev[i434]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i435=0;i435<(int)prev.size();++i435) {
        if( prev[i435] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i435]<m&&I[prev[i435]]=='n') {
          tmp.push_back(prev[i435]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i436=0;i436<(int)prev.size();++i436) {
        if( prev[i436] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i436]<m&&I[prev[i436]]=='a') {
          tmp.push_back(prev[i436]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i437=0;i437<(int)prev.size();++i437) {
        if( prev[i437] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i437]<m&&I[prev[i437]]=='l') {
          tmp.push_back(prev[i437]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev443;
      for(int i442=0;i442<(int)prev.size();++i442) {
        i = prev[i442];
        tmp = parse_not438();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev443.push_back(prev[i442]);
        } else {
          if(!(!next_prev443.empty()&&next_prev443.front()==FAIL)) {
            next_prev443.push_front(FAIL);
          }
        }
      }
      prev = next_prev443;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev445;
      for(int i444=0;i444<(int)prev.size();++i444) {
        if( prev[i444] == FAIL ) {
          if(!(!next_prev445.empty() && next_prev445.front() == FAIL )) {
            next_prev445.push_front(FAIL);
          }
          continue;
        }
        i = prev[i444];
        tmp = parse__();
        
        for(int i444=0;i444<(int)tmp.size();++i444) {
          if( tmp[i444] == FAIL ) {
            if(!( !next_prev445.empty() && next_prev445[0] == FAIL )) {
              next_prev445.push_front(FAIL);
            }
          } else {
            next_prev445.push_back(tmp[i444]);
          }
        }
      }
      prev = next_prev445;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i432=0;i432<(int)prev.size();++i432) {
    if( prev[i432] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i432]);
    }
  }
  return memo[key(64,backtracking_ptr_for_packrat64)] = result;
}

inline deque<int> parse_not438() { 
  if(memo.count(key(65,i))) {
    return memo[key(65,i)];
  }
  int backtracking_ptr_for_packrat65=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev441;
  for(int i440=0;i440<(int)prev.size();++i440) {
    if( prev[i440] == FAIL ) {
      if(!(!next_prev441.empty() && next_prev441.front() == FAIL )) {
        next_prev441.push_front(FAIL);
      }
      continue;
    }
    i = prev[i440];
    tmp = parse_W();
    
    for(int i440=0;i440<(int)tmp.size();++i440) {
      if( tmp[i440] == FAIL ) {
        if(!( !next_prev441.empty() && next_prev441[0] == FAIL )) {
          next_prev441.push_front(FAIL);
        }
      } else {
        next_prev441.push_back(tmp[i440]);
      }
    }
  }
  prev = next_prev441;
  for(int i439=0;i439<(int)prev.size();++i439) {
    if( prev[i439] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i439]);
    }
  }
  return memo[key(65,backtracking_ptr_for_packrat65)] = result;
}

inline deque<int> parse_slash447() { 
  if(memo.count(key(66,i))) {
    return memo[key(66,i)];
  }
  int backtracking_ptr_for_packrat66=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i449=0;i449<(int)prev.size();++i449) {
        if( prev[i449] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i449]<m&&I[prev[i449]]=='f') {
          tmp.push_back(prev[i449]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i450=0;i450<(int)prev.size();++i450) {
        if( prev[i450] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i450]<m&&I[prev[i450]]=='i') {
          tmp.push_back(prev[i450]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i451=0;i451<(int)prev.size();++i451) {
        if( prev[i451] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i451]<m&&I[prev[i451]]=='n') {
          tmp.push_back(prev[i451]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i452=0;i452<(int)prev.size();++i452) {
        if( prev[i452] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i452]<m&&I[prev[i452]]=='a') {
          tmp.push_back(prev[i452]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i453=0;i453<(int)prev.size();++i453) {
        if( prev[i453] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i453]<m&&I[prev[i453]]=='l') {
          tmp.push_back(prev[i453]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i454=0;i454<(int)prev.size();++i454) {
        if( prev[i454] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i454]<m&&I[prev[i454]]=='l') {
          tmp.push_back(prev[i454]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i455=0;i455<(int)prev.size();++i455) {
        if( prev[i455] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i455]<m&&I[prev[i455]]=='y') {
          tmp.push_back(prev[i455]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev461;
      for(int i460=0;i460<(int)prev.size();++i460) {
        i = prev[i460];
        tmp = parse_not456();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev461.push_back(prev[i460]);
        } else {
          if(!(!next_prev461.empty()&&next_prev461.front()==FAIL)) {
            next_prev461.push_front(FAIL);
          }
        }
      }
      prev = next_prev461;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev463;
      for(int i462=0;i462<(int)prev.size();++i462) {
        if( prev[i462] == FAIL ) {
          if(!(!next_prev463.empty() && next_prev463.front() == FAIL )) {
            next_prev463.push_front(FAIL);
          }
          continue;
        }
        i = prev[i462];
        tmp = parse__();
        
        for(int i462=0;i462<(int)tmp.size();++i462) {
          if( tmp[i462] == FAIL ) {
            if(!( !next_prev463.empty() && next_prev463[0] == FAIL )) {
              next_prev463.push_front(FAIL);
            }
          } else {
            next_prev463.push_back(tmp[i462]);
          }
        }
      }
      prev = next_prev463;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i448=0;i448<(int)prev.size();++i448) {
    if( prev[i448] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i448]);
    }
  }
  return memo[key(66,backtracking_ptr_for_packrat66)] = result;
}

inline deque<int> parse_not456() { 
  if(memo.count(key(67,i))) {
    return memo[key(67,i)];
  }
  int backtracking_ptr_for_packrat67=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev459;
  for(int i458=0;i458<(int)prev.size();++i458) {
    if( prev[i458] == FAIL ) {
      if(!(!next_prev459.empty() && next_prev459.front() == FAIL )) {
        next_prev459.push_front(FAIL);
      }
      continue;
    }
    i = prev[i458];
    tmp = parse_W();
    
    for(int i458=0;i458<(int)tmp.size();++i458) {
      if( tmp[i458] == FAIL ) {
        if(!( !next_prev459.empty() && next_prev459[0] == FAIL )) {
          next_prev459.push_front(FAIL);
        }
      } else {
        next_prev459.push_back(tmp[i458]);
      }
    }
  }
  prev = next_prev459;
  for(int i457=0;i457<(int)prev.size();++i457) {
    if( prev[i457] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i457]);
    }
  }
  return memo[key(67,backtracking_ptr_for_packrat67)] = result;
}

inline deque<int> parse_slash465() { 
  if(memo.count(key(68,i))) {
    return memo[key(68,i)];
  }
  int backtracking_ptr_for_packrat68=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i467=0;i467<(int)prev.size();++i467) {
        if( prev[i467] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i467]<m&&I[prev[i467]]=='f') {
          tmp.push_back(prev[i467]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i468=0;i468<(int)prev.size();++i468) {
        if( prev[i468] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i468]<m&&I[prev[i468]]=='l') {
          tmp.push_back(prev[i468]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i469=0;i469<(int)prev.size();++i469) {
        if( prev[i469] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i469]<m&&I[prev[i469]]=='o') {
          tmp.push_back(prev[i469]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i470=0;i470<(int)prev.size();++i470) {
        if( prev[i470] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i470]<m&&I[prev[i470]]=='a') {
          tmp.push_back(prev[i470]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i471=0;i471<(int)prev.size();++i471) {
        if( prev[i471] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i471]<m&&I[prev[i471]]=='t') {
          tmp.push_back(prev[i471]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev477;
      for(int i476=0;i476<(int)prev.size();++i476) {
        i = prev[i476];
        tmp = parse_not472();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev477.push_back(prev[i476]);
        } else {
          if(!(!next_prev477.empty()&&next_prev477.front()==FAIL)) {
            next_prev477.push_front(FAIL);
          }
        }
      }
      prev = next_prev477;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev479;
      for(int i478=0;i478<(int)prev.size();++i478) {
        if( prev[i478] == FAIL ) {
          if(!(!next_prev479.empty() && next_prev479.front() == FAIL )) {
            next_prev479.push_front(FAIL);
          }
          continue;
        }
        i = prev[i478];
        tmp = parse__();
        
        for(int i478=0;i478<(int)tmp.size();++i478) {
          if( tmp[i478] == FAIL ) {
            if(!( !next_prev479.empty() && next_prev479[0] == FAIL )) {
              next_prev479.push_front(FAIL);
            }
          } else {
            next_prev479.push_back(tmp[i478]);
          }
        }
      }
      prev = next_prev479;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i466=0;i466<(int)prev.size();++i466) {
    if( prev[i466] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i466]);
    }
  }
  return memo[key(68,backtracking_ptr_for_packrat68)] = result;
}

inline deque<int> parse_not472() { 
  if(memo.count(key(69,i))) {
    return memo[key(69,i)];
  }
  int backtracking_ptr_for_packrat69=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev475;
  for(int i474=0;i474<(int)prev.size();++i474) {
    if( prev[i474] == FAIL ) {
      if(!(!next_prev475.empty() && next_prev475.front() == FAIL )) {
        next_prev475.push_front(FAIL);
      }
      continue;
    }
    i = prev[i474];
    tmp = parse_W();
    
    for(int i474=0;i474<(int)tmp.size();++i474) {
      if( tmp[i474] == FAIL ) {
        if(!( !next_prev475.empty() && next_prev475[0] == FAIL )) {
          next_prev475.push_front(FAIL);
        }
      } else {
        next_prev475.push_back(tmp[i474]);
      }
    }
  }
  prev = next_prev475;
  for(int i473=0;i473<(int)prev.size();++i473) {
    if( prev[i473] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i473]);
    }
  }
  return memo[key(69,backtracking_ptr_for_packrat69)] = result;
}

inline deque<int> parse_slash481() { 
  if(memo.count(key(70,i))) {
    return memo[key(70,i)];
  }
  int backtracking_ptr_for_packrat70=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i483=0;i483<(int)prev.size();++i483) {
        if( prev[i483] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i483]<m&&I[prev[i483]]=='f') {
          tmp.push_back(prev[i483]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i484=0;i484<(int)prev.size();++i484) {
        if( prev[i484] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i484]<m&&I[prev[i484]]=='o') {
          tmp.push_back(prev[i484]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i485=0;i485<(int)prev.size();++i485) {
        if( prev[i485] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i485]<m&&I[prev[i485]]=='r') {
          tmp.push_back(prev[i485]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev491;
      for(int i490=0;i490<(int)prev.size();++i490) {
        i = prev[i490];
        tmp = parse_not486();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev491.push_back(prev[i490]);
        } else {
          if(!(!next_prev491.empty()&&next_prev491.front()==FAIL)) {
            next_prev491.push_front(FAIL);
          }
        }
      }
      prev = next_prev491;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev493;
      for(int i492=0;i492<(int)prev.size();++i492) {
        if( prev[i492] == FAIL ) {
          if(!(!next_prev493.empty() && next_prev493.front() == FAIL )) {
            next_prev493.push_front(FAIL);
          }
          continue;
        }
        i = prev[i492];
        tmp = parse__();
        
        for(int i492=0;i492<(int)tmp.size();++i492) {
          if( tmp[i492] == FAIL ) {
            if(!( !next_prev493.empty() && next_prev493[0] == FAIL )) {
              next_prev493.push_front(FAIL);
            }
          } else {
            next_prev493.push_back(tmp[i492]);
          }
        }
      }
      prev = next_prev493;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i482=0;i482<(int)prev.size();++i482) {
    if( prev[i482] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i482]);
    }
  }
  return memo[key(70,backtracking_ptr_for_packrat70)] = result;
}

inline deque<int> parse_not486() { 
  if(memo.count(key(71,i))) {
    return memo[key(71,i)];
  }
  int backtracking_ptr_for_packrat71=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev489;
  for(int i488=0;i488<(int)prev.size();++i488) {
    if( prev[i488] == FAIL ) {
      if(!(!next_prev489.empty() && next_prev489.front() == FAIL )) {
        next_prev489.push_front(FAIL);
      }
      continue;
    }
    i = prev[i488];
    tmp = parse_W();
    
    for(int i488=0;i488<(int)tmp.size();++i488) {
      if( tmp[i488] == FAIL ) {
        if(!( !next_prev489.empty() && next_prev489[0] == FAIL )) {
          next_prev489.push_front(FAIL);
        }
      } else {
        next_prev489.push_back(tmp[i488]);
      }
    }
  }
  prev = next_prev489;
  for(int i487=0;i487<(int)prev.size();++i487) {
    if( prev[i487] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i487]);
    }
  }
  return memo[key(71,backtracking_ptr_for_packrat71)] = result;
}

inline deque<int> parse_slash495() { 
  if(memo.count(key(72,i))) {
    return memo[key(72,i)];
  }
  int backtracking_ptr_for_packrat72=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i497=0;i497<(int)prev.size();++i497) {
        if( prev[i497] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i497]<m&&I[prev[i497]]=='g') {
          tmp.push_back(prev[i497]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i498=0;i498<(int)prev.size();++i498) {
        if( prev[i498] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i498]<m&&I[prev[i498]]=='o') {
          tmp.push_back(prev[i498]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i499=0;i499<(int)prev.size();++i499) {
        if( prev[i499] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i499]<m&&I[prev[i499]]=='t') {
          tmp.push_back(prev[i499]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i500=0;i500<(int)prev.size();++i500) {
        if( prev[i500] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i500]<m&&I[prev[i500]]=='o') {
          tmp.push_back(prev[i500]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev506;
      for(int i505=0;i505<(int)prev.size();++i505) {
        i = prev[i505];
        tmp = parse_not501();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev506.push_back(prev[i505]);
        } else {
          if(!(!next_prev506.empty()&&next_prev506.front()==FAIL)) {
            next_prev506.push_front(FAIL);
          }
        }
      }
      prev = next_prev506;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev508;
      for(int i507=0;i507<(int)prev.size();++i507) {
        if( prev[i507] == FAIL ) {
          if(!(!next_prev508.empty() && next_prev508.front() == FAIL )) {
            next_prev508.push_front(FAIL);
          }
          continue;
        }
        i = prev[i507];
        tmp = parse__();
        
        for(int i507=0;i507<(int)tmp.size();++i507) {
          if( tmp[i507] == FAIL ) {
            if(!( !next_prev508.empty() && next_prev508[0] == FAIL )) {
              next_prev508.push_front(FAIL);
            }
          } else {
            next_prev508.push_back(tmp[i507]);
          }
        }
      }
      prev = next_prev508;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i496=0;i496<(int)prev.size();++i496) {
    if( prev[i496] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i496]);
    }
  }
  return memo[key(72,backtracking_ptr_for_packrat72)] = result;
}

inline deque<int> parse_not501() { 
  if(memo.count(key(73,i))) {
    return memo[key(73,i)];
  }
  int backtracking_ptr_for_packrat73=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev504;
  for(int i503=0;i503<(int)prev.size();++i503) {
    if( prev[i503] == FAIL ) {
      if(!(!next_prev504.empty() && next_prev504.front() == FAIL )) {
        next_prev504.push_front(FAIL);
      }
      continue;
    }
    i = prev[i503];
    tmp = parse_W();
    
    for(int i503=0;i503<(int)tmp.size();++i503) {
      if( tmp[i503] == FAIL ) {
        if(!( !next_prev504.empty() && next_prev504[0] == FAIL )) {
          next_prev504.push_front(FAIL);
        }
      } else {
        next_prev504.push_back(tmp[i503]);
      }
    }
  }
  prev = next_prev504;
  for(int i502=0;i502<(int)prev.size();++i502) {
    if( prev[i502] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i502]);
    }
  }
  return memo[key(73,backtracking_ptr_for_packrat73)] = result;
}

inline deque<int> parse_slash510() { 
  if(memo.count(key(74,i))) {
    return memo[key(74,i)];
  }
  int backtracking_ptr_for_packrat74=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i512=0;i512<(int)prev.size();++i512) {
        if( prev[i512] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i512]<m&&I[prev[i512]]=='i') {
          tmp.push_back(prev[i512]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i513=0;i513<(int)prev.size();++i513) {
        if( prev[i513] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i513]<m&&I[prev[i513]]=='f') {
          tmp.push_back(prev[i513]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev519;
      for(int i518=0;i518<(int)prev.size();++i518) {
        i = prev[i518];
        tmp = parse_not514();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev519.push_back(prev[i518]);
        } else {
          if(!(!next_prev519.empty()&&next_prev519.front()==FAIL)) {
            next_prev519.push_front(FAIL);
          }
        }
      }
      prev = next_prev519;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev521;
      for(int i520=0;i520<(int)prev.size();++i520) {
        if( prev[i520] == FAIL ) {
          if(!(!next_prev521.empty() && next_prev521.front() == FAIL )) {
            next_prev521.push_front(FAIL);
          }
          continue;
        }
        i = prev[i520];
        tmp = parse__();
        
        for(int i520=0;i520<(int)tmp.size();++i520) {
          if( tmp[i520] == FAIL ) {
            if(!( !next_prev521.empty() && next_prev521[0] == FAIL )) {
              next_prev521.push_front(FAIL);
            }
          } else {
            next_prev521.push_back(tmp[i520]);
          }
        }
      }
      prev = next_prev521;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i511=0;i511<(int)prev.size();++i511) {
    if( prev[i511] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i511]);
    }
  }
  return memo[key(74,backtracking_ptr_for_packrat74)] = result;
}

inline deque<int> parse_not514() { 
  if(memo.count(key(75,i))) {
    return memo[key(75,i)];
  }
  int backtracking_ptr_for_packrat75=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev517;
  for(int i516=0;i516<(int)prev.size();++i516) {
    if( prev[i516] == FAIL ) {
      if(!(!next_prev517.empty() && next_prev517.front() == FAIL )) {
        next_prev517.push_front(FAIL);
      }
      continue;
    }
    i = prev[i516];
    tmp = parse_W();
    
    for(int i516=0;i516<(int)tmp.size();++i516) {
      if( tmp[i516] == FAIL ) {
        if(!( !next_prev517.empty() && next_prev517[0] == FAIL )) {
          next_prev517.push_front(FAIL);
        }
      } else {
        next_prev517.push_back(tmp[i516]);
      }
    }
  }
  prev = next_prev517;
  for(int i515=0;i515<(int)prev.size();++i515) {
    if( prev[i515] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i515]);
    }
  }
  return memo[key(75,backtracking_ptr_for_packrat75)] = result;
}

inline deque<int> parse_slash523() { 
  if(memo.count(key(76,i))) {
    return memo[key(76,i)];
  }
  int backtracking_ptr_for_packrat76=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i525=0;i525<(int)prev.size();++i525) {
        if( prev[i525] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i525]<m&&I[prev[i525]]=='i') {
          tmp.push_back(prev[i525]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i526=0;i526<(int)prev.size();++i526) {
        if( prev[i526] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i526]<m&&I[prev[i526]]=='m') {
          tmp.push_back(prev[i526]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i527=0;i527<(int)prev.size();++i527) {
        if( prev[i527] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i527]<m&&I[prev[i527]]=='p') {
          tmp.push_back(prev[i527]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i528=0;i528<(int)prev.size();++i528) {
        if( prev[i528] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i528]<m&&I[prev[i528]]=='l') {
          tmp.push_back(prev[i528]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i529=0;i529<(int)prev.size();++i529) {
        if( prev[i529] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i529]<m&&I[prev[i529]]=='e') {
          tmp.push_back(prev[i529]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i530=0;i530<(int)prev.size();++i530) {
        if( prev[i530] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i530]<m&&I[prev[i530]]=='m') {
          tmp.push_back(prev[i530]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i531=0;i531<(int)prev.size();++i531) {
        if( prev[i531] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i531]<m&&I[prev[i531]]=='e') {
          tmp.push_back(prev[i531]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i532=0;i532<(int)prev.size();++i532) {
        if( prev[i532] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i532]<m&&I[prev[i532]]=='n') {
          tmp.push_back(prev[i532]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i533=0;i533<(int)prev.size();++i533) {
        if( prev[i533] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i533]<m&&I[prev[i533]]=='t') {
          tmp.push_back(prev[i533]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i534=0;i534<(int)prev.size();++i534) {
        if( prev[i534] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i534]<m&&I[prev[i534]]=='s') {
          tmp.push_back(prev[i534]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev540;
      for(int i539=0;i539<(int)prev.size();++i539) {
        i = prev[i539];
        tmp = parse_not535();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev540.push_back(prev[i539]);
        } else {
          if(!(!next_prev540.empty()&&next_prev540.front()==FAIL)) {
            next_prev540.push_front(FAIL);
          }
        }
      }
      prev = next_prev540;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev542;
      for(int i541=0;i541<(int)prev.size();++i541) {
        if( prev[i541] == FAIL ) {
          if(!(!next_prev542.empty() && next_prev542.front() == FAIL )) {
            next_prev542.push_front(FAIL);
          }
          continue;
        }
        i = prev[i541];
        tmp = parse__();
        
        for(int i541=0;i541<(int)tmp.size();++i541) {
          if( tmp[i541] == FAIL ) {
            if(!( !next_prev542.empty() && next_prev542[0] == FAIL )) {
              next_prev542.push_front(FAIL);
            }
          } else {
            next_prev542.push_back(tmp[i541]);
          }
        }
      }
      prev = next_prev542;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i524=0;i524<(int)prev.size();++i524) {
    if( prev[i524] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i524]);
    }
  }
  return memo[key(76,backtracking_ptr_for_packrat76)] = result;
}

inline deque<int> parse_not535() { 
  if(memo.count(key(77,i))) {
    return memo[key(77,i)];
  }
  int backtracking_ptr_for_packrat77=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev538;
  for(int i537=0;i537<(int)prev.size();++i537) {
    if( prev[i537] == FAIL ) {
      if(!(!next_prev538.empty() && next_prev538.front() == FAIL )) {
        next_prev538.push_front(FAIL);
      }
      continue;
    }
    i = prev[i537];
    tmp = parse_W();
    
    for(int i537=0;i537<(int)tmp.size();++i537) {
      if( tmp[i537] == FAIL ) {
        if(!( !next_prev538.empty() && next_prev538[0] == FAIL )) {
          next_prev538.push_front(FAIL);
        }
      } else {
        next_prev538.push_back(tmp[i537]);
      }
    }
  }
  prev = next_prev538;
  for(int i536=0;i536<(int)prev.size();++i536) {
    if( prev[i536] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i536]);
    }
  }
  return memo[key(77,backtracking_ptr_for_packrat77)] = result;
}

inline deque<int> parse_slash544() { 
  if(memo.count(key(78,i))) {
    return memo[key(78,i)];
  }
  int backtracking_ptr_for_packrat78=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i546=0;i546<(int)prev.size();++i546) {
        if( prev[i546] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i546]<m&&I[prev[i546]]=='i') {
          tmp.push_back(prev[i546]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i547=0;i547<(int)prev.size();++i547) {
        if( prev[i547] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i547]<m&&I[prev[i547]]=='m') {
          tmp.push_back(prev[i547]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i548=0;i548<(int)prev.size();++i548) {
        if( prev[i548] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i548]<m&&I[prev[i548]]=='p') {
          tmp.push_back(prev[i548]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i549=0;i549<(int)prev.size();++i549) {
        if( prev[i549] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i549]<m&&I[prev[i549]]=='o') {
          tmp.push_back(prev[i549]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i550=0;i550<(int)prev.size();++i550) {
        if( prev[i550] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i550]<m&&I[prev[i550]]=='r') {
          tmp.push_back(prev[i550]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i551=0;i551<(int)prev.size();++i551) {
        if( prev[i551] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i551]<m&&I[prev[i551]]=='t') {
          tmp.push_back(prev[i551]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev557;
      for(int i556=0;i556<(int)prev.size();++i556) {
        i = prev[i556];
        tmp = parse_not552();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev557.push_back(prev[i556]);
        } else {
          if(!(!next_prev557.empty()&&next_prev557.front()==FAIL)) {
            next_prev557.push_front(FAIL);
          }
        }
      }
      prev = next_prev557;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev559;
      for(int i558=0;i558<(int)prev.size();++i558) {
        if( prev[i558] == FAIL ) {
          if(!(!next_prev559.empty() && next_prev559.front() == FAIL )) {
            next_prev559.push_front(FAIL);
          }
          continue;
        }
        i = prev[i558];
        tmp = parse__();
        
        for(int i558=0;i558<(int)tmp.size();++i558) {
          if( tmp[i558] == FAIL ) {
            if(!( !next_prev559.empty() && next_prev559[0] == FAIL )) {
              next_prev559.push_front(FAIL);
            }
          } else {
            next_prev559.push_back(tmp[i558]);
          }
        }
      }
      prev = next_prev559;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i545=0;i545<(int)prev.size();++i545) {
    if( prev[i545] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i545]);
    }
  }
  return memo[key(78,backtracking_ptr_for_packrat78)] = result;
}

inline deque<int> parse_not552() { 
  if(memo.count(key(79,i))) {
    return memo[key(79,i)];
  }
  int backtracking_ptr_for_packrat79=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev555;
  for(int i554=0;i554<(int)prev.size();++i554) {
    if( prev[i554] == FAIL ) {
      if(!(!next_prev555.empty() && next_prev555.front() == FAIL )) {
        next_prev555.push_front(FAIL);
      }
      continue;
    }
    i = prev[i554];
    tmp = parse_W();
    
    for(int i554=0;i554<(int)tmp.size();++i554) {
      if( tmp[i554] == FAIL ) {
        if(!( !next_prev555.empty() && next_prev555[0] == FAIL )) {
          next_prev555.push_front(FAIL);
        }
      } else {
        next_prev555.push_back(tmp[i554]);
      }
    }
  }
  prev = next_prev555;
  for(int i553=0;i553<(int)prev.size();++i553) {
    if( prev[i553] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i553]);
    }
  }
  return memo[key(79,backtracking_ptr_for_packrat79)] = result;
}

inline deque<int> parse_slash561() { 
  if(memo.count(key(80,i))) {
    return memo[key(80,i)];
  }
  int backtracking_ptr_for_packrat80=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i563=0;i563<(int)prev.size();++i563) {
        if( prev[i563] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i563]<m&&I[prev[i563]]=='i') {
          tmp.push_back(prev[i563]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i564=0;i564<(int)prev.size();++i564) {
        if( prev[i564] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i564]<m&&I[prev[i564]]=='n') {
          tmp.push_back(prev[i564]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i565=0;i565<(int)prev.size();++i565) {
        if( prev[i565] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i565]<m&&I[prev[i565]]=='s') {
          tmp.push_back(prev[i565]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i566=0;i566<(int)prev.size();++i566) {
        if( prev[i566] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i566]<m&&I[prev[i566]]=='t') {
          tmp.push_back(prev[i566]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i567=0;i567<(int)prev.size();++i567) {
        if( prev[i567] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i567]<m&&I[prev[i567]]=='a') {
          tmp.push_back(prev[i567]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i568=0;i568<(int)prev.size();++i568) {
        if( prev[i568] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i568]<m&&I[prev[i568]]=='n') {
          tmp.push_back(prev[i568]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i569=0;i569<(int)prev.size();++i569) {
        if( prev[i569] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i569]<m&&I[prev[i569]]=='c') {
          tmp.push_back(prev[i569]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i570=0;i570<(int)prev.size();++i570) {
        if( prev[i570] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i570]<m&&I[prev[i570]]=='e') {
          tmp.push_back(prev[i570]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i571=0;i571<(int)prev.size();++i571) {
        if( prev[i571] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i571]<m&&I[prev[i571]]=='o') {
          tmp.push_back(prev[i571]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i572=0;i572<(int)prev.size();++i572) {
        if( prev[i572] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i572]<m&&I[prev[i572]]=='f') {
          tmp.push_back(prev[i572]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev578;
      for(int i577=0;i577<(int)prev.size();++i577) {
        i = prev[i577];
        tmp = parse_not573();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev578.push_back(prev[i577]);
        } else {
          if(!(!next_prev578.empty()&&next_prev578.front()==FAIL)) {
            next_prev578.push_front(FAIL);
          }
        }
      }
      prev = next_prev578;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev580;
      for(int i579=0;i579<(int)prev.size();++i579) {
        if( prev[i579] == FAIL ) {
          if(!(!next_prev580.empty() && next_prev580.front() == FAIL )) {
            next_prev580.push_front(FAIL);
          }
          continue;
        }
        i = prev[i579];
        tmp = parse__();
        
        for(int i579=0;i579<(int)tmp.size();++i579) {
          if( tmp[i579] == FAIL ) {
            if(!( !next_prev580.empty() && next_prev580[0] == FAIL )) {
              next_prev580.push_front(FAIL);
            }
          } else {
            next_prev580.push_back(tmp[i579]);
          }
        }
      }
      prev = next_prev580;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i562=0;i562<(int)prev.size();++i562) {
    if( prev[i562] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i562]);
    }
  }
  return memo[key(80,backtracking_ptr_for_packrat80)] = result;
}

inline deque<int> parse_not573() { 
  if(memo.count(key(81,i))) {
    return memo[key(81,i)];
  }
  int backtracking_ptr_for_packrat81=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev576;
  for(int i575=0;i575<(int)prev.size();++i575) {
    if( prev[i575] == FAIL ) {
      if(!(!next_prev576.empty() && next_prev576.front() == FAIL )) {
        next_prev576.push_front(FAIL);
      }
      continue;
    }
    i = prev[i575];
    tmp = parse_W();
    
    for(int i575=0;i575<(int)tmp.size();++i575) {
      if( tmp[i575] == FAIL ) {
        if(!( !next_prev576.empty() && next_prev576[0] == FAIL )) {
          next_prev576.push_front(FAIL);
        }
      } else {
        next_prev576.push_back(tmp[i575]);
      }
    }
  }
  prev = next_prev576;
  for(int i574=0;i574<(int)prev.size();++i574) {
    if( prev[i574] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i574]);
    }
  }
  return memo[key(81,backtracking_ptr_for_packrat81)] = result;
}

inline deque<int> parse_slash582() { 
  if(memo.count(key(82,i))) {
    return memo[key(82,i)];
  }
  int backtracking_ptr_for_packrat82=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i584=0;i584<(int)prev.size();++i584) {
        if( prev[i584] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i584]<m&&I[prev[i584]]=='i') {
          tmp.push_back(prev[i584]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i585=0;i585<(int)prev.size();++i585) {
        if( prev[i585] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i585]<m&&I[prev[i585]]=='n') {
          tmp.push_back(prev[i585]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i586=0;i586<(int)prev.size();++i586) {
        if( prev[i586] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i586]<m&&I[prev[i586]]=='t') {
          tmp.push_back(prev[i586]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i587=0;i587<(int)prev.size();++i587) {
        if( prev[i587] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i587]<m&&I[prev[i587]]=='e') {
          tmp.push_back(prev[i587]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i588=0;i588<(int)prev.size();++i588) {
        if( prev[i588] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i588]<m&&I[prev[i588]]=='r') {
          tmp.push_back(prev[i588]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i589=0;i589<(int)prev.size();++i589) {
        if( prev[i589] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i589]<m&&I[prev[i589]]=='f') {
          tmp.push_back(prev[i589]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i590=0;i590<(int)prev.size();++i590) {
        if( prev[i590] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i590]<m&&I[prev[i590]]=='a') {
          tmp.push_back(prev[i590]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i591=0;i591<(int)prev.size();++i591) {
        if( prev[i591] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i591]<m&&I[prev[i591]]=='c') {
          tmp.push_back(prev[i591]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i592=0;i592<(int)prev.size();++i592) {
        if( prev[i592] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i592]<m&&I[prev[i592]]=='e') {
          tmp.push_back(prev[i592]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev598;
      for(int i597=0;i597<(int)prev.size();++i597) {
        i = prev[i597];
        tmp = parse_not593();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev598.push_back(prev[i597]);
        } else {
          if(!(!next_prev598.empty()&&next_prev598.front()==FAIL)) {
            next_prev598.push_front(FAIL);
          }
        }
      }
      prev = next_prev598;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev600;
      for(int i599=0;i599<(int)prev.size();++i599) {
        if( prev[i599] == FAIL ) {
          if(!(!next_prev600.empty() && next_prev600.front() == FAIL )) {
            next_prev600.push_front(FAIL);
          }
          continue;
        }
        i = prev[i599];
        tmp = parse__();
        
        for(int i599=0;i599<(int)tmp.size();++i599) {
          if( tmp[i599] == FAIL ) {
            if(!( !next_prev600.empty() && next_prev600[0] == FAIL )) {
              next_prev600.push_front(FAIL);
            }
          } else {
            next_prev600.push_back(tmp[i599]);
          }
        }
      }
      prev = next_prev600;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i583=0;i583<(int)prev.size();++i583) {
    if( prev[i583] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i583]);
    }
  }
  return memo[key(82,backtracking_ptr_for_packrat82)] = result;
}

inline deque<int> parse_not593() { 
  if(memo.count(key(83,i))) {
    return memo[key(83,i)];
  }
  int backtracking_ptr_for_packrat83=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev596;
  for(int i595=0;i595<(int)prev.size();++i595) {
    if( prev[i595] == FAIL ) {
      if(!(!next_prev596.empty() && next_prev596.front() == FAIL )) {
        next_prev596.push_front(FAIL);
      }
      continue;
    }
    i = prev[i595];
    tmp = parse_W();
    
    for(int i595=0;i595<(int)tmp.size();++i595) {
      if( tmp[i595] == FAIL ) {
        if(!( !next_prev596.empty() && next_prev596[0] == FAIL )) {
          next_prev596.push_front(FAIL);
        }
      } else {
        next_prev596.push_back(tmp[i595]);
      }
    }
  }
  prev = next_prev596;
  for(int i594=0;i594<(int)prev.size();++i594) {
    if( prev[i594] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i594]);
    }
  }
  return memo[key(83,backtracking_ptr_for_packrat83)] = result;
}

inline deque<int> parse_slash602() { 
  if(memo.count(key(84,i))) {
    return memo[key(84,i)];
  }
  int backtracking_ptr_for_packrat84=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i604=0;i604<(int)prev.size();++i604) {
        if( prev[i604] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i604]<m&&I[prev[i604]]=='i') {
          tmp.push_back(prev[i604]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i605=0;i605<(int)prev.size();++i605) {
        if( prev[i605] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i605]<m&&I[prev[i605]]=='n') {
          tmp.push_back(prev[i605]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i606=0;i606<(int)prev.size();++i606) {
        if( prev[i606] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i606]<m&&I[prev[i606]]=='t') {
          tmp.push_back(prev[i606]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev612;
      for(int i611=0;i611<(int)prev.size();++i611) {
        i = prev[i611];
        tmp = parse_not607();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev612.push_back(prev[i611]);
        } else {
          if(!(!next_prev612.empty()&&next_prev612.front()==FAIL)) {
            next_prev612.push_front(FAIL);
          }
        }
      }
      prev = next_prev612;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev614;
      for(int i613=0;i613<(int)prev.size();++i613) {
        if( prev[i613] == FAIL ) {
          if(!(!next_prev614.empty() && next_prev614.front() == FAIL )) {
            next_prev614.push_front(FAIL);
          }
          continue;
        }
        i = prev[i613];
        tmp = parse__();
        
        for(int i613=0;i613<(int)tmp.size();++i613) {
          if( tmp[i613] == FAIL ) {
            if(!( !next_prev614.empty() && next_prev614[0] == FAIL )) {
              next_prev614.push_front(FAIL);
            }
          } else {
            next_prev614.push_back(tmp[i613]);
          }
        }
      }
      prev = next_prev614;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i603=0;i603<(int)prev.size();++i603) {
    if( prev[i603] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i603]);
    }
  }
  return memo[key(84,backtracking_ptr_for_packrat84)] = result;
}

inline deque<int> parse_not607() { 
  if(memo.count(key(85,i))) {
    return memo[key(85,i)];
  }
  int backtracking_ptr_for_packrat85=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev610;
  for(int i609=0;i609<(int)prev.size();++i609) {
    if( prev[i609] == FAIL ) {
      if(!(!next_prev610.empty() && next_prev610.front() == FAIL )) {
        next_prev610.push_front(FAIL);
      }
      continue;
    }
    i = prev[i609];
    tmp = parse_W();
    
    for(int i609=0;i609<(int)tmp.size();++i609) {
      if( tmp[i609] == FAIL ) {
        if(!( !next_prev610.empty() && next_prev610[0] == FAIL )) {
          next_prev610.push_front(FAIL);
        }
      } else {
        next_prev610.push_back(tmp[i609]);
      }
    }
  }
  prev = next_prev610;
  for(int i608=0;i608<(int)prev.size();++i608) {
    if( prev[i608] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i608]);
    }
  }
  return memo[key(85,backtracking_ptr_for_packrat85)] = result;
}

inline deque<int> parse_slash616() { 
  if(memo.count(key(86,i))) {
    return memo[key(86,i)];
  }
  int backtracking_ptr_for_packrat86=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i618=0;i618<(int)prev.size();++i618) {
        if( prev[i618] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i618]<m&&I[prev[i618]]=='l') {
          tmp.push_back(prev[i618]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i619=0;i619<(int)prev.size();++i619) {
        if( prev[i619] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i619]<m&&I[prev[i619]]=='o') {
          tmp.push_back(prev[i619]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i620=0;i620<(int)prev.size();++i620) {
        if( prev[i620] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i620]<m&&I[prev[i620]]=='n') {
          tmp.push_back(prev[i620]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i621=0;i621<(int)prev.size();++i621) {
        if( prev[i621] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i621]<m&&I[prev[i621]]=='g') {
          tmp.push_back(prev[i621]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev627;
      for(int i626=0;i626<(int)prev.size();++i626) {
        i = prev[i626];
        tmp = parse_not622();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev627.push_back(prev[i626]);
        } else {
          if(!(!next_prev627.empty()&&next_prev627.front()==FAIL)) {
            next_prev627.push_front(FAIL);
          }
        }
      }
      prev = next_prev627;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev629;
      for(int i628=0;i628<(int)prev.size();++i628) {
        if( prev[i628] == FAIL ) {
          if(!(!next_prev629.empty() && next_prev629.front() == FAIL )) {
            next_prev629.push_front(FAIL);
          }
          continue;
        }
        i = prev[i628];
        tmp = parse__();
        
        for(int i628=0;i628<(int)tmp.size();++i628) {
          if( tmp[i628] == FAIL ) {
            if(!( !next_prev629.empty() && next_prev629[0] == FAIL )) {
              next_prev629.push_front(FAIL);
            }
          } else {
            next_prev629.push_back(tmp[i628]);
          }
        }
      }
      prev = next_prev629;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i617=0;i617<(int)prev.size();++i617) {
    if( prev[i617] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i617]);
    }
  }
  return memo[key(86,backtracking_ptr_for_packrat86)] = result;
}

inline deque<int> parse_not622() { 
  if(memo.count(key(87,i))) {
    return memo[key(87,i)];
  }
  int backtracking_ptr_for_packrat87=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev625;
  for(int i624=0;i624<(int)prev.size();++i624) {
    if( prev[i624] == FAIL ) {
      if(!(!next_prev625.empty() && next_prev625.front() == FAIL )) {
        next_prev625.push_front(FAIL);
      }
      continue;
    }
    i = prev[i624];
    tmp = parse_W();
    
    for(int i624=0;i624<(int)tmp.size();++i624) {
      if( tmp[i624] == FAIL ) {
        if(!( !next_prev625.empty() && next_prev625[0] == FAIL )) {
          next_prev625.push_front(FAIL);
        }
      } else {
        next_prev625.push_back(tmp[i624]);
      }
    }
  }
  prev = next_prev625;
  for(int i623=0;i623<(int)prev.size();++i623) {
    if( prev[i623] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i623]);
    }
  }
  return memo[key(87,backtracking_ptr_for_packrat87)] = result;
}

inline deque<int> parse_slash631() { 
  if(memo.count(key(88,i))) {
    return memo[key(88,i)];
  }
  int backtracking_ptr_for_packrat88=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i633=0;i633<(int)prev.size();++i633) {
        if( prev[i633] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i633]<m&&I[prev[i633]]=='n') {
          tmp.push_back(prev[i633]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i634=0;i634<(int)prev.size();++i634) {
        if( prev[i634] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i634]<m&&I[prev[i634]]=='a') {
          tmp.push_back(prev[i634]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i635=0;i635<(int)prev.size();++i635) {
        if( prev[i635] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i635]<m&&I[prev[i635]]=='t') {
          tmp.push_back(prev[i635]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i636=0;i636<(int)prev.size();++i636) {
        if( prev[i636] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i636]<m&&I[prev[i636]]=='i') {
          tmp.push_back(prev[i636]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i637=0;i637<(int)prev.size();++i637) {
        if( prev[i637] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i637]<m&&I[prev[i637]]=='v') {
          tmp.push_back(prev[i637]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i638=0;i638<(int)prev.size();++i638) {
        if( prev[i638] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i638]<m&&I[prev[i638]]=='e') {
          tmp.push_back(prev[i638]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev644;
      for(int i643=0;i643<(int)prev.size();++i643) {
        i = prev[i643];
        tmp = parse_not639();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev644.push_back(prev[i643]);
        } else {
          if(!(!next_prev644.empty()&&next_prev644.front()==FAIL)) {
            next_prev644.push_front(FAIL);
          }
        }
      }
      prev = next_prev644;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev646;
      for(int i645=0;i645<(int)prev.size();++i645) {
        if( prev[i645] == FAIL ) {
          if(!(!next_prev646.empty() && next_prev646.front() == FAIL )) {
            next_prev646.push_front(FAIL);
          }
          continue;
        }
        i = prev[i645];
        tmp = parse__();
        
        for(int i645=0;i645<(int)tmp.size();++i645) {
          if( tmp[i645] == FAIL ) {
            if(!( !next_prev646.empty() && next_prev646[0] == FAIL )) {
              next_prev646.push_front(FAIL);
            }
          } else {
            next_prev646.push_back(tmp[i645]);
          }
        }
      }
      prev = next_prev646;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i632=0;i632<(int)prev.size();++i632) {
    if( prev[i632] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i632]);
    }
  }
  return memo[key(88,backtracking_ptr_for_packrat88)] = result;
}

inline deque<int> parse_not639() { 
  if(memo.count(key(89,i))) {
    return memo[key(89,i)];
  }
  int backtracking_ptr_for_packrat89=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev642;
  for(int i641=0;i641<(int)prev.size();++i641) {
    if( prev[i641] == FAIL ) {
      if(!(!next_prev642.empty() && next_prev642.front() == FAIL )) {
        next_prev642.push_front(FAIL);
      }
      continue;
    }
    i = prev[i641];
    tmp = parse_W();
    
    for(int i641=0;i641<(int)tmp.size();++i641) {
      if( tmp[i641] == FAIL ) {
        if(!( !next_prev642.empty() && next_prev642[0] == FAIL )) {
          next_prev642.push_front(FAIL);
        }
      } else {
        next_prev642.push_back(tmp[i641]);
      }
    }
  }
  prev = next_prev642;
  for(int i640=0;i640<(int)prev.size();++i640) {
    if( prev[i640] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i640]);
    }
  }
  return memo[key(89,backtracking_ptr_for_packrat89)] = result;
}

inline deque<int> parse_slash648() { 
  if(memo.count(key(90,i))) {
    return memo[key(90,i)];
  }
  int backtracking_ptr_for_packrat90=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i650=0;i650<(int)prev.size();++i650) {
        if( prev[i650] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i650]<m&&I[prev[i650]]=='n') {
          tmp.push_back(prev[i650]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i651=0;i651<(int)prev.size();++i651) {
        if( prev[i651] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i651]<m&&I[prev[i651]]=='e') {
          tmp.push_back(prev[i651]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i652=0;i652<(int)prev.size();++i652) {
        if( prev[i652] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i652]<m&&I[prev[i652]]=='w') {
          tmp.push_back(prev[i652]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev658;
      for(int i657=0;i657<(int)prev.size();++i657) {
        i = prev[i657];
        tmp = parse_not653();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev658.push_back(prev[i657]);
        } else {
          if(!(!next_prev658.empty()&&next_prev658.front()==FAIL)) {
            next_prev658.push_front(FAIL);
          }
        }
      }
      prev = next_prev658;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev660;
      for(int i659=0;i659<(int)prev.size();++i659) {
        if( prev[i659] == FAIL ) {
          if(!(!next_prev660.empty() && next_prev660.front() == FAIL )) {
            next_prev660.push_front(FAIL);
          }
          continue;
        }
        i = prev[i659];
        tmp = parse__();
        
        for(int i659=0;i659<(int)tmp.size();++i659) {
          if( tmp[i659] == FAIL ) {
            if(!( !next_prev660.empty() && next_prev660[0] == FAIL )) {
              next_prev660.push_front(FAIL);
            }
          } else {
            next_prev660.push_back(tmp[i659]);
          }
        }
      }
      prev = next_prev660;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i649=0;i649<(int)prev.size();++i649) {
    if( prev[i649] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i649]);
    }
  }
  return memo[key(90,backtracking_ptr_for_packrat90)] = result;
}

inline deque<int> parse_not653() { 
  if(memo.count(key(91,i))) {
    return memo[key(91,i)];
  }
  int backtracking_ptr_for_packrat91=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev656;
  for(int i655=0;i655<(int)prev.size();++i655) {
    if( prev[i655] == FAIL ) {
      if(!(!next_prev656.empty() && next_prev656.front() == FAIL )) {
        next_prev656.push_front(FAIL);
      }
      continue;
    }
    i = prev[i655];
    tmp = parse_W();
    
    for(int i655=0;i655<(int)tmp.size();++i655) {
      if( tmp[i655] == FAIL ) {
        if(!( !next_prev656.empty() && next_prev656[0] == FAIL )) {
          next_prev656.push_front(FAIL);
        }
      } else {
        next_prev656.push_back(tmp[i655]);
      }
    }
  }
  prev = next_prev656;
  for(int i654=0;i654<(int)prev.size();++i654) {
    if( prev[i654] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i654]);
    }
  }
  return memo[key(91,backtracking_ptr_for_packrat91)] = result;
}

inline deque<int> parse_slash662() { 
  if(memo.count(key(92,i))) {
    return memo[key(92,i)];
  }
  int backtracking_ptr_for_packrat92=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i664=0;i664<(int)prev.size();++i664) {
        if( prev[i664] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i664]<m&&I[prev[i664]]=='n') {
          tmp.push_back(prev[i664]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i665=0;i665<(int)prev.size();++i665) {
        if( prev[i665] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i665]<m&&I[prev[i665]]=='u') {
          tmp.push_back(prev[i665]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i666=0;i666<(int)prev.size();++i666) {
        if( prev[i666] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i666]<m&&I[prev[i666]]=='l') {
          tmp.push_back(prev[i666]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i667=0;i667<(int)prev.size();++i667) {
        if( prev[i667] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i667]<m&&I[prev[i667]]=='l') {
          tmp.push_back(prev[i667]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev673;
      for(int i672=0;i672<(int)prev.size();++i672) {
        i = prev[i672];
        tmp = parse_not668();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev673.push_back(prev[i672]);
        } else {
          if(!(!next_prev673.empty()&&next_prev673.front()==FAIL)) {
            next_prev673.push_front(FAIL);
          }
        }
      }
      prev = next_prev673;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev675;
      for(int i674=0;i674<(int)prev.size();++i674) {
        if( prev[i674] == FAIL ) {
          if(!(!next_prev675.empty() && next_prev675.front() == FAIL )) {
            next_prev675.push_front(FAIL);
          }
          continue;
        }
        i = prev[i674];
        tmp = parse__();
        
        for(int i674=0;i674<(int)tmp.size();++i674) {
          if( tmp[i674] == FAIL ) {
            if(!( !next_prev675.empty() && next_prev675[0] == FAIL )) {
              next_prev675.push_front(FAIL);
            }
          } else {
            next_prev675.push_back(tmp[i674]);
          }
        }
      }
      prev = next_prev675;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i663=0;i663<(int)prev.size();++i663) {
    if( prev[i663] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i663]);
    }
  }
  return memo[key(92,backtracking_ptr_for_packrat92)] = result;
}

inline deque<int> parse_not668() { 
  if(memo.count(key(93,i))) {
    return memo[key(93,i)];
  }
  int backtracking_ptr_for_packrat93=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev671;
  for(int i670=0;i670<(int)prev.size();++i670) {
    if( prev[i670] == FAIL ) {
      if(!(!next_prev671.empty() && next_prev671.front() == FAIL )) {
        next_prev671.push_front(FAIL);
      }
      continue;
    }
    i = prev[i670];
    tmp = parse_W();
    
    for(int i670=0;i670<(int)tmp.size();++i670) {
      if( tmp[i670] == FAIL ) {
        if(!( !next_prev671.empty() && next_prev671[0] == FAIL )) {
          next_prev671.push_front(FAIL);
        }
      } else {
        next_prev671.push_back(tmp[i670]);
      }
    }
  }
  prev = next_prev671;
  for(int i669=0;i669<(int)prev.size();++i669) {
    if( prev[i669] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i669]);
    }
  }
  return memo[key(93,backtracking_ptr_for_packrat93)] = result;
}

inline deque<int> parse_slash677() { 
  if(memo.count(key(94,i))) {
    return memo[key(94,i)];
  }
  int backtracking_ptr_for_packrat94=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i679=0;i679<(int)prev.size();++i679) {
        if( prev[i679] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i679]<m&&I[prev[i679]]=='p') {
          tmp.push_back(prev[i679]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i680=0;i680<(int)prev.size();++i680) {
        if( prev[i680] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i680]<m&&I[prev[i680]]=='a') {
          tmp.push_back(prev[i680]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i681=0;i681<(int)prev.size();++i681) {
        if( prev[i681] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i681]<m&&I[prev[i681]]=='c') {
          tmp.push_back(prev[i681]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i682=0;i682<(int)prev.size();++i682) {
        if( prev[i682] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i682]<m&&I[prev[i682]]=='k') {
          tmp.push_back(prev[i682]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i683=0;i683<(int)prev.size();++i683) {
        if( prev[i683] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i683]<m&&I[prev[i683]]=='a') {
          tmp.push_back(prev[i683]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i684=0;i684<(int)prev.size();++i684) {
        if( prev[i684] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i684]<m&&I[prev[i684]]=='g') {
          tmp.push_back(prev[i684]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i685=0;i685<(int)prev.size();++i685) {
        if( prev[i685] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i685]<m&&I[prev[i685]]=='e') {
          tmp.push_back(prev[i685]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev691;
      for(int i690=0;i690<(int)prev.size();++i690) {
        i = prev[i690];
        tmp = parse_not686();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev691.push_back(prev[i690]);
        } else {
          if(!(!next_prev691.empty()&&next_prev691.front()==FAIL)) {
            next_prev691.push_front(FAIL);
          }
        }
      }
      prev = next_prev691;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev693;
      for(int i692=0;i692<(int)prev.size();++i692) {
        if( prev[i692] == FAIL ) {
          if(!(!next_prev693.empty() && next_prev693.front() == FAIL )) {
            next_prev693.push_front(FAIL);
          }
          continue;
        }
        i = prev[i692];
        tmp = parse__();
        
        for(int i692=0;i692<(int)tmp.size();++i692) {
          if( tmp[i692] == FAIL ) {
            if(!( !next_prev693.empty() && next_prev693[0] == FAIL )) {
              next_prev693.push_front(FAIL);
            }
          } else {
            next_prev693.push_back(tmp[i692]);
          }
        }
      }
      prev = next_prev693;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i678=0;i678<(int)prev.size();++i678) {
    if( prev[i678] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i678]);
    }
  }
  return memo[key(94,backtracking_ptr_for_packrat94)] = result;
}

inline deque<int> parse_not686() { 
  if(memo.count(key(95,i))) {
    return memo[key(95,i)];
  }
  int backtracking_ptr_for_packrat95=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev689;
  for(int i688=0;i688<(int)prev.size();++i688) {
    if( prev[i688] == FAIL ) {
      if(!(!next_prev689.empty() && next_prev689.front() == FAIL )) {
        next_prev689.push_front(FAIL);
      }
      continue;
    }
    i = prev[i688];
    tmp = parse_W();
    
    for(int i688=0;i688<(int)tmp.size();++i688) {
      if( tmp[i688] == FAIL ) {
        if(!( !next_prev689.empty() && next_prev689[0] == FAIL )) {
          next_prev689.push_front(FAIL);
        }
      } else {
        next_prev689.push_back(tmp[i688]);
      }
    }
  }
  prev = next_prev689;
  for(int i687=0;i687<(int)prev.size();++i687) {
    if( prev[i687] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i687]);
    }
  }
  return memo[key(95,backtracking_ptr_for_packrat95)] = result;
}

inline deque<int> parse_slash695() { 
  if(memo.count(key(96,i))) {
    return memo[key(96,i)];
  }
  int backtracking_ptr_for_packrat96=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i697=0;i697<(int)prev.size();++i697) {
        if( prev[i697] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i697]<m&&I[prev[i697]]=='p') {
          tmp.push_back(prev[i697]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i698=0;i698<(int)prev.size();++i698) {
        if( prev[i698] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i698]<m&&I[prev[i698]]=='r') {
          tmp.push_back(prev[i698]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i699=0;i699<(int)prev.size();++i699) {
        if( prev[i699] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i699]<m&&I[prev[i699]]=='i') {
          tmp.push_back(prev[i699]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i700=0;i700<(int)prev.size();++i700) {
        if( prev[i700] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i700]<m&&I[prev[i700]]=='v') {
          tmp.push_back(prev[i700]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i701=0;i701<(int)prev.size();++i701) {
        if( prev[i701] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i701]<m&&I[prev[i701]]=='a') {
          tmp.push_back(prev[i701]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i702=0;i702<(int)prev.size();++i702) {
        if( prev[i702] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i702]<m&&I[prev[i702]]=='t') {
          tmp.push_back(prev[i702]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i703=0;i703<(int)prev.size();++i703) {
        if( prev[i703] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i703]<m&&I[prev[i703]]=='e') {
          tmp.push_back(prev[i703]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev709;
      for(int i708=0;i708<(int)prev.size();++i708) {
        i = prev[i708];
        tmp = parse_not704();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev709.push_back(prev[i708]);
        } else {
          if(!(!next_prev709.empty()&&next_prev709.front()==FAIL)) {
            next_prev709.push_front(FAIL);
          }
        }
      }
      prev = next_prev709;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev711;
      for(int i710=0;i710<(int)prev.size();++i710) {
        if( prev[i710] == FAIL ) {
          if(!(!next_prev711.empty() && next_prev711.front() == FAIL )) {
            next_prev711.push_front(FAIL);
          }
          continue;
        }
        i = prev[i710];
        tmp = parse__();
        
        for(int i710=0;i710<(int)tmp.size();++i710) {
          if( tmp[i710] == FAIL ) {
            if(!( !next_prev711.empty() && next_prev711[0] == FAIL )) {
              next_prev711.push_front(FAIL);
            }
          } else {
            next_prev711.push_back(tmp[i710]);
          }
        }
      }
      prev = next_prev711;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i696=0;i696<(int)prev.size();++i696) {
    if( prev[i696] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i696]);
    }
  }
  return memo[key(96,backtracking_ptr_for_packrat96)] = result;
}

inline deque<int> parse_not704() { 
  if(memo.count(key(97,i))) {
    return memo[key(97,i)];
  }
  int backtracking_ptr_for_packrat97=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev707;
  for(int i706=0;i706<(int)prev.size();++i706) {
    if( prev[i706] == FAIL ) {
      if(!(!next_prev707.empty() && next_prev707.front() == FAIL )) {
        next_prev707.push_front(FAIL);
      }
      continue;
    }
    i = prev[i706];
    tmp = parse_W();
    
    for(int i706=0;i706<(int)tmp.size();++i706) {
      if( tmp[i706] == FAIL ) {
        if(!( !next_prev707.empty() && next_prev707[0] == FAIL )) {
          next_prev707.push_front(FAIL);
        }
      } else {
        next_prev707.push_back(tmp[i706]);
      }
    }
  }
  prev = next_prev707;
  for(int i705=0;i705<(int)prev.size();++i705) {
    if( prev[i705] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i705]);
    }
  }
  return memo[key(97,backtracking_ptr_for_packrat97)] = result;
}

inline deque<int> parse_slash713() { 
  if(memo.count(key(98,i))) {
    return memo[key(98,i)];
  }
  int backtracking_ptr_for_packrat98=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i715=0;i715<(int)prev.size();++i715) {
        if( prev[i715] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i715]<m&&I[prev[i715]]=='p') {
          tmp.push_back(prev[i715]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i716=0;i716<(int)prev.size();++i716) {
        if( prev[i716] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i716]<m&&I[prev[i716]]=='r') {
          tmp.push_back(prev[i716]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i717=0;i717<(int)prev.size();++i717) {
        if( prev[i717] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i717]<m&&I[prev[i717]]=='o') {
          tmp.push_back(prev[i717]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i718=0;i718<(int)prev.size();++i718) {
        if( prev[i718] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i718]<m&&I[prev[i718]]=='t') {
          tmp.push_back(prev[i718]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i719=0;i719<(int)prev.size();++i719) {
        if( prev[i719] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i719]<m&&I[prev[i719]]=='e') {
          tmp.push_back(prev[i719]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i720=0;i720<(int)prev.size();++i720) {
        if( prev[i720] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i720]<m&&I[prev[i720]]=='c') {
          tmp.push_back(prev[i720]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i721=0;i721<(int)prev.size();++i721) {
        if( prev[i721] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i721]<m&&I[prev[i721]]=='t') {
          tmp.push_back(prev[i721]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i722=0;i722<(int)prev.size();++i722) {
        if( prev[i722] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i722]<m&&I[prev[i722]]=='e') {
          tmp.push_back(prev[i722]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i723=0;i723<(int)prev.size();++i723) {
        if( prev[i723] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i723]<m&&I[prev[i723]]=='d') {
          tmp.push_back(prev[i723]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev729;
      for(int i728=0;i728<(int)prev.size();++i728) {
        i = prev[i728];
        tmp = parse_not724();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev729.push_back(prev[i728]);
        } else {
          if(!(!next_prev729.empty()&&next_prev729.front()==FAIL)) {
            next_prev729.push_front(FAIL);
          }
        }
      }
      prev = next_prev729;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev731;
      for(int i730=0;i730<(int)prev.size();++i730) {
        if( prev[i730] == FAIL ) {
          if(!(!next_prev731.empty() && next_prev731.front() == FAIL )) {
            next_prev731.push_front(FAIL);
          }
          continue;
        }
        i = prev[i730];
        tmp = parse__();
        
        for(int i730=0;i730<(int)tmp.size();++i730) {
          if( tmp[i730] == FAIL ) {
            if(!( !next_prev731.empty() && next_prev731[0] == FAIL )) {
              next_prev731.push_front(FAIL);
            }
          } else {
            next_prev731.push_back(tmp[i730]);
          }
        }
      }
      prev = next_prev731;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i714=0;i714<(int)prev.size();++i714) {
    if( prev[i714] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i714]);
    }
  }
  return memo[key(98,backtracking_ptr_for_packrat98)] = result;
}

inline deque<int> parse_not724() { 
  if(memo.count(key(99,i))) {
    return memo[key(99,i)];
  }
  int backtracking_ptr_for_packrat99=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev727;
  for(int i726=0;i726<(int)prev.size();++i726) {
    if( prev[i726] == FAIL ) {
      if(!(!next_prev727.empty() && next_prev727.front() == FAIL )) {
        next_prev727.push_front(FAIL);
      }
      continue;
    }
    i = prev[i726];
    tmp = parse_W();
    
    for(int i726=0;i726<(int)tmp.size();++i726) {
      if( tmp[i726] == FAIL ) {
        if(!( !next_prev727.empty() && next_prev727[0] == FAIL )) {
          next_prev727.push_front(FAIL);
        }
      } else {
        next_prev727.push_back(tmp[i726]);
      }
    }
  }
  prev = next_prev727;
  for(int i725=0;i725<(int)prev.size();++i725) {
    if( prev[i725] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i725]);
    }
  }
  return memo[key(99,backtracking_ptr_for_packrat99)] = result;
}

inline deque<int> parse_slash733() { 
  if(memo.count(key(100,i))) {
    return memo[key(100,i)];
  }
  int backtracking_ptr_for_packrat100=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i735=0;i735<(int)prev.size();++i735) {
        if( prev[i735] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i735]<m&&I[prev[i735]]=='p') {
          tmp.push_back(prev[i735]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i736=0;i736<(int)prev.size();++i736) {
        if( prev[i736] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i736]<m&&I[prev[i736]]=='u') {
          tmp.push_back(prev[i736]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i737=0;i737<(int)prev.size();++i737) {
        if( prev[i737] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i737]<m&&I[prev[i737]]=='b') {
          tmp.push_back(prev[i737]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i738=0;i738<(int)prev.size();++i738) {
        if( prev[i738] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i738]<m&&I[prev[i738]]=='l') {
          tmp.push_back(prev[i738]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i739=0;i739<(int)prev.size();++i739) {
        if( prev[i739] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i739]<m&&I[prev[i739]]=='i') {
          tmp.push_back(prev[i739]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i740=0;i740<(int)prev.size();++i740) {
        if( prev[i740] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i740]<m&&I[prev[i740]]=='c') {
          tmp.push_back(prev[i740]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev746;
      for(int i745=0;i745<(int)prev.size();++i745) {
        i = prev[i745];
        tmp = parse_not741();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev746.push_back(prev[i745]);
        } else {
          if(!(!next_prev746.empty()&&next_prev746.front()==FAIL)) {
            next_prev746.push_front(FAIL);
          }
        }
      }
      prev = next_prev746;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev748;
      for(int i747=0;i747<(int)prev.size();++i747) {
        if( prev[i747] == FAIL ) {
          if(!(!next_prev748.empty() && next_prev748.front() == FAIL )) {
            next_prev748.push_front(FAIL);
          }
          continue;
        }
        i = prev[i747];
        tmp = parse__();
        
        for(int i747=0;i747<(int)tmp.size();++i747) {
          if( tmp[i747] == FAIL ) {
            if(!( !next_prev748.empty() && next_prev748[0] == FAIL )) {
              next_prev748.push_front(FAIL);
            }
          } else {
            next_prev748.push_back(tmp[i747]);
          }
        }
      }
      prev = next_prev748;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i734=0;i734<(int)prev.size();++i734) {
    if( prev[i734] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i734]);
    }
  }
  return memo[key(100,backtracking_ptr_for_packrat100)] = result;
}

inline deque<int> parse_not741() { 
  if(memo.count(key(101,i))) {
    return memo[key(101,i)];
  }
  int backtracking_ptr_for_packrat101=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev744;
  for(int i743=0;i743<(int)prev.size();++i743) {
    if( prev[i743] == FAIL ) {
      if(!(!next_prev744.empty() && next_prev744.front() == FAIL )) {
        next_prev744.push_front(FAIL);
      }
      continue;
    }
    i = prev[i743];
    tmp = parse_W();
    
    for(int i743=0;i743<(int)tmp.size();++i743) {
      if( tmp[i743] == FAIL ) {
        if(!( !next_prev744.empty() && next_prev744[0] == FAIL )) {
          next_prev744.push_front(FAIL);
        }
      } else {
        next_prev744.push_back(tmp[i743]);
      }
    }
  }
  prev = next_prev744;
  for(int i742=0;i742<(int)prev.size();++i742) {
    if( prev[i742] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i742]);
    }
  }
  return memo[key(101,backtracking_ptr_for_packrat101)] = result;
}

inline deque<int> parse_slash750() { 
  if(memo.count(key(102,i))) {
    return memo[key(102,i)];
  }
  int backtracking_ptr_for_packrat102=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i752=0;i752<(int)prev.size();++i752) {
        if( prev[i752] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i752]<m&&I[prev[i752]]=='r') {
          tmp.push_back(prev[i752]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i753=0;i753<(int)prev.size();++i753) {
        if( prev[i753] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i753]<m&&I[prev[i753]]=='e') {
          tmp.push_back(prev[i753]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i754=0;i754<(int)prev.size();++i754) {
        if( prev[i754] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i754]<m&&I[prev[i754]]=='t') {
          tmp.push_back(prev[i754]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i755=0;i755<(int)prev.size();++i755) {
        if( prev[i755] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i755]<m&&I[prev[i755]]=='u') {
          tmp.push_back(prev[i755]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i756=0;i756<(int)prev.size();++i756) {
        if( prev[i756] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i756]<m&&I[prev[i756]]=='r') {
          tmp.push_back(prev[i756]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i757=0;i757<(int)prev.size();++i757) {
        if( prev[i757] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i757]<m&&I[prev[i757]]=='n') {
          tmp.push_back(prev[i757]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev763;
      for(int i762=0;i762<(int)prev.size();++i762) {
        i = prev[i762];
        tmp = parse_not758();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev763.push_back(prev[i762]);
        } else {
          if(!(!next_prev763.empty()&&next_prev763.front()==FAIL)) {
            next_prev763.push_front(FAIL);
          }
        }
      }
      prev = next_prev763;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev765;
      for(int i764=0;i764<(int)prev.size();++i764) {
        if( prev[i764] == FAIL ) {
          if(!(!next_prev765.empty() && next_prev765.front() == FAIL )) {
            next_prev765.push_front(FAIL);
          }
          continue;
        }
        i = prev[i764];
        tmp = parse__();
        
        for(int i764=0;i764<(int)tmp.size();++i764) {
          if( tmp[i764] == FAIL ) {
            if(!( !next_prev765.empty() && next_prev765[0] == FAIL )) {
              next_prev765.push_front(FAIL);
            }
          } else {
            next_prev765.push_back(tmp[i764]);
          }
        }
      }
      prev = next_prev765;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i751=0;i751<(int)prev.size();++i751) {
    if( prev[i751] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i751]);
    }
  }
  return memo[key(102,backtracking_ptr_for_packrat102)] = result;
}

inline deque<int> parse_not758() { 
  if(memo.count(key(103,i))) {
    return memo[key(103,i)];
  }
  int backtracking_ptr_for_packrat103=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev761;
  for(int i760=0;i760<(int)prev.size();++i760) {
    if( prev[i760] == FAIL ) {
      if(!(!next_prev761.empty() && next_prev761.front() == FAIL )) {
        next_prev761.push_front(FAIL);
      }
      continue;
    }
    i = prev[i760];
    tmp = parse_W();
    
    for(int i760=0;i760<(int)tmp.size();++i760) {
      if( tmp[i760] == FAIL ) {
        if(!( !next_prev761.empty() && next_prev761[0] == FAIL )) {
          next_prev761.push_front(FAIL);
        }
      } else {
        next_prev761.push_back(tmp[i760]);
      }
    }
  }
  prev = next_prev761;
  for(int i759=0;i759<(int)prev.size();++i759) {
    if( prev[i759] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i759]);
    }
  }
  return memo[key(103,backtracking_ptr_for_packrat103)] = result;
}

inline deque<int> parse_slash767() { 
  if(memo.count(key(104,i))) {
    return memo[key(104,i)];
  }
  int backtracking_ptr_for_packrat104=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i769=0;i769<(int)prev.size();++i769) {
        if( prev[i769] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i769]<m&&I[prev[i769]]=='s') {
          tmp.push_back(prev[i769]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i770=0;i770<(int)prev.size();++i770) {
        if( prev[i770] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i770]<m&&I[prev[i770]]=='h') {
          tmp.push_back(prev[i770]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i771=0;i771<(int)prev.size();++i771) {
        if( prev[i771] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i771]<m&&I[prev[i771]]=='o') {
          tmp.push_back(prev[i771]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i772=0;i772<(int)prev.size();++i772) {
        if( prev[i772] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i772]<m&&I[prev[i772]]=='r') {
          tmp.push_back(prev[i772]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i773=0;i773<(int)prev.size();++i773) {
        if( prev[i773] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i773]<m&&I[prev[i773]]=='t') {
          tmp.push_back(prev[i773]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev779;
      for(int i778=0;i778<(int)prev.size();++i778) {
        i = prev[i778];
        tmp = parse_not774();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev779.push_back(prev[i778]);
        } else {
          if(!(!next_prev779.empty()&&next_prev779.front()==FAIL)) {
            next_prev779.push_front(FAIL);
          }
        }
      }
      prev = next_prev779;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev781;
      for(int i780=0;i780<(int)prev.size();++i780) {
        if( prev[i780] == FAIL ) {
          if(!(!next_prev781.empty() && next_prev781.front() == FAIL )) {
            next_prev781.push_front(FAIL);
          }
          continue;
        }
        i = prev[i780];
        tmp = parse__();
        
        for(int i780=0;i780<(int)tmp.size();++i780) {
          if( tmp[i780] == FAIL ) {
            if(!( !next_prev781.empty() && next_prev781[0] == FAIL )) {
              next_prev781.push_front(FAIL);
            }
          } else {
            next_prev781.push_back(tmp[i780]);
          }
        }
      }
      prev = next_prev781;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i768=0;i768<(int)prev.size();++i768) {
    if( prev[i768] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i768]);
    }
  }
  return memo[key(104,backtracking_ptr_for_packrat104)] = result;
}

inline deque<int> parse_not774() { 
  if(memo.count(key(105,i))) {
    return memo[key(105,i)];
  }
  int backtracking_ptr_for_packrat105=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev777;
  for(int i776=0;i776<(int)prev.size();++i776) {
    if( prev[i776] == FAIL ) {
      if(!(!next_prev777.empty() && next_prev777.front() == FAIL )) {
        next_prev777.push_front(FAIL);
      }
      continue;
    }
    i = prev[i776];
    tmp = parse_W();
    
    for(int i776=0;i776<(int)tmp.size();++i776) {
      if( tmp[i776] == FAIL ) {
        if(!( !next_prev777.empty() && next_prev777[0] == FAIL )) {
          next_prev777.push_front(FAIL);
        }
      } else {
        next_prev777.push_back(tmp[i776]);
      }
    }
  }
  prev = next_prev777;
  for(int i775=0;i775<(int)prev.size();++i775) {
    if( prev[i775] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i775]);
    }
  }
  return memo[key(105,backtracking_ptr_for_packrat105)] = result;
}

inline deque<int> parse_slash783() { 
  if(memo.count(key(106,i))) {
    return memo[key(106,i)];
  }
  int backtracking_ptr_for_packrat106=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i785=0;i785<(int)prev.size();++i785) {
        if( prev[i785] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i785]<m&&I[prev[i785]]=='s') {
          tmp.push_back(prev[i785]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i786=0;i786<(int)prev.size();++i786) {
        if( prev[i786] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i786]<m&&I[prev[i786]]=='t') {
          tmp.push_back(prev[i786]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i787=0;i787<(int)prev.size();++i787) {
        if( prev[i787] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i787]<m&&I[prev[i787]]=='a') {
          tmp.push_back(prev[i787]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i788=0;i788<(int)prev.size();++i788) {
        if( prev[i788] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i788]<m&&I[prev[i788]]=='t') {
          tmp.push_back(prev[i788]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i789=0;i789<(int)prev.size();++i789) {
        if( prev[i789] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i789]<m&&I[prev[i789]]=='i') {
          tmp.push_back(prev[i789]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i790=0;i790<(int)prev.size();++i790) {
        if( prev[i790] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i790]<m&&I[prev[i790]]=='c') {
          tmp.push_back(prev[i790]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev796;
      for(int i795=0;i795<(int)prev.size();++i795) {
        i = prev[i795];
        tmp = parse_not791();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev796.push_back(prev[i795]);
        } else {
          if(!(!next_prev796.empty()&&next_prev796.front()==FAIL)) {
            next_prev796.push_front(FAIL);
          }
        }
      }
      prev = next_prev796;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev798;
      for(int i797=0;i797<(int)prev.size();++i797) {
        if( prev[i797] == FAIL ) {
          if(!(!next_prev798.empty() && next_prev798.front() == FAIL )) {
            next_prev798.push_front(FAIL);
          }
          continue;
        }
        i = prev[i797];
        tmp = parse__();
        
        for(int i797=0;i797<(int)tmp.size();++i797) {
          if( tmp[i797] == FAIL ) {
            if(!( !next_prev798.empty() && next_prev798[0] == FAIL )) {
              next_prev798.push_front(FAIL);
            }
          } else {
            next_prev798.push_back(tmp[i797]);
          }
        }
      }
      prev = next_prev798;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i784=0;i784<(int)prev.size();++i784) {
    if( prev[i784] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i784]);
    }
  }
  return memo[key(106,backtracking_ptr_for_packrat106)] = result;
}

inline deque<int> parse_not791() { 
  if(memo.count(key(107,i))) {
    return memo[key(107,i)];
  }
  int backtracking_ptr_for_packrat107=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev794;
  for(int i793=0;i793<(int)prev.size();++i793) {
    if( prev[i793] == FAIL ) {
      if(!(!next_prev794.empty() && next_prev794.front() == FAIL )) {
        next_prev794.push_front(FAIL);
      }
      continue;
    }
    i = prev[i793];
    tmp = parse_W();
    
    for(int i793=0;i793<(int)tmp.size();++i793) {
      if( tmp[i793] == FAIL ) {
        if(!( !next_prev794.empty() && next_prev794[0] == FAIL )) {
          next_prev794.push_front(FAIL);
        }
      } else {
        next_prev794.push_back(tmp[i793]);
      }
    }
  }
  prev = next_prev794;
  for(int i792=0;i792<(int)prev.size();++i792) {
    if( prev[i792] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i792]);
    }
  }
  return memo[key(107,backtracking_ptr_for_packrat107)] = result;
}

inline deque<int> parse_slash800() { 
  if(memo.count(key(108,i))) {
    return memo[key(108,i)];
  }
  int backtracking_ptr_for_packrat108=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i802=0;i802<(int)prev.size();++i802) {
        if( prev[i802] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i802]<m&&I[prev[i802]]=='s') {
          tmp.push_back(prev[i802]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i803=0;i803<(int)prev.size();++i803) {
        if( prev[i803] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i803]<m&&I[prev[i803]]=='t') {
          tmp.push_back(prev[i803]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i804=0;i804<(int)prev.size();++i804) {
        if( prev[i804] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i804]<m&&I[prev[i804]]=='r') {
          tmp.push_back(prev[i804]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i805=0;i805<(int)prev.size();++i805) {
        if( prev[i805] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i805]<m&&I[prev[i805]]=='i') {
          tmp.push_back(prev[i805]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i806=0;i806<(int)prev.size();++i806) {
        if( prev[i806] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i806]<m&&I[prev[i806]]=='c') {
          tmp.push_back(prev[i806]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i807=0;i807<(int)prev.size();++i807) {
        if( prev[i807] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i807]<m&&I[prev[i807]]=='t') {
          tmp.push_back(prev[i807]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i808=0;i808<(int)prev.size();++i808) {
        if( prev[i808] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i808]<m&&I[prev[i808]]=='f') {
          tmp.push_back(prev[i808]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i809=0;i809<(int)prev.size();++i809) {
        if( prev[i809] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i809]<m&&I[prev[i809]]=='p') {
          tmp.push_back(prev[i809]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev815;
      for(int i814=0;i814<(int)prev.size();++i814) {
        i = prev[i814];
        tmp = parse_not810();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev815.push_back(prev[i814]);
        } else {
          if(!(!next_prev815.empty()&&next_prev815.front()==FAIL)) {
            next_prev815.push_front(FAIL);
          }
        }
      }
      prev = next_prev815;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev817;
      for(int i816=0;i816<(int)prev.size();++i816) {
        if( prev[i816] == FAIL ) {
          if(!(!next_prev817.empty() && next_prev817.front() == FAIL )) {
            next_prev817.push_front(FAIL);
          }
          continue;
        }
        i = prev[i816];
        tmp = parse__();
        
        for(int i816=0;i816<(int)tmp.size();++i816) {
          if( tmp[i816] == FAIL ) {
            if(!( !next_prev817.empty() && next_prev817[0] == FAIL )) {
              next_prev817.push_front(FAIL);
            }
          } else {
            next_prev817.push_back(tmp[i816]);
          }
        }
      }
      prev = next_prev817;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i801=0;i801<(int)prev.size();++i801) {
    if( prev[i801] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i801]);
    }
  }
  return memo[key(108,backtracking_ptr_for_packrat108)] = result;
}

inline deque<int> parse_not810() { 
  if(memo.count(key(109,i))) {
    return memo[key(109,i)];
  }
  int backtracking_ptr_for_packrat109=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev813;
  for(int i812=0;i812<(int)prev.size();++i812) {
    if( prev[i812] == FAIL ) {
      if(!(!next_prev813.empty() && next_prev813.front() == FAIL )) {
        next_prev813.push_front(FAIL);
      }
      continue;
    }
    i = prev[i812];
    tmp = parse_W();
    
    for(int i812=0;i812<(int)tmp.size();++i812) {
      if( tmp[i812] == FAIL ) {
        if(!( !next_prev813.empty() && next_prev813[0] == FAIL )) {
          next_prev813.push_front(FAIL);
        }
      } else {
        next_prev813.push_back(tmp[i812]);
      }
    }
  }
  prev = next_prev813;
  for(int i811=0;i811<(int)prev.size();++i811) {
    if( prev[i811] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i811]);
    }
  }
  return memo[key(109,backtracking_ptr_for_packrat109)] = result;
}

inline deque<int> parse_slash819() { 
  if(memo.count(key(110,i))) {
    return memo[key(110,i)];
  }
  int backtracking_ptr_for_packrat110=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i821=0;i821<(int)prev.size();++i821) {
        if( prev[i821] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i821]<m&&I[prev[i821]]=='s') {
          tmp.push_back(prev[i821]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i822=0;i822<(int)prev.size();++i822) {
        if( prev[i822] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i822]<m&&I[prev[i822]]=='u') {
          tmp.push_back(prev[i822]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i823=0;i823<(int)prev.size();++i823) {
        if( prev[i823] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i823]<m&&I[prev[i823]]=='p') {
          tmp.push_back(prev[i823]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i824=0;i824<(int)prev.size();++i824) {
        if( prev[i824] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i824]<m&&I[prev[i824]]=='e') {
          tmp.push_back(prev[i824]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i825=0;i825<(int)prev.size();++i825) {
        if( prev[i825] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i825]<m&&I[prev[i825]]=='r') {
          tmp.push_back(prev[i825]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev831;
      for(int i830=0;i830<(int)prev.size();++i830) {
        i = prev[i830];
        tmp = parse_not826();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev831.push_back(prev[i830]);
        } else {
          if(!(!next_prev831.empty()&&next_prev831.front()==FAIL)) {
            next_prev831.push_front(FAIL);
          }
        }
      }
      prev = next_prev831;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev833;
      for(int i832=0;i832<(int)prev.size();++i832) {
        if( prev[i832] == FAIL ) {
          if(!(!next_prev833.empty() && next_prev833.front() == FAIL )) {
            next_prev833.push_front(FAIL);
          }
          continue;
        }
        i = prev[i832];
        tmp = parse__();
        
        for(int i832=0;i832<(int)tmp.size();++i832) {
          if( tmp[i832] == FAIL ) {
            if(!( !next_prev833.empty() && next_prev833[0] == FAIL )) {
              next_prev833.push_front(FAIL);
            }
          } else {
            next_prev833.push_back(tmp[i832]);
          }
        }
      }
      prev = next_prev833;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i820=0;i820<(int)prev.size();++i820) {
    if( prev[i820] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i820]);
    }
  }
  return memo[key(110,backtracking_ptr_for_packrat110)] = result;
}

inline deque<int> parse_not826() { 
  if(memo.count(key(111,i))) {
    return memo[key(111,i)];
  }
  int backtracking_ptr_for_packrat111=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev829;
  for(int i828=0;i828<(int)prev.size();++i828) {
    if( prev[i828] == FAIL ) {
      if(!(!next_prev829.empty() && next_prev829.front() == FAIL )) {
        next_prev829.push_front(FAIL);
      }
      continue;
    }
    i = prev[i828];
    tmp = parse_W();
    
    for(int i828=0;i828<(int)tmp.size();++i828) {
      if( tmp[i828] == FAIL ) {
        if(!( !next_prev829.empty() && next_prev829[0] == FAIL )) {
          next_prev829.push_front(FAIL);
        }
      } else {
        next_prev829.push_back(tmp[i828]);
      }
    }
  }
  prev = next_prev829;
  for(int i827=0;i827<(int)prev.size();++i827) {
    if( prev[i827] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i827]);
    }
  }
  return memo[key(111,backtracking_ptr_for_packrat111)] = result;
}

inline deque<int> parse_slash835() { 
  if(memo.count(key(112,i))) {
    return memo[key(112,i)];
  }
  int backtracking_ptr_for_packrat112=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i837=0;i837<(int)prev.size();++i837) {
        if( prev[i837] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i837]<m&&I[prev[i837]]=='s') {
          tmp.push_back(prev[i837]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i838=0;i838<(int)prev.size();++i838) {
        if( prev[i838] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i838]<m&&I[prev[i838]]=='w') {
          tmp.push_back(prev[i838]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i839=0;i839<(int)prev.size();++i839) {
        if( prev[i839] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i839]<m&&I[prev[i839]]=='i') {
          tmp.push_back(prev[i839]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i840=0;i840<(int)prev.size();++i840) {
        if( prev[i840] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i840]<m&&I[prev[i840]]=='t') {
          tmp.push_back(prev[i840]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i841=0;i841<(int)prev.size();++i841) {
        if( prev[i841] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i841]<m&&I[prev[i841]]=='c') {
          tmp.push_back(prev[i841]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i842=0;i842<(int)prev.size();++i842) {
        if( prev[i842] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i842]<m&&I[prev[i842]]=='h') {
          tmp.push_back(prev[i842]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev848;
      for(int i847=0;i847<(int)prev.size();++i847) {
        i = prev[i847];
        tmp = parse_not843();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev848.push_back(prev[i847]);
        } else {
          if(!(!next_prev848.empty()&&next_prev848.front()==FAIL)) {
            next_prev848.push_front(FAIL);
          }
        }
      }
      prev = next_prev848;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev850;
      for(int i849=0;i849<(int)prev.size();++i849) {
        if( prev[i849] == FAIL ) {
          if(!(!next_prev850.empty() && next_prev850.front() == FAIL )) {
            next_prev850.push_front(FAIL);
          }
          continue;
        }
        i = prev[i849];
        tmp = parse__();
        
        for(int i849=0;i849<(int)tmp.size();++i849) {
          if( tmp[i849] == FAIL ) {
            if(!( !next_prev850.empty() && next_prev850[0] == FAIL )) {
              next_prev850.push_front(FAIL);
            }
          } else {
            next_prev850.push_back(tmp[i849]);
          }
        }
      }
      prev = next_prev850;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i836=0;i836<(int)prev.size();++i836) {
    if( prev[i836] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i836]);
    }
  }
  return memo[key(112,backtracking_ptr_for_packrat112)] = result;
}

inline deque<int> parse_not843() { 
  if(memo.count(key(113,i))) {
    return memo[key(113,i)];
  }
  int backtracking_ptr_for_packrat113=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev846;
  for(int i845=0;i845<(int)prev.size();++i845) {
    if( prev[i845] == FAIL ) {
      if(!(!next_prev846.empty() && next_prev846.front() == FAIL )) {
        next_prev846.push_front(FAIL);
      }
      continue;
    }
    i = prev[i845];
    tmp = parse_W();
    
    for(int i845=0;i845<(int)tmp.size();++i845) {
      if( tmp[i845] == FAIL ) {
        if(!( !next_prev846.empty() && next_prev846[0] == FAIL )) {
          next_prev846.push_front(FAIL);
        }
      } else {
        next_prev846.push_back(tmp[i845]);
      }
    }
  }
  prev = next_prev846;
  for(int i844=0;i844<(int)prev.size();++i844) {
    if( prev[i844] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i844]);
    }
  }
  return memo[key(113,backtracking_ptr_for_packrat113)] = result;
}

inline deque<int> parse_slash852() { 
  if(memo.count(key(114,i))) {
    return memo[key(114,i)];
  }
  int backtracking_ptr_for_packrat114=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i854=0;i854<(int)prev.size();++i854) {
        if( prev[i854] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i854]<m&&I[prev[i854]]=='s') {
          tmp.push_back(prev[i854]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i855=0;i855<(int)prev.size();++i855) {
        if( prev[i855] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i855]<m&&I[prev[i855]]=='y') {
          tmp.push_back(prev[i855]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i856=0;i856<(int)prev.size();++i856) {
        if( prev[i856] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i856]<m&&I[prev[i856]]=='n') {
          tmp.push_back(prev[i856]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i857=0;i857<(int)prev.size();++i857) {
        if( prev[i857] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i857]<m&&I[prev[i857]]=='c') {
          tmp.push_back(prev[i857]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i858=0;i858<(int)prev.size();++i858) {
        if( prev[i858] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i858]<m&&I[prev[i858]]=='h') {
          tmp.push_back(prev[i858]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i859=0;i859<(int)prev.size();++i859) {
        if( prev[i859] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i859]<m&&I[prev[i859]]=='r') {
          tmp.push_back(prev[i859]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i860=0;i860<(int)prev.size();++i860) {
        if( prev[i860] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i860]<m&&I[prev[i860]]=='o') {
          tmp.push_back(prev[i860]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i861=0;i861<(int)prev.size();++i861) {
        if( prev[i861] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i861]<m&&I[prev[i861]]=='n') {
          tmp.push_back(prev[i861]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i862=0;i862<(int)prev.size();++i862) {
        if( prev[i862] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i862]<m&&I[prev[i862]]=='i') {
          tmp.push_back(prev[i862]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i863=0;i863<(int)prev.size();++i863) {
        if( prev[i863] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i863]<m&&I[prev[i863]]=='z') {
          tmp.push_back(prev[i863]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i864=0;i864<(int)prev.size();++i864) {
        if( prev[i864] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i864]<m&&I[prev[i864]]=='e') {
          tmp.push_back(prev[i864]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i865=0;i865<(int)prev.size();++i865) {
        if( prev[i865] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i865]<m&&I[prev[i865]]=='d') {
          tmp.push_back(prev[i865]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev871;
      for(int i870=0;i870<(int)prev.size();++i870) {
        i = prev[i870];
        tmp = parse_not866();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev871.push_back(prev[i870]);
        } else {
          if(!(!next_prev871.empty()&&next_prev871.front()==FAIL)) {
            next_prev871.push_front(FAIL);
          }
        }
      }
      prev = next_prev871;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev873;
      for(int i872=0;i872<(int)prev.size();++i872) {
        if( prev[i872] == FAIL ) {
          if(!(!next_prev873.empty() && next_prev873.front() == FAIL )) {
            next_prev873.push_front(FAIL);
          }
          continue;
        }
        i = prev[i872];
        tmp = parse__();
        
        for(int i872=0;i872<(int)tmp.size();++i872) {
          if( tmp[i872] == FAIL ) {
            if(!( !next_prev873.empty() && next_prev873[0] == FAIL )) {
              next_prev873.push_front(FAIL);
            }
          } else {
            next_prev873.push_back(tmp[i872]);
          }
        }
      }
      prev = next_prev873;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i853=0;i853<(int)prev.size();++i853) {
    if( prev[i853] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i853]);
    }
  }
  return memo[key(114,backtracking_ptr_for_packrat114)] = result;
}

inline deque<int> parse_not866() { 
  if(memo.count(key(115,i))) {
    return memo[key(115,i)];
  }
  int backtracking_ptr_for_packrat115=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev869;
  for(int i868=0;i868<(int)prev.size();++i868) {
    if( prev[i868] == FAIL ) {
      if(!(!next_prev869.empty() && next_prev869.front() == FAIL )) {
        next_prev869.push_front(FAIL);
      }
      continue;
    }
    i = prev[i868];
    tmp = parse_W();
    
    for(int i868=0;i868<(int)tmp.size();++i868) {
      if( tmp[i868] == FAIL ) {
        if(!( !next_prev869.empty() && next_prev869[0] == FAIL )) {
          next_prev869.push_front(FAIL);
        }
      } else {
        next_prev869.push_back(tmp[i868]);
      }
    }
  }
  prev = next_prev869;
  for(int i867=0;i867<(int)prev.size();++i867) {
    if( prev[i867] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i867]);
    }
  }
  return memo[key(115,backtracking_ptr_for_packrat115)] = result;
}

inline deque<int> parse_slash875() { 
  if(memo.count(key(116,i))) {
    return memo[key(116,i)];
  }
  int backtracking_ptr_for_packrat116=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i877=0;i877<(int)prev.size();++i877) {
        if( prev[i877] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i877]<m&&I[prev[i877]]=='t') {
          tmp.push_back(prev[i877]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i878=0;i878<(int)prev.size();++i878) {
        if( prev[i878] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i878]<m&&I[prev[i878]]=='h') {
          tmp.push_back(prev[i878]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i879=0;i879<(int)prev.size();++i879) {
        if( prev[i879] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i879]<m&&I[prev[i879]]=='i') {
          tmp.push_back(prev[i879]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i880=0;i880<(int)prev.size();++i880) {
        if( prev[i880] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i880]<m&&I[prev[i880]]=='s') {
          tmp.push_back(prev[i880]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev886;
      for(int i885=0;i885<(int)prev.size();++i885) {
        i = prev[i885];
        tmp = parse_not881();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev886.push_back(prev[i885]);
        } else {
          if(!(!next_prev886.empty()&&next_prev886.front()==FAIL)) {
            next_prev886.push_front(FAIL);
          }
        }
      }
      prev = next_prev886;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev888;
      for(int i887=0;i887<(int)prev.size();++i887) {
        if( prev[i887] == FAIL ) {
          if(!(!next_prev888.empty() && next_prev888.front() == FAIL )) {
            next_prev888.push_front(FAIL);
          }
          continue;
        }
        i = prev[i887];
        tmp = parse__();
        
        for(int i887=0;i887<(int)tmp.size();++i887) {
          if( tmp[i887] == FAIL ) {
            if(!( !next_prev888.empty() && next_prev888[0] == FAIL )) {
              next_prev888.push_front(FAIL);
            }
          } else {
            next_prev888.push_back(tmp[i887]);
          }
        }
      }
      prev = next_prev888;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i876=0;i876<(int)prev.size();++i876) {
    if( prev[i876] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i876]);
    }
  }
  return memo[key(116,backtracking_ptr_for_packrat116)] = result;
}

inline deque<int> parse_not881() { 
  if(memo.count(key(117,i))) {
    return memo[key(117,i)];
  }
  int backtracking_ptr_for_packrat117=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev884;
  for(int i883=0;i883<(int)prev.size();++i883) {
    if( prev[i883] == FAIL ) {
      if(!(!next_prev884.empty() && next_prev884.front() == FAIL )) {
        next_prev884.push_front(FAIL);
      }
      continue;
    }
    i = prev[i883];
    tmp = parse_W();
    
    for(int i883=0;i883<(int)tmp.size();++i883) {
      if( tmp[i883] == FAIL ) {
        if(!( !next_prev884.empty() && next_prev884[0] == FAIL )) {
          next_prev884.push_front(FAIL);
        }
      } else {
        next_prev884.push_back(tmp[i883]);
      }
    }
  }
  prev = next_prev884;
  for(int i882=0;i882<(int)prev.size();++i882) {
    if( prev[i882] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i882]);
    }
  }
  return memo[key(117,backtracking_ptr_for_packrat117)] = result;
}

inline deque<int> parse_slash890() { 
  if(memo.count(key(118,i))) {
    return memo[key(118,i)];
  }
  int backtracking_ptr_for_packrat118=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i892=0;i892<(int)prev.size();++i892) {
        if( prev[i892] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i892]<m&&I[prev[i892]]=='t') {
          tmp.push_back(prev[i892]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i893=0;i893<(int)prev.size();++i893) {
        if( prev[i893] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i893]<m&&I[prev[i893]]=='h') {
          tmp.push_back(prev[i893]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i894=0;i894<(int)prev.size();++i894) {
        if( prev[i894] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i894]<m&&I[prev[i894]]=='r') {
          tmp.push_back(prev[i894]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i895=0;i895<(int)prev.size();++i895) {
        if( prev[i895] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i895]<m&&I[prev[i895]]=='o') {
          tmp.push_back(prev[i895]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i896=0;i896<(int)prev.size();++i896) {
        if( prev[i896] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i896]<m&&I[prev[i896]]=='w') {
          tmp.push_back(prev[i896]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i897=0;i897<(int)prev.size();++i897) {
        if( prev[i897] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i897]<m&&I[prev[i897]]=='s') {
          tmp.push_back(prev[i897]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev903;
      for(int i902=0;i902<(int)prev.size();++i902) {
        i = prev[i902];
        tmp = parse_not898();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev903.push_back(prev[i902]);
        } else {
          if(!(!next_prev903.empty()&&next_prev903.front()==FAIL)) {
            next_prev903.push_front(FAIL);
          }
        }
      }
      prev = next_prev903;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev905;
      for(int i904=0;i904<(int)prev.size();++i904) {
        if( prev[i904] == FAIL ) {
          if(!(!next_prev905.empty() && next_prev905.front() == FAIL )) {
            next_prev905.push_front(FAIL);
          }
          continue;
        }
        i = prev[i904];
        tmp = parse__();
        
        for(int i904=0;i904<(int)tmp.size();++i904) {
          if( tmp[i904] == FAIL ) {
            if(!( !next_prev905.empty() && next_prev905[0] == FAIL )) {
              next_prev905.push_front(FAIL);
            }
          } else {
            next_prev905.push_back(tmp[i904]);
          }
        }
      }
      prev = next_prev905;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i891=0;i891<(int)prev.size();++i891) {
    if( prev[i891] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i891]);
    }
  }
  return memo[key(118,backtracking_ptr_for_packrat118)] = result;
}

inline deque<int> parse_not898() { 
  if(memo.count(key(119,i))) {
    return memo[key(119,i)];
  }
  int backtracking_ptr_for_packrat119=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev901;
  for(int i900=0;i900<(int)prev.size();++i900) {
    if( prev[i900] == FAIL ) {
      if(!(!next_prev901.empty() && next_prev901.front() == FAIL )) {
        next_prev901.push_front(FAIL);
      }
      continue;
    }
    i = prev[i900];
    tmp = parse_W();
    
    for(int i900=0;i900<(int)tmp.size();++i900) {
      if( tmp[i900] == FAIL ) {
        if(!( !next_prev901.empty() && next_prev901[0] == FAIL )) {
          next_prev901.push_front(FAIL);
        }
      } else {
        next_prev901.push_back(tmp[i900]);
      }
    }
  }
  prev = next_prev901;
  for(int i899=0;i899<(int)prev.size();++i899) {
    if( prev[i899] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i899]);
    }
  }
  return memo[key(119,backtracking_ptr_for_packrat119)] = result;
}

inline deque<int> parse_slash907() { 
  if(memo.count(key(120,i))) {
    return memo[key(120,i)];
  }
  int backtracking_ptr_for_packrat120=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i909=0;i909<(int)prev.size();++i909) {
        if( prev[i909] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i909]<m&&I[prev[i909]]=='t') {
          tmp.push_back(prev[i909]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i910=0;i910<(int)prev.size();++i910) {
        if( prev[i910] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i910]<m&&I[prev[i910]]=='h') {
          tmp.push_back(prev[i910]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i911=0;i911<(int)prev.size();++i911) {
        if( prev[i911] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i911]<m&&I[prev[i911]]=='r') {
          tmp.push_back(prev[i911]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i912=0;i912<(int)prev.size();++i912) {
        if( prev[i912] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i912]<m&&I[prev[i912]]=='o') {
          tmp.push_back(prev[i912]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i913=0;i913<(int)prev.size();++i913) {
        if( prev[i913] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i913]<m&&I[prev[i913]]=='w') {
          tmp.push_back(prev[i913]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev919;
      for(int i918=0;i918<(int)prev.size();++i918) {
        i = prev[i918];
        tmp = parse_not914();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev919.push_back(prev[i918]);
        } else {
          if(!(!next_prev919.empty()&&next_prev919.front()==FAIL)) {
            next_prev919.push_front(FAIL);
          }
        }
      }
      prev = next_prev919;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev921;
      for(int i920=0;i920<(int)prev.size();++i920) {
        if( prev[i920] == FAIL ) {
          if(!(!next_prev921.empty() && next_prev921.front() == FAIL )) {
            next_prev921.push_front(FAIL);
          }
          continue;
        }
        i = prev[i920];
        tmp = parse__();
        
        for(int i920=0;i920<(int)tmp.size();++i920) {
          if( tmp[i920] == FAIL ) {
            if(!( !next_prev921.empty() && next_prev921[0] == FAIL )) {
              next_prev921.push_front(FAIL);
            }
          } else {
            next_prev921.push_back(tmp[i920]);
          }
        }
      }
      prev = next_prev921;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i908=0;i908<(int)prev.size();++i908) {
    if( prev[i908] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i908]);
    }
  }
  return memo[key(120,backtracking_ptr_for_packrat120)] = result;
}

inline deque<int> parse_not914() { 
  if(memo.count(key(121,i))) {
    return memo[key(121,i)];
  }
  int backtracking_ptr_for_packrat121=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev917;
  for(int i916=0;i916<(int)prev.size();++i916) {
    if( prev[i916] == FAIL ) {
      if(!(!next_prev917.empty() && next_prev917.front() == FAIL )) {
        next_prev917.push_front(FAIL);
      }
      continue;
    }
    i = prev[i916];
    tmp = parse_W();
    
    for(int i916=0;i916<(int)tmp.size();++i916) {
      if( tmp[i916] == FAIL ) {
        if(!( !next_prev917.empty() && next_prev917[0] == FAIL )) {
          next_prev917.push_front(FAIL);
        }
      } else {
        next_prev917.push_back(tmp[i916]);
      }
    }
  }
  prev = next_prev917;
  for(int i915=0;i915<(int)prev.size();++i915) {
    if( prev[i915] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i915]);
    }
  }
  return memo[key(121,backtracking_ptr_for_packrat121)] = result;
}

inline deque<int> parse_slash923() { 
  if(memo.count(key(122,i))) {
    return memo[key(122,i)];
  }
  int backtracking_ptr_for_packrat122=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i925=0;i925<(int)prev.size();++i925) {
        if( prev[i925] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i925]<m&&I[prev[i925]]=='t') {
          tmp.push_back(prev[i925]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i926=0;i926<(int)prev.size();++i926) {
        if( prev[i926] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i926]<m&&I[prev[i926]]=='r') {
          tmp.push_back(prev[i926]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i927=0;i927<(int)prev.size();++i927) {
        if( prev[i927] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i927]<m&&I[prev[i927]]=='a') {
          tmp.push_back(prev[i927]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i928=0;i928<(int)prev.size();++i928) {
        if( prev[i928] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i928]<m&&I[prev[i928]]=='n') {
          tmp.push_back(prev[i928]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i929=0;i929<(int)prev.size();++i929) {
        if( prev[i929] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i929]<m&&I[prev[i929]]=='s') {
          tmp.push_back(prev[i929]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i930=0;i930<(int)prev.size();++i930) {
        if( prev[i930] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i930]<m&&I[prev[i930]]=='i') {
          tmp.push_back(prev[i930]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i931=0;i931<(int)prev.size();++i931) {
        if( prev[i931] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i931]<m&&I[prev[i931]]=='e') {
          tmp.push_back(prev[i931]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i932=0;i932<(int)prev.size();++i932) {
        if( prev[i932] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i932]<m&&I[prev[i932]]=='n') {
          tmp.push_back(prev[i932]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i933=0;i933<(int)prev.size();++i933) {
        if( prev[i933] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i933]<m&&I[prev[i933]]=='t') {
          tmp.push_back(prev[i933]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev939;
      for(int i938=0;i938<(int)prev.size();++i938) {
        i = prev[i938];
        tmp = parse_not934();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev939.push_back(prev[i938]);
        } else {
          if(!(!next_prev939.empty()&&next_prev939.front()==FAIL)) {
            next_prev939.push_front(FAIL);
          }
        }
      }
      prev = next_prev939;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev941;
      for(int i940=0;i940<(int)prev.size();++i940) {
        if( prev[i940] == FAIL ) {
          if(!(!next_prev941.empty() && next_prev941.front() == FAIL )) {
            next_prev941.push_front(FAIL);
          }
          continue;
        }
        i = prev[i940];
        tmp = parse__();
        
        for(int i940=0;i940<(int)tmp.size();++i940) {
          if( tmp[i940] == FAIL ) {
            if(!( !next_prev941.empty() && next_prev941[0] == FAIL )) {
              next_prev941.push_front(FAIL);
            }
          } else {
            next_prev941.push_back(tmp[i940]);
          }
        }
      }
      prev = next_prev941;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i924=0;i924<(int)prev.size();++i924) {
    if( prev[i924] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i924]);
    }
  }
  return memo[key(122,backtracking_ptr_for_packrat122)] = result;
}

inline deque<int> parse_not934() { 
  if(memo.count(key(123,i))) {
    return memo[key(123,i)];
  }
  int backtracking_ptr_for_packrat123=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev937;
  for(int i936=0;i936<(int)prev.size();++i936) {
    if( prev[i936] == FAIL ) {
      if(!(!next_prev937.empty() && next_prev937.front() == FAIL )) {
        next_prev937.push_front(FAIL);
      }
      continue;
    }
    i = prev[i936];
    tmp = parse_W();
    
    for(int i936=0;i936<(int)tmp.size();++i936) {
      if( tmp[i936] == FAIL ) {
        if(!( !next_prev937.empty() && next_prev937[0] == FAIL )) {
          next_prev937.push_front(FAIL);
        }
      } else {
        next_prev937.push_back(tmp[i936]);
      }
    }
  }
  prev = next_prev937;
  for(int i935=0;i935<(int)prev.size();++i935) {
    if( prev[i935] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i935]);
    }
  }
  return memo[key(123,backtracking_ptr_for_packrat123)] = result;
}

inline deque<int> parse_slash943() { 
  if(memo.count(key(124,i))) {
    return memo[key(124,i)];
  }
  int backtracking_ptr_for_packrat124=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i945=0;i945<(int)prev.size();++i945) {
        if( prev[i945] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i945]<m&&I[prev[i945]]=='t') {
          tmp.push_back(prev[i945]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i946=0;i946<(int)prev.size();++i946) {
        if( prev[i946] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i946]<m&&I[prev[i946]]=='r') {
          tmp.push_back(prev[i946]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i947=0;i947<(int)prev.size();++i947) {
        if( prev[i947] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i947]<m&&I[prev[i947]]=='u') {
          tmp.push_back(prev[i947]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i948=0;i948<(int)prev.size();++i948) {
        if( prev[i948] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i948]<m&&I[prev[i948]]=='e') {
          tmp.push_back(prev[i948]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev954;
      for(int i953=0;i953<(int)prev.size();++i953) {
        i = prev[i953];
        tmp = parse_not949();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev954.push_back(prev[i953]);
        } else {
          if(!(!next_prev954.empty()&&next_prev954.front()==FAIL)) {
            next_prev954.push_front(FAIL);
          }
        }
      }
      prev = next_prev954;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev956;
      for(int i955=0;i955<(int)prev.size();++i955) {
        if( prev[i955] == FAIL ) {
          if(!(!next_prev956.empty() && next_prev956.front() == FAIL )) {
            next_prev956.push_front(FAIL);
          }
          continue;
        }
        i = prev[i955];
        tmp = parse__();
        
        for(int i955=0;i955<(int)tmp.size();++i955) {
          if( tmp[i955] == FAIL ) {
            if(!( !next_prev956.empty() && next_prev956[0] == FAIL )) {
              next_prev956.push_front(FAIL);
            }
          } else {
            next_prev956.push_back(tmp[i955]);
          }
        }
      }
      prev = next_prev956;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i944=0;i944<(int)prev.size();++i944) {
    if( prev[i944] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i944]);
    }
  }
  return memo[key(124,backtracking_ptr_for_packrat124)] = result;
}

inline deque<int> parse_not949() { 
  if(memo.count(key(125,i))) {
    return memo[key(125,i)];
  }
  int backtracking_ptr_for_packrat125=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev952;
  for(int i951=0;i951<(int)prev.size();++i951) {
    if( prev[i951] == FAIL ) {
      if(!(!next_prev952.empty() && next_prev952.front() == FAIL )) {
        next_prev952.push_front(FAIL);
      }
      continue;
    }
    i = prev[i951];
    tmp = parse_W();
    
    for(int i951=0;i951<(int)tmp.size();++i951) {
      if( tmp[i951] == FAIL ) {
        if(!( !next_prev952.empty() && next_prev952[0] == FAIL )) {
          next_prev952.push_front(FAIL);
        }
      } else {
        next_prev952.push_back(tmp[i951]);
      }
    }
  }
  prev = next_prev952;
  for(int i950=0;i950<(int)prev.size();++i950) {
    if( prev[i950] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i950]);
    }
  }
  return memo[key(125,backtracking_ptr_for_packrat125)] = result;
}

inline deque<int> parse_slash958() { 
  if(memo.count(key(126,i))) {
    return memo[key(126,i)];
  }
  int backtracking_ptr_for_packrat126=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i960=0;i960<(int)prev.size();++i960) {
        if( prev[i960] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i960]<m&&I[prev[i960]]=='t') {
          tmp.push_back(prev[i960]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i961=0;i961<(int)prev.size();++i961) {
        if( prev[i961] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i961]<m&&I[prev[i961]]=='r') {
          tmp.push_back(prev[i961]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i962=0;i962<(int)prev.size();++i962) {
        if( prev[i962] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i962]<m&&I[prev[i962]]=='y') {
          tmp.push_back(prev[i962]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev968;
      for(int i967=0;i967<(int)prev.size();++i967) {
        i = prev[i967];
        tmp = parse_not963();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev968.push_back(prev[i967]);
        } else {
          if(!(!next_prev968.empty()&&next_prev968.front()==FAIL)) {
            next_prev968.push_front(FAIL);
          }
        }
      }
      prev = next_prev968;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev970;
      for(int i969=0;i969<(int)prev.size();++i969) {
        if( prev[i969] == FAIL ) {
          if(!(!next_prev970.empty() && next_prev970.front() == FAIL )) {
            next_prev970.push_front(FAIL);
          }
          continue;
        }
        i = prev[i969];
        tmp = parse__();
        
        for(int i969=0;i969<(int)tmp.size();++i969) {
          if( tmp[i969] == FAIL ) {
            if(!( !next_prev970.empty() && next_prev970[0] == FAIL )) {
              next_prev970.push_front(FAIL);
            }
          } else {
            next_prev970.push_back(tmp[i969]);
          }
        }
      }
      prev = next_prev970;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i959=0;i959<(int)prev.size();++i959) {
    if( prev[i959] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i959]);
    }
  }
  return memo[key(126,backtracking_ptr_for_packrat126)] = result;
}

inline deque<int> parse_not963() { 
  if(memo.count(key(127,i))) {
    return memo[key(127,i)];
  }
  int backtracking_ptr_for_packrat127=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev966;
  for(int i965=0;i965<(int)prev.size();++i965) {
    if( prev[i965] == FAIL ) {
      if(!(!next_prev966.empty() && next_prev966.front() == FAIL )) {
        next_prev966.push_front(FAIL);
      }
      continue;
    }
    i = prev[i965];
    tmp = parse_W();
    
    for(int i965=0;i965<(int)tmp.size();++i965) {
      if( tmp[i965] == FAIL ) {
        if(!( !next_prev966.empty() && next_prev966[0] == FAIL )) {
          next_prev966.push_front(FAIL);
        }
      } else {
        next_prev966.push_back(tmp[i965]);
      }
    }
  }
  prev = next_prev966;
  for(int i964=0;i964<(int)prev.size();++i964) {
    if( prev[i964] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i964]);
    }
  }
  return memo[key(127,backtracking_ptr_for_packrat127)] = result;
}

inline deque<int> parse_slash972() { 
  if(memo.count(key(128,i))) {
    return memo[key(128,i)];
  }
  int backtracking_ptr_for_packrat128=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i974=0;i974<(int)prev.size();++i974) {
        if( prev[i974] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i974]<m&&I[prev[i974]]=='v') {
          tmp.push_back(prev[i974]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i975=0;i975<(int)prev.size();++i975) {
        if( prev[i975] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i975]<m&&I[prev[i975]]=='o') {
          tmp.push_back(prev[i975]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i976=0;i976<(int)prev.size();++i976) {
        if( prev[i976] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i976]<m&&I[prev[i976]]=='i') {
          tmp.push_back(prev[i976]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i977=0;i977<(int)prev.size();++i977) {
        if( prev[i977] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i977]<m&&I[prev[i977]]=='d') {
          tmp.push_back(prev[i977]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev983;
      for(int i982=0;i982<(int)prev.size();++i982) {
        i = prev[i982];
        tmp = parse_not978();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev983.push_back(prev[i982]);
        } else {
          if(!(!next_prev983.empty()&&next_prev983.front()==FAIL)) {
            next_prev983.push_front(FAIL);
          }
        }
      }
      prev = next_prev983;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev985;
      for(int i984=0;i984<(int)prev.size();++i984) {
        if( prev[i984] == FAIL ) {
          if(!(!next_prev985.empty() && next_prev985.front() == FAIL )) {
            next_prev985.push_front(FAIL);
          }
          continue;
        }
        i = prev[i984];
        tmp = parse__();
        
        for(int i984=0;i984<(int)tmp.size();++i984) {
          if( tmp[i984] == FAIL ) {
            if(!( !next_prev985.empty() && next_prev985[0] == FAIL )) {
              next_prev985.push_front(FAIL);
            }
          } else {
            next_prev985.push_back(tmp[i984]);
          }
        }
      }
      prev = next_prev985;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i973=0;i973<(int)prev.size();++i973) {
    if( prev[i973] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i973]);
    }
  }
  return memo[key(128,backtracking_ptr_for_packrat128)] = result;
}

inline deque<int> parse_not978() { 
  if(memo.count(key(129,i))) {
    return memo[key(129,i)];
  }
  int backtracking_ptr_for_packrat129=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev981;
  for(int i980=0;i980<(int)prev.size();++i980) {
    if( prev[i980] == FAIL ) {
      if(!(!next_prev981.empty() && next_prev981.front() == FAIL )) {
        next_prev981.push_front(FAIL);
      }
      continue;
    }
    i = prev[i980];
    tmp = parse_W();
    
    for(int i980=0;i980<(int)tmp.size();++i980) {
      if( tmp[i980] == FAIL ) {
        if(!( !next_prev981.empty() && next_prev981[0] == FAIL )) {
          next_prev981.push_front(FAIL);
        }
      } else {
        next_prev981.push_back(tmp[i980]);
      }
    }
  }
  prev = next_prev981;
  for(int i979=0;i979<(int)prev.size();++i979) {
    if( prev[i979] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i979]);
    }
  }
  return memo[key(129,backtracking_ptr_for_packrat129)] = result;
}

inline deque<int> parse_slash987() { 
  if(memo.count(key(130,i))) {
    return memo[key(130,i)];
  }
  int backtracking_ptr_for_packrat130=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i989=0;i989<(int)prev.size();++i989) {
        if( prev[i989] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i989]<m&&I[prev[i989]]=='v') {
          tmp.push_back(prev[i989]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i990=0;i990<(int)prev.size();++i990) {
        if( prev[i990] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i990]<m&&I[prev[i990]]=='o') {
          tmp.push_back(prev[i990]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i991=0;i991<(int)prev.size();++i991) {
        if( prev[i991] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i991]<m&&I[prev[i991]]=='l') {
          tmp.push_back(prev[i991]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i992=0;i992<(int)prev.size();++i992) {
        if( prev[i992] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i992]<m&&I[prev[i992]]=='a') {
          tmp.push_back(prev[i992]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i993=0;i993<(int)prev.size();++i993) {
        if( prev[i993] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i993]<m&&I[prev[i993]]=='t') {
          tmp.push_back(prev[i993]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i994=0;i994<(int)prev.size();++i994) {
        if( prev[i994] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i994]<m&&I[prev[i994]]=='i') {
          tmp.push_back(prev[i994]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i995=0;i995<(int)prev.size();++i995) {
        if( prev[i995] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i995]<m&&I[prev[i995]]=='l') {
          tmp.push_back(prev[i995]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i996=0;i996<(int)prev.size();++i996) {
        if( prev[i996] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i996]<m&&I[prev[i996]]=='e') {
          tmp.push_back(prev[i996]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev1002;
      for(int i1001=0;i1001<(int)prev.size();++i1001) {
        i = prev[i1001];
        tmp = parse_not997();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev1002.push_back(prev[i1001]);
        } else {
          if(!(!next_prev1002.empty()&&next_prev1002.front()==FAIL)) {
            next_prev1002.push_front(FAIL);
          }
        }
      }
      prev = next_prev1002;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1004;
      for(int i1003=0;i1003<(int)prev.size();++i1003) {
        if( prev[i1003] == FAIL ) {
          if(!(!next_prev1004.empty() && next_prev1004.front() == FAIL )) {
            next_prev1004.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1003];
        tmp = parse__();
        
        for(int i1003=0;i1003<(int)tmp.size();++i1003) {
          if( tmp[i1003] == FAIL ) {
            if(!( !next_prev1004.empty() && next_prev1004[0] == FAIL )) {
              next_prev1004.push_front(FAIL);
            }
          } else {
            next_prev1004.push_back(tmp[i1003]);
          }
        }
      }
      prev = next_prev1004;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i988=0;i988<(int)prev.size();++i988) {
    if( prev[i988] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i988]);
    }
  }
  return memo[key(130,backtracking_ptr_for_packrat130)] = result;
}

inline deque<int> parse_not997() { 
  if(memo.count(key(131,i))) {
    return memo[key(131,i)];
  }
  int backtracking_ptr_for_packrat131=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev1000;
  for(int i999=0;i999<(int)prev.size();++i999) {
    if( prev[i999] == FAIL ) {
      if(!(!next_prev1000.empty() && next_prev1000.front() == FAIL )) {
        next_prev1000.push_front(FAIL);
      }
      continue;
    }
    i = prev[i999];
    tmp = parse_W();
    
    for(int i999=0;i999<(int)tmp.size();++i999) {
      if( tmp[i999] == FAIL ) {
        if(!( !next_prev1000.empty() && next_prev1000[0] == FAIL )) {
          next_prev1000.push_front(FAIL);
        }
      } else {
        next_prev1000.push_back(tmp[i999]);
      }
    }
  }
  prev = next_prev1000;
  for(int i998=0;i998<(int)prev.size();++i998) {
    if( prev[i998] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i998]);
    }
  }
  return memo[key(131,backtracking_ptr_for_packrat131)] = result;
}

inline deque<int> parse_slash1006() { 
  if(memo.count(key(132,i))) {
    return memo[key(132,i)];
  }
  int backtracking_ptr_for_packrat132=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1008=0;i1008<(int)prev.size();++i1008) {
        if( prev[i1008] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1008]<m&&I[prev[i1008]]=='w') {
          tmp.push_back(prev[i1008]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1009=0;i1009<(int)prev.size();++i1009) {
        if( prev[i1009] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1009]<m&&I[prev[i1009]]=='h') {
          tmp.push_back(prev[i1009]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1010=0;i1010<(int)prev.size();++i1010) {
        if( prev[i1010] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1010]<m&&I[prev[i1010]]=='i') {
          tmp.push_back(prev[i1010]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1011=0;i1011<(int)prev.size();++i1011) {
        if( prev[i1011] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1011]<m&&I[prev[i1011]]=='l') {
          tmp.push_back(prev[i1011]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1012=0;i1012<(int)prev.size();++i1012) {
        if( prev[i1012] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1012]<m&&I[prev[i1012]]=='e') {
          tmp.push_back(prev[i1012]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev1018;
      for(int i1017=0;i1017<(int)prev.size();++i1017) {
        i = prev[i1017];
        tmp = parse_not1013();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev1018.push_back(prev[i1017]);
        } else {
          if(!(!next_prev1018.empty()&&next_prev1018.front()==FAIL)) {
            next_prev1018.push_front(FAIL);
          }
        }
      }
      prev = next_prev1018;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1020;
      for(int i1019=0;i1019<(int)prev.size();++i1019) {
        if( prev[i1019] == FAIL ) {
          if(!(!next_prev1020.empty() && next_prev1020.front() == FAIL )) {
            next_prev1020.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1019];
        tmp = parse__();
        
        for(int i1019=0;i1019<(int)tmp.size();++i1019) {
          if( tmp[i1019] == FAIL ) {
            if(!( !next_prev1020.empty() && next_prev1020[0] == FAIL )) {
              next_prev1020.push_front(FAIL);
            }
          } else {
            next_prev1020.push_back(tmp[i1019]);
          }
        }
      }
      prev = next_prev1020;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1007=0;i1007<(int)prev.size();++i1007) {
    if( prev[i1007] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1007]);
    }
  }
  return memo[key(132,backtracking_ptr_for_packrat132)] = result;
}

inline deque<int> parse_not1013() { 
  if(memo.count(key(133,i))) {
    return memo[key(133,i)];
  }
  int backtracking_ptr_for_packrat133=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev1016;
  for(int i1015=0;i1015<(int)prev.size();++i1015) {
    if( prev[i1015] == FAIL ) {
      if(!(!next_prev1016.empty() && next_prev1016.front() == FAIL )) {
        next_prev1016.push_front(FAIL);
      }
      continue;
    }
    i = prev[i1015];
    tmp = parse_W();
    
    for(int i1015=0;i1015<(int)tmp.size();++i1015) {
      if( tmp[i1015] == FAIL ) {
        if(!( !next_prev1016.empty() && next_prev1016[0] == FAIL )) {
          next_prev1016.push_front(FAIL);
        }
      } else {
        next_prev1016.push_back(tmp[i1015]);
      }
    }
  }
  prev = next_prev1016;
  for(int i1014=0;i1014<(int)prev.size();++i1014) {
    if( prev[i1014] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1014]);
    }
  }
  return memo[key(133,backtracking_ptr_for_packrat133)] = result;
}

deque<int> parse_TopLevel(){
  if(memo.count(key(134,i))) {
    return memo[key(134,i)];
  }
  int backtracking_ptr_for_packrat134=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev1024;
  deque<int> prioritized_choice_final_prev1025;
  next_prev1024.clear();
  for(int i1023=0;i1023<(int)prev.size();++i1023) {
    i = prev[i1023];
    tmp = parse_slash1026();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1024.push_back(prev[i1023]); }
    for(int i1030=0;i1030<(int)tmp.size();++i1030) {
      if( tmp[i1030] != FAIL ) {
        prioritized_choice_final_prev1025.push_back(tmp[i1030]);
      }
    }
  }
  prev = next_prev1024;
  next_prev1024.clear();
  for(int i1023=0;i1023<(int)prev.size();++i1023) {
    i = prev[i1023];
    tmp = parse_slash1031();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1024.push_back(prev[i1023]); }
    for(int i1035=0;i1035<(int)tmp.size();++i1035) {
      if( tmp[i1035] != FAIL ) {
        prioritized_choice_final_prev1025.push_back(tmp[i1035]);
      }
    }
  }
  prev = next_prev1024;
  next_prev1024.clear();
  for(int i1023=0;i1023<(int)prev.size();++i1023) {
    i = prev[i1023];
    tmp = parse_slash1036();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1024.push_back(prev[i1023]); }
    for(int i1040=0;i1040<(int)tmp.size();++i1040) {
      if( tmp[i1040] != FAIL ) {
        prioritized_choice_final_prev1025.push_back(tmp[i1040]);
      }
    }
  }
  prev = next_prev1024;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev1025.empty() && prioritized_choice_final_prev1025.front() == FAIL )) {
      prioritized_choice_final_prev1025.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev1025;
  for(int i1022=0;i1022<(int)prev.size();++i1022) {
    if( prev[i1022] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1022]);
    }
  }
  return memo[key(134,backtracking_ptr_for_packrat134)] = result;
}

inline deque<int> parse_slash1026() { 
  if(memo.count(key(135,i))) {
    return memo[key(135,i)];
  }
  int backtracking_ptr_for_packrat135=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (PackageDeclaration) */
    deque<int> next_prev1029;
    for(int i1028=0;i1028<(int)prev.size();++i1028) {
      if( prev[i1028] == FAIL ) {
        if(!(!next_prev1029.empty() && next_prev1029.front() == FAIL )) {
          next_prev1029.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1028];
      tmp = parse_PackageDeclaration();
      
      for(int i1028=0;i1028<(int)tmp.size();++i1028) {
        if( tmp[i1028] == FAIL ) {
          if(!( !next_prev1029.empty() && next_prev1029[0] == FAIL )) {
            next_prev1029.push_front(FAIL);
          }
        } else {
          next_prev1029.push_back(tmp[i1028]);
        }
      }
    }
    prev = next_prev1029;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1027=0;i1027<(int)prev.size();++i1027) {
    if( prev[i1027] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1027]);
    }
  }
  return memo[key(135,backtracking_ptr_for_packrat135)] = result;
}

inline deque<int> parse_slash1031() { 
  if(memo.count(key(136,i))) {
    return memo[key(136,i)];
  }
  int backtracking_ptr_for_packrat136=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ImportDeclaration) */
    deque<int> next_prev1034;
    for(int i1033=0;i1033<(int)prev.size();++i1033) {
      if( prev[i1033] == FAIL ) {
        if(!(!next_prev1034.empty() && next_prev1034.front() == FAIL )) {
          next_prev1034.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1033];
      tmp = parse_ImportDeclaration();
      
      for(int i1033=0;i1033<(int)tmp.size();++i1033) {
        if( tmp[i1033] == FAIL ) {
          if(!( !next_prev1034.empty() && next_prev1034[0] == FAIL )) {
            next_prev1034.push_front(FAIL);
          }
        } else {
          next_prev1034.push_back(tmp[i1033]);
        }
      }
    }
    prev = next_prev1034;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1032=0;i1032<(int)prev.size();++i1032) {
    if( prev[i1032] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1032]);
    }
  }
  return memo[key(136,backtracking_ptr_for_packrat136)] = result;
}

inline deque<int> parse_slash1036() { 
  if(memo.count(key(137,i))) {
    return memo[key(137,i)];
  }
  int backtracking_ptr_for_packrat137=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (TypeDeclaration) */
    deque<int> next_prev1039;
    for(int i1038=0;i1038<(int)prev.size();++i1038) {
      if( prev[i1038] == FAIL ) {
        if(!(!next_prev1039.empty() && next_prev1039.front() == FAIL )) {
          next_prev1039.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1038];
      tmp = parse_TypeDeclaration();
      
      for(int i1038=0;i1038<(int)tmp.size();++i1038) {
        if( tmp[i1038] == FAIL ) {
          if(!( !next_prev1039.empty() && next_prev1039[0] == FAIL )) {
            next_prev1039.push_front(FAIL);
          }
        } else {
          next_prev1039.push_back(tmp[i1038]);
        }
      }
    }
    prev = next_prev1039;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1037=0;i1037<(int)prev.size();++i1037) {
    if( prev[i1037] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1037]);
    }
  }
  return memo[key(137,backtracking_ptr_for_packrat137)] = result;
}

deque<int> parse_PackageDeclaration(){
  if(memo.count(key(138,i))) {
    return memo[key(138,i)];
  }
  int backtracking_ptr_for_packrat138=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Prioritized Choice */
      deque<int> next_prev1043;
      deque<int> prioritized_choice_final_prev1044;
      next_prev1043.clear();
      for(int i1042=0;i1042<(int)prev.size();++i1042) {
        i = prev[i1042];
        tmp = parse_slash1045();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1043.push_back(prev[i1042]); }
        for(int i1049=0;i1049<(int)tmp.size();++i1049) {
          if( tmp[i1049] != FAIL ) {
            prioritized_choice_final_prev1044.push_back(tmp[i1049]);
          }
        }
      }
      prev = next_prev1043;
      next_prev1043.clear();
      for(int i1042=0;i1042<(int)prev.size();++i1042) {
        i = prev[i1042];
        tmp = parse_slash1050();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1043.push_back(prev[i1042]); }
        for(int i1052=0;i1052<(int)tmp.size();++i1052) {
          if( tmp[i1052] != FAIL ) {
            prioritized_choice_final_prev1044.push_back(tmp[i1052]);
          }
        }
      }
      prev = next_prev1043;
      if(!prev.empty()) {
        if(!(!prioritized_choice_final_prev1044.empty() && prioritized_choice_final_prev1044.front() == FAIL )) {
          prioritized_choice_final_prev1044.push_front(FAIL);
        }
      }
      prev = prioritized_choice_final_prev1044;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        tmp.clear();
        for(int i1053=0;i1053<(int)prev.size();++i1053) {
          if( prev[i1053] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i1053]<m&&I[prev[i1053]]=='p') {
            tmp.push_back(prev[i1053]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        tmp.clear();
        for(int i1054=0;i1054<(int)prev.size();++i1054) {
          if( prev[i1054] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i1054]<m&&I[prev[i1054]]=='a') {
            tmp.push_back(prev[i1054]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        tmp.clear();
        for(int i1055=0;i1055<(int)prev.size();++i1055) {
          if( prev[i1055] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i1055]<m&&I[prev[i1055]]=='c') {
            tmp.push_back(prev[i1055]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        tmp.clear();
        for(int i1056=0;i1056<(int)prev.size();++i1056) {
          if( prev[i1056] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i1056]<m&&I[prev[i1056]]=='k') {
            tmp.push_back(prev[i1056]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        tmp.clear();
        for(int i1057=0;i1057<(int)prev.size();++i1057) {
          if( prev[i1057] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i1057]<m&&I[prev[i1057]]=='a') {
            tmp.push_back(prev[i1057]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        tmp.clear();
        for(int i1058=0;i1058<(int)prev.size();++i1058) {
          if( prev[i1058] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i1058]<m&&I[prev[i1058]]=='g') {
            tmp.push_back(prev[i1058]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        tmp.clear();
        for(int i1059=0;i1059<(int)prev.size();++i1059) {
          if( prev[i1059] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i1059]<m&&I[prev[i1059]]=='e') {
            tmp.push_back(prev[i1059]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Not */
        deque<int> next_prev1065;
        for(int i1064=0;i1064<(int)prev.size();++i1064) {
          i = prev[i1064];
          tmp = parse_not1060();
          if(!tmp.empty()&&tmp.front()==FAIL) {
            next_prev1065.push_back(prev[i1064]);
          } else {
            if(!(!next_prev1065.empty()&&next_prev1065.front()==FAIL)) {
              next_prev1065.push_front(FAIL);
            }
          }
        }
        prev = next_prev1065;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Nonterminal (_) */
        deque<int> next_prev1067;
        for(int i1066=0;i1066<(int)prev.size();++i1066) {
          if( prev[i1066] == FAIL ) {
            if(!(!next_prev1067.empty() && next_prev1067.front() == FAIL )) {
              next_prev1067.push_front(FAIL);
            }
            continue;
          }
          i = prev[i1066];
          tmp = parse__();
          
          for(int i1066=0;i1066<(int)tmp.size();++i1066) {
            if( tmp[i1066] == FAIL ) {
              if(!( !next_prev1067.empty() && next_prev1067[0] == FAIL )) {
                next_prev1067.push_front(FAIL);
              }
            } else {
              next_prev1067.push_back(tmp[i1066]);
            }
          }
        }
        prev = next_prev1067;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (QualifiedName) */
      deque<int> next_prev1069;
      for(int i1068=0;i1068<(int)prev.size();++i1068) {
        if( prev[i1068] == FAIL ) {
          if(!(!next_prev1069.empty() && next_prev1069.front() == FAIL )) {
            next_prev1069.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1068];
        tmp = parse_QualifiedName();
        
        for(int i1068=0;i1068<(int)tmp.size();++i1068) {
          if( tmp[i1068] == FAIL ) {
            if(!( !next_prev1069.empty() && next_prev1069[0] == FAIL )) {
              next_prev1069.push_front(FAIL);
            }
          } else {
            next_prev1069.push_back(tmp[i1068]);
          }
        }
      }
      prev = next_prev1069;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1070=0;i1070<(int)prev.size();++i1070) {
        if( prev[i1070] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1070]<m&&I[prev[i1070]]==';') {
          tmp.push_back(prev[i1070]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1072;
      for(int i1071=0;i1071<(int)prev.size();++i1071) {
        if( prev[i1071] == FAIL ) {
          if(!(!next_prev1072.empty() && next_prev1072.front() == FAIL )) {
            next_prev1072.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1071];
        tmp = parse__();
        
        for(int i1071=0;i1071<(int)tmp.size();++i1071) {
          if( tmp[i1071] == FAIL ) {
            if(!( !next_prev1072.empty() && next_prev1072[0] == FAIL )) {
              next_prev1072.push_front(FAIL);
            }
          } else {
            next_prev1072.push_back(tmp[i1071]);
          }
        }
      }
      prev = next_prev1072;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1041=0;i1041<(int)prev.size();++i1041) {
    if( prev[i1041] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1041]);
    }
  }
  return memo[key(138,backtracking_ptr_for_packrat138)] = result;
}

inline deque<int> parse_slash1045() { 
  if(memo.count(key(139,i))) {
    return memo[key(139,i)];
  }
  int backtracking_ptr_for_packrat139=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotations) */
    deque<int> next_prev1048;
    for(int i1047=0;i1047<(int)prev.size();++i1047) {
      if( prev[i1047] == FAIL ) {
        if(!(!next_prev1048.empty() && next_prev1048.front() == FAIL )) {
          next_prev1048.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1047];
      tmp = parse_Annotations();
      
      for(int i1047=0;i1047<(int)tmp.size();++i1047) {
        if( tmp[i1047] == FAIL ) {
          if(!( !next_prev1048.empty() && next_prev1048[0] == FAIL )) {
            next_prev1048.push_front(FAIL);
          }
        } else {
          next_prev1048.push_back(tmp[i1047]);
        }
      }
    }
    prev = next_prev1048;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1046=0;i1046<(int)prev.size();++i1046) {
    if( prev[i1046] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1046]);
    }
  }
  return memo[key(139,backtracking_ptr_for_packrat139)] = result;
}

inline deque<int> parse_slash1050() { 
  if(memo.count(key(140,i))) {
    return memo[key(140,i)];
  }
  int backtracking_ptr_for_packrat140=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i1051=0;i1051<(int)prev.size();++i1051) {
    if( prev[i1051] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1051]);
    }
  }
  return memo[key(140,backtracking_ptr_for_packrat140)] = result;
}

inline deque<int> parse_not1060() { 
  if(memo.count(key(141,i))) {
    return memo[key(141,i)];
  }
  int backtracking_ptr_for_packrat141=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev1063;
  for(int i1062=0;i1062<(int)prev.size();++i1062) {
    if( prev[i1062] == FAIL ) {
      if(!(!next_prev1063.empty() && next_prev1063.front() == FAIL )) {
        next_prev1063.push_front(FAIL);
      }
      continue;
    }
    i = prev[i1062];
    tmp = parse_W();
    
    for(int i1062=0;i1062<(int)tmp.size();++i1062) {
      if( tmp[i1062] == FAIL ) {
        if(!( !next_prev1063.empty() && next_prev1063[0] == FAIL )) {
          next_prev1063.push_front(FAIL);
        }
      } else {
        next_prev1063.push_back(tmp[i1062]);
      }
    }
  }
  prev = next_prev1063;
  for(int i1061=0;i1061<(int)prev.size();++i1061) {
    if( prev[i1061] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1061]);
    }
  }
  return memo[key(141,backtracking_ptr_for_packrat141)] = result;
}

deque<int> parse_ImportDeclaration(){
  if(memo.count(key(142,i))) {
    return memo[key(142,i)];
  }
  int backtracking_ptr_for_packrat142=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        tmp.clear();
        for(int i1074=0;i1074<(int)prev.size();++i1074) {
          if( prev[i1074] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i1074]<m&&I[prev[i1074]]=='i') {
            tmp.push_back(prev[i1074]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        tmp.clear();
        for(int i1075=0;i1075<(int)prev.size();++i1075) {
          if( prev[i1075] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i1075]<m&&I[prev[i1075]]=='m') {
            tmp.push_back(prev[i1075]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        tmp.clear();
        for(int i1076=0;i1076<(int)prev.size();++i1076) {
          if( prev[i1076] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i1076]<m&&I[prev[i1076]]=='p') {
            tmp.push_back(prev[i1076]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        tmp.clear();
        for(int i1077=0;i1077<(int)prev.size();++i1077) {
          if( prev[i1077] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i1077]<m&&I[prev[i1077]]=='o') {
            tmp.push_back(prev[i1077]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        tmp.clear();
        for(int i1078=0;i1078<(int)prev.size();++i1078) {
          if( prev[i1078] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i1078]<m&&I[prev[i1078]]=='r') {
            tmp.push_back(prev[i1078]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        tmp.clear();
        for(int i1079=0;i1079<(int)prev.size();++i1079) {
          if( prev[i1079] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i1079]<m&&I[prev[i1079]]=='t') {
            tmp.push_back(prev[i1079]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Not */
        deque<int> next_prev1085;
        for(int i1084=0;i1084<(int)prev.size();++i1084) {
          i = prev[i1084];
          tmp = parse_not1080();
          if(!tmp.empty()&&tmp.front()==FAIL) {
            next_prev1085.push_back(prev[i1084]);
          } else {
            if(!(!next_prev1085.empty()&&next_prev1085.front()==FAIL)) {
              next_prev1085.push_front(FAIL);
            }
          }
        }
        prev = next_prev1085;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Nonterminal (_) */
        deque<int> next_prev1087;
        for(int i1086=0;i1086<(int)prev.size();++i1086) {
          if( prev[i1086] == FAIL ) {
            if(!(!next_prev1087.empty() && next_prev1087.front() == FAIL )) {
              next_prev1087.push_front(FAIL);
            }
            continue;
          }
          i = prev[i1086];
          tmp = parse__();
          
          for(int i1086=0;i1086<(int)tmp.size();++i1086) {
            if( tmp[i1086] == FAIL ) {
              if(!( !next_prev1087.empty() && next_prev1087[0] == FAIL )) {
                next_prev1087.push_front(FAIL);
              }
            } else {
              next_prev1087.push_back(tmp[i1086]);
            }
          }
        }
        prev = next_prev1087;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Prioritized Choice */
      deque<int> next_prev1089;
      deque<int> prioritized_choice_final_prev1090;
      next_prev1089.clear();
      for(int i1088=0;i1088<(int)prev.size();++i1088) {
        i = prev[i1088];
        tmp = parse_slash1091();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1089.push_back(prev[i1088]); }
        for(int i1107=0;i1107<(int)tmp.size();++i1107) {
          if( tmp[i1107] != FAIL ) {
            prioritized_choice_final_prev1090.push_back(tmp[i1107]);
          }
        }
      }
      prev = next_prev1089;
      next_prev1089.clear();
      for(int i1088=0;i1088<(int)prev.size();++i1088) {
        i = prev[i1088];
        tmp = parse_slash1108();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1089.push_back(prev[i1088]); }
        for(int i1110=0;i1110<(int)tmp.size();++i1110) {
          if( tmp[i1110] != FAIL ) {
            prioritized_choice_final_prev1090.push_back(tmp[i1110]);
          }
        }
      }
      prev = next_prev1089;
      if(!prev.empty()) {
        if(!(!prioritized_choice_final_prev1090.empty() && prioritized_choice_final_prev1090.front() == FAIL )) {
          prioritized_choice_final_prev1090.push_front(FAIL);
        }
      }
      prev = prioritized_choice_final_prev1090;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (PackageName) */
      deque<int> next_prev1112;
      for(int i1111=0;i1111<(int)prev.size();++i1111) {
        if( prev[i1111] == FAIL ) {
          if(!(!next_prev1112.empty() && next_prev1112.front() == FAIL )) {
            next_prev1112.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1111];
        tmp = parse_PackageName();
        
        for(int i1111=0;i1111<(int)tmp.size();++i1111) {
          if( tmp[i1111] == FAIL ) {
            if(!( !next_prev1112.empty() && next_prev1112[0] == FAIL )) {
              next_prev1112.push_front(FAIL);
            }
          } else {
            next_prev1112.push_back(tmp[i1111]);
          }
        }
      }
      prev = next_prev1112;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1113=0;i1113<(int)prev.size();++i1113) {
        if( prev[i1113] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1113]<m&&I[prev[i1113]]==';') {
          tmp.push_back(prev[i1113]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1115;
      for(int i1114=0;i1114<(int)prev.size();++i1114) {
        if( prev[i1114] == FAIL ) {
          if(!(!next_prev1115.empty() && next_prev1115.front() == FAIL )) {
            next_prev1115.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1114];
        tmp = parse__();
        
        for(int i1114=0;i1114<(int)tmp.size();++i1114) {
          if( tmp[i1114] == FAIL ) {
            if(!( !next_prev1115.empty() && next_prev1115[0] == FAIL )) {
              next_prev1115.push_front(FAIL);
            }
          } else {
            next_prev1115.push_back(tmp[i1114]);
          }
        }
      }
      prev = next_prev1115;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1073=0;i1073<(int)prev.size();++i1073) {
    if( prev[i1073] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1073]);
    }
  }
  return memo[key(142,backtracking_ptr_for_packrat142)] = result;
}

inline deque<int> parse_not1080() { 
  if(memo.count(key(143,i))) {
    return memo[key(143,i)];
  }
  int backtracking_ptr_for_packrat143=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev1083;
  for(int i1082=0;i1082<(int)prev.size();++i1082) {
    if( prev[i1082] == FAIL ) {
      if(!(!next_prev1083.empty() && next_prev1083.front() == FAIL )) {
        next_prev1083.push_front(FAIL);
      }
      continue;
    }
    i = prev[i1082];
    tmp = parse_W();
    
    for(int i1082=0;i1082<(int)tmp.size();++i1082) {
      if( tmp[i1082] == FAIL ) {
        if(!( !next_prev1083.empty() && next_prev1083[0] == FAIL )) {
          next_prev1083.push_front(FAIL);
        }
      } else {
        next_prev1083.push_back(tmp[i1082]);
      }
    }
  }
  prev = next_prev1083;
  for(int i1081=0;i1081<(int)prev.size();++i1081) {
    if( prev[i1081] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1081]);
    }
  }
  return memo[key(143,backtracking_ptr_for_packrat143)] = result;
}

inline deque<int> parse_slash1091() { 
  if(memo.count(key(144,i))) {
    return memo[key(144,i)];
  }
  int backtracking_ptr_for_packrat144=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1093=0;i1093<(int)prev.size();++i1093) {
        if( prev[i1093] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1093]<m&&I[prev[i1093]]=='s') {
          tmp.push_back(prev[i1093]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1094=0;i1094<(int)prev.size();++i1094) {
        if( prev[i1094] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1094]<m&&I[prev[i1094]]=='t') {
          tmp.push_back(prev[i1094]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1095=0;i1095<(int)prev.size();++i1095) {
        if( prev[i1095] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1095]<m&&I[prev[i1095]]=='a') {
          tmp.push_back(prev[i1095]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1096=0;i1096<(int)prev.size();++i1096) {
        if( prev[i1096] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1096]<m&&I[prev[i1096]]=='t') {
          tmp.push_back(prev[i1096]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1097=0;i1097<(int)prev.size();++i1097) {
        if( prev[i1097] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1097]<m&&I[prev[i1097]]=='i') {
          tmp.push_back(prev[i1097]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1098=0;i1098<(int)prev.size();++i1098) {
        if( prev[i1098] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1098]<m&&I[prev[i1098]]=='c') {
          tmp.push_back(prev[i1098]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev1104;
      for(int i1103=0;i1103<(int)prev.size();++i1103) {
        i = prev[i1103];
        tmp = parse_not1099();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev1104.push_back(prev[i1103]);
        } else {
          if(!(!next_prev1104.empty()&&next_prev1104.front()==FAIL)) {
            next_prev1104.push_front(FAIL);
          }
        }
      }
      prev = next_prev1104;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1106;
      for(int i1105=0;i1105<(int)prev.size();++i1105) {
        if( prev[i1105] == FAIL ) {
          if(!(!next_prev1106.empty() && next_prev1106.front() == FAIL )) {
            next_prev1106.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1105];
        tmp = parse__();
        
        for(int i1105=0;i1105<(int)tmp.size();++i1105) {
          if( tmp[i1105] == FAIL ) {
            if(!( !next_prev1106.empty() && next_prev1106[0] == FAIL )) {
              next_prev1106.push_front(FAIL);
            }
          } else {
            next_prev1106.push_back(tmp[i1105]);
          }
        }
      }
      prev = next_prev1106;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1092=0;i1092<(int)prev.size();++i1092) {
    if( prev[i1092] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1092]);
    }
  }
  return memo[key(144,backtracking_ptr_for_packrat144)] = result;
}

inline deque<int> parse_not1099() { 
  if(memo.count(key(145,i))) {
    return memo[key(145,i)];
  }
  int backtracking_ptr_for_packrat145=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev1102;
  for(int i1101=0;i1101<(int)prev.size();++i1101) {
    if( prev[i1101] == FAIL ) {
      if(!(!next_prev1102.empty() && next_prev1102.front() == FAIL )) {
        next_prev1102.push_front(FAIL);
      }
      continue;
    }
    i = prev[i1101];
    tmp = parse_W();
    
    for(int i1101=0;i1101<(int)tmp.size();++i1101) {
      if( tmp[i1101] == FAIL ) {
        if(!( !next_prev1102.empty() && next_prev1102[0] == FAIL )) {
          next_prev1102.push_front(FAIL);
        }
      } else {
        next_prev1102.push_back(tmp[i1101]);
      }
    }
  }
  prev = next_prev1102;
  for(int i1100=0;i1100<(int)prev.size();++i1100) {
    if( prev[i1100] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1100]);
    }
  }
  return memo[key(145,backtracking_ptr_for_packrat145)] = result;
}

inline deque<int> parse_slash1108() { 
  if(memo.count(key(146,i))) {
    return memo[key(146,i)];
  }
  int backtracking_ptr_for_packrat146=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1109=0;i1109<(int)prev.size();++i1109) {
    if( prev[i1109] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1109]);
    }
  }
  return memo[key(146,backtracking_ptr_for_packrat146)] = result;
}

deque<int> parse_PackageName(){
  if(memo.count(key(147,i))) {
    return memo[key(147,i)];
  }
  int backtracking_ptr_for_packrat147=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (QualifiedName) */
    deque<int> next_prev1118;
    for(int i1117=0;i1117<(int)prev.size();++i1117) {
      if( prev[i1117] == FAIL ) {
        if(!(!next_prev1118.empty() && next_prev1118.front() == FAIL )) {
          next_prev1118.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1117];
      tmp = parse_QualifiedName();
      
      for(int i1117=0;i1117<(int)tmp.size();++i1117) {
        if( tmp[i1117] == FAIL ) {
          if(!( !next_prev1118.empty() && next_prev1118[0] == FAIL )) {
            next_prev1118.push_front(FAIL);
          }
        } else {
          next_prev1118.push_back(tmp[i1117]);
        }
      }
    }
    prev = next_prev1118;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev1120;
    deque<int> prioritized_choice_final_prev1121;
    next_prev1120.clear();
    for(int i1119=0;i1119<(int)prev.size();++i1119) {
      i = prev[i1119];
      tmp = parse_slash1122();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1120.push_back(prev[i1119]); }
      for(int i1140=0;i1140<(int)tmp.size();++i1140) {
        if( tmp[i1140] != FAIL ) {
          prioritized_choice_final_prev1121.push_back(tmp[i1140]);
        }
      }
    }
    prev = next_prev1120;
    next_prev1120.clear();
    for(int i1119=0;i1119<(int)prev.size();++i1119) {
      i = prev[i1119];
      tmp = parse_slash1141();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1120.push_back(prev[i1119]); }
      for(int i1143=0;i1143<(int)tmp.size();++i1143) {
        if( tmp[i1143] != FAIL ) {
          prioritized_choice_final_prev1121.push_back(tmp[i1143]);
        }
      }
    }
    prev = next_prev1120;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev1121.empty() && prioritized_choice_final_prev1121.front() == FAIL )) {
        prioritized_choice_final_prev1121.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev1121;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1116=0;i1116<(int)prev.size();++i1116) {
    if( prev[i1116] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1116]);
    }
  }
  return memo[key(147,backtracking_ptr_for_packrat147)] = result;
}

inline deque<int> parse_slash1122() { 
  if(memo.count(key(148,i))) {
    return memo[key(148,i)];
  }
  int backtracking_ptr_for_packrat148=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1124=0;i1124<(int)prev.size();++i1124) {
        if( prev[i1124] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1124]<m&&I[prev[i1124]]=='.') {
          tmp.push_back(prev[i1124]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev1129;
      for(int i1128=0;i1128<(int)prev.size();++i1128) {
        i = prev[i1128];
        tmp = parse_not1125();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev1129.push_back(prev[i1128]);
        } else {
          if(!(!next_prev1129.empty()&&next_prev1129.front()==FAIL)) {
            next_prev1129.push_front(FAIL);
          }
        }
      }
      prev = next_prev1129;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1131;
      for(int i1130=0;i1130<(int)prev.size();++i1130) {
        if( prev[i1130] == FAIL ) {
          if(!(!next_prev1131.empty() && next_prev1131.front() == FAIL )) {
            next_prev1131.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1130];
        tmp = parse__();
        
        for(int i1130=0;i1130<(int)tmp.size();++i1130) {
          if( tmp[i1130] == FAIL ) {
            if(!( !next_prev1131.empty() && next_prev1131[0] == FAIL )) {
              next_prev1131.push_front(FAIL);
            }
          } else {
            next_prev1131.push_back(tmp[i1130]);
          }
        }
      }
      prev = next_prev1131;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1132=0;i1132<(int)prev.size();++i1132) {
        if( prev[i1132] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1132]<m&&I[prev[i1132]]=='*') {
          tmp.push_back(prev[i1132]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev1137;
      for(int i1136=0;i1136<(int)prev.size();++i1136) {
        i = prev[i1136];
        tmp = parse_not1133();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev1137.push_back(prev[i1136]);
        } else {
          if(!(!next_prev1137.empty()&&next_prev1137.front()==FAIL)) {
            next_prev1137.push_front(FAIL);
          }
        }
      }
      prev = next_prev1137;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1139;
      for(int i1138=0;i1138<(int)prev.size();++i1138) {
        if( prev[i1138] == FAIL ) {
          if(!(!next_prev1139.empty() && next_prev1139.front() == FAIL )) {
            next_prev1139.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1138];
        tmp = parse__();
        
        for(int i1138=0;i1138<(int)tmp.size();++i1138) {
          if( tmp[i1138] == FAIL ) {
            if(!( !next_prev1139.empty() && next_prev1139[0] == FAIL )) {
              next_prev1139.push_front(FAIL);
            }
          } else {
            next_prev1139.push_back(tmp[i1138]);
          }
        }
      }
      prev = next_prev1139;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1123=0;i1123<(int)prev.size();++i1123) {
    if( prev[i1123] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1123]);
    }
  }
  return memo[key(148,backtracking_ptr_for_packrat148)] = result;
}

inline deque<int> parse_not1125() { 
  if(memo.count(key(149,i))) {
    return memo[key(149,i)];
  }
  int backtracking_ptr_for_packrat149=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i1127=0;i1127<(int)prev.size();++i1127) {
    if( prev[i1127] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i1127]<m&&I[prev[i1127]]=='.') {
      tmp.push_back(prev[i1127]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i1126=0;i1126<(int)prev.size();++i1126) {
    if( prev[i1126] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1126]);
    }
  }
  return memo[key(149,backtracking_ptr_for_packrat149)] = result;
}

inline deque<int> parse_not1133() { 
  if(memo.count(key(150,i))) {
    return memo[key(150,i)];
  }
  int backtracking_ptr_for_packrat150=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i1135=0;i1135<(int)prev.size();++i1135) {
    if( prev[i1135] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i1135]<m&&I[prev[i1135]]=='=') {
      tmp.push_back(prev[i1135]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i1134=0;i1134<(int)prev.size();++i1134) {
    if( prev[i1134] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1134]);
    }
  }
  return memo[key(150,backtracking_ptr_for_packrat150)] = result;
}

inline deque<int> parse_slash1141() { 
  if(memo.count(key(151,i))) {
    return memo[key(151,i)];
  }
  int backtracking_ptr_for_packrat151=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i1142=0;i1142<(int)prev.size();++i1142) {
    if( prev[i1142] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1142]);
    }
  }
  return memo[key(151,backtracking_ptr_for_packrat151)] = result;
}

deque<int> parse_TypeDeclaration(){
  if(memo.count(key(152,i))) {
    return memo[key(152,i)];
  }
  int backtracking_ptr_for_packrat152=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev1146;
  deque<int> prioritized_choice_final_prev1147;
  next_prev1146.clear();
  for(int i1145=0;i1145<(int)prev.size();++i1145) {
    i = prev[i1145];
    tmp = parse_slash1148();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1146.push_back(prev[i1145]); }
    for(int i1152=0;i1152<(int)tmp.size();++i1152) {
      if( tmp[i1152] != FAIL ) {
        prioritized_choice_final_prev1147.push_back(tmp[i1152]);
      }
    }
  }
  prev = next_prev1146;
  next_prev1146.clear();
  for(int i1145=0;i1145<(int)prev.size();++i1145) {
    i = prev[i1145];
    tmp = parse_slash1153();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1146.push_back(prev[i1145]); }
    for(int i1157=0;i1157<(int)tmp.size();++i1157) {
      if( tmp[i1157] != FAIL ) {
        prioritized_choice_final_prev1147.push_back(tmp[i1157]);
      }
    }
  }
  prev = next_prev1146;
  next_prev1146.clear();
  for(int i1145=0;i1145<(int)prev.size();++i1145) {
    i = prev[i1145];
    tmp = parse_slash1158();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1146.push_back(prev[i1145]); }
    for(int i1163=0;i1163<(int)tmp.size();++i1163) {
      if( tmp[i1163] != FAIL ) {
        prioritized_choice_final_prev1147.push_back(tmp[i1163]);
      }
    }
  }
  prev = next_prev1146;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev1147.empty() && prioritized_choice_final_prev1147.front() == FAIL )) {
      prioritized_choice_final_prev1147.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev1147;
  for(int i1144=0;i1144<(int)prev.size();++i1144) {
    if( prev[i1144] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1144]);
    }
  }
  return memo[key(152,backtracking_ptr_for_packrat152)] = result;
}

inline deque<int> parse_slash1148() { 
  if(memo.count(key(153,i))) {
    return memo[key(153,i)];
  }
  int backtracking_ptr_for_packrat153=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassDeclaration) */
    deque<int> next_prev1151;
    for(int i1150=0;i1150<(int)prev.size();++i1150) {
      if( prev[i1150] == FAIL ) {
        if(!(!next_prev1151.empty() && next_prev1151.front() == FAIL )) {
          next_prev1151.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1150];
      tmp = parse_ClassDeclaration();
      
      for(int i1150=0;i1150<(int)tmp.size();++i1150) {
        if( tmp[i1150] == FAIL ) {
          if(!( !next_prev1151.empty() && next_prev1151[0] == FAIL )) {
            next_prev1151.push_front(FAIL);
          }
        } else {
          next_prev1151.push_back(tmp[i1150]);
        }
      }
    }
    prev = next_prev1151;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1149=0;i1149<(int)prev.size();++i1149) {
    if( prev[i1149] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1149]);
    }
  }
  return memo[key(153,backtracking_ptr_for_packrat153)] = result;
}

inline deque<int> parse_slash1153() { 
  if(memo.count(key(154,i))) {
    return memo[key(154,i)];
  }
  int backtracking_ptr_for_packrat154=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (InterfaceDeclaration) */
    deque<int> next_prev1156;
    for(int i1155=0;i1155<(int)prev.size();++i1155) {
      if( prev[i1155] == FAIL ) {
        if(!(!next_prev1156.empty() && next_prev1156.front() == FAIL )) {
          next_prev1156.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1155];
      tmp = parse_InterfaceDeclaration();
      
      for(int i1155=0;i1155<(int)tmp.size();++i1155) {
        if( tmp[i1155] == FAIL ) {
          if(!( !next_prev1156.empty() && next_prev1156[0] == FAIL )) {
            next_prev1156.push_front(FAIL);
          }
        } else {
          next_prev1156.push_back(tmp[i1155]);
        }
      }
    }
    prev = next_prev1156;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1154=0;i1154<(int)prev.size();++i1154) {
    if( prev[i1154] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1154]);
    }
  }
  return memo[key(154,backtracking_ptr_for_packrat154)] = result;
}

inline deque<int> parse_slash1158() { 
  if(memo.count(key(155,i))) {
    return memo[key(155,i)];
  }
  int backtracking_ptr_for_packrat155=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1160=0;i1160<(int)prev.size();++i1160) {
        if( prev[i1160] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1160]<m&&I[prev[i1160]]==';') {
          tmp.push_back(prev[i1160]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1162;
      for(int i1161=0;i1161<(int)prev.size();++i1161) {
        if( prev[i1161] == FAIL ) {
          if(!(!next_prev1162.empty() && next_prev1162.front() == FAIL )) {
            next_prev1162.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1161];
        tmp = parse__();
        
        for(int i1161=0;i1161<(int)tmp.size();++i1161) {
          if( tmp[i1161] == FAIL ) {
            if(!( !next_prev1162.empty() && next_prev1162[0] == FAIL )) {
              next_prev1162.push_front(FAIL);
            }
          } else {
            next_prev1162.push_back(tmp[i1161]);
          }
        }
      }
      prev = next_prev1162;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1159=0;i1159<(int)prev.size();++i1159) {
    if( prev[i1159] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1159]);
    }
  }
  return memo[key(155,backtracking_ptr_for_packrat155)] = result;
}

deque<int> parse_Annotations(){
  if(memo.count(key(156,i))) {
    return memo[key(156,i)];
  }
  int backtracking_ptr_for_packrat156=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotation) */
    deque<int> next_prev1166;
    for(int i1165=0;i1165<(int)prev.size();++i1165) {
      if( prev[i1165] == FAIL ) {
        if(!(!next_prev1166.empty() && next_prev1166.front() == FAIL )) {
          next_prev1166.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1165];
      tmp = parse_Annotation();
      
      for(int i1165=0;i1165<(int)tmp.size();++i1165) {
        if( tmp[i1165] == FAIL ) {
          if(!( !next_prev1166.empty() && next_prev1166[0] == FAIL )) {
            next_prev1166.push_front(FAIL);
          }
        } else {
          next_prev1166.push_back(tmp[i1165]);
        }
      }
    }
    prev = next_prev1166;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev1171;
    deque<int> star_final_prev1172;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev1171.clear();
      for(int i1173=0;i1173<(int)prev.size();++i1173) {
        i = prev[i1173];
        tmp = parse_while1167();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev1172.push_back(prev[i1173]);
        }
        for(int i1174=0;i1174<(int)tmp.size();++i1174) {
          if(tmp[i1174]==FAIL) {
            if(!( !next_prev1171.empty() && next_prev1171.front() == FAIL )) {
              next_prev1171.push_front(FAIL);
            }
          } else {
            next_prev1171.push_back(tmp[i1174]);
          }
        }
      }
      prev = next_prev1171;
    }
    prev = star_final_prev1172;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1164=0;i1164<(int)prev.size();++i1164) {
    if( prev[i1164] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1164]);
    }
  }
  return memo[key(156,backtracking_ptr_for_packrat156)] = result;
}

inline deque<int> parse_while1167() { 
  if(memo.count(key(157,i))) {
    return memo[key(157,i)];
  }
  int backtracking_ptr_for_packrat157=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotation) */
    deque<int> next_prev1170;
    for(int i1169=0;i1169<(int)prev.size();++i1169) {
      if( prev[i1169] == FAIL ) {
        if(!(!next_prev1170.empty() && next_prev1170.front() == FAIL )) {
          next_prev1170.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1169];
      tmp = parse_Annotation();
      
      for(int i1169=0;i1169<(int)tmp.size();++i1169) {
        if( tmp[i1169] == FAIL ) {
          if(!( !next_prev1170.empty() && next_prev1170[0] == FAIL )) {
            next_prev1170.push_front(FAIL);
          }
        } else {
          next_prev1170.push_back(tmp[i1169]);
        }
      }
    }
    prev = next_prev1170;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1168=0;i1168<(int)prev.size();++i1168) {
    if( prev[i1168] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1168]);
    }
  }
  return memo[key(157,backtracking_ptr_for_packrat157)] = result;
}

deque<int> parse_Annotation(){
  if(memo.count(key(158,i))) {
    return memo[key(158,i)];
  }
  int backtracking_ptr_for_packrat158=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev1177;
  deque<int> prioritized_choice_final_prev1178;
  next_prev1177.clear();
  for(int i1176=0;i1176<(int)prev.size();++i1176) {
    i = prev[i1176];
    tmp = parse_slash1179();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1177.push_back(prev[i1176]); }
    for(int i1203=0;i1203<(int)tmp.size();++i1203) {
      if( tmp[i1203] != FAIL ) {
        prioritized_choice_final_prev1178.push_back(tmp[i1203]);
      }
    }
  }
  prev = next_prev1177;
  next_prev1177.clear();
  for(int i1176=0;i1176<(int)prev.size();++i1176) {
    i = prev[i1176];
    tmp = parse_slash1204();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1177.push_back(prev[i1176]); }
    for(int i1219=0;i1219<(int)tmp.size();++i1219) {
      if( tmp[i1219] != FAIL ) {
        prioritized_choice_final_prev1178.push_back(tmp[i1219]);
      }
    }
  }
  prev = next_prev1177;
  next_prev1177.clear();
  for(int i1176=0;i1176<(int)prev.size();++i1176) {
    i = prev[i1176];
    tmp = parse_slash1220();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1177.push_back(prev[i1176]); }
    for(int i1227=0;i1227<(int)tmp.size();++i1227) {
      if( tmp[i1227] != FAIL ) {
        prioritized_choice_final_prev1178.push_back(tmp[i1227]);
      }
    }
  }
  prev = next_prev1177;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev1178.empty() && prioritized_choice_final_prev1178.front() == FAIL )) {
      prioritized_choice_final_prev1178.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev1178;
  for(int i1175=0;i1175<(int)prev.size();++i1175) {
    if( prev[i1175] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1175]);
    }
  }
  return memo[key(158,backtracking_ptr_for_packrat158)] = result;
}

inline deque<int> parse_slash1179() { 
  if(memo.count(key(159,i))) {
    return memo[key(159,i)];
  }
  int backtracking_ptr_for_packrat159=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1181=0;i1181<(int)prev.size();++i1181) {
        if( prev[i1181] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1181]<m&&I[prev[i1181]]=='@') {
          tmp.push_back(prev[i1181]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1183;
      for(int i1182=0;i1182<(int)prev.size();++i1182) {
        if( prev[i1182] == FAIL ) {
          if(!(!next_prev1183.empty() && next_prev1183.front() == FAIL )) {
            next_prev1183.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1182];
        tmp = parse__();
        
        for(int i1182=0;i1182<(int)tmp.size();++i1182) {
          if( tmp[i1182] == FAIL ) {
            if(!( !next_prev1183.empty() && next_prev1183[0] == FAIL )) {
              next_prev1183.push_front(FAIL);
            }
          } else {
            next_prev1183.push_back(tmp[i1182]);
          }
        }
      }
      prev = next_prev1183;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (QualifiedName) */
    deque<int> next_prev1185;
    for(int i1184=0;i1184<(int)prev.size();++i1184) {
      if( prev[i1184] == FAIL ) {
        if(!(!next_prev1185.empty() && next_prev1185.front() == FAIL )) {
          next_prev1185.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1184];
      tmp = parse_QualifiedName();
      
      for(int i1184=0;i1184<(int)tmp.size();++i1184) {
        if( tmp[i1184] == FAIL ) {
          if(!( !next_prev1185.empty() && next_prev1185[0] == FAIL )) {
            next_prev1185.push_front(FAIL);
          }
        } else {
          next_prev1185.push_back(tmp[i1184]);
        }
      }
    }
    prev = next_prev1185;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1186=0;i1186<(int)prev.size();++i1186) {
        if( prev[i1186] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1186]<m&&I[prev[i1186]]=='(') {
          tmp.push_back(prev[i1186]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1188;
      for(int i1187=0;i1187<(int)prev.size();++i1187) {
        if( prev[i1187] == FAIL ) {
          if(!(!next_prev1188.empty() && next_prev1188.front() == FAIL )) {
            next_prev1188.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1187];
        tmp = parse__();
        
        for(int i1187=0;i1187<(int)tmp.size();++i1187) {
          if( tmp[i1187] == FAIL ) {
            if(!( !next_prev1188.empty() && next_prev1188[0] == FAIL )) {
              next_prev1188.push_front(FAIL);
            }
          } else {
            next_prev1188.push_back(tmp[i1187]);
          }
        }
      }
      prev = next_prev1188;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev1190;
    deque<int> prioritized_choice_final_prev1191;
    next_prev1190.clear();
    for(int i1189=0;i1189<(int)prev.size();++i1189) {
      i = prev[i1189];
      tmp = parse_slash1192();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1190.push_back(prev[i1189]); }
      for(int i1196=0;i1196<(int)tmp.size();++i1196) {
        if( tmp[i1196] != FAIL ) {
          prioritized_choice_final_prev1191.push_back(tmp[i1196]);
        }
      }
    }
    prev = next_prev1190;
    next_prev1190.clear();
    for(int i1189=0;i1189<(int)prev.size();++i1189) {
      i = prev[i1189];
      tmp = parse_slash1197();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1190.push_back(prev[i1189]); }
      for(int i1199=0;i1199<(int)tmp.size();++i1199) {
        if( tmp[i1199] != FAIL ) {
          prioritized_choice_final_prev1191.push_back(tmp[i1199]);
        }
      }
    }
    prev = next_prev1190;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev1191.empty() && prioritized_choice_final_prev1191.front() == FAIL )) {
        prioritized_choice_final_prev1191.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev1191;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1200=0;i1200<(int)prev.size();++i1200) {
        if( prev[i1200] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1200]<m&&I[prev[i1200]]==')') {
          tmp.push_back(prev[i1200]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1202;
      for(int i1201=0;i1201<(int)prev.size();++i1201) {
        if( prev[i1201] == FAIL ) {
          if(!(!next_prev1202.empty() && next_prev1202.front() == FAIL )) {
            next_prev1202.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1201];
        tmp = parse__();
        
        for(int i1201=0;i1201<(int)tmp.size();++i1201) {
          if( tmp[i1201] == FAIL ) {
            if(!( !next_prev1202.empty() && next_prev1202[0] == FAIL )) {
              next_prev1202.push_front(FAIL);
            }
          } else {
            next_prev1202.push_back(tmp[i1201]);
          }
        }
      }
      prev = next_prev1202;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1180=0;i1180<(int)prev.size();++i1180) {
    if( prev[i1180] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1180]);
    }
  }
  return memo[key(159,backtracking_ptr_for_packrat159)] = result;
}

inline deque<int> parse_slash1192() { 
  if(memo.count(key(160,i))) {
    return memo[key(160,i)];
  }
  int backtracking_ptr_for_packrat160=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ElementValuePairList) */
    deque<int> next_prev1195;
    for(int i1194=0;i1194<(int)prev.size();++i1194) {
      if( prev[i1194] == FAIL ) {
        if(!(!next_prev1195.empty() && next_prev1195.front() == FAIL )) {
          next_prev1195.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1194];
      tmp = parse_ElementValuePairList();
      
      for(int i1194=0;i1194<(int)tmp.size();++i1194) {
        if( tmp[i1194] == FAIL ) {
          if(!( !next_prev1195.empty() && next_prev1195[0] == FAIL )) {
            next_prev1195.push_front(FAIL);
          }
        } else {
          next_prev1195.push_back(tmp[i1194]);
        }
      }
    }
    prev = next_prev1195;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1193=0;i1193<(int)prev.size();++i1193) {
    if( prev[i1193] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1193]);
    }
  }
  return memo[key(160,backtracking_ptr_for_packrat160)] = result;
}

inline deque<int> parse_slash1197() { 
  if(memo.count(key(161,i))) {
    return memo[key(161,i)];
  }
  int backtracking_ptr_for_packrat161=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i1198=0;i1198<(int)prev.size();++i1198) {
    if( prev[i1198] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1198]);
    }
  }
  return memo[key(161,backtracking_ptr_for_packrat161)] = result;
}

inline deque<int> parse_slash1204() { 
  if(memo.count(key(162,i))) {
    return memo[key(162,i)];
  }
  int backtracking_ptr_for_packrat162=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1206=0;i1206<(int)prev.size();++i1206) {
        if( prev[i1206] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1206]<m&&I[prev[i1206]]=='@') {
          tmp.push_back(prev[i1206]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1208;
      for(int i1207=0;i1207<(int)prev.size();++i1207) {
        if( prev[i1207] == FAIL ) {
          if(!(!next_prev1208.empty() && next_prev1208.front() == FAIL )) {
            next_prev1208.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1207];
        tmp = parse__();
        
        for(int i1207=0;i1207<(int)tmp.size();++i1207) {
          if( tmp[i1207] == FAIL ) {
            if(!( !next_prev1208.empty() && next_prev1208[0] == FAIL )) {
              next_prev1208.push_front(FAIL);
            }
          } else {
            next_prev1208.push_back(tmp[i1207]);
          }
        }
      }
      prev = next_prev1208;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (QualifiedName) */
    deque<int> next_prev1210;
    for(int i1209=0;i1209<(int)prev.size();++i1209) {
      if( prev[i1209] == FAIL ) {
        if(!(!next_prev1210.empty() && next_prev1210.front() == FAIL )) {
          next_prev1210.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1209];
      tmp = parse_QualifiedName();
      
      for(int i1209=0;i1209<(int)tmp.size();++i1209) {
        if( tmp[i1209] == FAIL ) {
          if(!( !next_prev1210.empty() && next_prev1210[0] == FAIL )) {
            next_prev1210.push_front(FAIL);
          }
        } else {
          next_prev1210.push_back(tmp[i1209]);
        }
      }
    }
    prev = next_prev1210;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1211=0;i1211<(int)prev.size();++i1211) {
        if( prev[i1211] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1211]<m&&I[prev[i1211]]=='(') {
          tmp.push_back(prev[i1211]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1213;
      for(int i1212=0;i1212<(int)prev.size();++i1212) {
        if( prev[i1212] == FAIL ) {
          if(!(!next_prev1213.empty() && next_prev1213.front() == FAIL )) {
            next_prev1213.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1212];
        tmp = parse__();
        
        for(int i1212=0;i1212<(int)tmp.size();++i1212) {
          if( tmp[i1212] == FAIL ) {
            if(!( !next_prev1213.empty() && next_prev1213[0] == FAIL )) {
              next_prev1213.push_front(FAIL);
            }
          } else {
            next_prev1213.push_back(tmp[i1212]);
          }
        }
      }
      prev = next_prev1213;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ElementValue) */
    deque<int> next_prev1215;
    for(int i1214=0;i1214<(int)prev.size();++i1214) {
      if( prev[i1214] == FAIL ) {
        if(!(!next_prev1215.empty() && next_prev1215.front() == FAIL )) {
          next_prev1215.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1214];
      tmp = parse_ElementValue();
      
      for(int i1214=0;i1214<(int)tmp.size();++i1214) {
        if( tmp[i1214] == FAIL ) {
          if(!( !next_prev1215.empty() && next_prev1215[0] == FAIL )) {
            next_prev1215.push_front(FAIL);
          }
        } else {
          next_prev1215.push_back(tmp[i1214]);
        }
      }
    }
    prev = next_prev1215;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1216=0;i1216<(int)prev.size();++i1216) {
        if( prev[i1216] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1216]<m&&I[prev[i1216]]==')') {
          tmp.push_back(prev[i1216]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1218;
      for(int i1217=0;i1217<(int)prev.size();++i1217) {
        if( prev[i1217] == FAIL ) {
          if(!(!next_prev1218.empty() && next_prev1218.front() == FAIL )) {
            next_prev1218.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1217];
        tmp = parse__();
        
        for(int i1217=0;i1217<(int)tmp.size();++i1217) {
          if( tmp[i1217] == FAIL ) {
            if(!( !next_prev1218.empty() && next_prev1218[0] == FAIL )) {
              next_prev1218.push_front(FAIL);
            }
          } else {
            next_prev1218.push_back(tmp[i1217]);
          }
        }
      }
      prev = next_prev1218;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1205=0;i1205<(int)prev.size();++i1205) {
    if( prev[i1205] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1205]);
    }
  }
  return memo[key(162,backtracking_ptr_for_packrat162)] = result;
}

inline deque<int> parse_slash1220() { 
  if(memo.count(key(163,i))) {
    return memo[key(163,i)];
  }
  int backtracking_ptr_for_packrat163=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1222=0;i1222<(int)prev.size();++i1222) {
        if( prev[i1222] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1222]<m&&I[prev[i1222]]=='@') {
          tmp.push_back(prev[i1222]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1224;
      for(int i1223=0;i1223<(int)prev.size();++i1223) {
        if( prev[i1223] == FAIL ) {
          if(!(!next_prev1224.empty() && next_prev1224.front() == FAIL )) {
            next_prev1224.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1223];
        tmp = parse__();
        
        for(int i1223=0;i1223<(int)tmp.size();++i1223) {
          if( tmp[i1223] == FAIL ) {
            if(!( !next_prev1224.empty() && next_prev1224[0] == FAIL )) {
              next_prev1224.push_front(FAIL);
            }
          } else {
            next_prev1224.push_back(tmp[i1223]);
          }
        }
      }
      prev = next_prev1224;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (QualifiedName) */
    deque<int> next_prev1226;
    for(int i1225=0;i1225<(int)prev.size();++i1225) {
      if( prev[i1225] == FAIL ) {
        if(!(!next_prev1226.empty() && next_prev1226.front() == FAIL )) {
          next_prev1226.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1225];
      tmp = parse_QualifiedName();
      
      for(int i1225=0;i1225<(int)tmp.size();++i1225) {
        if( tmp[i1225] == FAIL ) {
          if(!( !next_prev1226.empty() && next_prev1226[0] == FAIL )) {
            next_prev1226.push_front(FAIL);
          }
        } else {
          next_prev1226.push_back(tmp[i1225]);
        }
      }
    }
    prev = next_prev1226;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1221=0;i1221<(int)prev.size();++i1221) {
    if( prev[i1221] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1221]);
    }
  }
  return memo[key(163,backtracking_ptr_for_packrat163)] = result;
}

deque<int> parse_ElementValuePairList(){
  if(memo.count(key(164,i))) {
    return memo[key(164,i)];
  }
  int backtracking_ptr_for_packrat164=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ElementValuePair) */
    deque<int> next_prev1230;
    for(int i1229=0;i1229<(int)prev.size();++i1229) {
      if( prev[i1229] == FAIL ) {
        if(!(!next_prev1230.empty() && next_prev1230.front() == FAIL )) {
          next_prev1230.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1229];
      tmp = parse_ElementValuePair();
      
      for(int i1229=0;i1229<(int)tmp.size();++i1229) {
        if( tmp[i1229] == FAIL ) {
          if(!( !next_prev1230.empty() && next_prev1230[0] == FAIL )) {
            next_prev1230.push_front(FAIL);
          }
        } else {
          next_prev1230.push_back(tmp[i1229]);
        }
      }
    }
    prev = next_prev1230;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev1238;
    deque<int> star_final_prev1239;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev1238.clear();
      for(int i1240=0;i1240<(int)prev.size();++i1240) {
        i = prev[i1240];
        tmp = parse_while1231();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev1239.push_back(prev[i1240]);
        }
        for(int i1241=0;i1241<(int)tmp.size();++i1241) {
          if(tmp[i1241]==FAIL) {
            if(!( !next_prev1238.empty() && next_prev1238.front() == FAIL )) {
              next_prev1238.push_front(FAIL);
            }
          } else {
            next_prev1238.push_back(tmp[i1241]);
          }
        }
      }
      prev = next_prev1238;
    }
    prev = star_final_prev1239;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1228=0;i1228<(int)prev.size();++i1228) {
    if( prev[i1228] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1228]);
    }
  }
  return memo[key(164,backtracking_ptr_for_packrat164)] = result;
}

inline deque<int> parse_while1231() { 
  if(memo.count(key(165,i))) {
    return memo[key(165,i)];
  }
  int backtracking_ptr_for_packrat165=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1233=0;i1233<(int)prev.size();++i1233) {
        if( prev[i1233] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1233]<m&&I[prev[i1233]]==',') {
          tmp.push_back(prev[i1233]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1235;
      for(int i1234=0;i1234<(int)prev.size();++i1234) {
        if( prev[i1234] == FAIL ) {
          if(!(!next_prev1235.empty() && next_prev1235.front() == FAIL )) {
            next_prev1235.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1234];
        tmp = parse__();
        
        for(int i1234=0;i1234<(int)tmp.size();++i1234) {
          if( tmp[i1234] == FAIL ) {
            if(!( !next_prev1235.empty() && next_prev1235[0] == FAIL )) {
              next_prev1235.push_front(FAIL);
            }
          } else {
            next_prev1235.push_back(tmp[i1234]);
          }
        }
      }
      prev = next_prev1235;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ElementValuePair) */
    deque<int> next_prev1237;
    for(int i1236=0;i1236<(int)prev.size();++i1236) {
      if( prev[i1236] == FAIL ) {
        if(!(!next_prev1237.empty() && next_prev1237.front() == FAIL )) {
          next_prev1237.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1236];
      tmp = parse_ElementValuePair();
      
      for(int i1236=0;i1236<(int)tmp.size();++i1236) {
        if( tmp[i1236] == FAIL ) {
          if(!( !next_prev1237.empty() && next_prev1237[0] == FAIL )) {
            next_prev1237.push_front(FAIL);
          }
        } else {
          next_prev1237.push_back(tmp[i1236]);
        }
      }
    }
    prev = next_prev1237;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1232=0;i1232<(int)prev.size();++i1232) {
    if( prev[i1232] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1232]);
    }
  }
  return memo[key(165,backtracking_ptr_for_packrat165)] = result;
}

deque<int> parse_ElementValuePair(){
  if(memo.count(key(166,i))) {
    return memo[key(166,i)];
  }
  int backtracking_ptr_for_packrat166=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev1244;
    for(int i1243=0;i1243<(int)prev.size();++i1243) {
      if( prev[i1243] == FAIL ) {
        if(!(!next_prev1244.empty() && next_prev1244.front() == FAIL )) {
          next_prev1244.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1243];
      tmp = parse_Identifier();
      
      for(int i1243=0;i1243<(int)tmp.size();++i1243) {
        if( tmp[i1243] == FAIL ) {
          if(!( !next_prev1244.empty() && next_prev1244[0] == FAIL )) {
            next_prev1244.push_front(FAIL);
          }
        } else {
          next_prev1244.push_back(tmp[i1243]);
        }
      }
    }
    prev = next_prev1244;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1245=0;i1245<(int)prev.size();++i1245) {
        if( prev[i1245] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1245]<m&&I[prev[i1245]]=='=') {
          tmp.push_back(prev[i1245]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev1250;
      for(int i1249=0;i1249<(int)prev.size();++i1249) {
        i = prev[i1249];
        tmp = parse_not1246();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev1250.push_back(prev[i1249]);
        } else {
          if(!(!next_prev1250.empty()&&next_prev1250.front()==FAIL)) {
            next_prev1250.push_front(FAIL);
          }
        }
      }
      prev = next_prev1250;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1252;
      for(int i1251=0;i1251<(int)prev.size();++i1251) {
        if( prev[i1251] == FAIL ) {
          if(!(!next_prev1252.empty() && next_prev1252.front() == FAIL )) {
            next_prev1252.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1251];
        tmp = parse__();
        
        for(int i1251=0;i1251<(int)tmp.size();++i1251) {
          if( tmp[i1251] == FAIL ) {
            if(!( !next_prev1252.empty() && next_prev1252[0] == FAIL )) {
              next_prev1252.push_front(FAIL);
            }
          } else {
            next_prev1252.push_back(tmp[i1251]);
          }
        }
      }
      prev = next_prev1252;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ElementValue) */
    deque<int> next_prev1254;
    for(int i1253=0;i1253<(int)prev.size();++i1253) {
      if( prev[i1253] == FAIL ) {
        if(!(!next_prev1254.empty() && next_prev1254.front() == FAIL )) {
          next_prev1254.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1253];
      tmp = parse_ElementValue();
      
      for(int i1253=0;i1253<(int)tmp.size();++i1253) {
        if( tmp[i1253] == FAIL ) {
          if(!( !next_prev1254.empty() && next_prev1254[0] == FAIL )) {
            next_prev1254.push_front(FAIL);
          }
        } else {
          next_prev1254.push_back(tmp[i1253]);
        }
      }
    }
    prev = next_prev1254;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1242=0;i1242<(int)prev.size();++i1242) {
    if( prev[i1242] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1242]);
    }
  }
  return memo[key(166,backtracking_ptr_for_packrat166)] = result;
}

inline deque<int> parse_not1246() { 
  if(memo.count(key(167,i))) {
    return memo[key(167,i)];
  }
  int backtracking_ptr_for_packrat167=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i1248=0;i1248<(int)prev.size();++i1248) {
    if( prev[i1248] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i1248]<m&&I[prev[i1248]]=='=') {
      tmp.push_back(prev[i1248]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i1247=0;i1247<(int)prev.size();++i1247) {
    if( prev[i1247] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1247]);
    }
  }
  return memo[key(167,backtracking_ptr_for_packrat167)] = result;
}

deque<int> parse_ElementValue(){
  if(memo.count(key(168,i))) {
    return memo[key(168,i)];
  }
  int backtracking_ptr_for_packrat168=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev1257;
  deque<int> prioritized_choice_final_prev1258;
  next_prev1257.clear();
  for(int i1256=0;i1256<(int)prev.size();++i1256) {
    i = prev[i1256];
    tmp = parse_slash1259();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1257.push_back(prev[i1256]); }
    for(int i1263=0;i1263<(int)tmp.size();++i1263) {
      if( tmp[i1263] != FAIL ) {
        prioritized_choice_final_prev1258.push_back(tmp[i1263]);
      }
    }
  }
  prev = next_prev1257;
  next_prev1257.clear();
  for(int i1256=0;i1256<(int)prev.size();++i1256) {
    i = prev[i1256];
    tmp = parse_slash1264();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1257.push_back(prev[i1256]); }
    for(int i1268=0;i1268<(int)tmp.size();++i1268) {
      if( tmp[i1268] != FAIL ) {
        prioritized_choice_final_prev1258.push_back(tmp[i1268]);
      }
    }
  }
  prev = next_prev1257;
  next_prev1257.clear();
  for(int i1256=0;i1256<(int)prev.size();++i1256) {
    i = prev[i1256];
    tmp = parse_slash1269();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1257.push_back(prev[i1256]); }
    for(int i1273=0;i1273<(int)tmp.size();++i1273) {
      if( tmp[i1273] != FAIL ) {
        prioritized_choice_final_prev1258.push_back(tmp[i1273]);
      }
    }
  }
  prev = next_prev1257;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev1258.empty() && prioritized_choice_final_prev1258.front() == FAIL )) {
      prioritized_choice_final_prev1258.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev1258;
  for(int i1255=0;i1255<(int)prev.size();++i1255) {
    if( prev[i1255] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1255]);
    }
  }
  return memo[key(168,backtracking_ptr_for_packrat168)] = result;
}

inline deque<int> parse_slash1259() { 
  if(memo.count(key(169,i))) {
    return memo[key(169,i)];
  }
  int backtracking_ptr_for_packrat169=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ElementValueArrayInitializer) */
    deque<int> next_prev1262;
    for(int i1261=0;i1261<(int)prev.size();++i1261) {
      if( prev[i1261] == FAIL ) {
        if(!(!next_prev1262.empty() && next_prev1262.front() == FAIL )) {
          next_prev1262.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1261];
      tmp = parse_ElementValueArrayInitializer();
      
      for(int i1261=0;i1261<(int)tmp.size();++i1261) {
        if( tmp[i1261] == FAIL ) {
          if(!( !next_prev1262.empty() && next_prev1262[0] == FAIL )) {
            next_prev1262.push_front(FAIL);
          }
        } else {
          next_prev1262.push_back(tmp[i1261]);
        }
      }
    }
    prev = next_prev1262;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1260=0;i1260<(int)prev.size();++i1260) {
    if( prev[i1260] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1260]);
    }
  }
  return memo[key(169,backtracking_ptr_for_packrat169)] = result;
}

inline deque<int> parse_slash1264() { 
  if(memo.count(key(170,i))) {
    return memo[key(170,i)];
  }
  int backtracking_ptr_for_packrat170=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ConditionalExpression) */
    deque<int> next_prev1267;
    for(int i1266=0;i1266<(int)prev.size();++i1266) {
      if( prev[i1266] == FAIL ) {
        if(!(!next_prev1267.empty() && next_prev1267.front() == FAIL )) {
          next_prev1267.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1266];
      tmp = parse_ConditionalExpression();
      
      for(int i1266=0;i1266<(int)tmp.size();++i1266) {
        if( tmp[i1266] == FAIL ) {
          if(!( !next_prev1267.empty() && next_prev1267[0] == FAIL )) {
            next_prev1267.push_front(FAIL);
          }
        } else {
          next_prev1267.push_back(tmp[i1266]);
        }
      }
    }
    prev = next_prev1267;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1265=0;i1265<(int)prev.size();++i1265) {
    if( prev[i1265] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1265]);
    }
  }
  return memo[key(170,backtracking_ptr_for_packrat170)] = result;
}

inline deque<int> parse_slash1269() { 
  if(memo.count(key(171,i))) {
    return memo[key(171,i)];
  }
  int backtracking_ptr_for_packrat171=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotation) */
    deque<int> next_prev1272;
    for(int i1271=0;i1271<(int)prev.size();++i1271) {
      if( prev[i1271] == FAIL ) {
        if(!(!next_prev1272.empty() && next_prev1272.front() == FAIL )) {
          next_prev1272.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1271];
      tmp = parse_Annotation();
      
      for(int i1271=0;i1271<(int)tmp.size();++i1271) {
        if( tmp[i1271] == FAIL ) {
          if(!( !next_prev1272.empty() && next_prev1272[0] == FAIL )) {
            next_prev1272.push_front(FAIL);
          }
        } else {
          next_prev1272.push_back(tmp[i1271]);
        }
      }
    }
    prev = next_prev1272;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1270=0;i1270<(int)prev.size();++i1270) {
    if( prev[i1270] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1270]);
    }
  }
  return memo[key(171,backtracking_ptr_for_packrat171)] = result;
}

deque<int> parse_ElementValueArrayInitializer(){
  if(memo.count(key(172,i))) {
    return memo[key(172,i)];
  }
  int backtracking_ptr_for_packrat172=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1275=0;i1275<(int)prev.size();++i1275) {
        if( prev[i1275] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1275]<m&&I[prev[i1275]]=='{') {
          tmp.push_back(prev[i1275]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1277;
      for(int i1276=0;i1276<(int)prev.size();++i1276) {
        if( prev[i1276] == FAIL ) {
          if(!(!next_prev1277.empty() && next_prev1277.front() == FAIL )) {
            next_prev1277.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1276];
        tmp = parse__();
        
        for(int i1276=0;i1276<(int)tmp.size();++i1276) {
          if( tmp[i1276] == FAIL ) {
            if(!( !next_prev1277.empty() && next_prev1277[0] == FAIL )) {
              next_prev1277.push_front(FAIL);
            }
          } else {
            next_prev1277.push_back(tmp[i1276]);
          }
        }
      }
      prev = next_prev1277;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev1279;
    deque<int> prioritized_choice_final_prev1280;
    next_prev1279.clear();
    for(int i1278=0;i1278<(int)prev.size();++i1278) {
      i = prev[i1278];
      tmp = parse_slash1281();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1279.push_back(prev[i1278]); }
      for(int i1285=0;i1285<(int)tmp.size();++i1285) {
        if( tmp[i1285] != FAIL ) {
          prioritized_choice_final_prev1280.push_back(tmp[i1285]);
        }
      }
    }
    prev = next_prev1279;
    next_prev1279.clear();
    for(int i1278=0;i1278<(int)prev.size();++i1278) {
      i = prev[i1278];
      tmp = parse_slash1286();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1279.push_back(prev[i1278]); }
      for(int i1288=0;i1288<(int)tmp.size();++i1288) {
        if( tmp[i1288] != FAIL ) {
          prioritized_choice_final_prev1280.push_back(tmp[i1288]);
        }
      }
    }
    prev = next_prev1279;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev1280.empty() && prioritized_choice_final_prev1280.front() == FAIL )) {
        prioritized_choice_final_prev1280.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev1280;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev1290;
    deque<int> prioritized_choice_final_prev1291;
    next_prev1290.clear();
    for(int i1289=0;i1289<(int)prev.size();++i1289) {
      i = prev[i1289];
      tmp = parse_slash1292();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1290.push_back(prev[i1289]); }
      for(int i1297=0;i1297<(int)tmp.size();++i1297) {
        if( tmp[i1297] != FAIL ) {
          prioritized_choice_final_prev1291.push_back(tmp[i1297]);
        }
      }
    }
    prev = next_prev1290;
    next_prev1290.clear();
    for(int i1289=0;i1289<(int)prev.size();++i1289) {
      i = prev[i1289];
      tmp = parse_slash1298();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1290.push_back(prev[i1289]); }
      for(int i1300=0;i1300<(int)tmp.size();++i1300) {
        if( tmp[i1300] != FAIL ) {
          prioritized_choice_final_prev1291.push_back(tmp[i1300]);
        }
      }
    }
    prev = next_prev1290;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev1291.empty() && prioritized_choice_final_prev1291.front() == FAIL )) {
        prioritized_choice_final_prev1291.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev1291;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1301=0;i1301<(int)prev.size();++i1301) {
        if( prev[i1301] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1301]<m&&I[prev[i1301]]=='}') {
          tmp.push_back(prev[i1301]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1303;
      for(int i1302=0;i1302<(int)prev.size();++i1302) {
        if( prev[i1302] == FAIL ) {
          if(!(!next_prev1303.empty() && next_prev1303.front() == FAIL )) {
            next_prev1303.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1302];
        tmp = parse__();
        
        for(int i1302=0;i1302<(int)tmp.size();++i1302) {
          if( tmp[i1302] == FAIL ) {
            if(!( !next_prev1303.empty() && next_prev1303[0] == FAIL )) {
              next_prev1303.push_front(FAIL);
            }
          } else {
            next_prev1303.push_back(tmp[i1302]);
          }
        }
      }
      prev = next_prev1303;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1274=0;i1274<(int)prev.size();++i1274) {
    if( prev[i1274] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1274]);
    }
  }
  return memo[key(172,backtracking_ptr_for_packrat172)] = result;
}

inline deque<int> parse_slash1281() { 
  if(memo.count(key(173,i))) {
    return memo[key(173,i)];
  }
  int backtracking_ptr_for_packrat173=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ElementValueList) */
    deque<int> next_prev1284;
    for(int i1283=0;i1283<(int)prev.size();++i1283) {
      if( prev[i1283] == FAIL ) {
        if(!(!next_prev1284.empty() && next_prev1284.front() == FAIL )) {
          next_prev1284.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1283];
      tmp = parse_ElementValueList();
      
      for(int i1283=0;i1283<(int)tmp.size();++i1283) {
        if( tmp[i1283] == FAIL ) {
          if(!( !next_prev1284.empty() && next_prev1284[0] == FAIL )) {
            next_prev1284.push_front(FAIL);
          }
        } else {
          next_prev1284.push_back(tmp[i1283]);
        }
      }
    }
    prev = next_prev1284;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1282=0;i1282<(int)prev.size();++i1282) {
    if( prev[i1282] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1282]);
    }
  }
  return memo[key(173,backtracking_ptr_for_packrat173)] = result;
}

inline deque<int> parse_slash1286() { 
  if(memo.count(key(174,i))) {
    return memo[key(174,i)];
  }
  int backtracking_ptr_for_packrat174=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i1287=0;i1287<(int)prev.size();++i1287) {
    if( prev[i1287] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1287]);
    }
  }
  return memo[key(174,backtracking_ptr_for_packrat174)] = result;
}

inline deque<int> parse_slash1292() { 
  if(memo.count(key(175,i))) {
    return memo[key(175,i)];
  }
  int backtracking_ptr_for_packrat175=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i1294=0;i1294<(int)prev.size();++i1294) {
      if( prev[i1294] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i1294]<m&&I[prev[i1294]]==',') {
        tmp.push_back(prev[i1294]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (_) */
    deque<int> next_prev1296;
    for(int i1295=0;i1295<(int)prev.size();++i1295) {
      if( prev[i1295] == FAIL ) {
        if(!(!next_prev1296.empty() && next_prev1296.front() == FAIL )) {
          next_prev1296.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1295];
      tmp = parse__();
      
      for(int i1295=0;i1295<(int)tmp.size();++i1295) {
        if( tmp[i1295] == FAIL ) {
          if(!( !next_prev1296.empty() && next_prev1296[0] == FAIL )) {
            next_prev1296.push_front(FAIL);
          }
        } else {
          next_prev1296.push_back(tmp[i1295]);
        }
      }
    }
    prev = next_prev1296;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1293=0;i1293<(int)prev.size();++i1293) {
    if( prev[i1293] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1293]);
    }
  }
  return memo[key(175,backtracking_ptr_for_packrat175)] = result;
}

inline deque<int> parse_slash1298() { 
  if(memo.count(key(176,i))) {
    return memo[key(176,i)];
  }
  int backtracking_ptr_for_packrat176=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i1299=0;i1299<(int)prev.size();++i1299) {
    if( prev[i1299] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1299]);
    }
  }
  return memo[key(176,backtracking_ptr_for_packrat176)] = result;
}

deque<int> parse_ElementValueList(){
  if(memo.count(key(177,i))) {
    return memo[key(177,i)];
  }
  int backtracking_ptr_for_packrat177=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ElementValue) */
    deque<int> next_prev1306;
    for(int i1305=0;i1305<(int)prev.size();++i1305) {
      if( prev[i1305] == FAIL ) {
        if(!(!next_prev1306.empty() && next_prev1306.front() == FAIL )) {
          next_prev1306.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1305];
      tmp = parse_ElementValue();
      
      for(int i1305=0;i1305<(int)tmp.size();++i1305) {
        if( tmp[i1305] == FAIL ) {
          if(!( !next_prev1306.empty() && next_prev1306[0] == FAIL )) {
            next_prev1306.push_front(FAIL);
          }
        } else {
          next_prev1306.push_back(tmp[i1305]);
        }
      }
    }
    prev = next_prev1306;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev1314;
    deque<int> star_final_prev1315;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev1314.clear();
      for(int i1316=0;i1316<(int)prev.size();++i1316) {
        i = prev[i1316];
        tmp = parse_while1307();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev1315.push_back(prev[i1316]);
        }
        for(int i1317=0;i1317<(int)tmp.size();++i1317) {
          if(tmp[i1317]==FAIL) {
            if(!( !next_prev1314.empty() && next_prev1314.front() == FAIL )) {
              next_prev1314.push_front(FAIL);
            }
          } else {
            next_prev1314.push_back(tmp[i1317]);
          }
        }
      }
      prev = next_prev1314;
    }
    prev = star_final_prev1315;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1304=0;i1304<(int)prev.size();++i1304) {
    if( prev[i1304] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1304]);
    }
  }
  return memo[key(177,backtracking_ptr_for_packrat177)] = result;
}

inline deque<int> parse_while1307() { 
  if(memo.count(key(178,i))) {
    return memo[key(178,i)];
  }
  int backtracking_ptr_for_packrat178=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1309=0;i1309<(int)prev.size();++i1309) {
        if( prev[i1309] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1309]<m&&I[prev[i1309]]==',') {
          tmp.push_back(prev[i1309]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1311;
      for(int i1310=0;i1310<(int)prev.size();++i1310) {
        if( prev[i1310] == FAIL ) {
          if(!(!next_prev1311.empty() && next_prev1311.front() == FAIL )) {
            next_prev1311.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1310];
        tmp = parse__();
        
        for(int i1310=0;i1310<(int)tmp.size();++i1310) {
          if( tmp[i1310] == FAIL ) {
            if(!( !next_prev1311.empty() && next_prev1311[0] == FAIL )) {
              next_prev1311.push_front(FAIL);
            }
          } else {
            next_prev1311.push_back(tmp[i1310]);
          }
        }
      }
      prev = next_prev1311;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ElementValue) */
    deque<int> next_prev1313;
    for(int i1312=0;i1312<(int)prev.size();++i1312) {
      if( prev[i1312] == FAIL ) {
        if(!(!next_prev1313.empty() && next_prev1313.front() == FAIL )) {
          next_prev1313.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1312];
      tmp = parse_ElementValue();
      
      for(int i1312=0;i1312<(int)tmp.size();++i1312) {
        if( tmp[i1312] == FAIL ) {
          if(!( !next_prev1313.empty() && next_prev1313[0] == FAIL )) {
            next_prev1313.push_front(FAIL);
          }
        } else {
          next_prev1313.push_back(tmp[i1312]);
        }
      }
    }
    prev = next_prev1313;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1308=0;i1308<(int)prev.size();++i1308) {
    if( prev[i1308] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1308]);
    }
  }
  return memo[key(178,backtracking_ptr_for_packrat178)] = result;
}

deque<int> parse_VariableDeclaration(){
  if(memo.count(key(179,i))) {
    return memo[key(179,i)];
  }
  int backtracking_ptr_for_packrat179=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev1320;
    deque<int> prioritized_choice_final_prev1321;
    next_prev1320.clear();
    for(int i1319=0;i1319<(int)prev.size();++i1319) {
      i = prev[i1319];
      tmp = parse_slash1322();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1320.push_back(prev[i1319]); }
      for(int i1326=0;i1326<(int)tmp.size();++i1326) {
        if( tmp[i1326] != FAIL ) {
          prioritized_choice_final_prev1321.push_back(tmp[i1326]);
        }
      }
    }
    prev = next_prev1320;
    next_prev1320.clear();
    for(int i1319=0;i1319<(int)prev.size();++i1319) {
      i = prev[i1319];
      tmp = parse_slash1327();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1320.push_back(prev[i1319]); }
      for(int i1329=0;i1329<(int)tmp.size();++i1329) {
        if( tmp[i1329] != FAIL ) {
          prioritized_choice_final_prev1321.push_back(tmp[i1329]);
        }
      }
    }
    prev = next_prev1320;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev1321.empty() && prioritized_choice_final_prev1321.front() == FAIL )) {
        prioritized_choice_final_prev1321.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev1321;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Type) */
    deque<int> next_prev1331;
    for(int i1330=0;i1330<(int)prev.size();++i1330) {
      if( prev[i1330] == FAIL ) {
        if(!(!next_prev1331.empty() && next_prev1331.front() == FAIL )) {
          next_prev1331.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1330];
      tmp = parse_Type();
      
      for(int i1330=0;i1330<(int)tmp.size();++i1330) {
        if( tmp[i1330] == FAIL ) {
          if(!( !next_prev1331.empty() && next_prev1331[0] == FAIL )) {
            next_prev1331.push_front(FAIL);
          }
        } else {
          next_prev1331.push_back(tmp[i1330]);
        }
      }
    }
    prev = next_prev1331;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (InitDeclList) */
    deque<int> next_prev1333;
    for(int i1332=0;i1332<(int)prev.size();++i1332) {
      if( prev[i1332] == FAIL ) {
        if(!(!next_prev1333.empty() && next_prev1333.front() == FAIL )) {
          next_prev1333.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1332];
      tmp = parse_InitDeclList();
      
      for(int i1332=0;i1332<(int)tmp.size();++i1332) {
        if( tmp[i1332] == FAIL ) {
          if(!( !next_prev1333.empty() && next_prev1333[0] == FAIL )) {
            next_prev1333.push_front(FAIL);
          }
        } else {
          next_prev1333.push_back(tmp[i1332]);
        }
      }
    }
    prev = next_prev1333;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1318=0;i1318<(int)prev.size();++i1318) {
    if( prev[i1318] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1318]);
    }
  }
  return memo[key(179,backtracking_ptr_for_packrat179)] = result;
}

inline deque<int> parse_slash1322() { 
  if(memo.count(key(180,i))) {
    return memo[key(180,i)];
  }
  int backtracking_ptr_for_packrat180=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (VariableModifiers) */
    deque<int> next_prev1325;
    for(int i1324=0;i1324<(int)prev.size();++i1324) {
      if( prev[i1324] == FAIL ) {
        if(!(!next_prev1325.empty() && next_prev1325.front() == FAIL )) {
          next_prev1325.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1324];
      tmp = parse_VariableModifiers();
      
      for(int i1324=0;i1324<(int)tmp.size();++i1324) {
        if( tmp[i1324] == FAIL ) {
          if(!( !next_prev1325.empty() && next_prev1325[0] == FAIL )) {
            next_prev1325.push_front(FAIL);
          }
        } else {
          next_prev1325.push_back(tmp[i1324]);
        }
      }
    }
    prev = next_prev1325;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1323=0;i1323<(int)prev.size();++i1323) {
    if( prev[i1323] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1323]);
    }
  }
  return memo[key(180,backtracking_ptr_for_packrat180)] = result;
}

inline deque<int> parse_slash1327() { 
  if(memo.count(key(181,i))) {
    return memo[key(181,i)];
  }
  int backtracking_ptr_for_packrat181=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i1328=0;i1328<(int)prev.size();++i1328) {
    if( prev[i1328] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1328]);
    }
  }
  return memo[key(181,backtracking_ptr_for_packrat181)] = result;
}

deque<int> parse_VariableModifier(){
  if(memo.count(key(182,i))) {
    return memo[key(182,i)];
  }
  int backtracking_ptr_for_packrat182=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev1336;
  deque<int> prioritized_choice_final_prev1337;
  next_prev1336.clear();
  for(int i1335=0;i1335<(int)prev.size();++i1335) {
    i = prev[i1335];
    tmp = parse_slash1338();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1336.push_back(prev[i1335]); }
    for(int i1342=0;i1342<(int)tmp.size();++i1342) {
      if( tmp[i1342] != FAIL ) {
        prioritized_choice_final_prev1337.push_back(tmp[i1342]);
      }
    }
  }
  prev = next_prev1336;
  next_prev1336.clear();
  for(int i1335=0;i1335<(int)prev.size();++i1335) {
    i = prev[i1335];
    tmp = parse_slash1343();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1336.push_back(prev[i1335]); }
    for(int i1358=0;i1358<(int)tmp.size();++i1358) {
      if( tmp[i1358] != FAIL ) {
        prioritized_choice_final_prev1337.push_back(tmp[i1358]);
      }
    }
  }
  prev = next_prev1336;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev1337.empty() && prioritized_choice_final_prev1337.front() == FAIL )) {
      prioritized_choice_final_prev1337.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev1337;
  for(int i1334=0;i1334<(int)prev.size();++i1334) {
    if( prev[i1334] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1334]);
    }
  }
  return memo[key(182,backtracking_ptr_for_packrat182)] = result;
}

inline deque<int> parse_slash1338() { 
  if(memo.count(key(183,i))) {
    return memo[key(183,i)];
  }
  int backtracking_ptr_for_packrat183=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotation) */
    deque<int> next_prev1341;
    for(int i1340=0;i1340<(int)prev.size();++i1340) {
      if( prev[i1340] == FAIL ) {
        if(!(!next_prev1341.empty() && next_prev1341.front() == FAIL )) {
          next_prev1341.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1340];
      tmp = parse_Annotation();
      
      for(int i1340=0;i1340<(int)tmp.size();++i1340) {
        if( tmp[i1340] == FAIL ) {
          if(!( !next_prev1341.empty() && next_prev1341[0] == FAIL )) {
            next_prev1341.push_front(FAIL);
          }
        } else {
          next_prev1341.push_back(tmp[i1340]);
        }
      }
    }
    prev = next_prev1341;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1339=0;i1339<(int)prev.size();++i1339) {
    if( prev[i1339] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1339]);
    }
  }
  return memo[key(183,backtracking_ptr_for_packrat183)] = result;
}

inline deque<int> parse_slash1343() { 
  if(memo.count(key(184,i))) {
    return memo[key(184,i)];
  }
  int backtracking_ptr_for_packrat184=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1345=0;i1345<(int)prev.size();++i1345) {
        if( prev[i1345] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1345]<m&&I[prev[i1345]]=='f') {
          tmp.push_back(prev[i1345]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1346=0;i1346<(int)prev.size();++i1346) {
        if( prev[i1346] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1346]<m&&I[prev[i1346]]=='i') {
          tmp.push_back(prev[i1346]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1347=0;i1347<(int)prev.size();++i1347) {
        if( prev[i1347] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1347]<m&&I[prev[i1347]]=='n') {
          tmp.push_back(prev[i1347]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1348=0;i1348<(int)prev.size();++i1348) {
        if( prev[i1348] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1348]<m&&I[prev[i1348]]=='a') {
          tmp.push_back(prev[i1348]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1349=0;i1349<(int)prev.size();++i1349) {
        if( prev[i1349] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1349]<m&&I[prev[i1349]]=='l') {
          tmp.push_back(prev[i1349]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev1355;
      for(int i1354=0;i1354<(int)prev.size();++i1354) {
        i = prev[i1354];
        tmp = parse_not1350();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev1355.push_back(prev[i1354]);
        } else {
          if(!(!next_prev1355.empty()&&next_prev1355.front()==FAIL)) {
            next_prev1355.push_front(FAIL);
          }
        }
      }
      prev = next_prev1355;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1357;
      for(int i1356=0;i1356<(int)prev.size();++i1356) {
        if( prev[i1356] == FAIL ) {
          if(!(!next_prev1357.empty() && next_prev1357.front() == FAIL )) {
            next_prev1357.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1356];
        tmp = parse__();
        
        for(int i1356=0;i1356<(int)tmp.size();++i1356) {
          if( tmp[i1356] == FAIL ) {
            if(!( !next_prev1357.empty() && next_prev1357[0] == FAIL )) {
              next_prev1357.push_front(FAIL);
            }
          } else {
            next_prev1357.push_back(tmp[i1356]);
          }
        }
      }
      prev = next_prev1357;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1344=0;i1344<(int)prev.size();++i1344) {
    if( prev[i1344] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1344]);
    }
  }
  return memo[key(184,backtracking_ptr_for_packrat184)] = result;
}

inline deque<int> parse_not1350() { 
  if(memo.count(key(185,i))) {
    return memo[key(185,i)];
  }
  int backtracking_ptr_for_packrat185=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev1353;
  for(int i1352=0;i1352<(int)prev.size();++i1352) {
    if( prev[i1352] == FAIL ) {
      if(!(!next_prev1353.empty() && next_prev1353.front() == FAIL )) {
        next_prev1353.push_front(FAIL);
      }
      continue;
    }
    i = prev[i1352];
    tmp = parse_W();
    
    for(int i1352=0;i1352<(int)tmp.size();++i1352) {
      if( tmp[i1352] == FAIL ) {
        if(!( !next_prev1353.empty() && next_prev1353[0] == FAIL )) {
          next_prev1353.push_front(FAIL);
        }
      } else {
        next_prev1353.push_back(tmp[i1352]);
      }
    }
  }
  prev = next_prev1353;
  for(int i1351=0;i1351<(int)prev.size();++i1351) {
    if( prev[i1351] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1351]);
    }
  }
  return memo[key(185,backtracking_ptr_for_packrat185)] = result;
}

deque<int> parse_VariableModifiers(){
  if(memo.count(key(186,i))) {
    return memo[key(186,i)];
  }
  int backtracking_ptr_for_packrat186=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (VariableModifier) */
    deque<int> next_prev1361;
    for(int i1360=0;i1360<(int)prev.size();++i1360) {
      if( prev[i1360] == FAIL ) {
        if(!(!next_prev1361.empty() && next_prev1361.front() == FAIL )) {
          next_prev1361.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1360];
      tmp = parse_VariableModifier();
      
      for(int i1360=0;i1360<(int)tmp.size();++i1360) {
        if( tmp[i1360] == FAIL ) {
          if(!( !next_prev1361.empty() && next_prev1361[0] == FAIL )) {
            next_prev1361.push_front(FAIL);
          }
        } else {
          next_prev1361.push_back(tmp[i1360]);
        }
      }
    }
    prev = next_prev1361;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev1366;
    deque<int> star_final_prev1367;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev1366.clear();
      for(int i1368=0;i1368<(int)prev.size();++i1368) {
        i = prev[i1368];
        tmp = parse_while1362();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev1367.push_back(prev[i1368]);
        }
        for(int i1369=0;i1369<(int)tmp.size();++i1369) {
          if(tmp[i1369]==FAIL) {
            if(!( !next_prev1366.empty() && next_prev1366.front() == FAIL )) {
              next_prev1366.push_front(FAIL);
            }
          } else {
            next_prev1366.push_back(tmp[i1369]);
          }
        }
      }
      prev = next_prev1366;
    }
    prev = star_final_prev1367;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1359=0;i1359<(int)prev.size();++i1359) {
    if( prev[i1359] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1359]);
    }
  }
  return memo[key(186,backtracking_ptr_for_packrat186)] = result;
}

inline deque<int> parse_while1362() { 
  if(memo.count(key(187,i))) {
    return memo[key(187,i)];
  }
  int backtracking_ptr_for_packrat187=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (VariableModifier) */
    deque<int> next_prev1365;
    for(int i1364=0;i1364<(int)prev.size();++i1364) {
      if( prev[i1364] == FAIL ) {
        if(!(!next_prev1365.empty() && next_prev1365.front() == FAIL )) {
          next_prev1365.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1364];
      tmp = parse_VariableModifier();
      
      for(int i1364=0;i1364<(int)tmp.size();++i1364) {
        if( tmp[i1364] == FAIL ) {
          if(!( !next_prev1365.empty() && next_prev1365[0] == FAIL )) {
            next_prev1365.push_front(FAIL);
          }
        } else {
          next_prev1365.push_back(tmp[i1364]);
        }
      }
    }
    prev = next_prev1365;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1363=0;i1363<(int)prev.size();++i1363) {
    if( prev[i1363] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1363]);
    }
  }
  return memo[key(187,backtracking_ptr_for_packrat187)] = result;
}

deque<int> parse_InitDeclList(){
  if(memo.count(key(188,i))) {
    return memo[key(188,i)];
  }
  int backtracking_ptr_for_packrat188=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (InitDecl) */
    deque<int> next_prev1372;
    for(int i1371=0;i1371<(int)prev.size();++i1371) {
      if( prev[i1371] == FAIL ) {
        if(!(!next_prev1372.empty() && next_prev1372.front() == FAIL )) {
          next_prev1372.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1371];
      tmp = parse_InitDecl();
      
      for(int i1371=0;i1371<(int)tmp.size();++i1371) {
        if( tmp[i1371] == FAIL ) {
          if(!( !next_prev1372.empty() && next_prev1372[0] == FAIL )) {
            next_prev1372.push_front(FAIL);
          }
        } else {
          next_prev1372.push_back(tmp[i1371]);
        }
      }
    }
    prev = next_prev1372;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev1380;
    deque<int> star_final_prev1381;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev1380.clear();
      for(int i1382=0;i1382<(int)prev.size();++i1382) {
        i = prev[i1382];
        tmp = parse_while1373();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev1381.push_back(prev[i1382]);
        }
        for(int i1383=0;i1383<(int)tmp.size();++i1383) {
          if(tmp[i1383]==FAIL) {
            if(!( !next_prev1380.empty() && next_prev1380.front() == FAIL )) {
              next_prev1380.push_front(FAIL);
            }
          } else {
            next_prev1380.push_back(tmp[i1383]);
          }
        }
      }
      prev = next_prev1380;
    }
    prev = star_final_prev1381;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1370=0;i1370<(int)prev.size();++i1370) {
    if( prev[i1370] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1370]);
    }
  }
  return memo[key(188,backtracking_ptr_for_packrat188)] = result;
}

inline deque<int> parse_while1373() { 
  if(memo.count(key(189,i))) {
    return memo[key(189,i)];
  }
  int backtracking_ptr_for_packrat189=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1375=0;i1375<(int)prev.size();++i1375) {
        if( prev[i1375] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1375]<m&&I[prev[i1375]]==',') {
          tmp.push_back(prev[i1375]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1377;
      for(int i1376=0;i1376<(int)prev.size();++i1376) {
        if( prev[i1376] == FAIL ) {
          if(!(!next_prev1377.empty() && next_prev1377.front() == FAIL )) {
            next_prev1377.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1376];
        tmp = parse__();
        
        for(int i1376=0;i1376<(int)tmp.size();++i1376) {
          if( tmp[i1376] == FAIL ) {
            if(!( !next_prev1377.empty() && next_prev1377[0] == FAIL )) {
              next_prev1377.push_front(FAIL);
            }
          } else {
            next_prev1377.push_back(tmp[i1376]);
          }
        }
      }
      prev = next_prev1377;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (InitDecl) */
    deque<int> next_prev1379;
    for(int i1378=0;i1378<(int)prev.size();++i1378) {
      if( prev[i1378] == FAIL ) {
        if(!(!next_prev1379.empty() && next_prev1379.front() == FAIL )) {
          next_prev1379.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1378];
      tmp = parse_InitDecl();
      
      for(int i1378=0;i1378<(int)tmp.size();++i1378) {
        if( tmp[i1378] == FAIL ) {
          if(!( !next_prev1379.empty() && next_prev1379[0] == FAIL )) {
            next_prev1379.push_front(FAIL);
          }
        } else {
          next_prev1379.push_back(tmp[i1378]);
        }
      }
    }
    prev = next_prev1379;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1374=0;i1374<(int)prev.size();++i1374) {
    if( prev[i1374] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1374]);
    }
  }
  return memo[key(189,backtracking_ptr_for_packrat189)] = result;
}

deque<int> parse_InitDecl(){
  if(memo.count(key(190,i))) {
    return memo[key(190,i)];
  }
  int backtracking_ptr_for_packrat190=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (VarName) */
    deque<int> next_prev1386;
    for(int i1385=0;i1385<(int)prev.size();++i1385) {
      if( prev[i1385] == FAIL ) {
        if(!(!next_prev1386.empty() && next_prev1386.front() == FAIL )) {
          next_prev1386.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1385];
      tmp = parse_VarName();
      
      for(int i1385=0;i1385<(int)tmp.size();++i1385) {
        if( tmp[i1385] == FAIL ) {
          if(!( !next_prev1386.empty() && next_prev1386[0] == FAIL )) {
            next_prev1386.push_front(FAIL);
          }
        } else {
          next_prev1386.push_back(tmp[i1385]);
        }
      }
    }
    prev = next_prev1386;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev1388;
    deque<int> prioritized_choice_final_prev1389;
    next_prev1388.clear();
    for(int i1387=0;i1387<(int)prev.size();++i1387) {
      i = prev[i1387];
      tmp = parse_slash1390();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1388.push_back(prev[i1387]); }
      for(int i1402=0;i1402<(int)tmp.size();++i1402) {
        if( tmp[i1402] != FAIL ) {
          prioritized_choice_final_prev1389.push_back(tmp[i1402]);
        }
      }
    }
    prev = next_prev1388;
    next_prev1388.clear();
    for(int i1387=0;i1387<(int)prev.size();++i1387) {
      i = prev[i1387];
      tmp = parse_slash1403();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1388.push_back(prev[i1387]); }
      for(int i1405=0;i1405<(int)tmp.size();++i1405) {
        if( tmp[i1405] != FAIL ) {
          prioritized_choice_final_prev1389.push_back(tmp[i1405]);
        }
      }
    }
    prev = next_prev1388;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev1389.empty() && prioritized_choice_final_prev1389.front() == FAIL )) {
        prioritized_choice_final_prev1389.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev1389;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1384=0;i1384<(int)prev.size();++i1384) {
    if( prev[i1384] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1384]);
    }
  }
  return memo[key(190,backtracking_ptr_for_packrat190)] = result;
}

inline deque<int> parse_slash1390() { 
  if(memo.count(key(191,i))) {
    return memo[key(191,i)];
  }
  int backtracking_ptr_for_packrat191=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1392=0;i1392<(int)prev.size();++i1392) {
        if( prev[i1392] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1392]<m&&I[prev[i1392]]=='=') {
          tmp.push_back(prev[i1392]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev1397;
      for(int i1396=0;i1396<(int)prev.size();++i1396) {
        i = prev[i1396];
        tmp = parse_not1393();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev1397.push_back(prev[i1396]);
        } else {
          if(!(!next_prev1397.empty()&&next_prev1397.front()==FAIL)) {
            next_prev1397.push_front(FAIL);
          }
        }
      }
      prev = next_prev1397;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1399;
      for(int i1398=0;i1398<(int)prev.size();++i1398) {
        if( prev[i1398] == FAIL ) {
          if(!(!next_prev1399.empty() && next_prev1399.front() == FAIL )) {
            next_prev1399.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1398];
        tmp = parse__();
        
        for(int i1398=0;i1398<(int)tmp.size();++i1398) {
          if( tmp[i1398] == FAIL ) {
            if(!( !next_prev1399.empty() && next_prev1399[0] == FAIL )) {
              next_prev1399.push_front(FAIL);
            }
          } else {
            next_prev1399.push_back(tmp[i1398]);
          }
        }
      }
      prev = next_prev1399;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Initializer) */
    deque<int> next_prev1401;
    for(int i1400=0;i1400<(int)prev.size();++i1400) {
      if( prev[i1400] == FAIL ) {
        if(!(!next_prev1401.empty() && next_prev1401.front() == FAIL )) {
          next_prev1401.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1400];
      tmp = parse_Initializer();
      
      for(int i1400=0;i1400<(int)tmp.size();++i1400) {
        if( tmp[i1400] == FAIL ) {
          if(!( !next_prev1401.empty() && next_prev1401[0] == FAIL )) {
            next_prev1401.push_front(FAIL);
          }
        } else {
          next_prev1401.push_back(tmp[i1400]);
        }
      }
    }
    prev = next_prev1401;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1391=0;i1391<(int)prev.size();++i1391) {
    if( prev[i1391] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1391]);
    }
  }
  return memo[key(191,backtracking_ptr_for_packrat191)] = result;
}

inline deque<int> parse_not1393() { 
  if(memo.count(key(192,i))) {
    return memo[key(192,i)];
  }
  int backtracking_ptr_for_packrat192=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i1395=0;i1395<(int)prev.size();++i1395) {
    if( prev[i1395] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i1395]<m&&I[prev[i1395]]=='=') {
      tmp.push_back(prev[i1395]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i1394=0;i1394<(int)prev.size();++i1394) {
    if( prev[i1394] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1394]);
    }
  }
  return memo[key(192,backtracking_ptr_for_packrat192)] = result;
}

inline deque<int> parse_slash1403() { 
  if(memo.count(key(193,i))) {
    return memo[key(193,i)];
  }
  int backtracking_ptr_for_packrat193=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i1404=0;i1404<(int)prev.size();++i1404) {
    if( prev[i1404] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1404]);
    }
  }
  return memo[key(193,backtracking_ptr_for_packrat193)] = result;
}

deque<int> parse_VarName(){
  if(memo.count(key(194,i))) {
    return memo[key(194,i)];
  }
  int backtracking_ptr_for_packrat194=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev1408;
    for(int i1407=0;i1407<(int)prev.size();++i1407) {
      if( prev[i1407] == FAIL ) {
        if(!(!next_prev1408.empty() && next_prev1408.front() == FAIL )) {
          next_prev1408.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1407];
      tmp = parse_Identifier();
      
      for(int i1407=0;i1407<(int)tmp.size();++i1407) {
        if( tmp[i1407] == FAIL ) {
          if(!( !next_prev1408.empty() && next_prev1408[0] == FAIL )) {
            next_prev1408.push_front(FAIL);
          }
        } else {
          next_prev1408.push_back(tmp[i1407]);
        }
      }
    }
    prev = next_prev1408;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev1428;
    deque<int> star_final_prev1429;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev1428.clear();
      for(int i1430=0;i1430<(int)prev.size();++i1430) {
        i = prev[i1430];
        tmp = parse_while1409();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev1429.push_back(prev[i1430]);
        }
        for(int i1431=0;i1431<(int)tmp.size();++i1431) {
          if(tmp[i1431]==FAIL) {
            if(!( !next_prev1428.empty() && next_prev1428.front() == FAIL )) {
              next_prev1428.push_front(FAIL);
            }
          } else {
            next_prev1428.push_back(tmp[i1431]);
          }
        }
      }
      prev = next_prev1428;
    }
    prev = star_final_prev1429;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1406=0;i1406<(int)prev.size();++i1406) {
    if( prev[i1406] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1406]);
    }
  }
  return memo[key(194,backtracking_ptr_for_packrat194)] = result;
}

inline deque<int> parse_while1409() { 
  if(memo.count(key(195,i))) {
    return memo[key(195,i)];
  }
  int backtracking_ptr_for_packrat195=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1411=0;i1411<(int)prev.size();++i1411) {
        if( prev[i1411] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1411]<m&&I[prev[i1411]]=='[') {
          tmp.push_back(prev[i1411]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1413;
      for(int i1412=0;i1412<(int)prev.size();++i1412) {
        if( prev[i1412] == FAIL ) {
          if(!(!next_prev1413.empty() && next_prev1413.front() == FAIL )) {
            next_prev1413.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1412];
        tmp = parse__();
        
        for(int i1412=0;i1412<(int)tmp.size();++i1412) {
          if( tmp[i1412] == FAIL ) {
            if(!( !next_prev1413.empty() && next_prev1413[0] == FAIL )) {
              next_prev1413.push_front(FAIL);
            }
          } else {
            next_prev1413.push_back(tmp[i1412]);
          }
        }
      }
      prev = next_prev1413;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev1415;
    deque<int> prioritized_choice_final_prev1416;
    next_prev1415.clear();
    for(int i1414=0;i1414<(int)prev.size();++i1414) {
      i = prev[i1414];
      tmp = parse_slash1417();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1415.push_back(prev[i1414]); }
      for(int i1421=0;i1421<(int)tmp.size();++i1421) {
        if( tmp[i1421] != FAIL ) {
          prioritized_choice_final_prev1416.push_back(tmp[i1421]);
        }
      }
    }
    prev = next_prev1415;
    next_prev1415.clear();
    for(int i1414=0;i1414<(int)prev.size();++i1414) {
      i = prev[i1414];
      tmp = parse_slash1422();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1415.push_back(prev[i1414]); }
      for(int i1424=0;i1424<(int)tmp.size();++i1424) {
        if( tmp[i1424] != FAIL ) {
          prioritized_choice_final_prev1416.push_back(tmp[i1424]);
        }
      }
    }
    prev = next_prev1415;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev1416.empty() && prioritized_choice_final_prev1416.front() == FAIL )) {
        prioritized_choice_final_prev1416.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev1416;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1425=0;i1425<(int)prev.size();++i1425) {
        if( prev[i1425] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1425]<m&&I[prev[i1425]]==']') {
          tmp.push_back(prev[i1425]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1427;
      for(int i1426=0;i1426<(int)prev.size();++i1426) {
        if( prev[i1426] == FAIL ) {
          if(!(!next_prev1427.empty() && next_prev1427.front() == FAIL )) {
            next_prev1427.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1426];
        tmp = parse__();
        
        for(int i1426=0;i1426<(int)tmp.size();++i1426) {
          if( tmp[i1426] == FAIL ) {
            if(!( !next_prev1427.empty() && next_prev1427[0] == FAIL )) {
              next_prev1427.push_front(FAIL);
            }
          } else {
            next_prev1427.push_back(tmp[i1426]);
          }
        }
      }
      prev = next_prev1427;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1410=0;i1410<(int)prev.size();++i1410) {
    if( prev[i1410] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1410]);
    }
  }
  return memo[key(195,backtracking_ptr_for_packrat195)] = result;
}

inline deque<int> parse_slash1417() { 
  if(memo.count(key(196,i))) {
    return memo[key(196,i)];
  }
  int backtracking_ptr_for_packrat196=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ConstantExpression) */
    deque<int> next_prev1420;
    for(int i1419=0;i1419<(int)prev.size();++i1419) {
      if( prev[i1419] == FAIL ) {
        if(!(!next_prev1420.empty() && next_prev1420.front() == FAIL )) {
          next_prev1420.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1419];
      tmp = parse_ConstantExpression();
      
      for(int i1419=0;i1419<(int)tmp.size();++i1419) {
        if( tmp[i1419] == FAIL ) {
          if(!( !next_prev1420.empty() && next_prev1420[0] == FAIL )) {
            next_prev1420.push_front(FAIL);
          }
        } else {
          next_prev1420.push_back(tmp[i1419]);
        }
      }
    }
    prev = next_prev1420;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1418=0;i1418<(int)prev.size();++i1418) {
    if( prev[i1418] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1418]);
    }
  }
  return memo[key(196,backtracking_ptr_for_packrat196)] = result;
}

inline deque<int> parse_slash1422() { 
  if(memo.count(key(197,i))) {
    return memo[key(197,i)];
  }
  int backtracking_ptr_for_packrat197=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i1423=0;i1423<(int)prev.size();++i1423) {
    if( prev[i1423] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1423]);
    }
  }
  return memo[key(197,backtracking_ptr_for_packrat197)] = result;
}

deque<int> parse_Initializer(){
  if(memo.count(key(198,i))) {
    return memo[key(198,i)];
  }
  int backtracking_ptr_for_packrat198=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev1434;
  deque<int> prioritized_choice_final_prev1435;
  next_prev1434.clear();
  for(int i1433=0;i1433<(int)prev.size();++i1433) {
    i = prev[i1433];
    tmp = parse_slash1436();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1434.push_back(prev[i1433]); }
    for(int i1440=0;i1440<(int)tmp.size();++i1440) {
      if( tmp[i1440] != FAIL ) {
        prioritized_choice_final_prev1435.push_back(tmp[i1440]);
      }
    }
  }
  prev = next_prev1434;
  next_prev1434.clear();
  for(int i1433=0;i1433<(int)prev.size();++i1433) {
    i = prev[i1433];
    tmp = parse_slash1441();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1434.push_back(prev[i1433]); }
    for(int i1445=0;i1445<(int)tmp.size();++i1445) {
      if( tmp[i1445] != FAIL ) {
        prioritized_choice_final_prev1435.push_back(tmp[i1445]);
      }
    }
  }
  prev = next_prev1434;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev1435.empty() && prioritized_choice_final_prev1435.front() == FAIL )) {
      prioritized_choice_final_prev1435.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev1435;
  for(int i1432=0;i1432<(int)prev.size();++i1432) {
    if( prev[i1432] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1432]);
    }
  }
  return memo[key(198,backtracking_ptr_for_packrat198)] = result;
}

inline deque<int> parse_slash1436() { 
  if(memo.count(key(199,i))) {
    return memo[key(199,i)];
  }
  int backtracking_ptr_for_packrat199=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Expression) */
    deque<int> next_prev1439;
    for(int i1438=0;i1438<(int)prev.size();++i1438) {
      if( prev[i1438] == FAIL ) {
        if(!(!next_prev1439.empty() && next_prev1439.front() == FAIL )) {
          next_prev1439.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1438];
      tmp = parse_Expression();
      
      for(int i1438=0;i1438<(int)tmp.size();++i1438) {
        if( tmp[i1438] == FAIL ) {
          if(!( !next_prev1439.empty() && next_prev1439[0] == FAIL )) {
            next_prev1439.push_front(FAIL);
          }
        } else {
          next_prev1439.push_back(tmp[i1438]);
        }
      }
    }
    prev = next_prev1439;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1437=0;i1437<(int)prev.size();++i1437) {
    if( prev[i1437] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1437]);
    }
  }
  return memo[key(199,backtracking_ptr_for_packrat199)] = result;
}

inline deque<int> parse_slash1441() { 
  if(memo.count(key(200,i))) {
    return memo[key(200,i)];
  }
  int backtracking_ptr_for_packrat200=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ArrayInitializer) */
    deque<int> next_prev1444;
    for(int i1443=0;i1443<(int)prev.size();++i1443) {
      if( prev[i1443] == FAIL ) {
        if(!(!next_prev1444.empty() && next_prev1444.front() == FAIL )) {
          next_prev1444.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1443];
      tmp = parse_ArrayInitializer();
      
      for(int i1443=0;i1443<(int)tmp.size();++i1443) {
        if( tmp[i1443] == FAIL ) {
          if(!( !next_prev1444.empty() && next_prev1444[0] == FAIL )) {
            next_prev1444.push_front(FAIL);
          }
        } else {
          next_prev1444.push_back(tmp[i1443]);
        }
      }
    }
    prev = next_prev1444;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1442=0;i1442<(int)prev.size();++i1442) {
    if( prev[i1442] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1442]);
    }
  }
  return memo[key(200,backtracking_ptr_for_packrat200)] = result;
}

deque<int> parse_ArrayInitializer(){
  if(memo.count(key(201,i))) {
    return memo[key(201,i)];
  }
  int backtracking_ptr_for_packrat201=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1447=0;i1447<(int)prev.size();++i1447) {
        if( prev[i1447] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1447]<m&&I[prev[i1447]]=='{') {
          tmp.push_back(prev[i1447]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1449;
      for(int i1448=0;i1448<(int)prev.size();++i1448) {
        if( prev[i1448] == FAIL ) {
          if(!(!next_prev1449.empty() && next_prev1449.front() == FAIL )) {
            next_prev1449.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1448];
        tmp = parse__();
        
        for(int i1448=0;i1448<(int)tmp.size();++i1448) {
          if( tmp[i1448] == FAIL ) {
            if(!( !next_prev1449.empty() && next_prev1449[0] == FAIL )) {
              next_prev1449.push_front(FAIL);
            }
          } else {
            next_prev1449.push_back(tmp[i1448]);
          }
        }
      }
      prev = next_prev1449;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev1451;
    deque<int> prioritized_choice_final_prev1452;
    next_prev1451.clear();
    for(int i1450=0;i1450<(int)prev.size();++i1450) {
      i = prev[i1450];
      tmp = parse_slash1453();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1451.push_back(prev[i1450]); }
      for(int i1468=0;i1468<(int)tmp.size();++i1468) {
        if( tmp[i1468] != FAIL ) {
          prioritized_choice_final_prev1452.push_back(tmp[i1468]);
        }
      }
    }
    prev = next_prev1451;
    next_prev1451.clear();
    for(int i1450=0;i1450<(int)prev.size();++i1450) {
      i = prev[i1450];
      tmp = parse_slash1469();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1451.push_back(prev[i1450]); }
      for(int i1471=0;i1471<(int)tmp.size();++i1471) {
        if( tmp[i1471] != FAIL ) {
          prioritized_choice_final_prev1452.push_back(tmp[i1471]);
        }
      }
    }
    prev = next_prev1451;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev1452.empty() && prioritized_choice_final_prev1452.front() == FAIL )) {
        prioritized_choice_final_prev1452.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev1452;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev1473;
    deque<int> prioritized_choice_final_prev1474;
    next_prev1473.clear();
    for(int i1472=0;i1472<(int)prev.size();++i1472) {
      i = prev[i1472];
      tmp = parse_slash1475();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1473.push_back(prev[i1472]); }
      for(int i1480=0;i1480<(int)tmp.size();++i1480) {
        if( tmp[i1480] != FAIL ) {
          prioritized_choice_final_prev1474.push_back(tmp[i1480]);
        }
      }
    }
    prev = next_prev1473;
    next_prev1473.clear();
    for(int i1472=0;i1472<(int)prev.size();++i1472) {
      i = prev[i1472];
      tmp = parse_slash1481();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1473.push_back(prev[i1472]); }
      for(int i1483=0;i1483<(int)tmp.size();++i1483) {
        if( tmp[i1483] != FAIL ) {
          prioritized_choice_final_prev1474.push_back(tmp[i1483]);
        }
      }
    }
    prev = next_prev1473;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev1474.empty() && prioritized_choice_final_prev1474.front() == FAIL )) {
        prioritized_choice_final_prev1474.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev1474;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1484=0;i1484<(int)prev.size();++i1484) {
        if( prev[i1484] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1484]<m&&I[prev[i1484]]=='}') {
          tmp.push_back(prev[i1484]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1486;
      for(int i1485=0;i1485<(int)prev.size();++i1485) {
        if( prev[i1485] == FAIL ) {
          if(!(!next_prev1486.empty() && next_prev1486.front() == FAIL )) {
            next_prev1486.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1485];
        tmp = parse__();
        
        for(int i1485=0;i1485<(int)tmp.size();++i1485) {
          if( tmp[i1485] == FAIL ) {
            if(!( !next_prev1486.empty() && next_prev1486[0] == FAIL )) {
              next_prev1486.push_front(FAIL);
            }
          } else {
            next_prev1486.push_back(tmp[i1485]);
          }
        }
      }
      prev = next_prev1486;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1446=0;i1446<(int)prev.size();++i1446) {
    if( prev[i1446] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1446]);
    }
  }
  return memo[key(201,backtracking_ptr_for_packrat201)] = result;
}

inline deque<int> parse_slash1453() { 
  if(memo.count(key(202,i))) {
    return memo[key(202,i)];
  }
  int backtracking_ptr_for_packrat202=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Initializer) */
    deque<int> next_prev1456;
    for(int i1455=0;i1455<(int)prev.size();++i1455) {
      if( prev[i1455] == FAIL ) {
        if(!(!next_prev1456.empty() && next_prev1456.front() == FAIL )) {
          next_prev1456.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1455];
      tmp = parse_Initializer();
      
      for(int i1455=0;i1455<(int)tmp.size();++i1455) {
        if( tmp[i1455] == FAIL ) {
          if(!( !next_prev1456.empty() && next_prev1456[0] == FAIL )) {
            next_prev1456.push_front(FAIL);
          }
        } else {
          next_prev1456.push_back(tmp[i1455]);
        }
      }
    }
    prev = next_prev1456;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev1464;
    deque<int> star_final_prev1465;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev1464.clear();
      for(int i1466=0;i1466<(int)prev.size();++i1466) {
        i = prev[i1466];
        tmp = parse_while1457();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev1465.push_back(prev[i1466]);
        }
        for(int i1467=0;i1467<(int)tmp.size();++i1467) {
          if(tmp[i1467]==FAIL) {
            if(!( !next_prev1464.empty() && next_prev1464.front() == FAIL )) {
              next_prev1464.push_front(FAIL);
            }
          } else {
            next_prev1464.push_back(tmp[i1467]);
          }
        }
      }
      prev = next_prev1464;
    }
    prev = star_final_prev1465;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1454=0;i1454<(int)prev.size();++i1454) {
    if( prev[i1454] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1454]);
    }
  }
  return memo[key(202,backtracking_ptr_for_packrat202)] = result;
}

inline deque<int> parse_while1457() { 
  if(memo.count(key(203,i))) {
    return memo[key(203,i)];
  }
  int backtracking_ptr_for_packrat203=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1459=0;i1459<(int)prev.size();++i1459) {
        if( prev[i1459] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1459]<m&&I[prev[i1459]]==',') {
          tmp.push_back(prev[i1459]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1461;
      for(int i1460=0;i1460<(int)prev.size();++i1460) {
        if( prev[i1460] == FAIL ) {
          if(!(!next_prev1461.empty() && next_prev1461.front() == FAIL )) {
            next_prev1461.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1460];
        tmp = parse__();
        
        for(int i1460=0;i1460<(int)tmp.size();++i1460) {
          if( tmp[i1460] == FAIL ) {
            if(!( !next_prev1461.empty() && next_prev1461[0] == FAIL )) {
              next_prev1461.push_front(FAIL);
            }
          } else {
            next_prev1461.push_back(tmp[i1460]);
          }
        }
      }
      prev = next_prev1461;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Initializer) */
    deque<int> next_prev1463;
    for(int i1462=0;i1462<(int)prev.size();++i1462) {
      if( prev[i1462] == FAIL ) {
        if(!(!next_prev1463.empty() && next_prev1463.front() == FAIL )) {
          next_prev1463.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1462];
      tmp = parse_Initializer();
      
      for(int i1462=0;i1462<(int)tmp.size();++i1462) {
        if( tmp[i1462] == FAIL ) {
          if(!( !next_prev1463.empty() && next_prev1463[0] == FAIL )) {
            next_prev1463.push_front(FAIL);
          }
        } else {
          next_prev1463.push_back(tmp[i1462]);
        }
      }
    }
    prev = next_prev1463;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1458=0;i1458<(int)prev.size();++i1458) {
    if( prev[i1458] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1458]);
    }
  }
  return memo[key(203,backtracking_ptr_for_packrat203)] = result;
}

inline deque<int> parse_slash1469() { 
  if(memo.count(key(204,i))) {
    return memo[key(204,i)];
  }
  int backtracking_ptr_for_packrat204=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i1470=0;i1470<(int)prev.size();++i1470) {
    if( prev[i1470] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1470]);
    }
  }
  return memo[key(204,backtracking_ptr_for_packrat204)] = result;
}

inline deque<int> parse_slash1475() { 
  if(memo.count(key(205,i))) {
    return memo[key(205,i)];
  }
  int backtracking_ptr_for_packrat205=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i1477=0;i1477<(int)prev.size();++i1477) {
      if( prev[i1477] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i1477]<m&&I[prev[i1477]]==',') {
        tmp.push_back(prev[i1477]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (_) */
    deque<int> next_prev1479;
    for(int i1478=0;i1478<(int)prev.size();++i1478) {
      if( prev[i1478] == FAIL ) {
        if(!(!next_prev1479.empty() && next_prev1479.front() == FAIL )) {
          next_prev1479.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1478];
      tmp = parse__();
      
      for(int i1478=0;i1478<(int)tmp.size();++i1478) {
        if( tmp[i1478] == FAIL ) {
          if(!( !next_prev1479.empty() && next_prev1479[0] == FAIL )) {
            next_prev1479.push_front(FAIL);
          }
        } else {
          next_prev1479.push_back(tmp[i1478]);
        }
      }
    }
    prev = next_prev1479;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1476=0;i1476<(int)prev.size();++i1476) {
    if( prev[i1476] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1476]);
    }
  }
  return memo[key(205,backtracking_ptr_for_packrat205)] = result;
}

inline deque<int> parse_slash1481() { 
  if(memo.count(key(206,i))) {
    return memo[key(206,i)];
  }
  int backtracking_ptr_for_packrat206=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i1482=0;i1482<(int)prev.size();++i1482) {
    if( prev[i1482] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1482]);
    }
  }
  return memo[key(206,backtracking_ptr_for_packrat206)] = result;
}

deque<int> parse_ClassDeclaration(){
  if(memo.count(key(207,i))) {
    return memo[key(207,i)];
  }
  int backtracking_ptr_for_packrat207=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev1489;
  deque<int> prioritized_choice_final_prev1490;
  next_prev1489.clear();
  for(int i1488=0;i1488<(int)prev.size();++i1488) {
    i = prev[i1488];
    tmp = parse_slash1491();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1489.push_back(prev[i1488]); }
    for(int i1551=0;i1551<(int)tmp.size();++i1551) {
      if( tmp[i1551] != FAIL ) {
        prioritized_choice_final_prev1490.push_back(tmp[i1551]);
      }
    }
  }
  prev = next_prev1489;
  next_prev1489.clear();
  for(int i1488=0;i1488<(int)prev.size();++i1488) {
    i = prev[i1488];
    tmp = parse_slash1552();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1489.push_back(prev[i1488]); }
    for(int i1589=0;i1589<(int)tmp.size();++i1589) {
      if( tmp[i1589] != FAIL ) {
        prioritized_choice_final_prev1490.push_back(tmp[i1589]);
      }
    }
  }
  prev = next_prev1489;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev1490.empty() && prioritized_choice_final_prev1490.front() == FAIL )) {
      prioritized_choice_final_prev1490.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev1490;
  for(int i1487=0;i1487<(int)prev.size();++i1487) {
    if( prev[i1487] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1487]);
    }
  }
  return memo[key(207,backtracking_ptr_for_packrat207)] = result;
}

inline deque<int> parse_slash1491() { 
  if(memo.count(key(208,i))) {
    return memo[key(208,i)];
  }
  int backtracking_ptr_for_packrat208=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev1494;
    deque<int> prioritized_choice_final_prev1495;
    next_prev1494.clear();
    for(int i1493=0;i1493<(int)prev.size();++i1493) {
      i = prev[i1493];
      tmp = parse_slash1496();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1494.push_back(prev[i1493]); }
      for(int i1500=0;i1500<(int)tmp.size();++i1500) {
        if( tmp[i1500] != FAIL ) {
          prioritized_choice_final_prev1495.push_back(tmp[i1500]);
        }
      }
    }
    prev = next_prev1494;
    next_prev1494.clear();
    for(int i1493=0;i1493<(int)prev.size();++i1493) {
      i = prev[i1493];
      tmp = parse_slash1501();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1494.push_back(prev[i1493]); }
      for(int i1503=0;i1503<(int)tmp.size();++i1503) {
        if( tmp[i1503] != FAIL ) {
          prioritized_choice_final_prev1495.push_back(tmp[i1503]);
        }
      }
    }
    prev = next_prev1494;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev1495.empty() && prioritized_choice_final_prev1495.front() == FAIL )) {
        prioritized_choice_final_prev1495.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev1495;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1504=0;i1504<(int)prev.size();++i1504) {
        if( prev[i1504] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1504]<m&&I[prev[i1504]]=='c') {
          tmp.push_back(prev[i1504]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1505=0;i1505<(int)prev.size();++i1505) {
        if( prev[i1505] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1505]<m&&I[prev[i1505]]=='l') {
          tmp.push_back(prev[i1505]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1506=0;i1506<(int)prev.size();++i1506) {
        if( prev[i1506] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1506]<m&&I[prev[i1506]]=='a') {
          tmp.push_back(prev[i1506]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1507=0;i1507<(int)prev.size();++i1507) {
        if( prev[i1507] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1507]<m&&I[prev[i1507]]=='s') {
          tmp.push_back(prev[i1507]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1508=0;i1508<(int)prev.size();++i1508) {
        if( prev[i1508] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1508]<m&&I[prev[i1508]]=='s') {
          tmp.push_back(prev[i1508]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev1514;
      for(int i1513=0;i1513<(int)prev.size();++i1513) {
        i = prev[i1513];
        tmp = parse_not1509();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev1514.push_back(prev[i1513]);
        } else {
          if(!(!next_prev1514.empty()&&next_prev1514.front()==FAIL)) {
            next_prev1514.push_front(FAIL);
          }
        }
      }
      prev = next_prev1514;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1516;
      for(int i1515=0;i1515<(int)prev.size();++i1515) {
        if( prev[i1515] == FAIL ) {
          if(!(!next_prev1516.empty() && next_prev1516.front() == FAIL )) {
            next_prev1516.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1515];
        tmp = parse__();
        
        for(int i1515=0;i1515<(int)tmp.size();++i1515) {
          if( tmp[i1515] == FAIL ) {
            if(!( !next_prev1516.empty() && next_prev1516[0] == FAIL )) {
              next_prev1516.push_front(FAIL);
            }
          } else {
            next_prev1516.push_back(tmp[i1515]);
          }
        }
      }
      prev = next_prev1516;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev1518;
    for(int i1517=0;i1517<(int)prev.size();++i1517) {
      if( prev[i1517] == FAIL ) {
        if(!(!next_prev1518.empty() && next_prev1518.front() == FAIL )) {
          next_prev1518.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1517];
      tmp = parse_Identifier();
      
      for(int i1517=0;i1517<(int)tmp.size();++i1517) {
        if( tmp[i1517] == FAIL ) {
          if(!( !next_prev1518.empty() && next_prev1518[0] == FAIL )) {
            next_prev1518.push_front(FAIL);
          }
        } else {
          next_prev1518.push_back(tmp[i1517]);
        }
      }
    }
    prev = next_prev1518;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev1520;
    deque<int> prioritized_choice_final_prev1521;
    next_prev1520.clear();
    for(int i1519=0;i1519<(int)prev.size();++i1519) {
      i = prev[i1519];
      tmp = parse_slash1522();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1520.push_back(prev[i1519]); }
      for(int i1526=0;i1526<(int)tmp.size();++i1526) {
        if( tmp[i1526] != FAIL ) {
          prioritized_choice_final_prev1521.push_back(tmp[i1526]);
        }
      }
    }
    prev = next_prev1520;
    next_prev1520.clear();
    for(int i1519=0;i1519<(int)prev.size();++i1519) {
      i = prev[i1519];
      tmp = parse_slash1527();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1520.push_back(prev[i1519]); }
      for(int i1529=0;i1529<(int)tmp.size();++i1529) {
        if( tmp[i1529] != FAIL ) {
          prioritized_choice_final_prev1521.push_back(tmp[i1529]);
        }
      }
    }
    prev = next_prev1520;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev1521.empty() && prioritized_choice_final_prev1521.front() == FAIL )) {
        prioritized_choice_final_prev1521.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev1521;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev1531;
    deque<int> prioritized_choice_final_prev1532;
    next_prev1531.clear();
    for(int i1530=0;i1530<(int)prev.size();++i1530) {
      i = prev[i1530];
      tmp = parse_slash1533();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1531.push_back(prev[i1530]); }
      for(int i1537=0;i1537<(int)tmp.size();++i1537) {
        if( tmp[i1537] != FAIL ) {
          prioritized_choice_final_prev1532.push_back(tmp[i1537]);
        }
      }
    }
    prev = next_prev1531;
    next_prev1531.clear();
    for(int i1530=0;i1530<(int)prev.size();++i1530) {
      i = prev[i1530];
      tmp = parse_slash1538();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1531.push_back(prev[i1530]); }
      for(int i1540=0;i1540<(int)tmp.size();++i1540) {
        if( tmp[i1540] != FAIL ) {
          prioritized_choice_final_prev1532.push_back(tmp[i1540]);
        }
      }
    }
    prev = next_prev1531;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev1532.empty() && prioritized_choice_final_prev1532.front() == FAIL )) {
        prioritized_choice_final_prev1532.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev1532;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev1545;
    deque<int> star_final_prev1546;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev1545.clear();
      for(int i1547=0;i1547<(int)prev.size();++i1547) {
        i = prev[i1547];
        tmp = parse_while1541();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev1546.push_back(prev[i1547]);
        }
        for(int i1548=0;i1548<(int)tmp.size();++i1548) {
          if(tmp[i1548]==FAIL) {
            if(!( !next_prev1545.empty() && next_prev1545.front() == FAIL )) {
              next_prev1545.push_front(FAIL);
            }
          } else {
            next_prev1545.push_back(tmp[i1548]);
          }
        }
      }
      prev = next_prev1545;
    }
    prev = star_final_prev1546;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassBody) */
    deque<int> next_prev1550;
    for(int i1549=0;i1549<(int)prev.size();++i1549) {
      if( prev[i1549] == FAIL ) {
        if(!(!next_prev1550.empty() && next_prev1550.front() == FAIL )) {
          next_prev1550.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1549];
      tmp = parse_ClassBody();
      
      for(int i1549=0;i1549<(int)tmp.size();++i1549) {
        if( tmp[i1549] == FAIL ) {
          if(!( !next_prev1550.empty() && next_prev1550[0] == FAIL )) {
            next_prev1550.push_front(FAIL);
          }
        } else {
          next_prev1550.push_back(tmp[i1549]);
        }
      }
    }
    prev = next_prev1550;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1492=0;i1492<(int)prev.size();++i1492) {
    if( prev[i1492] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1492]);
    }
  }
  return memo[key(208,backtracking_ptr_for_packrat208)] = result;
}

inline deque<int> parse_slash1496() { 
  if(memo.count(key(209,i))) {
    return memo[key(209,i)];
  }
  int backtracking_ptr_for_packrat209=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassModifiers) */
    deque<int> next_prev1499;
    for(int i1498=0;i1498<(int)prev.size();++i1498) {
      if( prev[i1498] == FAIL ) {
        if(!(!next_prev1499.empty() && next_prev1499.front() == FAIL )) {
          next_prev1499.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1498];
      tmp = parse_ClassModifiers();
      
      for(int i1498=0;i1498<(int)tmp.size();++i1498) {
        if( tmp[i1498] == FAIL ) {
          if(!( !next_prev1499.empty() && next_prev1499[0] == FAIL )) {
            next_prev1499.push_front(FAIL);
          }
        } else {
          next_prev1499.push_back(tmp[i1498]);
        }
      }
    }
    prev = next_prev1499;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1497=0;i1497<(int)prev.size();++i1497) {
    if( prev[i1497] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1497]);
    }
  }
  return memo[key(209,backtracking_ptr_for_packrat209)] = result;
}

inline deque<int> parse_slash1501() { 
  if(memo.count(key(210,i))) {
    return memo[key(210,i)];
  }
  int backtracking_ptr_for_packrat210=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i1502=0;i1502<(int)prev.size();++i1502) {
    if( prev[i1502] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1502]);
    }
  }
  return memo[key(210,backtracking_ptr_for_packrat210)] = result;
}

inline deque<int> parse_not1509() { 
  if(memo.count(key(211,i))) {
    return memo[key(211,i)];
  }
  int backtracking_ptr_for_packrat211=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev1512;
  for(int i1511=0;i1511<(int)prev.size();++i1511) {
    if( prev[i1511] == FAIL ) {
      if(!(!next_prev1512.empty() && next_prev1512.front() == FAIL )) {
        next_prev1512.push_front(FAIL);
      }
      continue;
    }
    i = prev[i1511];
    tmp = parse_W();
    
    for(int i1511=0;i1511<(int)tmp.size();++i1511) {
      if( tmp[i1511] == FAIL ) {
        if(!( !next_prev1512.empty() && next_prev1512[0] == FAIL )) {
          next_prev1512.push_front(FAIL);
        }
      } else {
        next_prev1512.push_back(tmp[i1511]);
      }
    }
  }
  prev = next_prev1512;
  for(int i1510=0;i1510<(int)prev.size();++i1510) {
    if( prev[i1510] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1510]);
    }
  }
  return memo[key(211,backtracking_ptr_for_packrat211)] = result;
}

inline deque<int> parse_slash1522() { 
  if(memo.count(key(212,i))) {
    return memo[key(212,i)];
  }
  int backtracking_ptr_for_packrat212=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (TypeParameters) */
    deque<int> next_prev1525;
    for(int i1524=0;i1524<(int)prev.size();++i1524) {
      if( prev[i1524] == FAIL ) {
        if(!(!next_prev1525.empty() && next_prev1525.front() == FAIL )) {
          next_prev1525.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1524];
      tmp = parse_TypeParameters();
      
      for(int i1524=0;i1524<(int)tmp.size();++i1524) {
        if( tmp[i1524] == FAIL ) {
          if(!( !next_prev1525.empty() && next_prev1525[0] == FAIL )) {
            next_prev1525.push_front(FAIL);
          }
        } else {
          next_prev1525.push_back(tmp[i1524]);
        }
      }
    }
    prev = next_prev1525;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1523=0;i1523<(int)prev.size();++i1523) {
    if( prev[i1523] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1523]);
    }
  }
  return memo[key(212,backtracking_ptr_for_packrat212)] = result;
}

inline deque<int> parse_slash1527() { 
  if(memo.count(key(213,i))) {
    return memo[key(213,i)];
  }
  int backtracking_ptr_for_packrat213=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i1528=0;i1528<(int)prev.size();++i1528) {
    if( prev[i1528] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1528]);
    }
  }
  return memo[key(213,backtracking_ptr_for_packrat213)] = result;
}

inline deque<int> parse_slash1533() { 
  if(memo.count(key(214,i))) {
    return memo[key(214,i)];
  }
  int backtracking_ptr_for_packrat214=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (SuperClass) */
    deque<int> next_prev1536;
    for(int i1535=0;i1535<(int)prev.size();++i1535) {
      if( prev[i1535] == FAIL ) {
        if(!(!next_prev1536.empty() && next_prev1536.front() == FAIL )) {
          next_prev1536.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1535];
      tmp = parse_SuperClass();
      
      for(int i1535=0;i1535<(int)tmp.size();++i1535) {
        if( tmp[i1535] == FAIL ) {
          if(!( !next_prev1536.empty() && next_prev1536[0] == FAIL )) {
            next_prev1536.push_front(FAIL);
          }
        } else {
          next_prev1536.push_back(tmp[i1535]);
        }
      }
    }
    prev = next_prev1536;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1534=0;i1534<(int)prev.size();++i1534) {
    if( prev[i1534] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1534]);
    }
  }
  return memo[key(214,backtracking_ptr_for_packrat214)] = result;
}

inline deque<int> parse_slash1538() { 
  if(memo.count(key(215,i))) {
    return memo[key(215,i)];
  }
  int backtracking_ptr_for_packrat215=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i1539=0;i1539<(int)prev.size();++i1539) {
    if( prev[i1539] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1539]);
    }
  }
  return memo[key(215,backtracking_ptr_for_packrat215)] = result;
}

inline deque<int> parse_while1541() { 
  if(memo.count(key(216,i))) {
    return memo[key(216,i)];
  }
  int backtracking_ptr_for_packrat216=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (SuperInterfaces) */
    deque<int> next_prev1544;
    for(int i1543=0;i1543<(int)prev.size();++i1543) {
      if( prev[i1543] == FAIL ) {
        if(!(!next_prev1544.empty() && next_prev1544.front() == FAIL )) {
          next_prev1544.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1543];
      tmp = parse_SuperInterfaces();
      
      for(int i1543=0;i1543<(int)tmp.size();++i1543) {
        if( tmp[i1543] == FAIL ) {
          if(!( !next_prev1544.empty() && next_prev1544[0] == FAIL )) {
            next_prev1544.push_front(FAIL);
          }
        } else {
          next_prev1544.push_back(tmp[i1543]);
        }
      }
    }
    prev = next_prev1544;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1542=0;i1542<(int)prev.size();++i1542) {
    if( prev[i1542] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1542]);
    }
  }
  return memo[key(216,backtracking_ptr_for_packrat216)] = result;
}

inline deque<int> parse_slash1552() { 
  if(memo.count(key(217,i))) {
    return memo[key(217,i)];
  }
  int backtracking_ptr_for_packrat217=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev1555;
    deque<int> prioritized_choice_final_prev1556;
    next_prev1555.clear();
    for(int i1554=0;i1554<(int)prev.size();++i1554) {
      i = prev[i1554];
      tmp = parse_slash1557();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1555.push_back(prev[i1554]); }
      for(int i1561=0;i1561<(int)tmp.size();++i1561) {
        if( tmp[i1561] != FAIL ) {
          prioritized_choice_final_prev1556.push_back(tmp[i1561]);
        }
      }
    }
    prev = next_prev1555;
    next_prev1555.clear();
    for(int i1554=0;i1554<(int)prev.size();++i1554) {
      i = prev[i1554];
      tmp = parse_slash1562();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1555.push_back(prev[i1554]); }
      for(int i1564=0;i1564<(int)tmp.size();++i1564) {
        if( tmp[i1564] != FAIL ) {
          prioritized_choice_final_prev1556.push_back(tmp[i1564]);
        }
      }
    }
    prev = next_prev1555;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev1556.empty() && prioritized_choice_final_prev1556.front() == FAIL )) {
        prioritized_choice_final_prev1556.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev1556;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1565=0;i1565<(int)prev.size();++i1565) {
        if( prev[i1565] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1565]<m&&I[prev[i1565]]=='e') {
          tmp.push_back(prev[i1565]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1566=0;i1566<(int)prev.size();++i1566) {
        if( prev[i1566] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1566]<m&&I[prev[i1566]]=='n') {
          tmp.push_back(prev[i1566]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1567=0;i1567<(int)prev.size();++i1567) {
        if( prev[i1567] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1567]<m&&I[prev[i1567]]=='u') {
          tmp.push_back(prev[i1567]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1568=0;i1568<(int)prev.size();++i1568) {
        if( prev[i1568] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1568]<m&&I[prev[i1568]]=='m') {
          tmp.push_back(prev[i1568]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev1574;
      for(int i1573=0;i1573<(int)prev.size();++i1573) {
        i = prev[i1573];
        tmp = parse_not1569();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev1574.push_back(prev[i1573]);
        } else {
          if(!(!next_prev1574.empty()&&next_prev1574.front()==FAIL)) {
            next_prev1574.push_front(FAIL);
          }
        }
      }
      prev = next_prev1574;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1576;
      for(int i1575=0;i1575<(int)prev.size();++i1575) {
        if( prev[i1575] == FAIL ) {
          if(!(!next_prev1576.empty() && next_prev1576.front() == FAIL )) {
            next_prev1576.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1575];
        tmp = parse__();
        
        for(int i1575=0;i1575<(int)tmp.size();++i1575) {
          if( tmp[i1575] == FAIL ) {
            if(!( !next_prev1576.empty() && next_prev1576[0] == FAIL )) {
              next_prev1576.push_front(FAIL);
            }
          } else {
            next_prev1576.push_back(tmp[i1575]);
          }
        }
      }
      prev = next_prev1576;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev1578;
    for(int i1577=0;i1577<(int)prev.size();++i1577) {
      if( prev[i1577] == FAIL ) {
        if(!(!next_prev1578.empty() && next_prev1578.front() == FAIL )) {
          next_prev1578.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1577];
      tmp = parse_Identifier();
      
      for(int i1577=0;i1577<(int)tmp.size();++i1577) {
        if( tmp[i1577] == FAIL ) {
          if(!( !next_prev1578.empty() && next_prev1578[0] == FAIL )) {
            next_prev1578.push_front(FAIL);
          }
        } else {
          next_prev1578.push_back(tmp[i1577]);
        }
      }
    }
    prev = next_prev1578;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev1583;
    deque<int> star_final_prev1584;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev1583.clear();
      for(int i1585=0;i1585<(int)prev.size();++i1585) {
        i = prev[i1585];
        tmp = parse_while1579();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev1584.push_back(prev[i1585]);
        }
        for(int i1586=0;i1586<(int)tmp.size();++i1586) {
          if(tmp[i1586]==FAIL) {
            if(!( !next_prev1583.empty() && next_prev1583.front() == FAIL )) {
              next_prev1583.push_front(FAIL);
            }
          } else {
            next_prev1583.push_back(tmp[i1586]);
          }
        }
      }
      prev = next_prev1583;
    }
    prev = star_final_prev1584;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (EnumBody) */
    deque<int> next_prev1588;
    for(int i1587=0;i1587<(int)prev.size();++i1587) {
      if( prev[i1587] == FAIL ) {
        if(!(!next_prev1588.empty() && next_prev1588.front() == FAIL )) {
          next_prev1588.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1587];
      tmp = parse_EnumBody();
      
      for(int i1587=0;i1587<(int)tmp.size();++i1587) {
        if( tmp[i1587] == FAIL ) {
          if(!( !next_prev1588.empty() && next_prev1588[0] == FAIL )) {
            next_prev1588.push_front(FAIL);
          }
        } else {
          next_prev1588.push_back(tmp[i1587]);
        }
      }
    }
    prev = next_prev1588;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1553=0;i1553<(int)prev.size();++i1553) {
    if( prev[i1553] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1553]);
    }
  }
  return memo[key(217,backtracking_ptr_for_packrat217)] = result;
}

inline deque<int> parse_slash1557() { 
  if(memo.count(key(218,i))) {
    return memo[key(218,i)];
  }
  int backtracking_ptr_for_packrat218=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassModifiers) */
    deque<int> next_prev1560;
    for(int i1559=0;i1559<(int)prev.size();++i1559) {
      if( prev[i1559] == FAIL ) {
        if(!(!next_prev1560.empty() && next_prev1560.front() == FAIL )) {
          next_prev1560.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1559];
      tmp = parse_ClassModifiers();
      
      for(int i1559=0;i1559<(int)tmp.size();++i1559) {
        if( tmp[i1559] == FAIL ) {
          if(!( !next_prev1560.empty() && next_prev1560[0] == FAIL )) {
            next_prev1560.push_front(FAIL);
          }
        } else {
          next_prev1560.push_back(tmp[i1559]);
        }
      }
    }
    prev = next_prev1560;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1558=0;i1558<(int)prev.size();++i1558) {
    if( prev[i1558] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1558]);
    }
  }
  return memo[key(218,backtracking_ptr_for_packrat218)] = result;
}

inline deque<int> parse_slash1562() { 
  if(memo.count(key(219,i))) {
    return memo[key(219,i)];
  }
  int backtracking_ptr_for_packrat219=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i1563=0;i1563<(int)prev.size();++i1563) {
    if( prev[i1563] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1563]);
    }
  }
  return memo[key(219,backtracking_ptr_for_packrat219)] = result;
}

inline deque<int> parse_not1569() { 
  if(memo.count(key(220,i))) {
    return memo[key(220,i)];
  }
  int backtracking_ptr_for_packrat220=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev1572;
  for(int i1571=0;i1571<(int)prev.size();++i1571) {
    if( prev[i1571] == FAIL ) {
      if(!(!next_prev1572.empty() && next_prev1572.front() == FAIL )) {
        next_prev1572.push_front(FAIL);
      }
      continue;
    }
    i = prev[i1571];
    tmp = parse_W();
    
    for(int i1571=0;i1571<(int)tmp.size();++i1571) {
      if( tmp[i1571] == FAIL ) {
        if(!( !next_prev1572.empty() && next_prev1572[0] == FAIL )) {
          next_prev1572.push_front(FAIL);
        }
      } else {
        next_prev1572.push_back(tmp[i1571]);
      }
    }
  }
  prev = next_prev1572;
  for(int i1570=0;i1570<(int)prev.size();++i1570) {
    if( prev[i1570] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1570]);
    }
  }
  return memo[key(220,backtracking_ptr_for_packrat220)] = result;
}

inline deque<int> parse_while1579() { 
  if(memo.count(key(221,i))) {
    return memo[key(221,i)];
  }
  int backtracking_ptr_for_packrat221=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (SuperInterfaces) */
    deque<int> next_prev1582;
    for(int i1581=0;i1581<(int)prev.size();++i1581) {
      if( prev[i1581] == FAIL ) {
        if(!(!next_prev1582.empty() && next_prev1582.front() == FAIL )) {
          next_prev1582.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1581];
      tmp = parse_SuperInterfaces();
      
      for(int i1581=0;i1581<(int)tmp.size();++i1581) {
        if( tmp[i1581] == FAIL ) {
          if(!( !next_prev1582.empty() && next_prev1582[0] == FAIL )) {
            next_prev1582.push_front(FAIL);
          }
        } else {
          next_prev1582.push_back(tmp[i1581]);
        }
      }
    }
    prev = next_prev1582;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1580=0;i1580<(int)prev.size();++i1580) {
    if( prev[i1580] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1580]);
    }
  }
  return memo[key(221,backtracking_ptr_for_packrat221)] = result;
}

deque<int> parse_ClassModifiers(){
  if(memo.count(key(222,i))) {
    return memo[key(222,i)];
  }
  int backtracking_ptr_for_packrat222=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassModifier) */
    deque<int> next_prev1592;
    for(int i1591=0;i1591<(int)prev.size();++i1591) {
      if( prev[i1591] == FAIL ) {
        if(!(!next_prev1592.empty() && next_prev1592.front() == FAIL )) {
          next_prev1592.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1591];
      tmp = parse_ClassModifier();
      
      for(int i1591=0;i1591<(int)tmp.size();++i1591) {
        if( tmp[i1591] == FAIL ) {
          if(!( !next_prev1592.empty() && next_prev1592[0] == FAIL )) {
            next_prev1592.push_front(FAIL);
          }
        } else {
          next_prev1592.push_back(tmp[i1591]);
        }
      }
    }
    prev = next_prev1592;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev1597;
    deque<int> star_final_prev1598;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev1597.clear();
      for(int i1599=0;i1599<(int)prev.size();++i1599) {
        i = prev[i1599];
        tmp = parse_while1593();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev1598.push_back(prev[i1599]);
        }
        for(int i1600=0;i1600<(int)tmp.size();++i1600) {
          if(tmp[i1600]==FAIL) {
            if(!( !next_prev1597.empty() && next_prev1597.front() == FAIL )) {
              next_prev1597.push_front(FAIL);
            }
          } else {
            next_prev1597.push_back(tmp[i1600]);
          }
        }
      }
      prev = next_prev1597;
    }
    prev = star_final_prev1598;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1590=0;i1590<(int)prev.size();++i1590) {
    if( prev[i1590] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1590]);
    }
  }
  return memo[key(222,backtracking_ptr_for_packrat222)] = result;
}

inline deque<int> parse_while1593() { 
  if(memo.count(key(223,i))) {
    return memo[key(223,i)];
  }
  int backtracking_ptr_for_packrat223=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassModifier) */
    deque<int> next_prev1596;
    for(int i1595=0;i1595<(int)prev.size();++i1595) {
      if( prev[i1595] == FAIL ) {
        if(!(!next_prev1596.empty() && next_prev1596.front() == FAIL )) {
          next_prev1596.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1595];
      tmp = parse_ClassModifier();
      
      for(int i1595=0;i1595<(int)tmp.size();++i1595) {
        if( tmp[i1595] == FAIL ) {
          if(!( !next_prev1596.empty() && next_prev1596[0] == FAIL )) {
            next_prev1596.push_front(FAIL);
          }
        } else {
          next_prev1596.push_back(tmp[i1595]);
        }
      }
    }
    prev = next_prev1596;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1594=0;i1594<(int)prev.size();++i1594) {
    if( prev[i1594] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1594]);
    }
  }
  return memo[key(223,backtracking_ptr_for_packrat223)] = result;
}

deque<int> parse_ClassModifier(){
  if(memo.count(key(224,i))) {
    return memo[key(224,i)];
  }
  int backtracking_ptr_for_packrat224=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev1603;
  deque<int> prioritized_choice_final_prev1604;
  next_prev1603.clear();
  for(int i1602=0;i1602<(int)prev.size();++i1602) {
    i = prev[i1602];
    tmp = parse_slash1605();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1603.push_back(prev[i1602]); }
    for(int i1609=0;i1609<(int)tmp.size();++i1609) {
      if( tmp[i1609] != FAIL ) {
        prioritized_choice_final_prev1604.push_back(tmp[i1609]);
      }
    }
  }
  prev = next_prev1603;
  next_prev1603.clear();
  for(int i1602=0;i1602<(int)prev.size();++i1602) {
    i = prev[i1602];
    tmp = parse_slash1610();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1603.push_back(prev[i1602]); }
    for(int i1626=0;i1626<(int)tmp.size();++i1626) {
      if( tmp[i1626] != FAIL ) {
        prioritized_choice_final_prev1604.push_back(tmp[i1626]);
      }
    }
  }
  prev = next_prev1603;
  next_prev1603.clear();
  for(int i1602=0;i1602<(int)prev.size();++i1602) {
    i = prev[i1602];
    tmp = parse_slash1627();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1603.push_back(prev[i1602]); }
    for(int i1646=0;i1646<(int)tmp.size();++i1646) {
      if( tmp[i1646] != FAIL ) {
        prioritized_choice_final_prev1604.push_back(tmp[i1646]);
      }
    }
  }
  prev = next_prev1603;
  next_prev1603.clear();
  for(int i1602=0;i1602<(int)prev.size();++i1602) {
    i = prev[i1602];
    tmp = parse_slash1647();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1603.push_back(prev[i1602]); }
    for(int i1664=0;i1664<(int)tmp.size();++i1664) {
      if( tmp[i1664] != FAIL ) {
        prioritized_choice_final_prev1604.push_back(tmp[i1664]);
      }
    }
  }
  prev = next_prev1603;
  next_prev1603.clear();
  for(int i1602=0;i1602<(int)prev.size();++i1602) {
    i = prev[i1602];
    tmp = parse_slash1665();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1603.push_back(prev[i1602]); }
    for(int i1683=0;i1683<(int)tmp.size();++i1683) {
      if( tmp[i1683] != FAIL ) {
        prioritized_choice_final_prev1604.push_back(tmp[i1683]);
      }
    }
  }
  prev = next_prev1603;
  next_prev1603.clear();
  for(int i1602=0;i1602<(int)prev.size();++i1602) {
    i = prev[i1602];
    tmp = parse_slash1684();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1603.push_back(prev[i1602]); }
    for(int i1699=0;i1699<(int)tmp.size();++i1699) {
      if( tmp[i1699] != FAIL ) {
        prioritized_choice_final_prev1604.push_back(tmp[i1699]);
      }
    }
  }
  prev = next_prev1603;
  next_prev1603.clear();
  for(int i1602=0;i1602<(int)prev.size();++i1602) {
    i = prev[i1602];
    tmp = parse_slash1700();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1603.push_back(prev[i1602]); }
    for(int i1716=0;i1716<(int)tmp.size();++i1716) {
      if( tmp[i1716] != FAIL ) {
        prioritized_choice_final_prev1604.push_back(tmp[i1716]);
      }
    }
  }
  prev = next_prev1603;
  next_prev1603.clear();
  for(int i1602=0;i1602<(int)prev.size();++i1602) {
    i = prev[i1602];
    tmp = parse_slash1717();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1603.push_back(prev[i1602]); }
    for(int i1735=0;i1735<(int)tmp.size();++i1735) {
      if( tmp[i1735] != FAIL ) {
        prioritized_choice_final_prev1604.push_back(tmp[i1735]);
      }
    }
  }
  prev = next_prev1603;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev1604.empty() && prioritized_choice_final_prev1604.front() == FAIL )) {
      prioritized_choice_final_prev1604.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev1604;
  for(int i1601=0;i1601<(int)prev.size();++i1601) {
    if( prev[i1601] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1601]);
    }
  }
  return memo[key(224,backtracking_ptr_for_packrat224)] = result;
}

inline deque<int> parse_slash1605() { 
  if(memo.count(key(225,i))) {
    return memo[key(225,i)];
  }
  int backtracking_ptr_for_packrat225=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotation) */
    deque<int> next_prev1608;
    for(int i1607=0;i1607<(int)prev.size();++i1607) {
      if( prev[i1607] == FAIL ) {
        if(!(!next_prev1608.empty() && next_prev1608.front() == FAIL )) {
          next_prev1608.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1607];
      tmp = parse_Annotation();
      
      for(int i1607=0;i1607<(int)tmp.size();++i1607) {
        if( tmp[i1607] == FAIL ) {
          if(!( !next_prev1608.empty() && next_prev1608[0] == FAIL )) {
            next_prev1608.push_front(FAIL);
          }
        } else {
          next_prev1608.push_back(tmp[i1607]);
        }
      }
    }
    prev = next_prev1608;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1606=0;i1606<(int)prev.size();++i1606) {
    if( prev[i1606] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1606]);
    }
  }
  return memo[key(225,backtracking_ptr_for_packrat225)] = result;
}

inline deque<int> parse_slash1610() { 
  if(memo.count(key(226,i))) {
    return memo[key(226,i)];
  }
  int backtracking_ptr_for_packrat226=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1612=0;i1612<(int)prev.size();++i1612) {
        if( prev[i1612] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1612]<m&&I[prev[i1612]]=='p') {
          tmp.push_back(prev[i1612]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1613=0;i1613<(int)prev.size();++i1613) {
        if( prev[i1613] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1613]<m&&I[prev[i1613]]=='u') {
          tmp.push_back(prev[i1613]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1614=0;i1614<(int)prev.size();++i1614) {
        if( prev[i1614] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1614]<m&&I[prev[i1614]]=='b') {
          tmp.push_back(prev[i1614]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1615=0;i1615<(int)prev.size();++i1615) {
        if( prev[i1615] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1615]<m&&I[prev[i1615]]=='l') {
          tmp.push_back(prev[i1615]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1616=0;i1616<(int)prev.size();++i1616) {
        if( prev[i1616] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1616]<m&&I[prev[i1616]]=='i') {
          tmp.push_back(prev[i1616]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1617=0;i1617<(int)prev.size();++i1617) {
        if( prev[i1617] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1617]<m&&I[prev[i1617]]=='c') {
          tmp.push_back(prev[i1617]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev1623;
      for(int i1622=0;i1622<(int)prev.size();++i1622) {
        i = prev[i1622];
        tmp = parse_not1618();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev1623.push_back(prev[i1622]);
        } else {
          if(!(!next_prev1623.empty()&&next_prev1623.front()==FAIL)) {
            next_prev1623.push_front(FAIL);
          }
        }
      }
      prev = next_prev1623;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1625;
      for(int i1624=0;i1624<(int)prev.size();++i1624) {
        if( prev[i1624] == FAIL ) {
          if(!(!next_prev1625.empty() && next_prev1625.front() == FAIL )) {
            next_prev1625.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1624];
        tmp = parse__();
        
        for(int i1624=0;i1624<(int)tmp.size();++i1624) {
          if( tmp[i1624] == FAIL ) {
            if(!( !next_prev1625.empty() && next_prev1625[0] == FAIL )) {
              next_prev1625.push_front(FAIL);
            }
          } else {
            next_prev1625.push_back(tmp[i1624]);
          }
        }
      }
      prev = next_prev1625;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1611=0;i1611<(int)prev.size();++i1611) {
    if( prev[i1611] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1611]);
    }
  }
  return memo[key(226,backtracking_ptr_for_packrat226)] = result;
}

inline deque<int> parse_not1618() { 
  if(memo.count(key(227,i))) {
    return memo[key(227,i)];
  }
  int backtracking_ptr_for_packrat227=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev1621;
  for(int i1620=0;i1620<(int)prev.size();++i1620) {
    if( prev[i1620] == FAIL ) {
      if(!(!next_prev1621.empty() && next_prev1621.front() == FAIL )) {
        next_prev1621.push_front(FAIL);
      }
      continue;
    }
    i = prev[i1620];
    tmp = parse_W();
    
    for(int i1620=0;i1620<(int)tmp.size();++i1620) {
      if( tmp[i1620] == FAIL ) {
        if(!( !next_prev1621.empty() && next_prev1621[0] == FAIL )) {
          next_prev1621.push_front(FAIL);
        }
      } else {
        next_prev1621.push_back(tmp[i1620]);
      }
    }
  }
  prev = next_prev1621;
  for(int i1619=0;i1619<(int)prev.size();++i1619) {
    if( prev[i1619] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1619]);
    }
  }
  return memo[key(227,backtracking_ptr_for_packrat227)] = result;
}

inline deque<int> parse_slash1627() { 
  if(memo.count(key(228,i))) {
    return memo[key(228,i)];
  }
  int backtracking_ptr_for_packrat228=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1629=0;i1629<(int)prev.size();++i1629) {
        if( prev[i1629] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1629]<m&&I[prev[i1629]]=='p') {
          tmp.push_back(prev[i1629]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1630=0;i1630<(int)prev.size();++i1630) {
        if( prev[i1630] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1630]<m&&I[prev[i1630]]=='r') {
          tmp.push_back(prev[i1630]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1631=0;i1631<(int)prev.size();++i1631) {
        if( prev[i1631] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1631]<m&&I[prev[i1631]]=='o') {
          tmp.push_back(prev[i1631]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1632=0;i1632<(int)prev.size();++i1632) {
        if( prev[i1632] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1632]<m&&I[prev[i1632]]=='t') {
          tmp.push_back(prev[i1632]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1633=0;i1633<(int)prev.size();++i1633) {
        if( prev[i1633] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1633]<m&&I[prev[i1633]]=='e') {
          tmp.push_back(prev[i1633]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1634=0;i1634<(int)prev.size();++i1634) {
        if( prev[i1634] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1634]<m&&I[prev[i1634]]=='c') {
          tmp.push_back(prev[i1634]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1635=0;i1635<(int)prev.size();++i1635) {
        if( prev[i1635] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1635]<m&&I[prev[i1635]]=='t') {
          tmp.push_back(prev[i1635]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1636=0;i1636<(int)prev.size();++i1636) {
        if( prev[i1636] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1636]<m&&I[prev[i1636]]=='e') {
          tmp.push_back(prev[i1636]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1637=0;i1637<(int)prev.size();++i1637) {
        if( prev[i1637] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1637]<m&&I[prev[i1637]]=='d') {
          tmp.push_back(prev[i1637]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev1643;
      for(int i1642=0;i1642<(int)prev.size();++i1642) {
        i = prev[i1642];
        tmp = parse_not1638();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev1643.push_back(prev[i1642]);
        } else {
          if(!(!next_prev1643.empty()&&next_prev1643.front()==FAIL)) {
            next_prev1643.push_front(FAIL);
          }
        }
      }
      prev = next_prev1643;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1645;
      for(int i1644=0;i1644<(int)prev.size();++i1644) {
        if( prev[i1644] == FAIL ) {
          if(!(!next_prev1645.empty() && next_prev1645.front() == FAIL )) {
            next_prev1645.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1644];
        tmp = parse__();
        
        for(int i1644=0;i1644<(int)tmp.size();++i1644) {
          if( tmp[i1644] == FAIL ) {
            if(!( !next_prev1645.empty() && next_prev1645[0] == FAIL )) {
              next_prev1645.push_front(FAIL);
            }
          } else {
            next_prev1645.push_back(tmp[i1644]);
          }
        }
      }
      prev = next_prev1645;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1628=0;i1628<(int)prev.size();++i1628) {
    if( prev[i1628] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1628]);
    }
  }
  return memo[key(228,backtracking_ptr_for_packrat228)] = result;
}

inline deque<int> parse_not1638() { 
  if(memo.count(key(229,i))) {
    return memo[key(229,i)];
  }
  int backtracking_ptr_for_packrat229=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev1641;
  for(int i1640=0;i1640<(int)prev.size();++i1640) {
    if( prev[i1640] == FAIL ) {
      if(!(!next_prev1641.empty() && next_prev1641.front() == FAIL )) {
        next_prev1641.push_front(FAIL);
      }
      continue;
    }
    i = prev[i1640];
    tmp = parse_W();
    
    for(int i1640=0;i1640<(int)tmp.size();++i1640) {
      if( tmp[i1640] == FAIL ) {
        if(!( !next_prev1641.empty() && next_prev1641[0] == FAIL )) {
          next_prev1641.push_front(FAIL);
        }
      } else {
        next_prev1641.push_back(tmp[i1640]);
      }
    }
  }
  prev = next_prev1641;
  for(int i1639=0;i1639<(int)prev.size();++i1639) {
    if( prev[i1639] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1639]);
    }
  }
  return memo[key(229,backtracking_ptr_for_packrat229)] = result;
}

inline deque<int> parse_slash1647() { 
  if(memo.count(key(230,i))) {
    return memo[key(230,i)];
  }
  int backtracking_ptr_for_packrat230=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1649=0;i1649<(int)prev.size();++i1649) {
        if( prev[i1649] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1649]<m&&I[prev[i1649]]=='p') {
          tmp.push_back(prev[i1649]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1650=0;i1650<(int)prev.size();++i1650) {
        if( prev[i1650] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1650]<m&&I[prev[i1650]]=='r') {
          tmp.push_back(prev[i1650]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1651=0;i1651<(int)prev.size();++i1651) {
        if( prev[i1651] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1651]<m&&I[prev[i1651]]=='i') {
          tmp.push_back(prev[i1651]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1652=0;i1652<(int)prev.size();++i1652) {
        if( prev[i1652] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1652]<m&&I[prev[i1652]]=='v') {
          tmp.push_back(prev[i1652]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1653=0;i1653<(int)prev.size();++i1653) {
        if( prev[i1653] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1653]<m&&I[prev[i1653]]=='a') {
          tmp.push_back(prev[i1653]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1654=0;i1654<(int)prev.size();++i1654) {
        if( prev[i1654] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1654]<m&&I[prev[i1654]]=='t') {
          tmp.push_back(prev[i1654]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1655=0;i1655<(int)prev.size();++i1655) {
        if( prev[i1655] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1655]<m&&I[prev[i1655]]=='e') {
          tmp.push_back(prev[i1655]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev1661;
      for(int i1660=0;i1660<(int)prev.size();++i1660) {
        i = prev[i1660];
        tmp = parse_not1656();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev1661.push_back(prev[i1660]);
        } else {
          if(!(!next_prev1661.empty()&&next_prev1661.front()==FAIL)) {
            next_prev1661.push_front(FAIL);
          }
        }
      }
      prev = next_prev1661;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1663;
      for(int i1662=0;i1662<(int)prev.size();++i1662) {
        if( prev[i1662] == FAIL ) {
          if(!(!next_prev1663.empty() && next_prev1663.front() == FAIL )) {
            next_prev1663.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1662];
        tmp = parse__();
        
        for(int i1662=0;i1662<(int)tmp.size();++i1662) {
          if( tmp[i1662] == FAIL ) {
            if(!( !next_prev1663.empty() && next_prev1663[0] == FAIL )) {
              next_prev1663.push_front(FAIL);
            }
          } else {
            next_prev1663.push_back(tmp[i1662]);
          }
        }
      }
      prev = next_prev1663;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1648=0;i1648<(int)prev.size();++i1648) {
    if( prev[i1648] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1648]);
    }
  }
  return memo[key(230,backtracking_ptr_for_packrat230)] = result;
}

inline deque<int> parse_not1656() { 
  if(memo.count(key(231,i))) {
    return memo[key(231,i)];
  }
  int backtracking_ptr_for_packrat231=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev1659;
  for(int i1658=0;i1658<(int)prev.size();++i1658) {
    if( prev[i1658] == FAIL ) {
      if(!(!next_prev1659.empty() && next_prev1659.front() == FAIL )) {
        next_prev1659.push_front(FAIL);
      }
      continue;
    }
    i = prev[i1658];
    tmp = parse_W();
    
    for(int i1658=0;i1658<(int)tmp.size();++i1658) {
      if( tmp[i1658] == FAIL ) {
        if(!( !next_prev1659.empty() && next_prev1659[0] == FAIL )) {
          next_prev1659.push_front(FAIL);
        }
      } else {
        next_prev1659.push_back(tmp[i1658]);
      }
    }
  }
  prev = next_prev1659;
  for(int i1657=0;i1657<(int)prev.size();++i1657) {
    if( prev[i1657] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1657]);
    }
  }
  return memo[key(231,backtracking_ptr_for_packrat231)] = result;
}

inline deque<int> parse_slash1665() { 
  if(memo.count(key(232,i))) {
    return memo[key(232,i)];
  }
  int backtracking_ptr_for_packrat232=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1667=0;i1667<(int)prev.size();++i1667) {
        if( prev[i1667] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1667]<m&&I[prev[i1667]]=='a') {
          tmp.push_back(prev[i1667]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1668=0;i1668<(int)prev.size();++i1668) {
        if( prev[i1668] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1668]<m&&I[prev[i1668]]=='b') {
          tmp.push_back(prev[i1668]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1669=0;i1669<(int)prev.size();++i1669) {
        if( prev[i1669] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1669]<m&&I[prev[i1669]]=='s') {
          tmp.push_back(prev[i1669]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1670=0;i1670<(int)prev.size();++i1670) {
        if( prev[i1670] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1670]<m&&I[prev[i1670]]=='t') {
          tmp.push_back(prev[i1670]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1671=0;i1671<(int)prev.size();++i1671) {
        if( prev[i1671] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1671]<m&&I[prev[i1671]]=='r') {
          tmp.push_back(prev[i1671]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1672=0;i1672<(int)prev.size();++i1672) {
        if( prev[i1672] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1672]<m&&I[prev[i1672]]=='a') {
          tmp.push_back(prev[i1672]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1673=0;i1673<(int)prev.size();++i1673) {
        if( prev[i1673] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1673]<m&&I[prev[i1673]]=='c') {
          tmp.push_back(prev[i1673]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1674=0;i1674<(int)prev.size();++i1674) {
        if( prev[i1674] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1674]<m&&I[prev[i1674]]=='t') {
          tmp.push_back(prev[i1674]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev1680;
      for(int i1679=0;i1679<(int)prev.size();++i1679) {
        i = prev[i1679];
        tmp = parse_not1675();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev1680.push_back(prev[i1679]);
        } else {
          if(!(!next_prev1680.empty()&&next_prev1680.front()==FAIL)) {
            next_prev1680.push_front(FAIL);
          }
        }
      }
      prev = next_prev1680;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1682;
      for(int i1681=0;i1681<(int)prev.size();++i1681) {
        if( prev[i1681] == FAIL ) {
          if(!(!next_prev1682.empty() && next_prev1682.front() == FAIL )) {
            next_prev1682.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1681];
        tmp = parse__();
        
        for(int i1681=0;i1681<(int)tmp.size();++i1681) {
          if( tmp[i1681] == FAIL ) {
            if(!( !next_prev1682.empty() && next_prev1682[0] == FAIL )) {
              next_prev1682.push_front(FAIL);
            }
          } else {
            next_prev1682.push_back(tmp[i1681]);
          }
        }
      }
      prev = next_prev1682;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1666=0;i1666<(int)prev.size();++i1666) {
    if( prev[i1666] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1666]);
    }
  }
  return memo[key(232,backtracking_ptr_for_packrat232)] = result;
}

inline deque<int> parse_not1675() { 
  if(memo.count(key(233,i))) {
    return memo[key(233,i)];
  }
  int backtracking_ptr_for_packrat233=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev1678;
  for(int i1677=0;i1677<(int)prev.size();++i1677) {
    if( prev[i1677] == FAIL ) {
      if(!(!next_prev1678.empty() && next_prev1678.front() == FAIL )) {
        next_prev1678.push_front(FAIL);
      }
      continue;
    }
    i = prev[i1677];
    tmp = parse_W();
    
    for(int i1677=0;i1677<(int)tmp.size();++i1677) {
      if( tmp[i1677] == FAIL ) {
        if(!( !next_prev1678.empty() && next_prev1678[0] == FAIL )) {
          next_prev1678.push_front(FAIL);
        }
      } else {
        next_prev1678.push_back(tmp[i1677]);
      }
    }
  }
  prev = next_prev1678;
  for(int i1676=0;i1676<(int)prev.size();++i1676) {
    if( prev[i1676] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1676]);
    }
  }
  return memo[key(233,backtracking_ptr_for_packrat233)] = result;
}

inline deque<int> parse_slash1684() { 
  if(memo.count(key(234,i))) {
    return memo[key(234,i)];
  }
  int backtracking_ptr_for_packrat234=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1686=0;i1686<(int)prev.size();++i1686) {
        if( prev[i1686] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1686]<m&&I[prev[i1686]]=='f') {
          tmp.push_back(prev[i1686]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1687=0;i1687<(int)prev.size();++i1687) {
        if( prev[i1687] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1687]<m&&I[prev[i1687]]=='i') {
          tmp.push_back(prev[i1687]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1688=0;i1688<(int)prev.size();++i1688) {
        if( prev[i1688] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1688]<m&&I[prev[i1688]]=='n') {
          tmp.push_back(prev[i1688]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1689=0;i1689<(int)prev.size();++i1689) {
        if( prev[i1689] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1689]<m&&I[prev[i1689]]=='a') {
          tmp.push_back(prev[i1689]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1690=0;i1690<(int)prev.size();++i1690) {
        if( prev[i1690] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1690]<m&&I[prev[i1690]]=='l') {
          tmp.push_back(prev[i1690]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev1696;
      for(int i1695=0;i1695<(int)prev.size();++i1695) {
        i = prev[i1695];
        tmp = parse_not1691();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev1696.push_back(prev[i1695]);
        } else {
          if(!(!next_prev1696.empty()&&next_prev1696.front()==FAIL)) {
            next_prev1696.push_front(FAIL);
          }
        }
      }
      prev = next_prev1696;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1698;
      for(int i1697=0;i1697<(int)prev.size();++i1697) {
        if( prev[i1697] == FAIL ) {
          if(!(!next_prev1698.empty() && next_prev1698.front() == FAIL )) {
            next_prev1698.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1697];
        tmp = parse__();
        
        for(int i1697=0;i1697<(int)tmp.size();++i1697) {
          if( tmp[i1697] == FAIL ) {
            if(!( !next_prev1698.empty() && next_prev1698[0] == FAIL )) {
              next_prev1698.push_front(FAIL);
            }
          } else {
            next_prev1698.push_back(tmp[i1697]);
          }
        }
      }
      prev = next_prev1698;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1685=0;i1685<(int)prev.size();++i1685) {
    if( prev[i1685] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1685]);
    }
  }
  return memo[key(234,backtracking_ptr_for_packrat234)] = result;
}

inline deque<int> parse_not1691() { 
  if(memo.count(key(235,i))) {
    return memo[key(235,i)];
  }
  int backtracking_ptr_for_packrat235=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev1694;
  for(int i1693=0;i1693<(int)prev.size();++i1693) {
    if( prev[i1693] == FAIL ) {
      if(!(!next_prev1694.empty() && next_prev1694.front() == FAIL )) {
        next_prev1694.push_front(FAIL);
      }
      continue;
    }
    i = prev[i1693];
    tmp = parse_W();
    
    for(int i1693=0;i1693<(int)tmp.size();++i1693) {
      if( tmp[i1693] == FAIL ) {
        if(!( !next_prev1694.empty() && next_prev1694[0] == FAIL )) {
          next_prev1694.push_front(FAIL);
        }
      } else {
        next_prev1694.push_back(tmp[i1693]);
      }
    }
  }
  prev = next_prev1694;
  for(int i1692=0;i1692<(int)prev.size();++i1692) {
    if( prev[i1692] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1692]);
    }
  }
  return memo[key(235,backtracking_ptr_for_packrat235)] = result;
}

inline deque<int> parse_slash1700() { 
  if(memo.count(key(236,i))) {
    return memo[key(236,i)];
  }
  int backtracking_ptr_for_packrat236=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1702=0;i1702<(int)prev.size();++i1702) {
        if( prev[i1702] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1702]<m&&I[prev[i1702]]=='s') {
          tmp.push_back(prev[i1702]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1703=0;i1703<(int)prev.size();++i1703) {
        if( prev[i1703] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1703]<m&&I[prev[i1703]]=='t') {
          tmp.push_back(prev[i1703]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1704=0;i1704<(int)prev.size();++i1704) {
        if( prev[i1704] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1704]<m&&I[prev[i1704]]=='a') {
          tmp.push_back(prev[i1704]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1705=0;i1705<(int)prev.size();++i1705) {
        if( prev[i1705] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1705]<m&&I[prev[i1705]]=='t') {
          tmp.push_back(prev[i1705]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1706=0;i1706<(int)prev.size();++i1706) {
        if( prev[i1706] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1706]<m&&I[prev[i1706]]=='i') {
          tmp.push_back(prev[i1706]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1707=0;i1707<(int)prev.size();++i1707) {
        if( prev[i1707] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1707]<m&&I[prev[i1707]]=='c') {
          tmp.push_back(prev[i1707]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev1713;
      for(int i1712=0;i1712<(int)prev.size();++i1712) {
        i = prev[i1712];
        tmp = parse_not1708();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev1713.push_back(prev[i1712]);
        } else {
          if(!(!next_prev1713.empty()&&next_prev1713.front()==FAIL)) {
            next_prev1713.push_front(FAIL);
          }
        }
      }
      prev = next_prev1713;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1715;
      for(int i1714=0;i1714<(int)prev.size();++i1714) {
        if( prev[i1714] == FAIL ) {
          if(!(!next_prev1715.empty() && next_prev1715.front() == FAIL )) {
            next_prev1715.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1714];
        tmp = parse__();
        
        for(int i1714=0;i1714<(int)tmp.size();++i1714) {
          if( tmp[i1714] == FAIL ) {
            if(!( !next_prev1715.empty() && next_prev1715[0] == FAIL )) {
              next_prev1715.push_front(FAIL);
            }
          } else {
            next_prev1715.push_back(tmp[i1714]);
          }
        }
      }
      prev = next_prev1715;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1701=0;i1701<(int)prev.size();++i1701) {
    if( prev[i1701] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1701]);
    }
  }
  return memo[key(236,backtracking_ptr_for_packrat236)] = result;
}

inline deque<int> parse_not1708() { 
  if(memo.count(key(237,i))) {
    return memo[key(237,i)];
  }
  int backtracking_ptr_for_packrat237=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev1711;
  for(int i1710=0;i1710<(int)prev.size();++i1710) {
    if( prev[i1710] == FAIL ) {
      if(!(!next_prev1711.empty() && next_prev1711.front() == FAIL )) {
        next_prev1711.push_front(FAIL);
      }
      continue;
    }
    i = prev[i1710];
    tmp = parse_W();
    
    for(int i1710=0;i1710<(int)tmp.size();++i1710) {
      if( tmp[i1710] == FAIL ) {
        if(!( !next_prev1711.empty() && next_prev1711[0] == FAIL )) {
          next_prev1711.push_front(FAIL);
        }
      } else {
        next_prev1711.push_back(tmp[i1710]);
      }
    }
  }
  prev = next_prev1711;
  for(int i1709=0;i1709<(int)prev.size();++i1709) {
    if( prev[i1709] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1709]);
    }
  }
  return memo[key(237,backtracking_ptr_for_packrat237)] = result;
}

inline deque<int> parse_slash1717() { 
  if(memo.count(key(238,i))) {
    return memo[key(238,i)];
  }
  int backtracking_ptr_for_packrat238=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1719=0;i1719<(int)prev.size();++i1719) {
        if( prev[i1719] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1719]<m&&I[prev[i1719]]=='s') {
          tmp.push_back(prev[i1719]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1720=0;i1720<(int)prev.size();++i1720) {
        if( prev[i1720] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1720]<m&&I[prev[i1720]]=='t') {
          tmp.push_back(prev[i1720]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1721=0;i1721<(int)prev.size();++i1721) {
        if( prev[i1721] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1721]<m&&I[prev[i1721]]=='r') {
          tmp.push_back(prev[i1721]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1722=0;i1722<(int)prev.size();++i1722) {
        if( prev[i1722] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1722]<m&&I[prev[i1722]]=='i') {
          tmp.push_back(prev[i1722]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1723=0;i1723<(int)prev.size();++i1723) {
        if( prev[i1723] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1723]<m&&I[prev[i1723]]=='c') {
          tmp.push_back(prev[i1723]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1724=0;i1724<(int)prev.size();++i1724) {
        if( prev[i1724] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1724]<m&&I[prev[i1724]]=='t') {
          tmp.push_back(prev[i1724]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1725=0;i1725<(int)prev.size();++i1725) {
        if( prev[i1725] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1725]<m&&I[prev[i1725]]=='f') {
          tmp.push_back(prev[i1725]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1726=0;i1726<(int)prev.size();++i1726) {
        if( prev[i1726] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1726]<m&&I[prev[i1726]]=='p') {
          tmp.push_back(prev[i1726]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev1732;
      for(int i1731=0;i1731<(int)prev.size();++i1731) {
        i = prev[i1731];
        tmp = parse_not1727();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev1732.push_back(prev[i1731]);
        } else {
          if(!(!next_prev1732.empty()&&next_prev1732.front()==FAIL)) {
            next_prev1732.push_front(FAIL);
          }
        }
      }
      prev = next_prev1732;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1734;
      for(int i1733=0;i1733<(int)prev.size();++i1733) {
        if( prev[i1733] == FAIL ) {
          if(!(!next_prev1734.empty() && next_prev1734.front() == FAIL )) {
            next_prev1734.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1733];
        tmp = parse__();
        
        for(int i1733=0;i1733<(int)tmp.size();++i1733) {
          if( tmp[i1733] == FAIL ) {
            if(!( !next_prev1734.empty() && next_prev1734[0] == FAIL )) {
              next_prev1734.push_front(FAIL);
            }
          } else {
            next_prev1734.push_back(tmp[i1733]);
          }
        }
      }
      prev = next_prev1734;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1718=0;i1718<(int)prev.size();++i1718) {
    if( prev[i1718] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1718]);
    }
  }
  return memo[key(238,backtracking_ptr_for_packrat238)] = result;
}

inline deque<int> parse_not1727() { 
  if(memo.count(key(239,i))) {
    return memo[key(239,i)];
  }
  int backtracking_ptr_for_packrat239=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev1730;
  for(int i1729=0;i1729<(int)prev.size();++i1729) {
    if( prev[i1729] == FAIL ) {
      if(!(!next_prev1730.empty() && next_prev1730.front() == FAIL )) {
        next_prev1730.push_front(FAIL);
      }
      continue;
    }
    i = prev[i1729];
    tmp = parse_W();
    
    for(int i1729=0;i1729<(int)tmp.size();++i1729) {
      if( tmp[i1729] == FAIL ) {
        if(!( !next_prev1730.empty() && next_prev1730[0] == FAIL )) {
          next_prev1730.push_front(FAIL);
        }
      } else {
        next_prev1730.push_back(tmp[i1729]);
      }
    }
  }
  prev = next_prev1730;
  for(int i1728=0;i1728<(int)prev.size();++i1728) {
    if( prev[i1728] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1728]);
    }
  }
  return memo[key(239,backtracking_ptr_for_packrat239)] = result;
}

deque<int> parse_SuperClass(){
  if(memo.count(key(240,i))) {
    return memo[key(240,i)];
  }
  int backtracking_ptr_for_packrat240=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1737=0;i1737<(int)prev.size();++i1737) {
        if( prev[i1737] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1737]<m&&I[prev[i1737]]=='e') {
          tmp.push_back(prev[i1737]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1738=0;i1738<(int)prev.size();++i1738) {
        if( prev[i1738] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1738]<m&&I[prev[i1738]]=='x') {
          tmp.push_back(prev[i1738]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1739=0;i1739<(int)prev.size();++i1739) {
        if( prev[i1739] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1739]<m&&I[prev[i1739]]=='t') {
          tmp.push_back(prev[i1739]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1740=0;i1740<(int)prev.size();++i1740) {
        if( prev[i1740] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1740]<m&&I[prev[i1740]]=='e') {
          tmp.push_back(prev[i1740]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1741=0;i1741<(int)prev.size();++i1741) {
        if( prev[i1741] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1741]<m&&I[prev[i1741]]=='n') {
          tmp.push_back(prev[i1741]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1742=0;i1742<(int)prev.size();++i1742) {
        if( prev[i1742] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1742]<m&&I[prev[i1742]]=='d') {
          tmp.push_back(prev[i1742]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1743=0;i1743<(int)prev.size();++i1743) {
        if( prev[i1743] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1743]<m&&I[prev[i1743]]=='s') {
          tmp.push_back(prev[i1743]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev1749;
      for(int i1748=0;i1748<(int)prev.size();++i1748) {
        i = prev[i1748];
        tmp = parse_not1744();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev1749.push_back(prev[i1748]);
        } else {
          if(!(!next_prev1749.empty()&&next_prev1749.front()==FAIL)) {
            next_prev1749.push_front(FAIL);
          }
        }
      }
      prev = next_prev1749;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1751;
      for(int i1750=0;i1750<(int)prev.size();++i1750) {
        if( prev[i1750] == FAIL ) {
          if(!(!next_prev1751.empty() && next_prev1751.front() == FAIL )) {
            next_prev1751.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1750];
        tmp = parse__();
        
        for(int i1750=0;i1750<(int)tmp.size();++i1750) {
          if( tmp[i1750] == FAIL ) {
            if(!( !next_prev1751.empty() && next_prev1751[0] == FAIL )) {
              next_prev1751.push_front(FAIL);
            }
          } else {
            next_prev1751.push_back(tmp[i1750]);
          }
        }
      }
      prev = next_prev1751;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassOrInterfaceType) */
    deque<int> next_prev1753;
    for(int i1752=0;i1752<(int)prev.size();++i1752) {
      if( prev[i1752] == FAIL ) {
        if(!(!next_prev1753.empty() && next_prev1753.front() == FAIL )) {
          next_prev1753.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1752];
      tmp = parse_ClassOrInterfaceType();
      
      for(int i1752=0;i1752<(int)tmp.size();++i1752) {
        if( tmp[i1752] == FAIL ) {
          if(!( !next_prev1753.empty() && next_prev1753[0] == FAIL )) {
            next_prev1753.push_front(FAIL);
          }
        } else {
          next_prev1753.push_back(tmp[i1752]);
        }
      }
    }
    prev = next_prev1753;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1736=0;i1736<(int)prev.size();++i1736) {
    if( prev[i1736] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1736]);
    }
  }
  return memo[key(240,backtracking_ptr_for_packrat240)] = result;
}

inline deque<int> parse_not1744() { 
  if(memo.count(key(241,i))) {
    return memo[key(241,i)];
  }
  int backtracking_ptr_for_packrat241=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev1747;
  for(int i1746=0;i1746<(int)prev.size();++i1746) {
    if( prev[i1746] == FAIL ) {
      if(!(!next_prev1747.empty() && next_prev1747.front() == FAIL )) {
        next_prev1747.push_front(FAIL);
      }
      continue;
    }
    i = prev[i1746];
    tmp = parse_W();
    
    for(int i1746=0;i1746<(int)tmp.size();++i1746) {
      if( tmp[i1746] == FAIL ) {
        if(!( !next_prev1747.empty() && next_prev1747[0] == FAIL )) {
          next_prev1747.push_front(FAIL);
        }
      } else {
        next_prev1747.push_back(tmp[i1746]);
      }
    }
  }
  prev = next_prev1747;
  for(int i1745=0;i1745<(int)prev.size();++i1745) {
    if( prev[i1745] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1745]);
    }
  }
  return memo[key(241,backtracking_ptr_for_packrat241)] = result;
}

deque<int> parse_SuperInterfaces(){
  if(memo.count(key(242,i))) {
    return memo[key(242,i)];
  }
  int backtracking_ptr_for_packrat242=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1755=0;i1755<(int)prev.size();++i1755) {
        if( prev[i1755] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1755]<m&&I[prev[i1755]]=='i') {
          tmp.push_back(prev[i1755]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1756=0;i1756<(int)prev.size();++i1756) {
        if( prev[i1756] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1756]<m&&I[prev[i1756]]=='m') {
          tmp.push_back(prev[i1756]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1757=0;i1757<(int)prev.size();++i1757) {
        if( prev[i1757] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1757]<m&&I[prev[i1757]]=='p') {
          tmp.push_back(prev[i1757]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1758=0;i1758<(int)prev.size();++i1758) {
        if( prev[i1758] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1758]<m&&I[prev[i1758]]=='l') {
          tmp.push_back(prev[i1758]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1759=0;i1759<(int)prev.size();++i1759) {
        if( prev[i1759] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1759]<m&&I[prev[i1759]]=='e') {
          tmp.push_back(prev[i1759]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1760=0;i1760<(int)prev.size();++i1760) {
        if( prev[i1760] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1760]<m&&I[prev[i1760]]=='m') {
          tmp.push_back(prev[i1760]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1761=0;i1761<(int)prev.size();++i1761) {
        if( prev[i1761] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1761]<m&&I[prev[i1761]]=='e') {
          tmp.push_back(prev[i1761]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1762=0;i1762<(int)prev.size();++i1762) {
        if( prev[i1762] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1762]<m&&I[prev[i1762]]=='n') {
          tmp.push_back(prev[i1762]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1763=0;i1763<(int)prev.size();++i1763) {
        if( prev[i1763] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1763]<m&&I[prev[i1763]]=='t') {
          tmp.push_back(prev[i1763]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1764=0;i1764<(int)prev.size();++i1764) {
        if( prev[i1764] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1764]<m&&I[prev[i1764]]=='s') {
          tmp.push_back(prev[i1764]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev1770;
      for(int i1769=0;i1769<(int)prev.size();++i1769) {
        i = prev[i1769];
        tmp = parse_not1765();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev1770.push_back(prev[i1769]);
        } else {
          if(!(!next_prev1770.empty()&&next_prev1770.front()==FAIL)) {
            next_prev1770.push_front(FAIL);
          }
        }
      }
      prev = next_prev1770;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1772;
      for(int i1771=0;i1771<(int)prev.size();++i1771) {
        if( prev[i1771] == FAIL ) {
          if(!(!next_prev1772.empty() && next_prev1772.front() == FAIL )) {
            next_prev1772.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1771];
        tmp = parse__();
        
        for(int i1771=0;i1771<(int)tmp.size();++i1771) {
          if( tmp[i1771] == FAIL ) {
            if(!( !next_prev1772.empty() && next_prev1772[0] == FAIL )) {
              next_prev1772.push_front(FAIL);
            }
          } else {
            next_prev1772.push_back(tmp[i1771]);
          }
        }
      }
      prev = next_prev1772;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassOrInterfaceTypes) */
    deque<int> next_prev1774;
    for(int i1773=0;i1773<(int)prev.size();++i1773) {
      if( prev[i1773] == FAIL ) {
        if(!(!next_prev1774.empty() && next_prev1774.front() == FAIL )) {
          next_prev1774.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1773];
      tmp = parse_ClassOrInterfaceTypes();
      
      for(int i1773=0;i1773<(int)tmp.size();++i1773) {
        if( tmp[i1773] == FAIL ) {
          if(!( !next_prev1774.empty() && next_prev1774[0] == FAIL )) {
            next_prev1774.push_front(FAIL);
          }
        } else {
          next_prev1774.push_back(tmp[i1773]);
        }
      }
    }
    prev = next_prev1774;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1754=0;i1754<(int)prev.size();++i1754) {
    if( prev[i1754] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1754]);
    }
  }
  return memo[key(242,backtracking_ptr_for_packrat242)] = result;
}

inline deque<int> parse_not1765() { 
  if(memo.count(key(243,i))) {
    return memo[key(243,i)];
  }
  int backtracking_ptr_for_packrat243=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev1768;
  for(int i1767=0;i1767<(int)prev.size();++i1767) {
    if( prev[i1767] == FAIL ) {
      if(!(!next_prev1768.empty() && next_prev1768.front() == FAIL )) {
        next_prev1768.push_front(FAIL);
      }
      continue;
    }
    i = prev[i1767];
    tmp = parse_W();
    
    for(int i1767=0;i1767<(int)tmp.size();++i1767) {
      if( tmp[i1767] == FAIL ) {
        if(!( !next_prev1768.empty() && next_prev1768[0] == FAIL )) {
          next_prev1768.push_front(FAIL);
        }
      } else {
        next_prev1768.push_back(tmp[i1767]);
      }
    }
  }
  prev = next_prev1768;
  for(int i1766=0;i1766<(int)prev.size();++i1766) {
    if( prev[i1766] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1766]);
    }
  }
  return memo[key(243,backtracking_ptr_for_packrat243)] = result;
}

deque<int> parse_EnumBody(){
  if(memo.count(key(244,i))) {
    return memo[key(244,i)];
  }
  int backtracking_ptr_for_packrat244=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev1777;
  deque<int> prioritized_choice_final_prev1778;
  next_prev1777.clear();
  for(int i1776=0;i1776<(int)prev.size();++i1776) {
    i = prev[i1776];
    tmp = parse_slash1779();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1777.push_back(prev[i1776]); }
    for(int i1823=0;i1823<(int)tmp.size();++i1823) {
      if( tmp[i1823] != FAIL ) {
        prioritized_choice_final_prev1778.push_back(tmp[i1823]);
      }
    }
  }
  prev = next_prev1777;
  next_prev1777.clear();
  for(int i1776=0;i1776<(int)prev.size();++i1776) {
    i = prev[i1776];
    tmp = parse_slash1824();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1777.push_back(prev[i1776]); }
    for(int i1867=0;i1867<(int)tmp.size();++i1867) {
      if( tmp[i1867] != FAIL ) {
        prioritized_choice_final_prev1778.push_back(tmp[i1867]);
      }
    }
  }
  prev = next_prev1777;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev1778.empty() && prioritized_choice_final_prev1778.front() == FAIL )) {
      prioritized_choice_final_prev1778.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev1778;
  for(int i1775=0;i1775<(int)prev.size();++i1775) {
    if( prev[i1775] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1775]);
    }
  }
  return memo[key(244,backtracking_ptr_for_packrat244)] = result;
}

inline deque<int> parse_slash1779() { 
  if(memo.count(key(245,i))) {
    return memo[key(245,i)];
  }
  int backtracking_ptr_for_packrat245=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1781=0;i1781<(int)prev.size();++i1781) {
        if( prev[i1781] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1781]<m&&I[prev[i1781]]=='{') {
          tmp.push_back(prev[i1781]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1783;
      for(int i1782=0;i1782<(int)prev.size();++i1782) {
        if( prev[i1782] == FAIL ) {
          if(!(!next_prev1783.empty() && next_prev1783.front() == FAIL )) {
            next_prev1783.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1782];
        tmp = parse__();
        
        for(int i1782=0;i1782<(int)tmp.size();++i1782) {
          if( tmp[i1782] == FAIL ) {
            if(!( !next_prev1783.empty() && next_prev1783[0] == FAIL )) {
              next_prev1783.push_front(FAIL);
            }
          } else {
            next_prev1783.push_back(tmp[i1782]);
          }
        }
      }
      prev = next_prev1783;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Prioritized Choice */
      deque<int> next_prev1785;
      deque<int> prioritized_choice_final_prev1786;
      next_prev1785.clear();
      for(int i1784=0;i1784<(int)prev.size();++i1784) {
        i = prev[i1784];
        tmp = parse_slash1787();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1785.push_back(prev[i1784]); }
        for(int i1791=0;i1791<(int)tmp.size();++i1791) {
          if( tmp[i1791] != FAIL ) {
            prioritized_choice_final_prev1786.push_back(tmp[i1791]);
          }
        }
      }
      prev = next_prev1785;
      next_prev1785.clear();
      for(int i1784=0;i1784<(int)prev.size();++i1784) {
        i = prev[i1784];
        tmp = parse_slash1792();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1785.push_back(prev[i1784]); }
        for(int i1794=0;i1794<(int)tmp.size();++i1794) {
          if( tmp[i1794] != FAIL ) {
            prioritized_choice_final_prev1786.push_back(tmp[i1794]);
          }
        }
      }
      prev = next_prev1785;
      if(!prev.empty()) {
        if(!(!prioritized_choice_final_prev1786.empty() && prioritized_choice_final_prev1786.front() == FAIL )) {
          prioritized_choice_final_prev1786.push_front(FAIL);
        }
      }
      prev = prioritized_choice_final_prev1786;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Prioritized Choice */
      deque<int> next_prev1796;
      deque<int> prioritized_choice_final_prev1797;
      next_prev1796.clear();
      for(int i1795=0;i1795<(int)prev.size();++i1795) {
        i = prev[i1795];
        tmp = parse_slash1798();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1796.push_back(prev[i1795]); }
        for(int i1803=0;i1803<(int)tmp.size();++i1803) {
          if( tmp[i1803] != FAIL ) {
            prioritized_choice_final_prev1797.push_back(tmp[i1803]);
          }
        }
      }
      prev = next_prev1796;
      next_prev1796.clear();
      for(int i1795=0;i1795<(int)prev.size();++i1795) {
        i = prev[i1795];
        tmp = parse_slash1804();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1796.push_back(prev[i1795]); }
        for(int i1806=0;i1806<(int)tmp.size();++i1806) {
          if( tmp[i1806] != FAIL ) {
            prioritized_choice_final_prev1797.push_back(tmp[i1806]);
          }
        }
      }
      prev = next_prev1796;
      if(!prev.empty()) {
        if(!(!prioritized_choice_final_prev1797.empty() && prioritized_choice_final_prev1797.front() == FAIL )) {
          prioritized_choice_final_prev1797.push_front(FAIL);
        }
      }
      prev = prioritized_choice_final_prev1797;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        tmp.clear();
        for(int i1807=0;i1807<(int)prev.size();++i1807) {
          if( prev[i1807] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i1807]<m&&I[prev[i1807]]==';') {
            tmp.push_back(prev[i1807]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Nonterminal (_) */
        deque<int> next_prev1809;
        for(int i1808=0;i1808<(int)prev.size();++i1808) {
          if( prev[i1808] == FAIL ) {
            if(!(!next_prev1809.empty() && next_prev1809.front() == FAIL )) {
              next_prev1809.push_front(FAIL);
            }
            continue;
          }
          i = prev[i1808];
          tmp = parse__();
          
          for(int i1808=0;i1808<(int)tmp.size();++i1808) {
            if( tmp[i1808] == FAIL ) {
              if(!( !next_prev1809.empty() && next_prev1809[0] == FAIL )) {
                next_prev1809.push_front(FAIL);
              }
            } else {
              next_prev1809.push_back(tmp[i1808]);
            }
          }
        }
        prev = next_prev1809;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        if(!((int)prev.size()==1&&prev.front()==FAIL)) {
          /* Nonterminal (ClassBodyDeclaration) */
          deque<int> next_prev1811;
          for(int i1810=0;i1810<(int)prev.size();++i1810) {
            if( prev[i1810] == FAIL ) {
              if(!(!next_prev1811.empty() && next_prev1811.front() == FAIL )) {
                next_prev1811.push_front(FAIL);
              }
              continue;
            }
            i = prev[i1810];
            tmp = parse_ClassBodyDeclaration();
            
            for(int i1810=0;i1810<(int)tmp.size();++i1810) {
              if( tmp[i1810] == FAIL ) {
                if(!( !next_prev1811.empty() && next_prev1811[0] == FAIL )) {
                  next_prev1811.push_front(FAIL);
                }
              } else {
                next_prev1811.push_back(tmp[i1810]);
              }
            }
          }
          prev = next_prev1811;
          sort(prev.begin(),prev.end());
          prev.erase(unique(prev.begin(),prev.end()),prev.end());
        }
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Star */
        deque<int> next_prev1816;
        deque<int> star_final_prev1817;
        while(!((int)prev.size()==1&&prev.front()==FAIL)) {
          next_prev1816.clear();
          for(int i1818=0;i1818<(int)prev.size();++i1818) {
            i = prev[i1818];
            tmp = parse_while1812();
            if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
              star_final_prev1817.push_back(prev[i1818]);
            }
            for(int i1819=0;i1819<(int)tmp.size();++i1819) {
              if(tmp[i1819]==FAIL) {
                if(!( !next_prev1816.empty() && next_prev1816.front() == FAIL )) {
                  next_prev1816.push_front(FAIL);
                }
              } else {
                next_prev1816.push_back(tmp[i1819]);
              }
            }
          }
          prev = next_prev1816;
        }
        prev = star_final_prev1817;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1820=0;i1820<(int)prev.size();++i1820) {
        if( prev[i1820] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1820]<m&&I[prev[i1820]]=='}') {
          tmp.push_back(prev[i1820]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1822;
      for(int i1821=0;i1821<(int)prev.size();++i1821) {
        if( prev[i1821] == FAIL ) {
          if(!(!next_prev1822.empty() && next_prev1822.front() == FAIL )) {
            next_prev1822.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1821];
        tmp = parse__();
        
        for(int i1821=0;i1821<(int)tmp.size();++i1821) {
          if( tmp[i1821] == FAIL ) {
            if(!( !next_prev1822.empty() && next_prev1822[0] == FAIL )) {
              next_prev1822.push_front(FAIL);
            }
          } else {
            next_prev1822.push_back(tmp[i1821]);
          }
        }
      }
      prev = next_prev1822;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1780=0;i1780<(int)prev.size();++i1780) {
    if( prev[i1780] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1780]);
    }
  }
  return memo[key(245,backtracking_ptr_for_packrat245)] = result;
}

inline deque<int> parse_slash1787() { 
  if(memo.count(key(246,i))) {
    return memo[key(246,i)];
  }
  int backtracking_ptr_for_packrat246=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (EnumeratorList) */
    deque<int> next_prev1790;
    for(int i1789=0;i1789<(int)prev.size();++i1789) {
      if( prev[i1789] == FAIL ) {
        if(!(!next_prev1790.empty() && next_prev1790.front() == FAIL )) {
          next_prev1790.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1789];
      tmp = parse_EnumeratorList();
      
      for(int i1789=0;i1789<(int)tmp.size();++i1789) {
        if( tmp[i1789] == FAIL ) {
          if(!( !next_prev1790.empty() && next_prev1790[0] == FAIL )) {
            next_prev1790.push_front(FAIL);
          }
        } else {
          next_prev1790.push_back(tmp[i1789]);
        }
      }
    }
    prev = next_prev1790;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1788=0;i1788<(int)prev.size();++i1788) {
    if( prev[i1788] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1788]);
    }
  }
  return memo[key(246,backtracking_ptr_for_packrat246)] = result;
}

inline deque<int> parse_slash1792() { 
  if(memo.count(key(247,i))) {
    return memo[key(247,i)];
  }
  int backtracking_ptr_for_packrat247=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i1793=0;i1793<(int)prev.size();++i1793) {
    if( prev[i1793] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1793]);
    }
  }
  return memo[key(247,backtracking_ptr_for_packrat247)] = result;
}

inline deque<int> parse_slash1798() { 
  if(memo.count(key(248,i))) {
    return memo[key(248,i)];
  }
  int backtracking_ptr_for_packrat248=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i1800=0;i1800<(int)prev.size();++i1800) {
      if( prev[i1800] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i1800]<m&&I[prev[i1800]]==',') {
        tmp.push_back(prev[i1800]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (_) */
    deque<int> next_prev1802;
    for(int i1801=0;i1801<(int)prev.size();++i1801) {
      if( prev[i1801] == FAIL ) {
        if(!(!next_prev1802.empty() && next_prev1802.front() == FAIL )) {
          next_prev1802.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1801];
      tmp = parse__();
      
      for(int i1801=0;i1801<(int)tmp.size();++i1801) {
        if( tmp[i1801] == FAIL ) {
          if(!( !next_prev1802.empty() && next_prev1802[0] == FAIL )) {
            next_prev1802.push_front(FAIL);
          }
        } else {
          next_prev1802.push_back(tmp[i1801]);
        }
      }
    }
    prev = next_prev1802;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1799=0;i1799<(int)prev.size();++i1799) {
    if( prev[i1799] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1799]);
    }
  }
  return memo[key(248,backtracking_ptr_for_packrat248)] = result;
}

inline deque<int> parse_slash1804() { 
  if(memo.count(key(249,i))) {
    return memo[key(249,i)];
  }
  int backtracking_ptr_for_packrat249=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i1805=0;i1805<(int)prev.size();++i1805) {
    if( prev[i1805] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1805]);
    }
  }
  return memo[key(249,backtracking_ptr_for_packrat249)] = result;
}

inline deque<int> parse_while1812() { 
  if(memo.count(key(250,i))) {
    return memo[key(250,i)];
  }
  int backtracking_ptr_for_packrat250=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassBodyDeclaration) */
    deque<int> next_prev1815;
    for(int i1814=0;i1814<(int)prev.size();++i1814) {
      if( prev[i1814] == FAIL ) {
        if(!(!next_prev1815.empty() && next_prev1815.front() == FAIL )) {
          next_prev1815.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1814];
      tmp = parse_ClassBodyDeclaration();
      
      for(int i1814=0;i1814<(int)tmp.size();++i1814) {
        if( tmp[i1814] == FAIL ) {
          if(!( !next_prev1815.empty() && next_prev1815[0] == FAIL )) {
            next_prev1815.push_front(FAIL);
          }
        } else {
          next_prev1815.push_back(tmp[i1814]);
        }
      }
    }
    prev = next_prev1815;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1813=0;i1813<(int)prev.size();++i1813) {
    if( prev[i1813] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1813]);
    }
  }
  return memo[key(250,backtracking_ptr_for_packrat250)] = result;
}

inline deque<int> parse_slash1824() { 
  if(memo.count(key(251,i))) {
    return memo[key(251,i)];
  }
  int backtracking_ptr_for_packrat251=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1826=0;i1826<(int)prev.size();++i1826) {
        if( prev[i1826] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1826]<m&&I[prev[i1826]]=='{') {
          tmp.push_back(prev[i1826]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1828;
      for(int i1827=0;i1827<(int)prev.size();++i1827) {
        if( prev[i1827] == FAIL ) {
          if(!(!next_prev1828.empty() && next_prev1828.front() == FAIL )) {
            next_prev1828.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1827];
        tmp = parse__();
        
        for(int i1827=0;i1827<(int)tmp.size();++i1827) {
          if( tmp[i1827] == FAIL ) {
            if(!( !next_prev1828.empty() && next_prev1828[0] == FAIL )) {
              next_prev1828.push_front(FAIL);
            }
          } else {
            next_prev1828.push_back(tmp[i1827]);
          }
        }
      }
      prev = next_prev1828;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Prioritized Choice */
      deque<int> next_prev1830;
      deque<int> prioritized_choice_final_prev1831;
      next_prev1830.clear();
      for(int i1829=0;i1829<(int)prev.size();++i1829) {
        i = prev[i1829];
        tmp = parse_slash1832();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1830.push_back(prev[i1829]); }
        for(int i1836=0;i1836<(int)tmp.size();++i1836) {
          if( tmp[i1836] != FAIL ) {
            prioritized_choice_final_prev1831.push_back(tmp[i1836]);
          }
        }
      }
      prev = next_prev1830;
      next_prev1830.clear();
      for(int i1829=0;i1829<(int)prev.size();++i1829) {
        i = prev[i1829];
        tmp = parse_slash1837();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1830.push_back(prev[i1829]); }
        for(int i1839=0;i1839<(int)tmp.size();++i1839) {
          if( tmp[i1839] != FAIL ) {
            prioritized_choice_final_prev1831.push_back(tmp[i1839]);
          }
        }
      }
      prev = next_prev1830;
      if(!prev.empty()) {
        if(!(!prioritized_choice_final_prev1831.empty() && prioritized_choice_final_prev1831.front() == FAIL )) {
          prioritized_choice_final_prev1831.push_front(FAIL);
        }
      }
      prev = prioritized_choice_final_prev1831;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Prioritized Choice */
      deque<int> next_prev1841;
      deque<int> prioritized_choice_final_prev1842;
      next_prev1841.clear();
      for(int i1840=0;i1840<(int)prev.size();++i1840) {
        i = prev[i1840];
        tmp = parse_slash1843();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1841.push_back(prev[i1840]); }
        for(int i1848=0;i1848<(int)tmp.size();++i1848) {
          if( tmp[i1848] != FAIL ) {
            prioritized_choice_final_prev1842.push_back(tmp[i1848]);
          }
        }
      }
      prev = next_prev1841;
      next_prev1841.clear();
      for(int i1840=0;i1840<(int)prev.size();++i1840) {
        i = prev[i1840];
        tmp = parse_slash1849();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1841.push_back(prev[i1840]); }
        for(int i1851=0;i1851<(int)tmp.size();++i1851) {
          if( tmp[i1851] != FAIL ) {
            prioritized_choice_final_prev1842.push_back(tmp[i1851]);
          }
        }
      }
      prev = next_prev1841;
      if(!prev.empty()) {
        if(!(!prioritized_choice_final_prev1842.empty() && prioritized_choice_final_prev1842.front() == FAIL )) {
          prioritized_choice_final_prev1842.push_front(FAIL);
        }
      }
      prev = prioritized_choice_final_prev1842;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Prioritized Choice */
      deque<int> next_prev1853;
      deque<int> prioritized_choice_final_prev1854;
      next_prev1853.clear();
      for(int i1852=0;i1852<(int)prev.size();++i1852) {
        i = prev[i1852];
        tmp = parse_slash1855();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1853.push_back(prev[i1852]); }
        for(int i1860=0;i1860<(int)tmp.size();++i1860) {
          if( tmp[i1860] != FAIL ) {
            prioritized_choice_final_prev1854.push_back(tmp[i1860]);
          }
        }
      }
      prev = next_prev1853;
      next_prev1853.clear();
      for(int i1852=0;i1852<(int)prev.size();++i1852) {
        i = prev[i1852];
        tmp = parse_slash1861();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1853.push_back(prev[i1852]); }
        for(int i1863=0;i1863<(int)tmp.size();++i1863) {
          if( tmp[i1863] != FAIL ) {
            prioritized_choice_final_prev1854.push_back(tmp[i1863]);
          }
        }
      }
      prev = next_prev1853;
      if(!prev.empty()) {
        if(!(!prioritized_choice_final_prev1854.empty() && prioritized_choice_final_prev1854.front() == FAIL )) {
          prioritized_choice_final_prev1854.push_front(FAIL);
        }
      }
      prev = prioritized_choice_final_prev1854;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1864=0;i1864<(int)prev.size();++i1864) {
        if( prev[i1864] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1864]<m&&I[prev[i1864]]=='}') {
          tmp.push_back(prev[i1864]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1866;
      for(int i1865=0;i1865<(int)prev.size();++i1865) {
        if( prev[i1865] == FAIL ) {
          if(!(!next_prev1866.empty() && next_prev1866.front() == FAIL )) {
            next_prev1866.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1865];
        tmp = parse__();
        
        for(int i1865=0;i1865<(int)tmp.size();++i1865) {
          if( tmp[i1865] == FAIL ) {
            if(!( !next_prev1866.empty() && next_prev1866[0] == FAIL )) {
              next_prev1866.push_front(FAIL);
            }
          } else {
            next_prev1866.push_back(tmp[i1865]);
          }
        }
      }
      prev = next_prev1866;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1825=0;i1825<(int)prev.size();++i1825) {
    if( prev[i1825] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1825]);
    }
  }
  return memo[key(251,backtracking_ptr_for_packrat251)] = result;
}

inline deque<int> parse_slash1832() { 
  if(memo.count(key(252,i))) {
    return memo[key(252,i)];
  }
  int backtracking_ptr_for_packrat252=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (EnumeratorList) */
    deque<int> next_prev1835;
    for(int i1834=0;i1834<(int)prev.size();++i1834) {
      if( prev[i1834] == FAIL ) {
        if(!(!next_prev1835.empty() && next_prev1835.front() == FAIL )) {
          next_prev1835.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1834];
      tmp = parse_EnumeratorList();
      
      for(int i1834=0;i1834<(int)tmp.size();++i1834) {
        if( tmp[i1834] == FAIL ) {
          if(!( !next_prev1835.empty() && next_prev1835[0] == FAIL )) {
            next_prev1835.push_front(FAIL);
          }
        } else {
          next_prev1835.push_back(tmp[i1834]);
        }
      }
    }
    prev = next_prev1835;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1833=0;i1833<(int)prev.size();++i1833) {
    if( prev[i1833] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1833]);
    }
  }
  return memo[key(252,backtracking_ptr_for_packrat252)] = result;
}

inline deque<int> parse_slash1837() { 
  if(memo.count(key(253,i))) {
    return memo[key(253,i)];
  }
  int backtracking_ptr_for_packrat253=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i1838=0;i1838<(int)prev.size();++i1838) {
    if( prev[i1838] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1838]);
    }
  }
  return memo[key(253,backtracking_ptr_for_packrat253)] = result;
}

inline deque<int> parse_slash1843() { 
  if(memo.count(key(254,i))) {
    return memo[key(254,i)];
  }
  int backtracking_ptr_for_packrat254=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i1845=0;i1845<(int)prev.size();++i1845) {
      if( prev[i1845] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i1845]<m&&I[prev[i1845]]==',') {
        tmp.push_back(prev[i1845]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (_) */
    deque<int> next_prev1847;
    for(int i1846=0;i1846<(int)prev.size();++i1846) {
      if( prev[i1846] == FAIL ) {
        if(!(!next_prev1847.empty() && next_prev1847.front() == FAIL )) {
          next_prev1847.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1846];
      tmp = parse__();
      
      for(int i1846=0;i1846<(int)tmp.size();++i1846) {
        if( tmp[i1846] == FAIL ) {
          if(!( !next_prev1847.empty() && next_prev1847[0] == FAIL )) {
            next_prev1847.push_front(FAIL);
          }
        } else {
          next_prev1847.push_back(tmp[i1846]);
        }
      }
    }
    prev = next_prev1847;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1844=0;i1844<(int)prev.size();++i1844) {
    if( prev[i1844] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1844]);
    }
  }
  return memo[key(254,backtracking_ptr_for_packrat254)] = result;
}

inline deque<int> parse_slash1849() { 
  if(memo.count(key(255,i))) {
    return memo[key(255,i)];
  }
  int backtracking_ptr_for_packrat255=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i1850=0;i1850<(int)prev.size();++i1850) {
    if( prev[i1850] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1850]);
    }
  }
  return memo[key(255,backtracking_ptr_for_packrat255)] = result;
}

inline deque<int> parse_slash1855() { 
  if(memo.count(key(256,i))) {
    return memo[key(256,i)];
  }
  int backtracking_ptr_for_packrat256=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i1857=0;i1857<(int)prev.size();++i1857) {
      if( prev[i1857] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i1857]<m&&I[prev[i1857]]==';') {
        tmp.push_back(prev[i1857]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (_) */
    deque<int> next_prev1859;
    for(int i1858=0;i1858<(int)prev.size();++i1858) {
      if( prev[i1858] == FAIL ) {
        if(!(!next_prev1859.empty() && next_prev1859.front() == FAIL )) {
          next_prev1859.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1858];
      tmp = parse__();
      
      for(int i1858=0;i1858<(int)tmp.size();++i1858) {
        if( tmp[i1858] == FAIL ) {
          if(!( !next_prev1859.empty() && next_prev1859[0] == FAIL )) {
            next_prev1859.push_front(FAIL);
          }
        } else {
          next_prev1859.push_back(tmp[i1858]);
        }
      }
    }
    prev = next_prev1859;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1856=0;i1856<(int)prev.size();++i1856) {
    if( prev[i1856] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1856]);
    }
  }
  return memo[key(256,backtracking_ptr_for_packrat256)] = result;
}

inline deque<int> parse_slash1861() { 
  if(memo.count(key(257,i))) {
    return memo[key(257,i)];
  }
  int backtracking_ptr_for_packrat257=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i1862=0;i1862<(int)prev.size();++i1862) {
    if( prev[i1862] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1862]);
    }
  }
  return memo[key(257,backtracking_ptr_for_packrat257)] = result;
}

deque<int> parse_EnumeratorList(){
  if(memo.count(key(258,i))) {
    return memo[key(258,i)];
  }
  int backtracking_ptr_for_packrat258=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Enumerator) */
    deque<int> next_prev1870;
    for(int i1869=0;i1869<(int)prev.size();++i1869) {
      if( prev[i1869] == FAIL ) {
        if(!(!next_prev1870.empty() && next_prev1870.front() == FAIL )) {
          next_prev1870.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1869];
      tmp = parse_Enumerator();
      
      for(int i1869=0;i1869<(int)tmp.size();++i1869) {
        if( tmp[i1869] == FAIL ) {
          if(!( !next_prev1870.empty() && next_prev1870[0] == FAIL )) {
            next_prev1870.push_front(FAIL);
          }
        } else {
          next_prev1870.push_back(tmp[i1869]);
        }
      }
    }
    prev = next_prev1870;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev1878;
    deque<int> star_final_prev1879;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev1878.clear();
      for(int i1880=0;i1880<(int)prev.size();++i1880) {
        i = prev[i1880];
        tmp = parse_while1871();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev1879.push_back(prev[i1880]);
        }
        for(int i1881=0;i1881<(int)tmp.size();++i1881) {
          if(tmp[i1881]==FAIL) {
            if(!( !next_prev1878.empty() && next_prev1878.front() == FAIL )) {
              next_prev1878.push_front(FAIL);
            }
          } else {
            next_prev1878.push_back(tmp[i1881]);
          }
        }
      }
      prev = next_prev1878;
    }
    prev = star_final_prev1879;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1868=0;i1868<(int)prev.size();++i1868) {
    if( prev[i1868] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1868]);
    }
  }
  return memo[key(258,backtracking_ptr_for_packrat258)] = result;
}

inline deque<int> parse_while1871() { 
  if(memo.count(key(259,i))) {
    return memo[key(259,i)];
  }
  int backtracking_ptr_for_packrat259=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1873=0;i1873<(int)prev.size();++i1873) {
        if( prev[i1873] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1873]<m&&I[prev[i1873]]==',') {
          tmp.push_back(prev[i1873]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1875;
      for(int i1874=0;i1874<(int)prev.size();++i1874) {
        if( prev[i1874] == FAIL ) {
          if(!(!next_prev1875.empty() && next_prev1875.front() == FAIL )) {
            next_prev1875.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1874];
        tmp = parse__();
        
        for(int i1874=0;i1874<(int)tmp.size();++i1874) {
          if( tmp[i1874] == FAIL ) {
            if(!( !next_prev1875.empty() && next_prev1875[0] == FAIL )) {
              next_prev1875.push_front(FAIL);
            }
          } else {
            next_prev1875.push_back(tmp[i1874]);
          }
        }
      }
      prev = next_prev1875;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Enumerator) */
    deque<int> next_prev1877;
    for(int i1876=0;i1876<(int)prev.size();++i1876) {
      if( prev[i1876] == FAIL ) {
        if(!(!next_prev1877.empty() && next_prev1877.front() == FAIL )) {
          next_prev1877.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1876];
      tmp = parse_Enumerator();
      
      for(int i1876=0;i1876<(int)tmp.size();++i1876) {
        if( tmp[i1876] == FAIL ) {
          if(!( !next_prev1877.empty() && next_prev1877[0] == FAIL )) {
            next_prev1877.push_front(FAIL);
          }
        } else {
          next_prev1877.push_back(tmp[i1876]);
        }
      }
    }
    prev = next_prev1877;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1872=0;i1872<(int)prev.size();++i1872) {
    if( prev[i1872] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1872]);
    }
  }
  return memo[key(259,backtracking_ptr_for_packrat259)] = result;
}

deque<int> parse_Enumerator(){
  if(memo.count(key(260,i))) {
    return memo[key(260,i)];
  }
  int backtracking_ptr_for_packrat260=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev1884;
    deque<int> prioritized_choice_final_prev1885;
    next_prev1884.clear();
    for(int i1883=0;i1883<(int)prev.size();++i1883) {
      i = prev[i1883];
      tmp = parse_slash1886();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1884.push_back(prev[i1883]); }
      for(int i1890=0;i1890<(int)tmp.size();++i1890) {
        if( tmp[i1890] != FAIL ) {
          prioritized_choice_final_prev1885.push_back(tmp[i1890]);
        }
      }
    }
    prev = next_prev1884;
    next_prev1884.clear();
    for(int i1883=0;i1883<(int)prev.size();++i1883) {
      i = prev[i1883];
      tmp = parse_slash1891();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1884.push_back(prev[i1883]); }
      for(int i1893=0;i1893<(int)tmp.size();++i1893) {
        if( tmp[i1893] != FAIL ) {
          prioritized_choice_final_prev1885.push_back(tmp[i1893]);
        }
      }
    }
    prev = next_prev1884;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev1885.empty() && prioritized_choice_final_prev1885.front() == FAIL )) {
        prioritized_choice_final_prev1885.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev1885;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev1895;
    for(int i1894=0;i1894<(int)prev.size();++i1894) {
      if( prev[i1894] == FAIL ) {
        if(!(!next_prev1895.empty() && next_prev1895.front() == FAIL )) {
          next_prev1895.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1894];
      tmp = parse_Identifier();
      
      for(int i1894=0;i1894<(int)tmp.size();++i1894) {
        if( tmp[i1894] == FAIL ) {
          if(!( !next_prev1895.empty() && next_prev1895[0] == FAIL )) {
            next_prev1895.push_front(FAIL);
          }
        } else {
          next_prev1895.push_back(tmp[i1894]);
        }
      }
    }
    prev = next_prev1895;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev1897;
    deque<int> prioritized_choice_final_prev1898;
    next_prev1897.clear();
    for(int i1896=0;i1896<(int)prev.size();++i1896) {
      i = prev[i1896];
      tmp = parse_slash1899();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1897.push_back(prev[i1896]); }
      for(int i1918=0;i1918<(int)tmp.size();++i1918) {
        if( tmp[i1918] != FAIL ) {
          prioritized_choice_final_prev1898.push_back(tmp[i1918]);
        }
      }
    }
    prev = next_prev1897;
    next_prev1897.clear();
    for(int i1896=0;i1896<(int)prev.size();++i1896) {
      i = prev[i1896];
      tmp = parse_slash1919();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1897.push_back(prev[i1896]); }
      for(int i1921=0;i1921<(int)tmp.size();++i1921) {
        if( tmp[i1921] != FAIL ) {
          prioritized_choice_final_prev1898.push_back(tmp[i1921]);
        }
      }
    }
    prev = next_prev1897;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev1898.empty() && prioritized_choice_final_prev1898.front() == FAIL )) {
        prioritized_choice_final_prev1898.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev1898;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev1923;
    deque<int> prioritized_choice_final_prev1924;
    next_prev1923.clear();
    for(int i1922=0;i1922<(int)prev.size();++i1922) {
      i = prev[i1922];
      tmp = parse_slash1925();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1923.push_back(prev[i1922]); }
      for(int i1929=0;i1929<(int)tmp.size();++i1929) {
        if( tmp[i1929] != FAIL ) {
          prioritized_choice_final_prev1924.push_back(tmp[i1929]);
        }
      }
    }
    prev = next_prev1923;
    next_prev1923.clear();
    for(int i1922=0;i1922<(int)prev.size();++i1922) {
      i = prev[i1922];
      tmp = parse_slash1930();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1923.push_back(prev[i1922]); }
      for(int i1932=0;i1932<(int)tmp.size();++i1932) {
        if( tmp[i1932] != FAIL ) {
          prioritized_choice_final_prev1924.push_back(tmp[i1932]);
        }
      }
    }
    prev = next_prev1923;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev1924.empty() && prioritized_choice_final_prev1924.front() == FAIL )) {
        prioritized_choice_final_prev1924.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev1924;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1882=0;i1882<(int)prev.size();++i1882) {
    if( prev[i1882] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1882]);
    }
  }
  return memo[key(260,backtracking_ptr_for_packrat260)] = result;
}

inline deque<int> parse_slash1886() { 
  if(memo.count(key(261,i))) {
    return memo[key(261,i)];
  }
  int backtracking_ptr_for_packrat261=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotations) */
    deque<int> next_prev1889;
    for(int i1888=0;i1888<(int)prev.size();++i1888) {
      if( prev[i1888] == FAIL ) {
        if(!(!next_prev1889.empty() && next_prev1889.front() == FAIL )) {
          next_prev1889.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1888];
      tmp = parse_Annotations();
      
      for(int i1888=0;i1888<(int)tmp.size();++i1888) {
        if( tmp[i1888] == FAIL ) {
          if(!( !next_prev1889.empty() && next_prev1889[0] == FAIL )) {
            next_prev1889.push_front(FAIL);
          }
        } else {
          next_prev1889.push_back(tmp[i1888]);
        }
      }
    }
    prev = next_prev1889;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1887=0;i1887<(int)prev.size();++i1887) {
    if( prev[i1887] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1887]);
    }
  }
  return memo[key(261,backtracking_ptr_for_packrat261)] = result;
}

inline deque<int> parse_slash1891() { 
  if(memo.count(key(262,i))) {
    return memo[key(262,i)];
  }
  int backtracking_ptr_for_packrat262=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i1892=0;i1892<(int)prev.size();++i1892) {
    if( prev[i1892] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1892]);
    }
  }
  return memo[key(262,backtracking_ptr_for_packrat262)] = result;
}

inline deque<int> parse_slash1899() { 
  if(memo.count(key(263,i))) {
    return memo[key(263,i)];
  }
  int backtracking_ptr_for_packrat263=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        tmp.clear();
        for(int i1901=0;i1901<(int)prev.size();++i1901) {
          if( prev[i1901] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i1901]<m&&I[prev[i1901]]=='(') {
            tmp.push_back(prev[i1901]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Nonterminal (_) */
        deque<int> next_prev1903;
        for(int i1902=0;i1902<(int)prev.size();++i1902) {
          if( prev[i1902] == FAIL ) {
            if(!(!next_prev1903.empty() && next_prev1903.front() == FAIL )) {
              next_prev1903.push_front(FAIL);
            }
            continue;
          }
          i = prev[i1902];
          tmp = parse__();
          
          for(int i1902=0;i1902<(int)tmp.size();++i1902) {
            if( tmp[i1902] == FAIL ) {
              if(!( !next_prev1903.empty() && next_prev1903[0] == FAIL )) {
                next_prev1903.push_front(FAIL);
              }
            } else {
              next_prev1903.push_back(tmp[i1902]);
            }
          }
        }
        prev = next_prev1903;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Prioritized Choice */
      deque<int> next_prev1905;
      deque<int> prioritized_choice_final_prev1906;
      next_prev1905.clear();
      for(int i1904=0;i1904<(int)prev.size();++i1904) {
        i = prev[i1904];
        tmp = parse_slash1907();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1905.push_back(prev[i1904]); }
        for(int i1911=0;i1911<(int)tmp.size();++i1911) {
          if( tmp[i1911] != FAIL ) {
            prioritized_choice_final_prev1906.push_back(tmp[i1911]);
          }
        }
      }
      prev = next_prev1905;
      next_prev1905.clear();
      for(int i1904=0;i1904<(int)prev.size();++i1904) {
        i = prev[i1904];
        tmp = parse_slash1912();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1905.push_back(prev[i1904]); }
        for(int i1914=0;i1914<(int)tmp.size();++i1914) {
          if( tmp[i1914] != FAIL ) {
            prioritized_choice_final_prev1906.push_back(tmp[i1914]);
          }
        }
      }
      prev = next_prev1905;
      if(!prev.empty()) {
        if(!(!prioritized_choice_final_prev1906.empty() && prioritized_choice_final_prev1906.front() == FAIL )) {
          prioritized_choice_final_prev1906.push_front(FAIL);
        }
      }
      prev = prioritized_choice_final_prev1906;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        tmp.clear();
        for(int i1915=0;i1915<(int)prev.size();++i1915) {
          if( prev[i1915] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i1915]<m&&I[prev[i1915]]==')') {
            tmp.push_back(prev[i1915]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Nonterminal (_) */
        deque<int> next_prev1917;
        for(int i1916=0;i1916<(int)prev.size();++i1916) {
          if( prev[i1916] == FAIL ) {
            if(!(!next_prev1917.empty() && next_prev1917.front() == FAIL )) {
              next_prev1917.push_front(FAIL);
            }
            continue;
          }
          i = prev[i1916];
          tmp = parse__();
          
          for(int i1916=0;i1916<(int)tmp.size();++i1916) {
            if( tmp[i1916] == FAIL ) {
              if(!( !next_prev1917.empty() && next_prev1917[0] == FAIL )) {
                next_prev1917.push_front(FAIL);
              }
            } else {
              next_prev1917.push_back(tmp[i1916]);
            }
          }
        }
        prev = next_prev1917;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1900=0;i1900<(int)prev.size();++i1900) {
    if( prev[i1900] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1900]);
    }
  }
  return memo[key(263,backtracking_ptr_for_packrat263)] = result;
}

inline deque<int> parse_slash1907() { 
  if(memo.count(key(264,i))) {
    return memo[key(264,i)];
  }
  int backtracking_ptr_for_packrat264=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (addArgumentExpressionList) */
  deque<int> next_prev1910;
  for(int i1909=0;i1909<(int)prev.size();++i1909) {
    if( prev[i1909] == FAIL ) {
      if(!(!next_prev1910.empty() && next_prev1910.front() == FAIL )) {
        next_prev1910.push_front(FAIL);
      }
      continue;
    }
    i = prev[i1909];
    tmp = parse_addArgumentExpressionList();
    
    for(int i1909=0;i1909<(int)tmp.size();++i1909) {
      if( tmp[i1909] == FAIL ) {
        if(!( !next_prev1910.empty() && next_prev1910[0] == FAIL )) {
          next_prev1910.push_front(FAIL);
        }
      } else {
        next_prev1910.push_back(tmp[i1909]);
      }
    }
  }
  prev = next_prev1910;
  for(int i1908=0;i1908<(int)prev.size();++i1908) {
    if( prev[i1908] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1908]);
    }
  }
  return memo[key(264,backtracking_ptr_for_packrat264)] = result;
}

inline deque<int> parse_slash1912() { 
  if(memo.count(key(265,i))) {
    return memo[key(265,i)];
  }
  int backtracking_ptr_for_packrat265=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i1913=0;i1913<(int)prev.size();++i1913) {
    if( prev[i1913] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1913]);
    }
  }
  return memo[key(265,backtracking_ptr_for_packrat265)] = result;
}

inline deque<int> parse_slash1919() { 
  if(memo.count(key(266,i))) {
    return memo[key(266,i)];
  }
  int backtracking_ptr_for_packrat266=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i1920=0;i1920<(int)prev.size();++i1920) {
    if( prev[i1920] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1920]);
    }
  }
  return memo[key(266,backtracking_ptr_for_packrat266)] = result;
}

inline deque<int> parse_slash1925() { 
  if(memo.count(key(267,i))) {
    return memo[key(267,i)];
  }
  int backtracking_ptr_for_packrat267=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassBody) */
    deque<int> next_prev1928;
    for(int i1927=0;i1927<(int)prev.size();++i1927) {
      if( prev[i1927] == FAIL ) {
        if(!(!next_prev1928.empty() && next_prev1928.front() == FAIL )) {
          next_prev1928.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1927];
      tmp = parse_ClassBody();
      
      for(int i1927=0;i1927<(int)tmp.size();++i1927) {
        if( tmp[i1927] == FAIL ) {
          if(!( !next_prev1928.empty() && next_prev1928[0] == FAIL )) {
            next_prev1928.push_front(FAIL);
          }
        } else {
          next_prev1928.push_back(tmp[i1927]);
        }
      }
    }
    prev = next_prev1928;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1926=0;i1926<(int)prev.size();++i1926) {
    if( prev[i1926] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1926]);
    }
  }
  return memo[key(267,backtracking_ptr_for_packrat267)] = result;
}

inline deque<int> parse_slash1930() { 
  if(memo.count(key(268,i))) {
    return memo[key(268,i)];
  }
  int backtracking_ptr_for_packrat268=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i1931=0;i1931<(int)prev.size();++i1931) {
    if( prev[i1931] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1931]);
    }
  }
  return memo[key(268,backtracking_ptr_for_packrat268)] = result;
}

deque<int> parse_ClassBody(){
  if(memo.count(key(269,i))) {
    return memo[key(269,i)];
  }
  int backtracking_ptr_for_packrat269=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1934=0;i1934<(int)prev.size();++i1934) {
        if( prev[i1934] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1934]<m&&I[prev[i1934]]=='{') {
          tmp.push_back(prev[i1934]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1936;
      for(int i1935=0;i1935<(int)prev.size();++i1935) {
        if( prev[i1935] == FAIL ) {
          if(!(!next_prev1936.empty() && next_prev1936.front() == FAIL )) {
            next_prev1936.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1935];
        tmp = parse__();
        
        for(int i1935=0;i1935<(int)tmp.size();++i1935) {
          if( tmp[i1935] == FAIL ) {
            if(!( !next_prev1936.empty() && next_prev1936[0] == FAIL )) {
              next_prev1936.push_front(FAIL);
            }
          } else {
            next_prev1936.push_back(tmp[i1935]);
          }
        }
      }
      prev = next_prev1936;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev1941;
    deque<int> star_final_prev1942;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev1941.clear();
      for(int i1943=0;i1943<(int)prev.size();++i1943) {
        i = prev[i1943];
        tmp = parse_while1937();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev1942.push_back(prev[i1943]);
        }
        for(int i1944=0;i1944<(int)tmp.size();++i1944) {
          if(tmp[i1944]==FAIL) {
            if(!( !next_prev1941.empty() && next_prev1941.front() == FAIL )) {
              next_prev1941.push_front(FAIL);
            }
          } else {
            next_prev1941.push_back(tmp[i1944]);
          }
        }
      }
      prev = next_prev1941;
    }
    prev = star_final_prev1942;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1945=0;i1945<(int)prev.size();++i1945) {
        if( prev[i1945] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1945]<m&&I[prev[i1945]]=='}') {
          tmp.push_back(prev[i1945]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1947;
      for(int i1946=0;i1946<(int)prev.size();++i1946) {
        if( prev[i1946] == FAIL ) {
          if(!(!next_prev1947.empty() && next_prev1947.front() == FAIL )) {
            next_prev1947.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1946];
        tmp = parse__();
        
        for(int i1946=0;i1946<(int)tmp.size();++i1946) {
          if( tmp[i1946] == FAIL ) {
            if(!( !next_prev1947.empty() && next_prev1947[0] == FAIL )) {
              next_prev1947.push_front(FAIL);
            }
          } else {
            next_prev1947.push_back(tmp[i1946]);
          }
        }
      }
      prev = next_prev1947;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1933=0;i1933<(int)prev.size();++i1933) {
    if( prev[i1933] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1933]);
    }
  }
  return memo[key(269,backtracking_ptr_for_packrat269)] = result;
}

inline deque<int> parse_while1937() { 
  if(memo.count(key(270,i))) {
    return memo[key(270,i)];
  }
  int backtracking_ptr_for_packrat270=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassBodyDeclaration) */
    deque<int> next_prev1940;
    for(int i1939=0;i1939<(int)prev.size();++i1939) {
      if( prev[i1939] == FAIL ) {
        if(!(!next_prev1940.empty() && next_prev1940.front() == FAIL )) {
          next_prev1940.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1939];
      tmp = parse_ClassBodyDeclaration();
      
      for(int i1939=0;i1939<(int)tmp.size();++i1939) {
        if( tmp[i1939] == FAIL ) {
          if(!( !next_prev1940.empty() && next_prev1940[0] == FAIL )) {
            next_prev1940.push_front(FAIL);
          }
        } else {
          next_prev1940.push_back(tmp[i1939]);
        }
      }
    }
    prev = next_prev1940;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1938=0;i1938<(int)prev.size();++i1938) {
    if( prev[i1938] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1938]);
    }
  }
  return memo[key(270,backtracking_ptr_for_packrat270)] = result;
}

deque<int> parse_ClassBodyDeclaration(){
  if(memo.count(key(271,i))) {
    return memo[key(271,i)];
  }
  int backtracking_ptr_for_packrat271=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev1950;
  deque<int> prioritized_choice_final_prev1951;
  next_prev1950.clear();
  for(int i1949=0;i1949<(int)prev.size();++i1949) {
    i = prev[i1949];
    tmp = parse_slash1952();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1950.push_back(prev[i1949]); }
    for(int i1956=0;i1956<(int)tmp.size();++i1956) {
      if( tmp[i1956] != FAIL ) {
        prioritized_choice_final_prev1951.push_back(tmp[i1956]);
      }
    }
  }
  prev = next_prev1950;
  next_prev1950.clear();
  for(int i1949=0;i1949<(int)prev.size();++i1949) {
    i = prev[i1949];
    tmp = parse_slash1957();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1950.push_back(prev[i1949]); }
    for(int i1961=0;i1961<(int)tmp.size();++i1961) {
      if( tmp[i1961] != FAIL ) {
        prioritized_choice_final_prev1951.push_back(tmp[i1961]);
      }
    }
  }
  prev = next_prev1950;
  next_prev1950.clear();
  for(int i1949=0;i1949<(int)prev.size();++i1949) {
    i = prev[i1949];
    tmp = parse_slash1962();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1950.push_back(prev[i1949]); }
    for(int i1980=0;i1980<(int)tmp.size();++i1980) {
      if( tmp[i1980] != FAIL ) {
        prioritized_choice_final_prev1951.push_back(tmp[i1980]);
      }
    }
  }
  prev = next_prev1950;
  next_prev1950.clear();
  for(int i1949=0;i1949<(int)prev.size();++i1949) {
    i = prev[i1949];
    tmp = parse_slash1981();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1950.push_back(prev[i1949]); }
    for(int i1985=0;i1985<(int)tmp.size();++i1985) {
      if( tmp[i1985] != FAIL ) {
        prioritized_choice_final_prev1951.push_back(tmp[i1985]);
      }
    }
  }
  prev = next_prev1950;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev1951.empty() && prioritized_choice_final_prev1951.front() == FAIL )) {
      prioritized_choice_final_prev1951.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev1951;
  for(int i1948=0;i1948<(int)prev.size();++i1948) {
    if( prev[i1948] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1948]);
    }
  }
  return memo[key(271,backtracking_ptr_for_packrat271)] = result;
}

inline deque<int> parse_slash1952() { 
  if(memo.count(key(272,i))) {
    return memo[key(272,i)];
  }
  int backtracking_ptr_for_packrat272=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassMemberDeclaration) */
    deque<int> next_prev1955;
    for(int i1954=0;i1954<(int)prev.size();++i1954) {
      if( prev[i1954] == FAIL ) {
        if(!(!next_prev1955.empty() && next_prev1955.front() == FAIL )) {
          next_prev1955.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1954];
      tmp = parse_ClassMemberDeclaration();
      
      for(int i1954=0;i1954<(int)tmp.size();++i1954) {
        if( tmp[i1954] == FAIL ) {
          if(!( !next_prev1955.empty() && next_prev1955[0] == FAIL )) {
            next_prev1955.push_front(FAIL);
          }
        } else {
          next_prev1955.push_back(tmp[i1954]);
        }
      }
    }
    prev = next_prev1955;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1953=0;i1953<(int)prev.size();++i1953) {
    if( prev[i1953] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1953]);
    }
  }
  return memo[key(272,backtracking_ptr_for_packrat272)] = result;
}

inline deque<int> parse_slash1957() { 
  if(memo.count(key(273,i))) {
    return memo[key(273,i)];
  }
  int backtracking_ptr_for_packrat273=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Block) */
    deque<int> next_prev1960;
    for(int i1959=0;i1959<(int)prev.size();++i1959) {
      if( prev[i1959] == FAIL ) {
        if(!(!next_prev1960.empty() && next_prev1960.front() == FAIL )) {
          next_prev1960.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1959];
      tmp = parse_Block();
      
      for(int i1959=0;i1959<(int)tmp.size();++i1959) {
        if( tmp[i1959] == FAIL ) {
          if(!( !next_prev1960.empty() && next_prev1960[0] == FAIL )) {
            next_prev1960.push_front(FAIL);
          }
        } else {
          next_prev1960.push_back(tmp[i1959]);
        }
      }
    }
    prev = next_prev1960;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1958=0;i1958<(int)prev.size();++i1958) {
    if( prev[i1958] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1958]);
    }
  }
  return memo[key(273,backtracking_ptr_for_packrat273)] = result;
}

inline deque<int> parse_slash1962() { 
  if(memo.count(key(274,i))) {
    return memo[key(274,i)];
  }
  int backtracking_ptr_for_packrat274=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i1964=0;i1964<(int)prev.size();++i1964) {
        if( prev[i1964] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1964]<m&&I[prev[i1964]]=='s') {
          tmp.push_back(prev[i1964]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1965=0;i1965<(int)prev.size();++i1965) {
        if( prev[i1965] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1965]<m&&I[prev[i1965]]=='t') {
          tmp.push_back(prev[i1965]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1966=0;i1966<(int)prev.size();++i1966) {
        if( prev[i1966] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1966]<m&&I[prev[i1966]]=='a') {
          tmp.push_back(prev[i1966]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1967=0;i1967<(int)prev.size();++i1967) {
        if( prev[i1967] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1967]<m&&I[prev[i1967]]=='t') {
          tmp.push_back(prev[i1967]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1968=0;i1968<(int)prev.size();++i1968) {
        if( prev[i1968] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1968]<m&&I[prev[i1968]]=='i') {
          tmp.push_back(prev[i1968]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i1969=0;i1969<(int)prev.size();++i1969) {
        if( prev[i1969] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i1969]<m&&I[prev[i1969]]=='c') {
          tmp.push_back(prev[i1969]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev1975;
      for(int i1974=0;i1974<(int)prev.size();++i1974) {
        i = prev[i1974];
        tmp = parse_not1970();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev1975.push_back(prev[i1974]);
        } else {
          if(!(!next_prev1975.empty()&&next_prev1975.front()==FAIL)) {
            next_prev1975.push_front(FAIL);
          }
        }
      }
      prev = next_prev1975;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev1977;
      for(int i1976=0;i1976<(int)prev.size();++i1976) {
        if( prev[i1976] == FAIL ) {
          if(!(!next_prev1977.empty() && next_prev1977.front() == FAIL )) {
            next_prev1977.push_front(FAIL);
          }
          continue;
        }
        i = prev[i1976];
        tmp = parse__();
        
        for(int i1976=0;i1976<(int)tmp.size();++i1976) {
          if( tmp[i1976] == FAIL ) {
            if(!( !next_prev1977.empty() && next_prev1977[0] == FAIL )) {
              next_prev1977.push_front(FAIL);
            }
          } else {
            next_prev1977.push_back(tmp[i1976]);
          }
        }
      }
      prev = next_prev1977;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Block) */
    deque<int> next_prev1979;
    for(int i1978=0;i1978<(int)prev.size();++i1978) {
      if( prev[i1978] == FAIL ) {
        if(!(!next_prev1979.empty() && next_prev1979.front() == FAIL )) {
          next_prev1979.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1978];
      tmp = parse_Block();
      
      for(int i1978=0;i1978<(int)tmp.size();++i1978) {
        if( tmp[i1978] == FAIL ) {
          if(!( !next_prev1979.empty() && next_prev1979[0] == FAIL )) {
            next_prev1979.push_front(FAIL);
          }
        } else {
          next_prev1979.push_back(tmp[i1978]);
        }
      }
    }
    prev = next_prev1979;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1963=0;i1963<(int)prev.size();++i1963) {
    if( prev[i1963] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1963]);
    }
  }
  return memo[key(274,backtracking_ptr_for_packrat274)] = result;
}

inline deque<int> parse_not1970() { 
  if(memo.count(key(275,i))) {
    return memo[key(275,i)];
  }
  int backtracking_ptr_for_packrat275=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev1973;
  for(int i1972=0;i1972<(int)prev.size();++i1972) {
    if( prev[i1972] == FAIL ) {
      if(!(!next_prev1973.empty() && next_prev1973.front() == FAIL )) {
        next_prev1973.push_front(FAIL);
      }
      continue;
    }
    i = prev[i1972];
    tmp = parse_W();
    
    for(int i1972=0;i1972<(int)tmp.size();++i1972) {
      if( tmp[i1972] == FAIL ) {
        if(!( !next_prev1973.empty() && next_prev1973[0] == FAIL )) {
          next_prev1973.push_front(FAIL);
        }
      } else {
        next_prev1973.push_back(tmp[i1972]);
      }
    }
  }
  prev = next_prev1973;
  for(int i1971=0;i1971<(int)prev.size();++i1971) {
    if( prev[i1971] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1971]);
    }
  }
  return memo[key(275,backtracking_ptr_for_packrat275)] = result;
}

inline deque<int> parse_slash1981() { 
  if(memo.count(key(276,i))) {
    return memo[key(276,i)];
  }
  int backtracking_ptr_for_packrat276=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ConstructorDeclaration) */
    deque<int> next_prev1984;
    for(int i1983=0;i1983<(int)prev.size();++i1983) {
      if( prev[i1983] == FAIL ) {
        if(!(!next_prev1984.empty() && next_prev1984.front() == FAIL )) {
          next_prev1984.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1983];
      tmp = parse_ConstructorDeclaration();
      
      for(int i1983=0;i1983<(int)tmp.size();++i1983) {
        if( tmp[i1983] == FAIL ) {
          if(!( !next_prev1984.empty() && next_prev1984[0] == FAIL )) {
            next_prev1984.push_front(FAIL);
          }
        } else {
          next_prev1984.push_back(tmp[i1983]);
        }
      }
    }
    prev = next_prev1984;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1982=0;i1982<(int)prev.size();++i1982) {
    if( prev[i1982] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1982]);
    }
  }
  return memo[key(276,backtracking_ptr_for_packrat276)] = result;
}

deque<int> parse_ClassMemberDeclaration(){
  if(memo.count(key(277,i))) {
    return memo[key(277,i)];
  }
  int backtracking_ptr_for_packrat277=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev1988;
  deque<int> prioritized_choice_final_prev1989;
  next_prev1988.clear();
  for(int i1987=0;i1987<(int)prev.size();++i1987) {
    i = prev[i1987];
    tmp = parse_slash1990();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1988.push_back(prev[i1987]); }
    for(int i1994=0;i1994<(int)tmp.size();++i1994) {
      if( tmp[i1994] != FAIL ) {
        prioritized_choice_final_prev1989.push_back(tmp[i1994]);
      }
    }
  }
  prev = next_prev1988;
  next_prev1988.clear();
  for(int i1987=0;i1987<(int)prev.size();++i1987) {
    i = prev[i1987];
    tmp = parse_slash1995();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1988.push_back(prev[i1987]); }
    for(int i1999=0;i1999<(int)tmp.size();++i1999) {
      if( tmp[i1999] != FAIL ) {
        prioritized_choice_final_prev1989.push_back(tmp[i1999]);
      }
    }
  }
  prev = next_prev1988;
  next_prev1988.clear();
  for(int i1987=0;i1987<(int)prev.size();++i1987) {
    i = prev[i1987];
    tmp = parse_slash2000();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1988.push_back(prev[i1987]); }
    for(int i2004=0;i2004<(int)tmp.size();++i2004) {
      if( tmp[i2004] != FAIL ) {
        prioritized_choice_final_prev1989.push_back(tmp[i2004]);
      }
    }
  }
  prev = next_prev1988;
  next_prev1988.clear();
  for(int i1987=0;i1987<(int)prev.size();++i1987) {
    i = prev[i1987];
    tmp = parse_slash2005();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1988.push_back(prev[i1987]); }
    for(int i2009=0;i2009<(int)tmp.size();++i2009) {
      if( tmp[i2009] != FAIL ) {
        prioritized_choice_final_prev1989.push_back(tmp[i2009]);
      }
    }
  }
  prev = next_prev1988;
  next_prev1988.clear();
  for(int i1987=0;i1987<(int)prev.size();++i1987) {
    i = prev[i1987];
    tmp = parse_slash2010();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev1988.push_back(prev[i1987]); }
    for(int i2015=0;i2015<(int)tmp.size();++i2015) {
      if( tmp[i2015] != FAIL ) {
        prioritized_choice_final_prev1989.push_back(tmp[i2015]);
      }
    }
  }
  prev = next_prev1988;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev1989.empty() && prioritized_choice_final_prev1989.front() == FAIL )) {
      prioritized_choice_final_prev1989.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev1989;
  for(int i1986=0;i1986<(int)prev.size();++i1986) {
    if( prev[i1986] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1986]);
    }
  }
  return memo[key(277,backtracking_ptr_for_packrat277)] = result;
}

inline deque<int> parse_slash1990() { 
  if(memo.count(key(278,i))) {
    return memo[key(278,i)];
  }
  int backtracking_ptr_for_packrat278=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (FieldDeclaration) */
    deque<int> next_prev1993;
    for(int i1992=0;i1992<(int)prev.size();++i1992) {
      if( prev[i1992] == FAIL ) {
        if(!(!next_prev1993.empty() && next_prev1993.front() == FAIL )) {
          next_prev1993.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1992];
      tmp = parse_FieldDeclaration();
      
      for(int i1992=0;i1992<(int)tmp.size();++i1992) {
        if( tmp[i1992] == FAIL ) {
          if(!( !next_prev1993.empty() && next_prev1993[0] == FAIL )) {
            next_prev1993.push_front(FAIL);
          }
        } else {
          next_prev1993.push_back(tmp[i1992]);
        }
      }
    }
    prev = next_prev1993;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1991=0;i1991<(int)prev.size();++i1991) {
    if( prev[i1991] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1991]);
    }
  }
  return memo[key(278,backtracking_ptr_for_packrat278)] = result;
}

inline deque<int> parse_slash1995() { 
  if(memo.count(key(279,i))) {
    return memo[key(279,i)];
  }
  int backtracking_ptr_for_packrat279=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (MethodDeclaration) */
    deque<int> next_prev1998;
    for(int i1997=0;i1997<(int)prev.size();++i1997) {
      if( prev[i1997] == FAIL ) {
        if(!(!next_prev1998.empty() && next_prev1998.front() == FAIL )) {
          next_prev1998.push_front(FAIL);
        }
        continue;
      }
      i = prev[i1997];
      tmp = parse_MethodDeclaration();
      
      for(int i1997=0;i1997<(int)tmp.size();++i1997) {
        if( tmp[i1997] == FAIL ) {
          if(!( !next_prev1998.empty() && next_prev1998[0] == FAIL )) {
            next_prev1998.push_front(FAIL);
          }
        } else {
          next_prev1998.push_back(tmp[i1997]);
        }
      }
    }
    prev = next_prev1998;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i1996=0;i1996<(int)prev.size();++i1996) {
    if( prev[i1996] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i1996]);
    }
  }
  return memo[key(279,backtracking_ptr_for_packrat279)] = result;
}

inline deque<int> parse_slash2000() { 
  if(memo.count(key(280,i))) {
    return memo[key(280,i)];
  }
  int backtracking_ptr_for_packrat280=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassDeclaration) */
    deque<int> next_prev2003;
    for(int i2002=0;i2002<(int)prev.size();++i2002) {
      if( prev[i2002] == FAIL ) {
        if(!(!next_prev2003.empty() && next_prev2003.front() == FAIL )) {
          next_prev2003.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2002];
      tmp = parse_ClassDeclaration();
      
      for(int i2002=0;i2002<(int)tmp.size();++i2002) {
        if( tmp[i2002] == FAIL ) {
          if(!( !next_prev2003.empty() && next_prev2003[0] == FAIL )) {
            next_prev2003.push_front(FAIL);
          }
        } else {
          next_prev2003.push_back(tmp[i2002]);
        }
      }
    }
    prev = next_prev2003;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2001=0;i2001<(int)prev.size();++i2001) {
    if( prev[i2001] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2001]);
    }
  }
  return memo[key(280,backtracking_ptr_for_packrat280)] = result;
}

inline deque<int> parse_slash2005() { 
  if(memo.count(key(281,i))) {
    return memo[key(281,i)];
  }
  int backtracking_ptr_for_packrat281=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (InterfaceDeclaration) */
    deque<int> next_prev2008;
    for(int i2007=0;i2007<(int)prev.size();++i2007) {
      if( prev[i2007] == FAIL ) {
        if(!(!next_prev2008.empty() && next_prev2008.front() == FAIL )) {
          next_prev2008.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2007];
      tmp = parse_InterfaceDeclaration();
      
      for(int i2007=0;i2007<(int)tmp.size();++i2007) {
        if( tmp[i2007] == FAIL ) {
          if(!( !next_prev2008.empty() && next_prev2008[0] == FAIL )) {
            next_prev2008.push_front(FAIL);
          }
        } else {
          next_prev2008.push_back(tmp[i2007]);
        }
      }
    }
    prev = next_prev2008;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2006=0;i2006<(int)prev.size();++i2006) {
    if( prev[i2006] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2006]);
    }
  }
  return memo[key(281,backtracking_ptr_for_packrat281)] = result;
}

inline deque<int> parse_slash2010() { 
  if(memo.count(key(282,i))) {
    return memo[key(282,i)];
  }
  int backtracking_ptr_for_packrat282=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2012=0;i2012<(int)prev.size();++i2012) {
        if( prev[i2012] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2012]<m&&I[prev[i2012]]==';') {
          tmp.push_back(prev[i2012]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2014;
      for(int i2013=0;i2013<(int)prev.size();++i2013) {
        if( prev[i2013] == FAIL ) {
          if(!(!next_prev2014.empty() && next_prev2014.front() == FAIL )) {
            next_prev2014.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2013];
        tmp = parse__();
        
        for(int i2013=0;i2013<(int)tmp.size();++i2013) {
          if( tmp[i2013] == FAIL ) {
            if(!( !next_prev2014.empty() && next_prev2014[0] == FAIL )) {
              next_prev2014.push_front(FAIL);
            }
          } else {
            next_prev2014.push_back(tmp[i2013]);
          }
        }
      }
      prev = next_prev2014;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2011=0;i2011<(int)prev.size();++i2011) {
    if( prev[i2011] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2011]);
    }
  }
  return memo[key(282,backtracking_ptr_for_packrat282)] = result;
}

deque<int> parse_InterfaceDeclaration(){
  if(memo.count(key(283,i))) {
    return memo[key(283,i)];
  }
  int backtracking_ptr_for_packrat283=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev2018;
  deque<int> prioritized_choice_final_prev2019;
  next_prev2018.clear();
  for(int i2017=0;i2017<(int)prev.size();++i2017) {
    i = prev[i2017];
    tmp = parse_slash2020();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2018.push_back(prev[i2017]); }
    for(int i2073=0;i2073<(int)tmp.size();++i2073) {
      if( tmp[i2073] != FAIL ) {
        prioritized_choice_final_prev2019.push_back(tmp[i2073]);
      }
    }
  }
  prev = next_prev2018;
  next_prev2018.clear();
  for(int i2017=0;i2017<(int)prev.size();++i2017) {
    i = prev[i2017];
    tmp = parse_slash2074();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2018.push_back(prev[i2017]); }
    for(int i2111=0;i2111<(int)tmp.size();++i2111) {
      if( tmp[i2111] != FAIL ) {
        prioritized_choice_final_prev2019.push_back(tmp[i2111]);
      }
    }
  }
  prev = next_prev2018;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev2019.empty() && prioritized_choice_final_prev2019.front() == FAIL )) {
      prioritized_choice_final_prev2019.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev2019;
  for(int i2016=0;i2016<(int)prev.size();++i2016) {
    if( prev[i2016] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2016]);
    }
  }
  return memo[key(283,backtracking_ptr_for_packrat283)] = result;
}

inline deque<int> parse_slash2020() { 
  if(memo.count(key(284,i))) {
    return memo[key(284,i)];
  }
  int backtracking_ptr_for_packrat284=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev2023;
    deque<int> prioritized_choice_final_prev2024;
    next_prev2023.clear();
    for(int i2022=0;i2022<(int)prev.size();++i2022) {
      i = prev[i2022];
      tmp = parse_slash2025();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2023.push_back(prev[i2022]); }
      for(int i2029=0;i2029<(int)tmp.size();++i2029) {
        if( tmp[i2029] != FAIL ) {
          prioritized_choice_final_prev2024.push_back(tmp[i2029]);
        }
      }
    }
    prev = next_prev2023;
    next_prev2023.clear();
    for(int i2022=0;i2022<(int)prev.size();++i2022) {
      i = prev[i2022];
      tmp = parse_slash2030();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2023.push_back(prev[i2022]); }
      for(int i2032=0;i2032<(int)tmp.size();++i2032) {
        if( tmp[i2032] != FAIL ) {
          prioritized_choice_final_prev2024.push_back(tmp[i2032]);
        }
      }
    }
    prev = next_prev2023;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev2024.empty() && prioritized_choice_final_prev2024.front() == FAIL )) {
        prioritized_choice_final_prev2024.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev2024;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2033=0;i2033<(int)prev.size();++i2033) {
        if( prev[i2033] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2033]<m&&I[prev[i2033]]=='i') {
          tmp.push_back(prev[i2033]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2034=0;i2034<(int)prev.size();++i2034) {
        if( prev[i2034] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2034]<m&&I[prev[i2034]]=='n') {
          tmp.push_back(prev[i2034]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2035=0;i2035<(int)prev.size();++i2035) {
        if( prev[i2035] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2035]<m&&I[prev[i2035]]=='t') {
          tmp.push_back(prev[i2035]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2036=0;i2036<(int)prev.size();++i2036) {
        if( prev[i2036] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2036]<m&&I[prev[i2036]]=='e') {
          tmp.push_back(prev[i2036]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2037=0;i2037<(int)prev.size();++i2037) {
        if( prev[i2037] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2037]<m&&I[prev[i2037]]=='r') {
          tmp.push_back(prev[i2037]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2038=0;i2038<(int)prev.size();++i2038) {
        if( prev[i2038] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2038]<m&&I[prev[i2038]]=='f') {
          tmp.push_back(prev[i2038]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2039=0;i2039<(int)prev.size();++i2039) {
        if( prev[i2039] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2039]<m&&I[prev[i2039]]=='a') {
          tmp.push_back(prev[i2039]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2040=0;i2040<(int)prev.size();++i2040) {
        if( prev[i2040] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2040]<m&&I[prev[i2040]]=='c') {
          tmp.push_back(prev[i2040]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2041=0;i2041<(int)prev.size();++i2041) {
        if( prev[i2041] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2041]<m&&I[prev[i2041]]=='e') {
          tmp.push_back(prev[i2041]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2047;
      for(int i2046=0;i2046<(int)prev.size();++i2046) {
        i = prev[i2046];
        tmp = parse_not2042();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2047.push_back(prev[i2046]);
        } else {
          if(!(!next_prev2047.empty()&&next_prev2047.front()==FAIL)) {
            next_prev2047.push_front(FAIL);
          }
        }
      }
      prev = next_prev2047;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2049;
      for(int i2048=0;i2048<(int)prev.size();++i2048) {
        if( prev[i2048] == FAIL ) {
          if(!(!next_prev2049.empty() && next_prev2049.front() == FAIL )) {
            next_prev2049.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2048];
        tmp = parse__();
        
        for(int i2048=0;i2048<(int)tmp.size();++i2048) {
          if( tmp[i2048] == FAIL ) {
            if(!( !next_prev2049.empty() && next_prev2049[0] == FAIL )) {
              next_prev2049.push_front(FAIL);
            }
          } else {
            next_prev2049.push_back(tmp[i2048]);
          }
        }
      }
      prev = next_prev2049;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev2051;
    for(int i2050=0;i2050<(int)prev.size();++i2050) {
      if( prev[i2050] == FAIL ) {
        if(!(!next_prev2051.empty() && next_prev2051.front() == FAIL )) {
          next_prev2051.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2050];
      tmp = parse_Identifier();
      
      for(int i2050=0;i2050<(int)tmp.size();++i2050) {
        if( tmp[i2050] == FAIL ) {
          if(!( !next_prev2051.empty() && next_prev2051[0] == FAIL )) {
            next_prev2051.push_front(FAIL);
          }
        } else {
          next_prev2051.push_back(tmp[i2050]);
        }
      }
    }
    prev = next_prev2051;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev2053;
    deque<int> prioritized_choice_final_prev2054;
    next_prev2053.clear();
    for(int i2052=0;i2052<(int)prev.size();++i2052) {
      i = prev[i2052];
      tmp = parse_slash2055();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2053.push_back(prev[i2052]); }
      for(int i2059=0;i2059<(int)tmp.size();++i2059) {
        if( tmp[i2059] != FAIL ) {
          prioritized_choice_final_prev2054.push_back(tmp[i2059]);
        }
      }
    }
    prev = next_prev2053;
    next_prev2053.clear();
    for(int i2052=0;i2052<(int)prev.size();++i2052) {
      i = prev[i2052];
      tmp = parse_slash2060();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2053.push_back(prev[i2052]); }
      for(int i2062=0;i2062<(int)tmp.size();++i2062) {
        if( tmp[i2062] != FAIL ) {
          prioritized_choice_final_prev2054.push_back(tmp[i2062]);
        }
      }
    }
    prev = next_prev2053;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev2054.empty() && prioritized_choice_final_prev2054.front() == FAIL )) {
        prioritized_choice_final_prev2054.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev2054;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev2067;
    deque<int> star_final_prev2068;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev2067.clear();
      for(int i2069=0;i2069<(int)prev.size();++i2069) {
        i = prev[i2069];
        tmp = parse_while2063();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev2068.push_back(prev[i2069]);
        }
        for(int i2070=0;i2070<(int)tmp.size();++i2070) {
          if(tmp[i2070]==FAIL) {
            if(!( !next_prev2067.empty() && next_prev2067.front() == FAIL )) {
              next_prev2067.push_front(FAIL);
            }
          } else {
            next_prev2067.push_back(tmp[i2070]);
          }
        }
      }
      prev = next_prev2067;
    }
    prev = star_final_prev2068;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (InterfaceBody) */
    deque<int> next_prev2072;
    for(int i2071=0;i2071<(int)prev.size();++i2071) {
      if( prev[i2071] == FAIL ) {
        if(!(!next_prev2072.empty() && next_prev2072.front() == FAIL )) {
          next_prev2072.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2071];
      tmp = parse_InterfaceBody();
      
      for(int i2071=0;i2071<(int)tmp.size();++i2071) {
        if( tmp[i2071] == FAIL ) {
          if(!( !next_prev2072.empty() && next_prev2072[0] == FAIL )) {
            next_prev2072.push_front(FAIL);
          }
        } else {
          next_prev2072.push_back(tmp[i2071]);
        }
      }
    }
    prev = next_prev2072;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2021=0;i2021<(int)prev.size();++i2021) {
    if( prev[i2021] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2021]);
    }
  }
  return memo[key(284,backtracking_ptr_for_packrat284)] = result;
}

inline deque<int> parse_slash2025() { 
  if(memo.count(key(285,i))) {
    return memo[key(285,i)];
  }
  int backtracking_ptr_for_packrat285=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (InterfaceModifiers) */
    deque<int> next_prev2028;
    for(int i2027=0;i2027<(int)prev.size();++i2027) {
      if( prev[i2027] == FAIL ) {
        if(!(!next_prev2028.empty() && next_prev2028.front() == FAIL )) {
          next_prev2028.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2027];
      tmp = parse_InterfaceModifiers();
      
      for(int i2027=0;i2027<(int)tmp.size();++i2027) {
        if( tmp[i2027] == FAIL ) {
          if(!( !next_prev2028.empty() && next_prev2028[0] == FAIL )) {
            next_prev2028.push_front(FAIL);
          }
        } else {
          next_prev2028.push_back(tmp[i2027]);
        }
      }
    }
    prev = next_prev2028;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2026=0;i2026<(int)prev.size();++i2026) {
    if( prev[i2026] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2026]);
    }
  }
  return memo[key(285,backtracking_ptr_for_packrat285)] = result;
}

inline deque<int> parse_slash2030() { 
  if(memo.count(key(286,i))) {
    return memo[key(286,i)];
  }
  int backtracking_ptr_for_packrat286=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i2031=0;i2031<(int)prev.size();++i2031) {
    if( prev[i2031] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2031]);
    }
  }
  return memo[key(286,backtracking_ptr_for_packrat286)] = result;
}

inline deque<int> parse_not2042() { 
  if(memo.count(key(287,i))) {
    return memo[key(287,i)];
  }
  int backtracking_ptr_for_packrat287=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2045;
  for(int i2044=0;i2044<(int)prev.size();++i2044) {
    if( prev[i2044] == FAIL ) {
      if(!(!next_prev2045.empty() && next_prev2045.front() == FAIL )) {
        next_prev2045.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2044];
    tmp = parse_W();
    
    for(int i2044=0;i2044<(int)tmp.size();++i2044) {
      if( tmp[i2044] == FAIL ) {
        if(!( !next_prev2045.empty() && next_prev2045[0] == FAIL )) {
          next_prev2045.push_front(FAIL);
        }
      } else {
        next_prev2045.push_back(tmp[i2044]);
      }
    }
  }
  prev = next_prev2045;
  for(int i2043=0;i2043<(int)prev.size();++i2043) {
    if( prev[i2043] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2043]);
    }
  }
  return memo[key(287,backtracking_ptr_for_packrat287)] = result;
}

inline deque<int> parse_slash2055() { 
  if(memo.count(key(288,i))) {
    return memo[key(288,i)];
  }
  int backtracking_ptr_for_packrat288=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (TypeParameters) */
    deque<int> next_prev2058;
    for(int i2057=0;i2057<(int)prev.size();++i2057) {
      if( prev[i2057] == FAIL ) {
        if(!(!next_prev2058.empty() && next_prev2058.front() == FAIL )) {
          next_prev2058.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2057];
      tmp = parse_TypeParameters();
      
      for(int i2057=0;i2057<(int)tmp.size();++i2057) {
        if( tmp[i2057] == FAIL ) {
          if(!( !next_prev2058.empty() && next_prev2058[0] == FAIL )) {
            next_prev2058.push_front(FAIL);
          }
        } else {
          next_prev2058.push_back(tmp[i2057]);
        }
      }
    }
    prev = next_prev2058;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2056=0;i2056<(int)prev.size();++i2056) {
    if( prev[i2056] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2056]);
    }
  }
  return memo[key(288,backtracking_ptr_for_packrat288)] = result;
}

inline deque<int> parse_slash2060() { 
  if(memo.count(key(289,i))) {
    return memo[key(289,i)];
  }
  int backtracking_ptr_for_packrat289=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i2061=0;i2061<(int)prev.size();++i2061) {
    if( prev[i2061] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2061]);
    }
  }
  return memo[key(289,backtracking_ptr_for_packrat289)] = result;
}

inline deque<int> parse_while2063() { 
  if(memo.count(key(290,i))) {
    return memo[key(290,i)];
  }
  int backtracking_ptr_for_packrat290=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ExtendsInterfaces) */
    deque<int> next_prev2066;
    for(int i2065=0;i2065<(int)prev.size();++i2065) {
      if( prev[i2065] == FAIL ) {
        if(!(!next_prev2066.empty() && next_prev2066.front() == FAIL )) {
          next_prev2066.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2065];
      tmp = parse_ExtendsInterfaces();
      
      for(int i2065=0;i2065<(int)tmp.size();++i2065) {
        if( tmp[i2065] == FAIL ) {
          if(!( !next_prev2066.empty() && next_prev2066[0] == FAIL )) {
            next_prev2066.push_front(FAIL);
          }
        } else {
          next_prev2066.push_back(tmp[i2065]);
        }
      }
    }
    prev = next_prev2066;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2064=0;i2064<(int)prev.size();++i2064) {
    if( prev[i2064] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2064]);
    }
  }
  return memo[key(290,backtracking_ptr_for_packrat290)] = result;
}

inline deque<int> parse_slash2074() { 
  if(memo.count(key(291,i))) {
    return memo[key(291,i)];
  }
  int backtracking_ptr_for_packrat291=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev2077;
    deque<int> prioritized_choice_final_prev2078;
    next_prev2077.clear();
    for(int i2076=0;i2076<(int)prev.size();++i2076) {
      i = prev[i2076];
      tmp = parse_slash2079();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2077.push_back(prev[i2076]); }
      for(int i2083=0;i2083<(int)tmp.size();++i2083) {
        if( tmp[i2083] != FAIL ) {
          prioritized_choice_final_prev2078.push_back(tmp[i2083]);
        }
      }
    }
    prev = next_prev2077;
    next_prev2077.clear();
    for(int i2076=0;i2076<(int)prev.size();++i2076) {
      i = prev[i2076];
      tmp = parse_slash2084();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2077.push_back(prev[i2076]); }
      for(int i2086=0;i2086<(int)tmp.size();++i2086) {
        if( tmp[i2086] != FAIL ) {
          prioritized_choice_final_prev2078.push_back(tmp[i2086]);
        }
      }
    }
    prev = next_prev2077;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev2078.empty() && prioritized_choice_final_prev2078.front() == FAIL )) {
        prioritized_choice_final_prev2078.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev2078;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2087=0;i2087<(int)prev.size();++i2087) {
        if( prev[i2087] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2087]<m&&I[prev[i2087]]=='@') {
          tmp.push_back(prev[i2087]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2089;
      for(int i2088=0;i2088<(int)prev.size();++i2088) {
        if( prev[i2088] == FAIL ) {
          if(!(!next_prev2089.empty() && next_prev2089.front() == FAIL )) {
            next_prev2089.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2088];
        tmp = parse__();
        
        for(int i2088=0;i2088<(int)tmp.size();++i2088) {
          if( tmp[i2088] == FAIL ) {
            if(!( !next_prev2089.empty() && next_prev2089[0] == FAIL )) {
              next_prev2089.push_front(FAIL);
            }
          } else {
            next_prev2089.push_back(tmp[i2088]);
          }
        }
      }
      prev = next_prev2089;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2090=0;i2090<(int)prev.size();++i2090) {
        if( prev[i2090] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2090]<m&&I[prev[i2090]]=='i') {
          tmp.push_back(prev[i2090]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2091=0;i2091<(int)prev.size();++i2091) {
        if( prev[i2091] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2091]<m&&I[prev[i2091]]=='n') {
          tmp.push_back(prev[i2091]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2092=0;i2092<(int)prev.size();++i2092) {
        if( prev[i2092] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2092]<m&&I[prev[i2092]]=='t') {
          tmp.push_back(prev[i2092]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2093=0;i2093<(int)prev.size();++i2093) {
        if( prev[i2093] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2093]<m&&I[prev[i2093]]=='e') {
          tmp.push_back(prev[i2093]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2094=0;i2094<(int)prev.size();++i2094) {
        if( prev[i2094] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2094]<m&&I[prev[i2094]]=='r') {
          tmp.push_back(prev[i2094]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2095=0;i2095<(int)prev.size();++i2095) {
        if( prev[i2095] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2095]<m&&I[prev[i2095]]=='f') {
          tmp.push_back(prev[i2095]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2096=0;i2096<(int)prev.size();++i2096) {
        if( prev[i2096] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2096]<m&&I[prev[i2096]]=='a') {
          tmp.push_back(prev[i2096]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2097=0;i2097<(int)prev.size();++i2097) {
        if( prev[i2097] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2097]<m&&I[prev[i2097]]=='c') {
          tmp.push_back(prev[i2097]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2098=0;i2098<(int)prev.size();++i2098) {
        if( prev[i2098] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2098]<m&&I[prev[i2098]]=='e') {
          tmp.push_back(prev[i2098]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2104;
      for(int i2103=0;i2103<(int)prev.size();++i2103) {
        i = prev[i2103];
        tmp = parse_not2099();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2104.push_back(prev[i2103]);
        } else {
          if(!(!next_prev2104.empty()&&next_prev2104.front()==FAIL)) {
            next_prev2104.push_front(FAIL);
          }
        }
      }
      prev = next_prev2104;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2106;
      for(int i2105=0;i2105<(int)prev.size();++i2105) {
        if( prev[i2105] == FAIL ) {
          if(!(!next_prev2106.empty() && next_prev2106.front() == FAIL )) {
            next_prev2106.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2105];
        tmp = parse__();
        
        for(int i2105=0;i2105<(int)tmp.size();++i2105) {
          if( tmp[i2105] == FAIL ) {
            if(!( !next_prev2106.empty() && next_prev2106[0] == FAIL )) {
              next_prev2106.push_front(FAIL);
            }
          } else {
            next_prev2106.push_back(tmp[i2105]);
          }
        }
      }
      prev = next_prev2106;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev2108;
    for(int i2107=0;i2107<(int)prev.size();++i2107) {
      if( prev[i2107] == FAIL ) {
        if(!(!next_prev2108.empty() && next_prev2108.front() == FAIL )) {
          next_prev2108.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2107];
      tmp = parse_Identifier();
      
      for(int i2107=0;i2107<(int)tmp.size();++i2107) {
        if( tmp[i2107] == FAIL ) {
          if(!( !next_prev2108.empty() && next_prev2108[0] == FAIL )) {
            next_prev2108.push_front(FAIL);
          }
        } else {
          next_prev2108.push_back(tmp[i2107]);
        }
      }
    }
    prev = next_prev2108;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (AnnotationTypeBody) */
    deque<int> next_prev2110;
    for(int i2109=0;i2109<(int)prev.size();++i2109) {
      if( prev[i2109] == FAIL ) {
        if(!(!next_prev2110.empty() && next_prev2110.front() == FAIL )) {
          next_prev2110.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2109];
      tmp = parse_AnnotationTypeBody();
      
      for(int i2109=0;i2109<(int)tmp.size();++i2109) {
        if( tmp[i2109] == FAIL ) {
          if(!( !next_prev2110.empty() && next_prev2110[0] == FAIL )) {
            next_prev2110.push_front(FAIL);
          }
        } else {
          next_prev2110.push_back(tmp[i2109]);
        }
      }
    }
    prev = next_prev2110;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2075=0;i2075<(int)prev.size();++i2075) {
    if( prev[i2075] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2075]);
    }
  }
  return memo[key(291,backtracking_ptr_for_packrat291)] = result;
}

inline deque<int> parse_slash2079() { 
  if(memo.count(key(292,i))) {
    return memo[key(292,i)];
  }
  int backtracking_ptr_for_packrat292=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (InterfaceModifiers) */
    deque<int> next_prev2082;
    for(int i2081=0;i2081<(int)prev.size();++i2081) {
      if( prev[i2081] == FAIL ) {
        if(!(!next_prev2082.empty() && next_prev2082.front() == FAIL )) {
          next_prev2082.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2081];
      tmp = parse_InterfaceModifiers();
      
      for(int i2081=0;i2081<(int)tmp.size();++i2081) {
        if( tmp[i2081] == FAIL ) {
          if(!( !next_prev2082.empty() && next_prev2082[0] == FAIL )) {
            next_prev2082.push_front(FAIL);
          }
        } else {
          next_prev2082.push_back(tmp[i2081]);
        }
      }
    }
    prev = next_prev2082;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2080=0;i2080<(int)prev.size();++i2080) {
    if( prev[i2080] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2080]);
    }
  }
  return memo[key(292,backtracking_ptr_for_packrat292)] = result;
}

inline deque<int> parse_slash2084() { 
  if(memo.count(key(293,i))) {
    return memo[key(293,i)];
  }
  int backtracking_ptr_for_packrat293=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i2085=0;i2085<(int)prev.size();++i2085) {
    if( prev[i2085] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2085]);
    }
  }
  return memo[key(293,backtracking_ptr_for_packrat293)] = result;
}

inline deque<int> parse_not2099() { 
  if(memo.count(key(294,i))) {
    return memo[key(294,i)];
  }
  int backtracking_ptr_for_packrat294=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2102;
  for(int i2101=0;i2101<(int)prev.size();++i2101) {
    if( prev[i2101] == FAIL ) {
      if(!(!next_prev2102.empty() && next_prev2102.front() == FAIL )) {
        next_prev2102.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2101];
    tmp = parse_W();
    
    for(int i2101=0;i2101<(int)tmp.size();++i2101) {
      if( tmp[i2101] == FAIL ) {
        if(!( !next_prev2102.empty() && next_prev2102[0] == FAIL )) {
          next_prev2102.push_front(FAIL);
        }
      } else {
        next_prev2102.push_back(tmp[i2101]);
      }
    }
  }
  prev = next_prev2102;
  for(int i2100=0;i2100<(int)prev.size();++i2100) {
    if( prev[i2100] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2100]);
    }
  }
  return memo[key(294,backtracking_ptr_for_packrat294)] = result;
}

deque<int> parse_InterfaceModifier(){
  if(memo.count(key(295,i))) {
    return memo[key(295,i)];
  }
  int backtracking_ptr_for_packrat295=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev2114;
  deque<int> prioritized_choice_final_prev2115;
  next_prev2114.clear();
  for(int i2113=0;i2113<(int)prev.size();++i2113) {
    i = prev[i2113];
    tmp = parse_slash2116();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2114.push_back(prev[i2113]); }
    for(int i2120=0;i2120<(int)tmp.size();++i2120) {
      if( tmp[i2120] != FAIL ) {
        prioritized_choice_final_prev2115.push_back(tmp[i2120]);
      }
    }
  }
  prev = next_prev2114;
  next_prev2114.clear();
  for(int i2113=0;i2113<(int)prev.size();++i2113) {
    i = prev[i2113];
    tmp = parse_slash2121();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2114.push_back(prev[i2113]); }
    for(int i2137=0;i2137<(int)tmp.size();++i2137) {
      if( tmp[i2137] != FAIL ) {
        prioritized_choice_final_prev2115.push_back(tmp[i2137]);
      }
    }
  }
  prev = next_prev2114;
  next_prev2114.clear();
  for(int i2113=0;i2113<(int)prev.size();++i2113) {
    i = prev[i2113];
    tmp = parse_slash2138();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2114.push_back(prev[i2113]); }
    for(int i2157=0;i2157<(int)tmp.size();++i2157) {
      if( tmp[i2157] != FAIL ) {
        prioritized_choice_final_prev2115.push_back(tmp[i2157]);
      }
    }
  }
  prev = next_prev2114;
  next_prev2114.clear();
  for(int i2113=0;i2113<(int)prev.size();++i2113) {
    i = prev[i2113];
    tmp = parse_slash2158();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2114.push_back(prev[i2113]); }
    for(int i2175=0;i2175<(int)tmp.size();++i2175) {
      if( tmp[i2175] != FAIL ) {
        prioritized_choice_final_prev2115.push_back(tmp[i2175]);
      }
    }
  }
  prev = next_prev2114;
  next_prev2114.clear();
  for(int i2113=0;i2113<(int)prev.size();++i2113) {
    i = prev[i2113];
    tmp = parse_slash2176();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2114.push_back(prev[i2113]); }
    for(int i2194=0;i2194<(int)tmp.size();++i2194) {
      if( tmp[i2194] != FAIL ) {
        prioritized_choice_final_prev2115.push_back(tmp[i2194]);
      }
    }
  }
  prev = next_prev2114;
  next_prev2114.clear();
  for(int i2113=0;i2113<(int)prev.size();++i2113) {
    i = prev[i2113];
    tmp = parse_slash2195();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2114.push_back(prev[i2113]); }
    for(int i2211=0;i2211<(int)tmp.size();++i2211) {
      if( tmp[i2211] != FAIL ) {
        prioritized_choice_final_prev2115.push_back(tmp[i2211]);
      }
    }
  }
  prev = next_prev2114;
  next_prev2114.clear();
  for(int i2113=0;i2113<(int)prev.size();++i2113) {
    i = prev[i2113];
    tmp = parse_slash2212();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2114.push_back(prev[i2113]); }
    for(int i2230=0;i2230<(int)tmp.size();++i2230) {
      if( tmp[i2230] != FAIL ) {
        prioritized_choice_final_prev2115.push_back(tmp[i2230]);
      }
    }
  }
  prev = next_prev2114;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev2115.empty() && prioritized_choice_final_prev2115.front() == FAIL )) {
      prioritized_choice_final_prev2115.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev2115;
  for(int i2112=0;i2112<(int)prev.size();++i2112) {
    if( prev[i2112] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2112]);
    }
  }
  return memo[key(295,backtracking_ptr_for_packrat295)] = result;
}

inline deque<int> parse_slash2116() { 
  if(memo.count(key(296,i))) {
    return memo[key(296,i)];
  }
  int backtracking_ptr_for_packrat296=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotation) */
    deque<int> next_prev2119;
    for(int i2118=0;i2118<(int)prev.size();++i2118) {
      if( prev[i2118] == FAIL ) {
        if(!(!next_prev2119.empty() && next_prev2119.front() == FAIL )) {
          next_prev2119.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2118];
      tmp = parse_Annotation();
      
      for(int i2118=0;i2118<(int)tmp.size();++i2118) {
        if( tmp[i2118] == FAIL ) {
          if(!( !next_prev2119.empty() && next_prev2119[0] == FAIL )) {
            next_prev2119.push_front(FAIL);
          }
        } else {
          next_prev2119.push_back(tmp[i2118]);
        }
      }
    }
    prev = next_prev2119;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2117=0;i2117<(int)prev.size();++i2117) {
    if( prev[i2117] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2117]);
    }
  }
  return memo[key(296,backtracking_ptr_for_packrat296)] = result;
}

inline deque<int> parse_slash2121() { 
  if(memo.count(key(297,i))) {
    return memo[key(297,i)];
  }
  int backtracking_ptr_for_packrat297=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2123=0;i2123<(int)prev.size();++i2123) {
        if( prev[i2123] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2123]<m&&I[prev[i2123]]=='p') {
          tmp.push_back(prev[i2123]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2124=0;i2124<(int)prev.size();++i2124) {
        if( prev[i2124] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2124]<m&&I[prev[i2124]]=='u') {
          tmp.push_back(prev[i2124]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2125=0;i2125<(int)prev.size();++i2125) {
        if( prev[i2125] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2125]<m&&I[prev[i2125]]=='b') {
          tmp.push_back(prev[i2125]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2126=0;i2126<(int)prev.size();++i2126) {
        if( prev[i2126] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2126]<m&&I[prev[i2126]]=='l') {
          tmp.push_back(prev[i2126]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2127=0;i2127<(int)prev.size();++i2127) {
        if( prev[i2127] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2127]<m&&I[prev[i2127]]=='i') {
          tmp.push_back(prev[i2127]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2128=0;i2128<(int)prev.size();++i2128) {
        if( prev[i2128] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2128]<m&&I[prev[i2128]]=='c') {
          tmp.push_back(prev[i2128]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2134;
      for(int i2133=0;i2133<(int)prev.size();++i2133) {
        i = prev[i2133];
        tmp = parse_not2129();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2134.push_back(prev[i2133]);
        } else {
          if(!(!next_prev2134.empty()&&next_prev2134.front()==FAIL)) {
            next_prev2134.push_front(FAIL);
          }
        }
      }
      prev = next_prev2134;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2136;
      for(int i2135=0;i2135<(int)prev.size();++i2135) {
        if( prev[i2135] == FAIL ) {
          if(!(!next_prev2136.empty() && next_prev2136.front() == FAIL )) {
            next_prev2136.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2135];
        tmp = parse__();
        
        for(int i2135=0;i2135<(int)tmp.size();++i2135) {
          if( tmp[i2135] == FAIL ) {
            if(!( !next_prev2136.empty() && next_prev2136[0] == FAIL )) {
              next_prev2136.push_front(FAIL);
            }
          } else {
            next_prev2136.push_back(tmp[i2135]);
          }
        }
      }
      prev = next_prev2136;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2122=0;i2122<(int)prev.size();++i2122) {
    if( prev[i2122] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2122]);
    }
  }
  return memo[key(297,backtracking_ptr_for_packrat297)] = result;
}

inline deque<int> parse_not2129() { 
  if(memo.count(key(298,i))) {
    return memo[key(298,i)];
  }
  int backtracking_ptr_for_packrat298=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2132;
  for(int i2131=0;i2131<(int)prev.size();++i2131) {
    if( prev[i2131] == FAIL ) {
      if(!(!next_prev2132.empty() && next_prev2132.front() == FAIL )) {
        next_prev2132.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2131];
    tmp = parse_W();
    
    for(int i2131=0;i2131<(int)tmp.size();++i2131) {
      if( tmp[i2131] == FAIL ) {
        if(!( !next_prev2132.empty() && next_prev2132[0] == FAIL )) {
          next_prev2132.push_front(FAIL);
        }
      } else {
        next_prev2132.push_back(tmp[i2131]);
      }
    }
  }
  prev = next_prev2132;
  for(int i2130=0;i2130<(int)prev.size();++i2130) {
    if( prev[i2130] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2130]);
    }
  }
  return memo[key(298,backtracking_ptr_for_packrat298)] = result;
}

inline deque<int> parse_slash2138() { 
  if(memo.count(key(299,i))) {
    return memo[key(299,i)];
  }
  int backtracking_ptr_for_packrat299=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2140=0;i2140<(int)prev.size();++i2140) {
        if( prev[i2140] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2140]<m&&I[prev[i2140]]=='p') {
          tmp.push_back(prev[i2140]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2141=0;i2141<(int)prev.size();++i2141) {
        if( prev[i2141] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2141]<m&&I[prev[i2141]]=='r') {
          tmp.push_back(prev[i2141]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2142=0;i2142<(int)prev.size();++i2142) {
        if( prev[i2142] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2142]<m&&I[prev[i2142]]=='o') {
          tmp.push_back(prev[i2142]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2143=0;i2143<(int)prev.size();++i2143) {
        if( prev[i2143] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2143]<m&&I[prev[i2143]]=='t') {
          tmp.push_back(prev[i2143]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2144=0;i2144<(int)prev.size();++i2144) {
        if( prev[i2144] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2144]<m&&I[prev[i2144]]=='e') {
          tmp.push_back(prev[i2144]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2145=0;i2145<(int)prev.size();++i2145) {
        if( prev[i2145] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2145]<m&&I[prev[i2145]]=='c') {
          tmp.push_back(prev[i2145]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2146=0;i2146<(int)prev.size();++i2146) {
        if( prev[i2146] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2146]<m&&I[prev[i2146]]=='t') {
          tmp.push_back(prev[i2146]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2147=0;i2147<(int)prev.size();++i2147) {
        if( prev[i2147] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2147]<m&&I[prev[i2147]]=='e') {
          tmp.push_back(prev[i2147]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2148=0;i2148<(int)prev.size();++i2148) {
        if( prev[i2148] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2148]<m&&I[prev[i2148]]=='d') {
          tmp.push_back(prev[i2148]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2154;
      for(int i2153=0;i2153<(int)prev.size();++i2153) {
        i = prev[i2153];
        tmp = parse_not2149();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2154.push_back(prev[i2153]);
        } else {
          if(!(!next_prev2154.empty()&&next_prev2154.front()==FAIL)) {
            next_prev2154.push_front(FAIL);
          }
        }
      }
      prev = next_prev2154;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2156;
      for(int i2155=0;i2155<(int)prev.size();++i2155) {
        if( prev[i2155] == FAIL ) {
          if(!(!next_prev2156.empty() && next_prev2156.front() == FAIL )) {
            next_prev2156.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2155];
        tmp = parse__();
        
        for(int i2155=0;i2155<(int)tmp.size();++i2155) {
          if( tmp[i2155] == FAIL ) {
            if(!( !next_prev2156.empty() && next_prev2156[0] == FAIL )) {
              next_prev2156.push_front(FAIL);
            }
          } else {
            next_prev2156.push_back(tmp[i2155]);
          }
        }
      }
      prev = next_prev2156;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2139=0;i2139<(int)prev.size();++i2139) {
    if( prev[i2139] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2139]);
    }
  }
  return memo[key(299,backtracking_ptr_for_packrat299)] = result;
}

inline deque<int> parse_not2149() { 
  if(memo.count(key(300,i))) {
    return memo[key(300,i)];
  }
  int backtracking_ptr_for_packrat300=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2152;
  for(int i2151=0;i2151<(int)prev.size();++i2151) {
    if( prev[i2151] == FAIL ) {
      if(!(!next_prev2152.empty() && next_prev2152.front() == FAIL )) {
        next_prev2152.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2151];
    tmp = parse_W();
    
    for(int i2151=0;i2151<(int)tmp.size();++i2151) {
      if( tmp[i2151] == FAIL ) {
        if(!( !next_prev2152.empty() && next_prev2152[0] == FAIL )) {
          next_prev2152.push_front(FAIL);
        }
      } else {
        next_prev2152.push_back(tmp[i2151]);
      }
    }
  }
  prev = next_prev2152;
  for(int i2150=0;i2150<(int)prev.size();++i2150) {
    if( prev[i2150] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2150]);
    }
  }
  return memo[key(300,backtracking_ptr_for_packrat300)] = result;
}

inline deque<int> parse_slash2158() { 
  if(memo.count(key(301,i))) {
    return memo[key(301,i)];
  }
  int backtracking_ptr_for_packrat301=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2160=0;i2160<(int)prev.size();++i2160) {
        if( prev[i2160] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2160]<m&&I[prev[i2160]]=='p') {
          tmp.push_back(prev[i2160]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2161=0;i2161<(int)prev.size();++i2161) {
        if( prev[i2161] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2161]<m&&I[prev[i2161]]=='r') {
          tmp.push_back(prev[i2161]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2162=0;i2162<(int)prev.size();++i2162) {
        if( prev[i2162] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2162]<m&&I[prev[i2162]]=='i') {
          tmp.push_back(prev[i2162]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2163=0;i2163<(int)prev.size();++i2163) {
        if( prev[i2163] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2163]<m&&I[prev[i2163]]=='v') {
          tmp.push_back(prev[i2163]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2164=0;i2164<(int)prev.size();++i2164) {
        if( prev[i2164] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2164]<m&&I[prev[i2164]]=='a') {
          tmp.push_back(prev[i2164]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2165=0;i2165<(int)prev.size();++i2165) {
        if( prev[i2165] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2165]<m&&I[prev[i2165]]=='t') {
          tmp.push_back(prev[i2165]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2166=0;i2166<(int)prev.size();++i2166) {
        if( prev[i2166] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2166]<m&&I[prev[i2166]]=='e') {
          tmp.push_back(prev[i2166]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2172;
      for(int i2171=0;i2171<(int)prev.size();++i2171) {
        i = prev[i2171];
        tmp = parse_not2167();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2172.push_back(prev[i2171]);
        } else {
          if(!(!next_prev2172.empty()&&next_prev2172.front()==FAIL)) {
            next_prev2172.push_front(FAIL);
          }
        }
      }
      prev = next_prev2172;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2174;
      for(int i2173=0;i2173<(int)prev.size();++i2173) {
        if( prev[i2173] == FAIL ) {
          if(!(!next_prev2174.empty() && next_prev2174.front() == FAIL )) {
            next_prev2174.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2173];
        tmp = parse__();
        
        for(int i2173=0;i2173<(int)tmp.size();++i2173) {
          if( tmp[i2173] == FAIL ) {
            if(!( !next_prev2174.empty() && next_prev2174[0] == FAIL )) {
              next_prev2174.push_front(FAIL);
            }
          } else {
            next_prev2174.push_back(tmp[i2173]);
          }
        }
      }
      prev = next_prev2174;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2159=0;i2159<(int)prev.size();++i2159) {
    if( prev[i2159] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2159]);
    }
  }
  return memo[key(301,backtracking_ptr_for_packrat301)] = result;
}

inline deque<int> parse_not2167() { 
  if(memo.count(key(302,i))) {
    return memo[key(302,i)];
  }
  int backtracking_ptr_for_packrat302=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2170;
  for(int i2169=0;i2169<(int)prev.size();++i2169) {
    if( prev[i2169] == FAIL ) {
      if(!(!next_prev2170.empty() && next_prev2170.front() == FAIL )) {
        next_prev2170.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2169];
    tmp = parse_W();
    
    for(int i2169=0;i2169<(int)tmp.size();++i2169) {
      if( tmp[i2169] == FAIL ) {
        if(!( !next_prev2170.empty() && next_prev2170[0] == FAIL )) {
          next_prev2170.push_front(FAIL);
        }
      } else {
        next_prev2170.push_back(tmp[i2169]);
      }
    }
  }
  prev = next_prev2170;
  for(int i2168=0;i2168<(int)prev.size();++i2168) {
    if( prev[i2168] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2168]);
    }
  }
  return memo[key(302,backtracking_ptr_for_packrat302)] = result;
}

inline deque<int> parse_slash2176() { 
  if(memo.count(key(303,i))) {
    return memo[key(303,i)];
  }
  int backtracking_ptr_for_packrat303=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2178=0;i2178<(int)prev.size();++i2178) {
        if( prev[i2178] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2178]<m&&I[prev[i2178]]=='a') {
          tmp.push_back(prev[i2178]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2179=0;i2179<(int)prev.size();++i2179) {
        if( prev[i2179] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2179]<m&&I[prev[i2179]]=='b') {
          tmp.push_back(prev[i2179]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2180=0;i2180<(int)prev.size();++i2180) {
        if( prev[i2180] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2180]<m&&I[prev[i2180]]=='s') {
          tmp.push_back(prev[i2180]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2181=0;i2181<(int)prev.size();++i2181) {
        if( prev[i2181] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2181]<m&&I[prev[i2181]]=='t') {
          tmp.push_back(prev[i2181]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2182=0;i2182<(int)prev.size();++i2182) {
        if( prev[i2182] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2182]<m&&I[prev[i2182]]=='r') {
          tmp.push_back(prev[i2182]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2183=0;i2183<(int)prev.size();++i2183) {
        if( prev[i2183] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2183]<m&&I[prev[i2183]]=='a') {
          tmp.push_back(prev[i2183]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2184=0;i2184<(int)prev.size();++i2184) {
        if( prev[i2184] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2184]<m&&I[prev[i2184]]=='c') {
          tmp.push_back(prev[i2184]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2185=0;i2185<(int)prev.size();++i2185) {
        if( prev[i2185] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2185]<m&&I[prev[i2185]]=='t') {
          tmp.push_back(prev[i2185]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2191;
      for(int i2190=0;i2190<(int)prev.size();++i2190) {
        i = prev[i2190];
        tmp = parse_not2186();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2191.push_back(prev[i2190]);
        } else {
          if(!(!next_prev2191.empty()&&next_prev2191.front()==FAIL)) {
            next_prev2191.push_front(FAIL);
          }
        }
      }
      prev = next_prev2191;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2193;
      for(int i2192=0;i2192<(int)prev.size();++i2192) {
        if( prev[i2192] == FAIL ) {
          if(!(!next_prev2193.empty() && next_prev2193.front() == FAIL )) {
            next_prev2193.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2192];
        tmp = parse__();
        
        for(int i2192=0;i2192<(int)tmp.size();++i2192) {
          if( tmp[i2192] == FAIL ) {
            if(!( !next_prev2193.empty() && next_prev2193[0] == FAIL )) {
              next_prev2193.push_front(FAIL);
            }
          } else {
            next_prev2193.push_back(tmp[i2192]);
          }
        }
      }
      prev = next_prev2193;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2177=0;i2177<(int)prev.size();++i2177) {
    if( prev[i2177] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2177]);
    }
  }
  return memo[key(303,backtracking_ptr_for_packrat303)] = result;
}

inline deque<int> parse_not2186() { 
  if(memo.count(key(304,i))) {
    return memo[key(304,i)];
  }
  int backtracking_ptr_for_packrat304=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2189;
  for(int i2188=0;i2188<(int)prev.size();++i2188) {
    if( prev[i2188] == FAIL ) {
      if(!(!next_prev2189.empty() && next_prev2189.front() == FAIL )) {
        next_prev2189.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2188];
    tmp = parse_W();
    
    for(int i2188=0;i2188<(int)tmp.size();++i2188) {
      if( tmp[i2188] == FAIL ) {
        if(!( !next_prev2189.empty() && next_prev2189[0] == FAIL )) {
          next_prev2189.push_front(FAIL);
        }
      } else {
        next_prev2189.push_back(tmp[i2188]);
      }
    }
  }
  prev = next_prev2189;
  for(int i2187=0;i2187<(int)prev.size();++i2187) {
    if( prev[i2187] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2187]);
    }
  }
  return memo[key(304,backtracking_ptr_for_packrat304)] = result;
}

inline deque<int> parse_slash2195() { 
  if(memo.count(key(305,i))) {
    return memo[key(305,i)];
  }
  int backtracking_ptr_for_packrat305=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2197=0;i2197<(int)prev.size();++i2197) {
        if( prev[i2197] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2197]<m&&I[prev[i2197]]=='s') {
          tmp.push_back(prev[i2197]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2198=0;i2198<(int)prev.size();++i2198) {
        if( prev[i2198] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2198]<m&&I[prev[i2198]]=='t') {
          tmp.push_back(prev[i2198]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2199=0;i2199<(int)prev.size();++i2199) {
        if( prev[i2199] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2199]<m&&I[prev[i2199]]=='a') {
          tmp.push_back(prev[i2199]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2200=0;i2200<(int)prev.size();++i2200) {
        if( prev[i2200] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2200]<m&&I[prev[i2200]]=='t') {
          tmp.push_back(prev[i2200]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2201=0;i2201<(int)prev.size();++i2201) {
        if( prev[i2201] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2201]<m&&I[prev[i2201]]=='i') {
          tmp.push_back(prev[i2201]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2202=0;i2202<(int)prev.size();++i2202) {
        if( prev[i2202] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2202]<m&&I[prev[i2202]]=='c') {
          tmp.push_back(prev[i2202]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2208;
      for(int i2207=0;i2207<(int)prev.size();++i2207) {
        i = prev[i2207];
        tmp = parse_not2203();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2208.push_back(prev[i2207]);
        } else {
          if(!(!next_prev2208.empty()&&next_prev2208.front()==FAIL)) {
            next_prev2208.push_front(FAIL);
          }
        }
      }
      prev = next_prev2208;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2210;
      for(int i2209=0;i2209<(int)prev.size();++i2209) {
        if( prev[i2209] == FAIL ) {
          if(!(!next_prev2210.empty() && next_prev2210.front() == FAIL )) {
            next_prev2210.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2209];
        tmp = parse__();
        
        for(int i2209=0;i2209<(int)tmp.size();++i2209) {
          if( tmp[i2209] == FAIL ) {
            if(!( !next_prev2210.empty() && next_prev2210[0] == FAIL )) {
              next_prev2210.push_front(FAIL);
            }
          } else {
            next_prev2210.push_back(tmp[i2209]);
          }
        }
      }
      prev = next_prev2210;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2196=0;i2196<(int)prev.size();++i2196) {
    if( prev[i2196] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2196]);
    }
  }
  return memo[key(305,backtracking_ptr_for_packrat305)] = result;
}

inline deque<int> parse_not2203() { 
  if(memo.count(key(306,i))) {
    return memo[key(306,i)];
  }
  int backtracking_ptr_for_packrat306=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2206;
  for(int i2205=0;i2205<(int)prev.size();++i2205) {
    if( prev[i2205] == FAIL ) {
      if(!(!next_prev2206.empty() && next_prev2206.front() == FAIL )) {
        next_prev2206.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2205];
    tmp = parse_W();
    
    for(int i2205=0;i2205<(int)tmp.size();++i2205) {
      if( tmp[i2205] == FAIL ) {
        if(!( !next_prev2206.empty() && next_prev2206[0] == FAIL )) {
          next_prev2206.push_front(FAIL);
        }
      } else {
        next_prev2206.push_back(tmp[i2205]);
      }
    }
  }
  prev = next_prev2206;
  for(int i2204=0;i2204<(int)prev.size();++i2204) {
    if( prev[i2204] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2204]);
    }
  }
  return memo[key(306,backtracking_ptr_for_packrat306)] = result;
}

inline deque<int> parse_slash2212() { 
  if(memo.count(key(307,i))) {
    return memo[key(307,i)];
  }
  int backtracking_ptr_for_packrat307=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2214=0;i2214<(int)prev.size();++i2214) {
        if( prev[i2214] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2214]<m&&I[prev[i2214]]=='s') {
          tmp.push_back(prev[i2214]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2215=0;i2215<(int)prev.size();++i2215) {
        if( prev[i2215] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2215]<m&&I[prev[i2215]]=='t') {
          tmp.push_back(prev[i2215]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2216=0;i2216<(int)prev.size();++i2216) {
        if( prev[i2216] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2216]<m&&I[prev[i2216]]=='r') {
          tmp.push_back(prev[i2216]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2217=0;i2217<(int)prev.size();++i2217) {
        if( prev[i2217] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2217]<m&&I[prev[i2217]]=='i') {
          tmp.push_back(prev[i2217]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2218=0;i2218<(int)prev.size();++i2218) {
        if( prev[i2218] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2218]<m&&I[prev[i2218]]=='c') {
          tmp.push_back(prev[i2218]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2219=0;i2219<(int)prev.size();++i2219) {
        if( prev[i2219] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2219]<m&&I[prev[i2219]]=='t') {
          tmp.push_back(prev[i2219]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2220=0;i2220<(int)prev.size();++i2220) {
        if( prev[i2220] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2220]<m&&I[prev[i2220]]=='f') {
          tmp.push_back(prev[i2220]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2221=0;i2221<(int)prev.size();++i2221) {
        if( prev[i2221] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2221]<m&&I[prev[i2221]]=='p') {
          tmp.push_back(prev[i2221]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2227;
      for(int i2226=0;i2226<(int)prev.size();++i2226) {
        i = prev[i2226];
        tmp = parse_not2222();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2227.push_back(prev[i2226]);
        } else {
          if(!(!next_prev2227.empty()&&next_prev2227.front()==FAIL)) {
            next_prev2227.push_front(FAIL);
          }
        }
      }
      prev = next_prev2227;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2229;
      for(int i2228=0;i2228<(int)prev.size();++i2228) {
        if( prev[i2228] == FAIL ) {
          if(!(!next_prev2229.empty() && next_prev2229.front() == FAIL )) {
            next_prev2229.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2228];
        tmp = parse__();
        
        for(int i2228=0;i2228<(int)tmp.size();++i2228) {
          if( tmp[i2228] == FAIL ) {
            if(!( !next_prev2229.empty() && next_prev2229[0] == FAIL )) {
              next_prev2229.push_front(FAIL);
            }
          } else {
            next_prev2229.push_back(tmp[i2228]);
          }
        }
      }
      prev = next_prev2229;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2213=0;i2213<(int)prev.size();++i2213) {
    if( prev[i2213] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2213]);
    }
  }
  return memo[key(307,backtracking_ptr_for_packrat307)] = result;
}

inline deque<int> parse_not2222() { 
  if(memo.count(key(308,i))) {
    return memo[key(308,i)];
  }
  int backtracking_ptr_for_packrat308=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2225;
  for(int i2224=0;i2224<(int)prev.size();++i2224) {
    if( prev[i2224] == FAIL ) {
      if(!(!next_prev2225.empty() && next_prev2225.front() == FAIL )) {
        next_prev2225.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2224];
    tmp = parse_W();
    
    for(int i2224=0;i2224<(int)tmp.size();++i2224) {
      if( tmp[i2224] == FAIL ) {
        if(!( !next_prev2225.empty() && next_prev2225[0] == FAIL )) {
          next_prev2225.push_front(FAIL);
        }
      } else {
        next_prev2225.push_back(tmp[i2224]);
      }
    }
  }
  prev = next_prev2225;
  for(int i2223=0;i2223<(int)prev.size();++i2223) {
    if( prev[i2223] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2223]);
    }
  }
  return memo[key(308,backtracking_ptr_for_packrat308)] = result;
}

deque<int> parse_InterfaceModifiers(){
  if(memo.count(key(309,i))) {
    return memo[key(309,i)];
  }
  int backtracking_ptr_for_packrat309=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (InterfaceModifier) */
    deque<int> next_prev2233;
    for(int i2232=0;i2232<(int)prev.size();++i2232) {
      if( prev[i2232] == FAIL ) {
        if(!(!next_prev2233.empty() && next_prev2233.front() == FAIL )) {
          next_prev2233.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2232];
      tmp = parse_InterfaceModifier();
      
      for(int i2232=0;i2232<(int)tmp.size();++i2232) {
        if( tmp[i2232] == FAIL ) {
          if(!( !next_prev2233.empty() && next_prev2233[0] == FAIL )) {
            next_prev2233.push_front(FAIL);
          }
        } else {
          next_prev2233.push_back(tmp[i2232]);
        }
      }
    }
    prev = next_prev2233;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev2238;
    deque<int> star_final_prev2239;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev2238.clear();
      for(int i2240=0;i2240<(int)prev.size();++i2240) {
        i = prev[i2240];
        tmp = parse_while2234();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev2239.push_back(prev[i2240]);
        }
        for(int i2241=0;i2241<(int)tmp.size();++i2241) {
          if(tmp[i2241]==FAIL) {
            if(!( !next_prev2238.empty() && next_prev2238.front() == FAIL )) {
              next_prev2238.push_front(FAIL);
            }
          } else {
            next_prev2238.push_back(tmp[i2241]);
          }
        }
      }
      prev = next_prev2238;
    }
    prev = star_final_prev2239;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2231=0;i2231<(int)prev.size();++i2231) {
    if( prev[i2231] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2231]);
    }
  }
  return memo[key(309,backtracking_ptr_for_packrat309)] = result;
}

inline deque<int> parse_while2234() { 
  if(memo.count(key(310,i))) {
    return memo[key(310,i)];
  }
  int backtracking_ptr_for_packrat310=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (InterfaceModifier) */
    deque<int> next_prev2237;
    for(int i2236=0;i2236<(int)prev.size();++i2236) {
      if( prev[i2236] == FAIL ) {
        if(!(!next_prev2237.empty() && next_prev2237.front() == FAIL )) {
          next_prev2237.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2236];
      tmp = parse_InterfaceModifier();
      
      for(int i2236=0;i2236<(int)tmp.size();++i2236) {
        if( tmp[i2236] == FAIL ) {
          if(!( !next_prev2237.empty() && next_prev2237[0] == FAIL )) {
            next_prev2237.push_front(FAIL);
          }
        } else {
          next_prev2237.push_back(tmp[i2236]);
        }
      }
    }
    prev = next_prev2237;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2235=0;i2235<(int)prev.size();++i2235) {
    if( prev[i2235] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2235]);
    }
  }
  return memo[key(310,backtracking_ptr_for_packrat310)] = result;
}

deque<int> parse_ExtendsInterfaces(){
  if(memo.count(key(311,i))) {
    return memo[key(311,i)];
  }
  int backtracking_ptr_for_packrat311=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2243=0;i2243<(int)prev.size();++i2243) {
        if( prev[i2243] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2243]<m&&I[prev[i2243]]=='e') {
          tmp.push_back(prev[i2243]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2244=0;i2244<(int)prev.size();++i2244) {
        if( prev[i2244] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2244]<m&&I[prev[i2244]]=='x') {
          tmp.push_back(prev[i2244]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2245=0;i2245<(int)prev.size();++i2245) {
        if( prev[i2245] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2245]<m&&I[prev[i2245]]=='t') {
          tmp.push_back(prev[i2245]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2246=0;i2246<(int)prev.size();++i2246) {
        if( prev[i2246] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2246]<m&&I[prev[i2246]]=='e') {
          tmp.push_back(prev[i2246]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2247=0;i2247<(int)prev.size();++i2247) {
        if( prev[i2247] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2247]<m&&I[prev[i2247]]=='n') {
          tmp.push_back(prev[i2247]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2248=0;i2248<(int)prev.size();++i2248) {
        if( prev[i2248] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2248]<m&&I[prev[i2248]]=='d') {
          tmp.push_back(prev[i2248]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2249=0;i2249<(int)prev.size();++i2249) {
        if( prev[i2249] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2249]<m&&I[prev[i2249]]=='s') {
          tmp.push_back(prev[i2249]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2255;
      for(int i2254=0;i2254<(int)prev.size();++i2254) {
        i = prev[i2254];
        tmp = parse_not2250();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2255.push_back(prev[i2254]);
        } else {
          if(!(!next_prev2255.empty()&&next_prev2255.front()==FAIL)) {
            next_prev2255.push_front(FAIL);
          }
        }
      }
      prev = next_prev2255;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2257;
      for(int i2256=0;i2256<(int)prev.size();++i2256) {
        if( prev[i2256] == FAIL ) {
          if(!(!next_prev2257.empty() && next_prev2257.front() == FAIL )) {
            next_prev2257.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2256];
        tmp = parse__();
        
        for(int i2256=0;i2256<(int)tmp.size();++i2256) {
          if( tmp[i2256] == FAIL ) {
            if(!( !next_prev2257.empty() && next_prev2257[0] == FAIL )) {
              next_prev2257.push_front(FAIL);
            }
          } else {
            next_prev2257.push_back(tmp[i2256]);
          }
        }
      }
      prev = next_prev2257;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassOrInterfaceTypes) */
    deque<int> next_prev2259;
    for(int i2258=0;i2258<(int)prev.size();++i2258) {
      if( prev[i2258] == FAIL ) {
        if(!(!next_prev2259.empty() && next_prev2259.front() == FAIL )) {
          next_prev2259.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2258];
      tmp = parse_ClassOrInterfaceTypes();
      
      for(int i2258=0;i2258<(int)tmp.size();++i2258) {
        if( tmp[i2258] == FAIL ) {
          if(!( !next_prev2259.empty() && next_prev2259[0] == FAIL )) {
            next_prev2259.push_front(FAIL);
          }
        } else {
          next_prev2259.push_back(tmp[i2258]);
        }
      }
    }
    prev = next_prev2259;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2242=0;i2242<(int)prev.size();++i2242) {
    if( prev[i2242] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2242]);
    }
  }
  return memo[key(311,backtracking_ptr_for_packrat311)] = result;
}

inline deque<int> parse_not2250() { 
  if(memo.count(key(312,i))) {
    return memo[key(312,i)];
  }
  int backtracking_ptr_for_packrat312=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2253;
  for(int i2252=0;i2252<(int)prev.size();++i2252) {
    if( prev[i2252] == FAIL ) {
      if(!(!next_prev2253.empty() && next_prev2253.front() == FAIL )) {
        next_prev2253.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2252];
    tmp = parse_W();
    
    for(int i2252=0;i2252<(int)tmp.size();++i2252) {
      if( tmp[i2252] == FAIL ) {
        if(!( !next_prev2253.empty() && next_prev2253[0] == FAIL )) {
          next_prev2253.push_front(FAIL);
        }
      } else {
        next_prev2253.push_back(tmp[i2252]);
      }
    }
  }
  prev = next_prev2253;
  for(int i2251=0;i2251<(int)prev.size();++i2251) {
    if( prev[i2251] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2251]);
    }
  }
  return memo[key(312,backtracking_ptr_for_packrat312)] = result;
}

deque<int> parse_InterfaceBody(){
  if(memo.count(key(313,i))) {
    return memo[key(313,i)];
  }
  int backtracking_ptr_for_packrat313=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2261=0;i2261<(int)prev.size();++i2261) {
        if( prev[i2261] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2261]<m&&I[prev[i2261]]=='{') {
          tmp.push_back(prev[i2261]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2263;
      for(int i2262=0;i2262<(int)prev.size();++i2262) {
        if( prev[i2262] == FAIL ) {
          if(!(!next_prev2263.empty() && next_prev2263.front() == FAIL )) {
            next_prev2263.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2262];
        tmp = parse__();
        
        for(int i2262=0;i2262<(int)tmp.size();++i2262) {
          if( tmp[i2262] == FAIL ) {
            if(!( !next_prev2263.empty() && next_prev2263[0] == FAIL )) {
              next_prev2263.push_front(FAIL);
            }
          } else {
            next_prev2263.push_back(tmp[i2262]);
          }
        }
      }
      prev = next_prev2263;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev2268;
    deque<int> star_final_prev2269;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev2268.clear();
      for(int i2270=0;i2270<(int)prev.size();++i2270) {
        i = prev[i2270];
        tmp = parse_while2264();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev2269.push_back(prev[i2270]);
        }
        for(int i2271=0;i2271<(int)tmp.size();++i2271) {
          if(tmp[i2271]==FAIL) {
            if(!( !next_prev2268.empty() && next_prev2268.front() == FAIL )) {
              next_prev2268.push_front(FAIL);
            }
          } else {
            next_prev2268.push_back(tmp[i2271]);
          }
        }
      }
      prev = next_prev2268;
    }
    prev = star_final_prev2269;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2272=0;i2272<(int)prev.size();++i2272) {
        if( prev[i2272] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2272]<m&&I[prev[i2272]]=='}') {
          tmp.push_back(prev[i2272]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2274;
      for(int i2273=0;i2273<(int)prev.size();++i2273) {
        if( prev[i2273] == FAIL ) {
          if(!(!next_prev2274.empty() && next_prev2274.front() == FAIL )) {
            next_prev2274.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2273];
        tmp = parse__();
        
        for(int i2273=0;i2273<(int)tmp.size();++i2273) {
          if( tmp[i2273] == FAIL ) {
            if(!( !next_prev2274.empty() && next_prev2274[0] == FAIL )) {
              next_prev2274.push_front(FAIL);
            }
          } else {
            next_prev2274.push_back(tmp[i2273]);
          }
        }
      }
      prev = next_prev2274;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2260=0;i2260<(int)prev.size();++i2260) {
    if( prev[i2260] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2260]);
    }
  }
  return memo[key(313,backtracking_ptr_for_packrat313)] = result;
}

inline deque<int> parse_while2264() { 
  if(memo.count(key(314,i))) {
    return memo[key(314,i)];
  }
  int backtracking_ptr_for_packrat314=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (InterfaceMemberDeclaration) */
    deque<int> next_prev2267;
    for(int i2266=0;i2266<(int)prev.size();++i2266) {
      if( prev[i2266] == FAIL ) {
        if(!(!next_prev2267.empty() && next_prev2267.front() == FAIL )) {
          next_prev2267.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2266];
      tmp = parse_InterfaceMemberDeclaration();
      
      for(int i2266=0;i2266<(int)tmp.size();++i2266) {
        if( tmp[i2266] == FAIL ) {
          if(!( !next_prev2267.empty() && next_prev2267[0] == FAIL )) {
            next_prev2267.push_front(FAIL);
          }
        } else {
          next_prev2267.push_back(tmp[i2266]);
        }
      }
    }
    prev = next_prev2267;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2265=0;i2265<(int)prev.size();++i2265) {
    if( prev[i2265] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2265]);
    }
  }
  return memo[key(314,backtracking_ptr_for_packrat314)] = result;
}

deque<int> parse_InterfaceMemberDeclaration(){
  if(memo.count(key(315,i))) {
    return memo[key(315,i)];
  }
  int backtracking_ptr_for_packrat315=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev2277;
  deque<int> prioritized_choice_final_prev2278;
  next_prev2277.clear();
  for(int i2276=0;i2276<(int)prev.size();++i2276) {
    i = prev[i2276];
    tmp = parse_slash2279();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2277.push_back(prev[i2276]); }
    for(int i2283=0;i2283<(int)tmp.size();++i2283) {
      if( tmp[i2283] != FAIL ) {
        prioritized_choice_final_prev2278.push_back(tmp[i2283]);
      }
    }
  }
  prev = next_prev2277;
  next_prev2277.clear();
  for(int i2276=0;i2276<(int)prev.size();++i2276) {
    i = prev[i2276];
    tmp = parse_slash2284();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2277.push_back(prev[i2276]); }
    for(int i2288=0;i2288<(int)tmp.size();++i2288) {
      if( tmp[i2288] != FAIL ) {
        prioritized_choice_final_prev2278.push_back(tmp[i2288]);
      }
    }
  }
  prev = next_prev2277;
  next_prev2277.clear();
  for(int i2276=0;i2276<(int)prev.size();++i2276) {
    i = prev[i2276];
    tmp = parse_slash2289();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2277.push_back(prev[i2276]); }
    for(int i2293=0;i2293<(int)tmp.size();++i2293) {
      if( tmp[i2293] != FAIL ) {
        prioritized_choice_final_prev2278.push_back(tmp[i2293]);
      }
    }
  }
  prev = next_prev2277;
  next_prev2277.clear();
  for(int i2276=0;i2276<(int)prev.size();++i2276) {
    i = prev[i2276];
    tmp = parse_slash2294();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2277.push_back(prev[i2276]); }
    for(int i2298=0;i2298<(int)tmp.size();++i2298) {
      if( tmp[i2298] != FAIL ) {
        prioritized_choice_final_prev2278.push_back(tmp[i2298]);
      }
    }
  }
  prev = next_prev2277;
  next_prev2277.clear();
  for(int i2276=0;i2276<(int)prev.size();++i2276) {
    i = prev[i2276];
    tmp = parse_slash2299();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2277.push_back(prev[i2276]); }
    for(int i2304=0;i2304<(int)tmp.size();++i2304) {
      if( tmp[i2304] != FAIL ) {
        prioritized_choice_final_prev2278.push_back(tmp[i2304]);
      }
    }
  }
  prev = next_prev2277;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev2278.empty() && prioritized_choice_final_prev2278.front() == FAIL )) {
      prioritized_choice_final_prev2278.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev2278;
  for(int i2275=0;i2275<(int)prev.size();++i2275) {
    if( prev[i2275] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2275]);
    }
  }
  return memo[key(315,backtracking_ptr_for_packrat315)] = result;
}

inline deque<int> parse_slash2279() { 
  if(memo.count(key(316,i))) {
    return memo[key(316,i)];
  }
  int backtracking_ptr_for_packrat316=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ConstantDeclaration) */
    deque<int> next_prev2282;
    for(int i2281=0;i2281<(int)prev.size();++i2281) {
      if( prev[i2281] == FAIL ) {
        if(!(!next_prev2282.empty() && next_prev2282.front() == FAIL )) {
          next_prev2282.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2281];
      tmp = parse_ConstantDeclaration();
      
      for(int i2281=0;i2281<(int)tmp.size();++i2281) {
        if( tmp[i2281] == FAIL ) {
          if(!( !next_prev2282.empty() && next_prev2282[0] == FAIL )) {
            next_prev2282.push_front(FAIL);
          }
        } else {
          next_prev2282.push_back(tmp[i2281]);
        }
      }
    }
    prev = next_prev2282;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2280=0;i2280<(int)prev.size();++i2280) {
    if( prev[i2280] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2280]);
    }
  }
  return memo[key(316,backtracking_ptr_for_packrat316)] = result;
}

inline deque<int> parse_slash2284() { 
  if(memo.count(key(317,i))) {
    return memo[key(317,i)];
  }
  int backtracking_ptr_for_packrat317=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (InterfaceMethodDeclaration) */
    deque<int> next_prev2287;
    for(int i2286=0;i2286<(int)prev.size();++i2286) {
      if( prev[i2286] == FAIL ) {
        if(!(!next_prev2287.empty() && next_prev2287.front() == FAIL )) {
          next_prev2287.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2286];
      tmp = parse_InterfaceMethodDeclaration();
      
      for(int i2286=0;i2286<(int)tmp.size();++i2286) {
        if( tmp[i2286] == FAIL ) {
          if(!( !next_prev2287.empty() && next_prev2287[0] == FAIL )) {
            next_prev2287.push_front(FAIL);
          }
        } else {
          next_prev2287.push_back(tmp[i2286]);
        }
      }
    }
    prev = next_prev2287;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2285=0;i2285<(int)prev.size();++i2285) {
    if( prev[i2285] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2285]);
    }
  }
  return memo[key(317,backtracking_ptr_for_packrat317)] = result;
}

inline deque<int> parse_slash2289() { 
  if(memo.count(key(318,i))) {
    return memo[key(318,i)];
  }
  int backtracking_ptr_for_packrat318=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassDeclaration) */
    deque<int> next_prev2292;
    for(int i2291=0;i2291<(int)prev.size();++i2291) {
      if( prev[i2291] == FAIL ) {
        if(!(!next_prev2292.empty() && next_prev2292.front() == FAIL )) {
          next_prev2292.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2291];
      tmp = parse_ClassDeclaration();
      
      for(int i2291=0;i2291<(int)tmp.size();++i2291) {
        if( tmp[i2291] == FAIL ) {
          if(!( !next_prev2292.empty() && next_prev2292[0] == FAIL )) {
            next_prev2292.push_front(FAIL);
          }
        } else {
          next_prev2292.push_back(tmp[i2291]);
        }
      }
    }
    prev = next_prev2292;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2290=0;i2290<(int)prev.size();++i2290) {
    if( prev[i2290] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2290]);
    }
  }
  return memo[key(318,backtracking_ptr_for_packrat318)] = result;
}

inline deque<int> parse_slash2294() { 
  if(memo.count(key(319,i))) {
    return memo[key(319,i)];
  }
  int backtracking_ptr_for_packrat319=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (InterfaceDeclaration) */
    deque<int> next_prev2297;
    for(int i2296=0;i2296<(int)prev.size();++i2296) {
      if( prev[i2296] == FAIL ) {
        if(!(!next_prev2297.empty() && next_prev2297.front() == FAIL )) {
          next_prev2297.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2296];
      tmp = parse_InterfaceDeclaration();
      
      for(int i2296=0;i2296<(int)tmp.size();++i2296) {
        if( tmp[i2296] == FAIL ) {
          if(!( !next_prev2297.empty() && next_prev2297[0] == FAIL )) {
            next_prev2297.push_front(FAIL);
          }
        } else {
          next_prev2297.push_back(tmp[i2296]);
        }
      }
    }
    prev = next_prev2297;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2295=0;i2295<(int)prev.size();++i2295) {
    if( prev[i2295] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2295]);
    }
  }
  return memo[key(319,backtracking_ptr_for_packrat319)] = result;
}

inline deque<int> parse_slash2299() { 
  if(memo.count(key(320,i))) {
    return memo[key(320,i)];
  }
  int backtracking_ptr_for_packrat320=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2301=0;i2301<(int)prev.size();++i2301) {
        if( prev[i2301] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2301]<m&&I[prev[i2301]]==';') {
          tmp.push_back(prev[i2301]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2303;
      for(int i2302=0;i2302<(int)prev.size();++i2302) {
        if( prev[i2302] == FAIL ) {
          if(!(!next_prev2303.empty() && next_prev2303.front() == FAIL )) {
            next_prev2303.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2302];
        tmp = parse__();
        
        for(int i2302=0;i2302<(int)tmp.size();++i2302) {
          if( tmp[i2302] == FAIL ) {
            if(!( !next_prev2303.empty() && next_prev2303[0] == FAIL )) {
              next_prev2303.push_front(FAIL);
            }
          } else {
            next_prev2303.push_back(tmp[i2302]);
          }
        }
      }
      prev = next_prev2303;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2300=0;i2300<(int)prev.size();++i2300) {
    if( prev[i2300] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2300]);
    }
  }
  return memo[key(320,backtracking_ptr_for_packrat320)] = result;
}

deque<int> parse_AnnotationTypeBody(){
  if(memo.count(key(321,i))) {
    return memo[key(321,i)];
  }
  int backtracking_ptr_for_packrat321=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2306=0;i2306<(int)prev.size();++i2306) {
        if( prev[i2306] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2306]<m&&I[prev[i2306]]=='{') {
          tmp.push_back(prev[i2306]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2308;
      for(int i2307=0;i2307<(int)prev.size();++i2307) {
        if( prev[i2307] == FAIL ) {
          if(!(!next_prev2308.empty() && next_prev2308.front() == FAIL )) {
            next_prev2308.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2307];
        tmp = parse__();
        
        for(int i2307=0;i2307<(int)tmp.size();++i2307) {
          if( tmp[i2307] == FAIL ) {
            if(!( !next_prev2308.empty() && next_prev2308[0] == FAIL )) {
              next_prev2308.push_front(FAIL);
            }
          } else {
            next_prev2308.push_back(tmp[i2307]);
          }
        }
      }
      prev = next_prev2308;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev2313;
    deque<int> star_final_prev2314;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev2313.clear();
      for(int i2315=0;i2315<(int)prev.size();++i2315) {
        i = prev[i2315];
        tmp = parse_while2309();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev2314.push_back(prev[i2315]);
        }
        for(int i2316=0;i2316<(int)tmp.size();++i2316) {
          if(tmp[i2316]==FAIL) {
            if(!( !next_prev2313.empty() && next_prev2313.front() == FAIL )) {
              next_prev2313.push_front(FAIL);
            }
          } else {
            next_prev2313.push_back(tmp[i2316]);
          }
        }
      }
      prev = next_prev2313;
    }
    prev = star_final_prev2314;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2317=0;i2317<(int)prev.size();++i2317) {
        if( prev[i2317] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2317]<m&&I[prev[i2317]]=='}') {
          tmp.push_back(prev[i2317]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2319;
      for(int i2318=0;i2318<(int)prev.size();++i2318) {
        if( prev[i2318] == FAIL ) {
          if(!(!next_prev2319.empty() && next_prev2319.front() == FAIL )) {
            next_prev2319.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2318];
        tmp = parse__();
        
        for(int i2318=0;i2318<(int)tmp.size();++i2318) {
          if( tmp[i2318] == FAIL ) {
            if(!( !next_prev2319.empty() && next_prev2319[0] == FAIL )) {
              next_prev2319.push_front(FAIL);
            }
          } else {
            next_prev2319.push_back(tmp[i2318]);
          }
        }
      }
      prev = next_prev2319;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2305=0;i2305<(int)prev.size();++i2305) {
    if( prev[i2305] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2305]);
    }
  }
  return memo[key(321,backtracking_ptr_for_packrat321)] = result;
}

inline deque<int> parse_while2309() { 
  if(memo.count(key(322,i))) {
    return memo[key(322,i)];
  }
  int backtracking_ptr_for_packrat322=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (AnnotationTypeMemberDeclaration) */
    deque<int> next_prev2312;
    for(int i2311=0;i2311<(int)prev.size();++i2311) {
      if( prev[i2311] == FAIL ) {
        if(!(!next_prev2312.empty() && next_prev2312.front() == FAIL )) {
          next_prev2312.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2311];
      tmp = parse_AnnotationTypeMemberDeclaration();
      
      for(int i2311=0;i2311<(int)tmp.size();++i2311) {
        if( tmp[i2311] == FAIL ) {
          if(!( !next_prev2312.empty() && next_prev2312[0] == FAIL )) {
            next_prev2312.push_front(FAIL);
          }
        } else {
          next_prev2312.push_back(tmp[i2311]);
        }
      }
    }
    prev = next_prev2312;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2310=0;i2310<(int)prev.size();++i2310) {
    if( prev[i2310] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2310]);
    }
  }
  return memo[key(322,backtracking_ptr_for_packrat322)] = result;
}

deque<int> parse_AnnotationTypeMemberDeclaration(){
  if(memo.count(key(323,i))) {
    return memo[key(323,i)];
  }
  int backtracking_ptr_for_packrat323=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev2322;
  deque<int> prioritized_choice_final_prev2323;
  next_prev2322.clear();
  for(int i2321=0;i2321<(int)prev.size();++i2321) {
    i = prev[i2321];
    tmp = parse_slash2324();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2322.push_back(prev[i2321]); }
    for(int i2328=0;i2328<(int)tmp.size();++i2328) {
      if( tmp[i2328] != FAIL ) {
        prioritized_choice_final_prev2323.push_back(tmp[i2328]);
      }
    }
  }
  prev = next_prev2322;
  next_prev2322.clear();
  for(int i2321=0;i2321<(int)prev.size();++i2321) {
    i = prev[i2321];
    tmp = parse_slash2329();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2322.push_back(prev[i2321]); }
    for(int i2333=0;i2333<(int)tmp.size();++i2333) {
      if( tmp[i2333] != FAIL ) {
        prioritized_choice_final_prev2323.push_back(tmp[i2333]);
      }
    }
  }
  prev = next_prev2322;
  next_prev2322.clear();
  for(int i2321=0;i2321<(int)prev.size();++i2321) {
    i = prev[i2321];
    tmp = parse_slash2334();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2322.push_back(prev[i2321]); }
    for(int i2338=0;i2338<(int)tmp.size();++i2338) {
      if( tmp[i2338] != FAIL ) {
        prioritized_choice_final_prev2323.push_back(tmp[i2338]);
      }
    }
  }
  prev = next_prev2322;
  next_prev2322.clear();
  for(int i2321=0;i2321<(int)prev.size();++i2321) {
    i = prev[i2321];
    tmp = parse_slash2339();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2322.push_back(prev[i2321]); }
    for(int i2343=0;i2343<(int)tmp.size();++i2343) {
      if( tmp[i2343] != FAIL ) {
        prioritized_choice_final_prev2323.push_back(tmp[i2343]);
      }
    }
  }
  prev = next_prev2322;
  next_prev2322.clear();
  for(int i2321=0;i2321<(int)prev.size();++i2321) {
    i = prev[i2321];
    tmp = parse_slash2344();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2322.push_back(prev[i2321]); }
    for(int i2349=0;i2349<(int)tmp.size();++i2349) {
      if( tmp[i2349] != FAIL ) {
        prioritized_choice_final_prev2323.push_back(tmp[i2349]);
      }
    }
  }
  prev = next_prev2322;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev2323.empty() && prioritized_choice_final_prev2323.front() == FAIL )) {
      prioritized_choice_final_prev2323.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev2323;
  for(int i2320=0;i2320<(int)prev.size();++i2320) {
    if( prev[i2320] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2320]);
    }
  }
  return memo[key(323,backtracking_ptr_for_packrat323)] = result;
}

inline deque<int> parse_slash2324() { 
  if(memo.count(key(324,i))) {
    return memo[key(324,i)];
  }
  int backtracking_ptr_for_packrat324=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (AnnotationTypeElementDeclaration) */
    deque<int> next_prev2327;
    for(int i2326=0;i2326<(int)prev.size();++i2326) {
      if( prev[i2326] == FAIL ) {
        if(!(!next_prev2327.empty() && next_prev2327.front() == FAIL )) {
          next_prev2327.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2326];
      tmp = parse_AnnotationTypeElementDeclaration();
      
      for(int i2326=0;i2326<(int)tmp.size();++i2326) {
        if( tmp[i2326] == FAIL ) {
          if(!( !next_prev2327.empty() && next_prev2327[0] == FAIL )) {
            next_prev2327.push_front(FAIL);
          }
        } else {
          next_prev2327.push_back(tmp[i2326]);
        }
      }
    }
    prev = next_prev2327;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2325=0;i2325<(int)prev.size();++i2325) {
    if( prev[i2325] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2325]);
    }
  }
  return memo[key(324,backtracking_ptr_for_packrat324)] = result;
}

inline deque<int> parse_slash2329() { 
  if(memo.count(key(325,i))) {
    return memo[key(325,i)];
  }
  int backtracking_ptr_for_packrat325=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ConstantDeclaration) */
    deque<int> next_prev2332;
    for(int i2331=0;i2331<(int)prev.size();++i2331) {
      if( prev[i2331] == FAIL ) {
        if(!(!next_prev2332.empty() && next_prev2332.front() == FAIL )) {
          next_prev2332.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2331];
      tmp = parse_ConstantDeclaration();
      
      for(int i2331=0;i2331<(int)tmp.size();++i2331) {
        if( tmp[i2331] == FAIL ) {
          if(!( !next_prev2332.empty() && next_prev2332[0] == FAIL )) {
            next_prev2332.push_front(FAIL);
          }
        } else {
          next_prev2332.push_back(tmp[i2331]);
        }
      }
    }
    prev = next_prev2332;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2330=0;i2330<(int)prev.size();++i2330) {
    if( prev[i2330] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2330]);
    }
  }
  return memo[key(325,backtracking_ptr_for_packrat325)] = result;
}

inline deque<int> parse_slash2334() { 
  if(memo.count(key(326,i))) {
    return memo[key(326,i)];
  }
  int backtracking_ptr_for_packrat326=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassDeclaration) */
    deque<int> next_prev2337;
    for(int i2336=0;i2336<(int)prev.size();++i2336) {
      if( prev[i2336] == FAIL ) {
        if(!(!next_prev2337.empty() && next_prev2337.front() == FAIL )) {
          next_prev2337.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2336];
      tmp = parse_ClassDeclaration();
      
      for(int i2336=0;i2336<(int)tmp.size();++i2336) {
        if( tmp[i2336] == FAIL ) {
          if(!( !next_prev2337.empty() && next_prev2337[0] == FAIL )) {
            next_prev2337.push_front(FAIL);
          }
        } else {
          next_prev2337.push_back(tmp[i2336]);
        }
      }
    }
    prev = next_prev2337;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2335=0;i2335<(int)prev.size();++i2335) {
    if( prev[i2335] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2335]);
    }
  }
  return memo[key(326,backtracking_ptr_for_packrat326)] = result;
}

inline deque<int> parse_slash2339() { 
  if(memo.count(key(327,i))) {
    return memo[key(327,i)];
  }
  int backtracking_ptr_for_packrat327=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (InterfaceDeclaration) */
    deque<int> next_prev2342;
    for(int i2341=0;i2341<(int)prev.size();++i2341) {
      if( prev[i2341] == FAIL ) {
        if(!(!next_prev2342.empty() && next_prev2342.front() == FAIL )) {
          next_prev2342.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2341];
      tmp = parse_InterfaceDeclaration();
      
      for(int i2341=0;i2341<(int)tmp.size();++i2341) {
        if( tmp[i2341] == FAIL ) {
          if(!( !next_prev2342.empty() && next_prev2342[0] == FAIL )) {
            next_prev2342.push_front(FAIL);
          }
        } else {
          next_prev2342.push_back(tmp[i2341]);
        }
      }
    }
    prev = next_prev2342;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2340=0;i2340<(int)prev.size();++i2340) {
    if( prev[i2340] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2340]);
    }
  }
  return memo[key(327,backtracking_ptr_for_packrat327)] = result;
}

inline deque<int> parse_slash2344() { 
  if(memo.count(key(328,i))) {
    return memo[key(328,i)];
  }
  int backtracking_ptr_for_packrat328=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2346=0;i2346<(int)prev.size();++i2346) {
        if( prev[i2346] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2346]<m&&I[prev[i2346]]==';') {
          tmp.push_back(prev[i2346]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2348;
      for(int i2347=0;i2347<(int)prev.size();++i2347) {
        if( prev[i2347] == FAIL ) {
          if(!(!next_prev2348.empty() && next_prev2348.front() == FAIL )) {
            next_prev2348.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2347];
        tmp = parse__();
        
        for(int i2347=0;i2347<(int)tmp.size();++i2347) {
          if( tmp[i2347] == FAIL ) {
            if(!( !next_prev2348.empty() && next_prev2348[0] == FAIL )) {
              next_prev2348.push_front(FAIL);
            }
          } else {
            next_prev2348.push_back(tmp[i2347]);
          }
        }
      }
      prev = next_prev2348;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2345=0;i2345<(int)prev.size();++i2345) {
    if( prev[i2345] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2345]);
    }
  }
  return memo[key(328,backtracking_ptr_for_packrat328)] = result;
}

deque<int> parse_AnnotationTypeElementDeclaration(){
  if(memo.count(key(329,i))) {
    return memo[key(329,i)];
  }
  int backtracking_ptr_for_packrat329=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev2352;
    deque<int> prioritized_choice_final_prev2353;
    next_prev2352.clear();
    for(int i2351=0;i2351<(int)prev.size();++i2351) {
      i = prev[i2351];
      tmp = parse_slash2354();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2352.push_back(prev[i2351]); }
      for(int i2358=0;i2358<(int)tmp.size();++i2358) {
        if( tmp[i2358] != FAIL ) {
          prioritized_choice_final_prev2353.push_back(tmp[i2358]);
        }
      }
    }
    prev = next_prev2352;
    next_prev2352.clear();
    for(int i2351=0;i2351<(int)prev.size();++i2351) {
      i = prev[i2351];
      tmp = parse_slash2359();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2352.push_back(prev[i2351]); }
      for(int i2361=0;i2361<(int)tmp.size();++i2361) {
        if( tmp[i2361] != FAIL ) {
          prioritized_choice_final_prev2353.push_back(tmp[i2361]);
        }
      }
    }
    prev = next_prev2352;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev2353.empty() && prioritized_choice_final_prev2353.front() == FAIL )) {
        prioritized_choice_final_prev2353.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev2353;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Type) */
    deque<int> next_prev2363;
    for(int i2362=0;i2362<(int)prev.size();++i2362) {
      if( prev[i2362] == FAIL ) {
        if(!(!next_prev2363.empty() && next_prev2363.front() == FAIL )) {
          next_prev2363.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2362];
      tmp = parse_Type();
      
      for(int i2362=0;i2362<(int)tmp.size();++i2362) {
        if( tmp[i2362] == FAIL ) {
          if(!( !next_prev2363.empty() && next_prev2363[0] == FAIL )) {
            next_prev2363.push_front(FAIL);
          }
        } else {
          next_prev2363.push_back(tmp[i2362]);
        }
      }
    }
    prev = next_prev2363;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev2365;
    for(int i2364=0;i2364<(int)prev.size();++i2364) {
      if( prev[i2364] == FAIL ) {
        if(!(!next_prev2365.empty() && next_prev2365.front() == FAIL )) {
          next_prev2365.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2364];
      tmp = parse_Identifier();
      
      for(int i2364=0;i2364<(int)tmp.size();++i2364) {
        if( tmp[i2364] == FAIL ) {
          if(!( !next_prev2365.empty() && next_prev2365[0] == FAIL )) {
            next_prev2365.push_front(FAIL);
          }
        } else {
          next_prev2365.push_back(tmp[i2364]);
        }
      }
    }
    prev = next_prev2365;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2366=0;i2366<(int)prev.size();++i2366) {
        if( prev[i2366] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2366]<m&&I[prev[i2366]]=='(') {
          tmp.push_back(prev[i2366]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2368;
      for(int i2367=0;i2367<(int)prev.size();++i2367) {
        if( prev[i2367] == FAIL ) {
          if(!(!next_prev2368.empty() && next_prev2368.front() == FAIL )) {
            next_prev2368.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2367];
        tmp = parse__();
        
        for(int i2367=0;i2367<(int)tmp.size();++i2367) {
          if( tmp[i2367] == FAIL ) {
            if(!( !next_prev2368.empty() && next_prev2368[0] == FAIL )) {
              next_prev2368.push_front(FAIL);
            }
          } else {
            next_prev2368.push_back(tmp[i2367]);
          }
        }
      }
      prev = next_prev2368;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2369=0;i2369<(int)prev.size();++i2369) {
        if( prev[i2369] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2369]<m&&I[prev[i2369]]==')') {
          tmp.push_back(prev[i2369]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2371;
      for(int i2370=0;i2370<(int)prev.size();++i2370) {
        if( prev[i2370] == FAIL ) {
          if(!(!next_prev2371.empty() && next_prev2371.front() == FAIL )) {
            next_prev2371.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2370];
        tmp = parse__();
        
        for(int i2370=0;i2370<(int)tmp.size();++i2370) {
          if( tmp[i2370] == FAIL ) {
            if(!( !next_prev2371.empty() && next_prev2371[0] == FAIL )) {
              next_prev2371.push_front(FAIL);
            }
          } else {
            next_prev2371.push_back(tmp[i2370]);
          }
        }
      }
      prev = next_prev2371;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev2373;
    deque<int> prioritized_choice_final_prev2374;
    next_prev2373.clear();
    for(int i2372=0;i2372<(int)prev.size();++i2372) {
      i = prev[i2372];
      tmp = parse_slash2375();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2373.push_back(prev[i2372]); }
      for(int i2379=0;i2379<(int)tmp.size();++i2379) {
        if( tmp[i2379] != FAIL ) {
          prioritized_choice_final_prev2374.push_back(tmp[i2379]);
        }
      }
    }
    prev = next_prev2373;
    next_prev2373.clear();
    for(int i2372=0;i2372<(int)prev.size();++i2372) {
      i = prev[i2372];
      tmp = parse_slash2380();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2373.push_back(prev[i2372]); }
      for(int i2382=0;i2382<(int)tmp.size();++i2382) {
        if( tmp[i2382] != FAIL ) {
          prioritized_choice_final_prev2374.push_back(tmp[i2382]);
        }
      }
    }
    prev = next_prev2373;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev2374.empty() && prioritized_choice_final_prev2374.front() == FAIL )) {
        prioritized_choice_final_prev2374.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev2374;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2383=0;i2383<(int)prev.size();++i2383) {
        if( prev[i2383] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2383]<m&&I[prev[i2383]]==';') {
          tmp.push_back(prev[i2383]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2385;
      for(int i2384=0;i2384<(int)prev.size();++i2384) {
        if( prev[i2384] == FAIL ) {
          if(!(!next_prev2385.empty() && next_prev2385.front() == FAIL )) {
            next_prev2385.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2384];
        tmp = parse__();
        
        for(int i2384=0;i2384<(int)tmp.size();++i2384) {
          if( tmp[i2384] == FAIL ) {
            if(!( !next_prev2385.empty() && next_prev2385[0] == FAIL )) {
              next_prev2385.push_front(FAIL);
            }
          } else {
            next_prev2385.push_back(tmp[i2384]);
          }
        }
      }
      prev = next_prev2385;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2350=0;i2350<(int)prev.size();++i2350) {
    if( prev[i2350] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2350]);
    }
  }
  return memo[key(329,backtracking_ptr_for_packrat329)] = result;
}

inline deque<int> parse_slash2354() { 
  if(memo.count(key(330,i))) {
    return memo[key(330,i)];
  }
  int backtracking_ptr_for_packrat330=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (AnnotationTypeElementModifiers) */
    deque<int> next_prev2357;
    for(int i2356=0;i2356<(int)prev.size();++i2356) {
      if( prev[i2356] == FAIL ) {
        if(!(!next_prev2357.empty() && next_prev2357.front() == FAIL )) {
          next_prev2357.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2356];
      tmp = parse_AnnotationTypeElementModifiers();
      
      for(int i2356=0;i2356<(int)tmp.size();++i2356) {
        if( tmp[i2356] == FAIL ) {
          if(!( !next_prev2357.empty() && next_prev2357[0] == FAIL )) {
            next_prev2357.push_front(FAIL);
          }
        } else {
          next_prev2357.push_back(tmp[i2356]);
        }
      }
    }
    prev = next_prev2357;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2355=0;i2355<(int)prev.size();++i2355) {
    if( prev[i2355] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2355]);
    }
  }
  return memo[key(330,backtracking_ptr_for_packrat330)] = result;
}

inline deque<int> parse_slash2359() { 
  if(memo.count(key(331,i))) {
    return memo[key(331,i)];
  }
  int backtracking_ptr_for_packrat331=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i2360=0;i2360<(int)prev.size();++i2360) {
    if( prev[i2360] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2360]);
    }
  }
  return memo[key(331,backtracking_ptr_for_packrat331)] = result;
}

inline deque<int> parse_slash2375() { 
  if(memo.count(key(332,i))) {
    return memo[key(332,i)];
  }
  int backtracking_ptr_for_packrat332=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (AnnotationTypeElementDefaultValue) */
    deque<int> next_prev2378;
    for(int i2377=0;i2377<(int)prev.size();++i2377) {
      if( prev[i2377] == FAIL ) {
        if(!(!next_prev2378.empty() && next_prev2378.front() == FAIL )) {
          next_prev2378.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2377];
      tmp = parse_AnnotationTypeElementDefaultValue();
      
      for(int i2377=0;i2377<(int)tmp.size();++i2377) {
        if( tmp[i2377] == FAIL ) {
          if(!( !next_prev2378.empty() && next_prev2378[0] == FAIL )) {
            next_prev2378.push_front(FAIL);
          }
        } else {
          next_prev2378.push_back(tmp[i2377]);
        }
      }
    }
    prev = next_prev2378;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2376=0;i2376<(int)prev.size();++i2376) {
    if( prev[i2376] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2376]);
    }
  }
  return memo[key(332,backtracking_ptr_for_packrat332)] = result;
}

inline deque<int> parse_slash2380() { 
  if(memo.count(key(333,i))) {
    return memo[key(333,i)];
  }
  int backtracking_ptr_for_packrat333=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i2381=0;i2381<(int)prev.size();++i2381) {
    if( prev[i2381] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2381]);
    }
  }
  return memo[key(333,backtracking_ptr_for_packrat333)] = result;
}

deque<int> parse_AnnotationTypeElementModifier(){
  if(memo.count(key(334,i))) {
    return memo[key(334,i)];
  }
  int backtracking_ptr_for_packrat334=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev2388;
  deque<int> prioritized_choice_final_prev2389;
  next_prev2388.clear();
  for(int i2387=0;i2387<(int)prev.size();++i2387) {
    i = prev[i2387];
    tmp = parse_slash2390();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2388.push_back(prev[i2387]); }
    for(int i2394=0;i2394<(int)tmp.size();++i2394) {
      if( tmp[i2394] != FAIL ) {
        prioritized_choice_final_prev2389.push_back(tmp[i2394]);
      }
    }
  }
  prev = next_prev2388;
  next_prev2388.clear();
  for(int i2387=0;i2387<(int)prev.size();++i2387) {
    i = prev[i2387];
    tmp = parse_slash2395();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2388.push_back(prev[i2387]); }
    for(int i2411=0;i2411<(int)tmp.size();++i2411) {
      if( tmp[i2411] != FAIL ) {
        prioritized_choice_final_prev2389.push_back(tmp[i2411]);
      }
    }
  }
  prev = next_prev2388;
  next_prev2388.clear();
  for(int i2387=0;i2387<(int)prev.size();++i2387) {
    i = prev[i2387];
    tmp = parse_slash2412();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2388.push_back(prev[i2387]); }
    for(int i2430=0;i2430<(int)tmp.size();++i2430) {
      if( tmp[i2430] != FAIL ) {
        prioritized_choice_final_prev2389.push_back(tmp[i2430]);
      }
    }
  }
  prev = next_prev2388;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev2389.empty() && prioritized_choice_final_prev2389.front() == FAIL )) {
      prioritized_choice_final_prev2389.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev2389;
  for(int i2386=0;i2386<(int)prev.size();++i2386) {
    if( prev[i2386] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2386]);
    }
  }
  return memo[key(334,backtracking_ptr_for_packrat334)] = result;
}

inline deque<int> parse_slash2390() { 
  if(memo.count(key(335,i))) {
    return memo[key(335,i)];
  }
  int backtracking_ptr_for_packrat335=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotation) */
    deque<int> next_prev2393;
    for(int i2392=0;i2392<(int)prev.size();++i2392) {
      if( prev[i2392] == FAIL ) {
        if(!(!next_prev2393.empty() && next_prev2393.front() == FAIL )) {
          next_prev2393.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2392];
      tmp = parse_Annotation();
      
      for(int i2392=0;i2392<(int)tmp.size();++i2392) {
        if( tmp[i2392] == FAIL ) {
          if(!( !next_prev2393.empty() && next_prev2393[0] == FAIL )) {
            next_prev2393.push_front(FAIL);
          }
        } else {
          next_prev2393.push_back(tmp[i2392]);
        }
      }
    }
    prev = next_prev2393;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2391=0;i2391<(int)prev.size();++i2391) {
    if( prev[i2391] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2391]);
    }
  }
  return memo[key(335,backtracking_ptr_for_packrat335)] = result;
}

inline deque<int> parse_slash2395() { 
  if(memo.count(key(336,i))) {
    return memo[key(336,i)];
  }
  int backtracking_ptr_for_packrat336=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2397=0;i2397<(int)prev.size();++i2397) {
        if( prev[i2397] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2397]<m&&I[prev[i2397]]=='p') {
          tmp.push_back(prev[i2397]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2398=0;i2398<(int)prev.size();++i2398) {
        if( prev[i2398] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2398]<m&&I[prev[i2398]]=='u') {
          tmp.push_back(prev[i2398]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2399=0;i2399<(int)prev.size();++i2399) {
        if( prev[i2399] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2399]<m&&I[prev[i2399]]=='b') {
          tmp.push_back(prev[i2399]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2400=0;i2400<(int)prev.size();++i2400) {
        if( prev[i2400] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2400]<m&&I[prev[i2400]]=='l') {
          tmp.push_back(prev[i2400]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2401=0;i2401<(int)prev.size();++i2401) {
        if( prev[i2401] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2401]<m&&I[prev[i2401]]=='i') {
          tmp.push_back(prev[i2401]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2402=0;i2402<(int)prev.size();++i2402) {
        if( prev[i2402] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2402]<m&&I[prev[i2402]]=='c') {
          tmp.push_back(prev[i2402]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2408;
      for(int i2407=0;i2407<(int)prev.size();++i2407) {
        i = prev[i2407];
        tmp = parse_not2403();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2408.push_back(prev[i2407]);
        } else {
          if(!(!next_prev2408.empty()&&next_prev2408.front()==FAIL)) {
            next_prev2408.push_front(FAIL);
          }
        }
      }
      prev = next_prev2408;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2410;
      for(int i2409=0;i2409<(int)prev.size();++i2409) {
        if( prev[i2409] == FAIL ) {
          if(!(!next_prev2410.empty() && next_prev2410.front() == FAIL )) {
            next_prev2410.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2409];
        tmp = parse__();
        
        for(int i2409=0;i2409<(int)tmp.size();++i2409) {
          if( tmp[i2409] == FAIL ) {
            if(!( !next_prev2410.empty() && next_prev2410[0] == FAIL )) {
              next_prev2410.push_front(FAIL);
            }
          } else {
            next_prev2410.push_back(tmp[i2409]);
          }
        }
      }
      prev = next_prev2410;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2396=0;i2396<(int)prev.size();++i2396) {
    if( prev[i2396] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2396]);
    }
  }
  return memo[key(336,backtracking_ptr_for_packrat336)] = result;
}

inline deque<int> parse_not2403() { 
  if(memo.count(key(337,i))) {
    return memo[key(337,i)];
  }
  int backtracking_ptr_for_packrat337=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2406;
  for(int i2405=0;i2405<(int)prev.size();++i2405) {
    if( prev[i2405] == FAIL ) {
      if(!(!next_prev2406.empty() && next_prev2406.front() == FAIL )) {
        next_prev2406.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2405];
    tmp = parse_W();
    
    for(int i2405=0;i2405<(int)tmp.size();++i2405) {
      if( tmp[i2405] == FAIL ) {
        if(!( !next_prev2406.empty() && next_prev2406[0] == FAIL )) {
          next_prev2406.push_front(FAIL);
        }
      } else {
        next_prev2406.push_back(tmp[i2405]);
      }
    }
  }
  prev = next_prev2406;
  for(int i2404=0;i2404<(int)prev.size();++i2404) {
    if( prev[i2404] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2404]);
    }
  }
  return memo[key(337,backtracking_ptr_for_packrat337)] = result;
}

inline deque<int> parse_slash2412() { 
  if(memo.count(key(338,i))) {
    return memo[key(338,i)];
  }
  int backtracking_ptr_for_packrat338=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2414=0;i2414<(int)prev.size();++i2414) {
        if( prev[i2414] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2414]<m&&I[prev[i2414]]=='a') {
          tmp.push_back(prev[i2414]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2415=0;i2415<(int)prev.size();++i2415) {
        if( prev[i2415] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2415]<m&&I[prev[i2415]]=='b') {
          tmp.push_back(prev[i2415]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2416=0;i2416<(int)prev.size();++i2416) {
        if( prev[i2416] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2416]<m&&I[prev[i2416]]=='s') {
          tmp.push_back(prev[i2416]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2417=0;i2417<(int)prev.size();++i2417) {
        if( prev[i2417] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2417]<m&&I[prev[i2417]]=='t') {
          tmp.push_back(prev[i2417]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2418=0;i2418<(int)prev.size();++i2418) {
        if( prev[i2418] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2418]<m&&I[prev[i2418]]=='r') {
          tmp.push_back(prev[i2418]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2419=0;i2419<(int)prev.size();++i2419) {
        if( prev[i2419] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2419]<m&&I[prev[i2419]]=='a') {
          tmp.push_back(prev[i2419]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2420=0;i2420<(int)prev.size();++i2420) {
        if( prev[i2420] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2420]<m&&I[prev[i2420]]=='c') {
          tmp.push_back(prev[i2420]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2421=0;i2421<(int)prev.size();++i2421) {
        if( prev[i2421] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2421]<m&&I[prev[i2421]]=='t') {
          tmp.push_back(prev[i2421]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2427;
      for(int i2426=0;i2426<(int)prev.size();++i2426) {
        i = prev[i2426];
        tmp = parse_not2422();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2427.push_back(prev[i2426]);
        } else {
          if(!(!next_prev2427.empty()&&next_prev2427.front()==FAIL)) {
            next_prev2427.push_front(FAIL);
          }
        }
      }
      prev = next_prev2427;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2429;
      for(int i2428=0;i2428<(int)prev.size();++i2428) {
        if( prev[i2428] == FAIL ) {
          if(!(!next_prev2429.empty() && next_prev2429.front() == FAIL )) {
            next_prev2429.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2428];
        tmp = parse__();
        
        for(int i2428=0;i2428<(int)tmp.size();++i2428) {
          if( tmp[i2428] == FAIL ) {
            if(!( !next_prev2429.empty() && next_prev2429[0] == FAIL )) {
              next_prev2429.push_front(FAIL);
            }
          } else {
            next_prev2429.push_back(tmp[i2428]);
          }
        }
      }
      prev = next_prev2429;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2413=0;i2413<(int)prev.size();++i2413) {
    if( prev[i2413] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2413]);
    }
  }
  return memo[key(338,backtracking_ptr_for_packrat338)] = result;
}

inline deque<int> parse_not2422() { 
  if(memo.count(key(339,i))) {
    return memo[key(339,i)];
  }
  int backtracking_ptr_for_packrat339=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2425;
  for(int i2424=0;i2424<(int)prev.size();++i2424) {
    if( prev[i2424] == FAIL ) {
      if(!(!next_prev2425.empty() && next_prev2425.front() == FAIL )) {
        next_prev2425.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2424];
    tmp = parse_W();
    
    for(int i2424=0;i2424<(int)tmp.size();++i2424) {
      if( tmp[i2424] == FAIL ) {
        if(!( !next_prev2425.empty() && next_prev2425[0] == FAIL )) {
          next_prev2425.push_front(FAIL);
        }
      } else {
        next_prev2425.push_back(tmp[i2424]);
      }
    }
  }
  prev = next_prev2425;
  for(int i2423=0;i2423<(int)prev.size();++i2423) {
    if( prev[i2423] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2423]);
    }
  }
  return memo[key(339,backtracking_ptr_for_packrat339)] = result;
}

deque<int> parse_AnnotationTypeElementModifiers(){
  if(memo.count(key(340,i))) {
    return memo[key(340,i)];
  }
  int backtracking_ptr_for_packrat340=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (AnnotationTypeElementModifier) */
    deque<int> next_prev2433;
    for(int i2432=0;i2432<(int)prev.size();++i2432) {
      if( prev[i2432] == FAIL ) {
        if(!(!next_prev2433.empty() && next_prev2433.front() == FAIL )) {
          next_prev2433.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2432];
      tmp = parse_AnnotationTypeElementModifier();
      
      for(int i2432=0;i2432<(int)tmp.size();++i2432) {
        if( tmp[i2432] == FAIL ) {
          if(!( !next_prev2433.empty() && next_prev2433[0] == FAIL )) {
            next_prev2433.push_front(FAIL);
          }
        } else {
          next_prev2433.push_back(tmp[i2432]);
        }
      }
    }
    prev = next_prev2433;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev2438;
    deque<int> star_final_prev2439;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev2438.clear();
      for(int i2440=0;i2440<(int)prev.size();++i2440) {
        i = prev[i2440];
        tmp = parse_while2434();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev2439.push_back(prev[i2440]);
        }
        for(int i2441=0;i2441<(int)tmp.size();++i2441) {
          if(tmp[i2441]==FAIL) {
            if(!( !next_prev2438.empty() && next_prev2438.front() == FAIL )) {
              next_prev2438.push_front(FAIL);
            }
          } else {
            next_prev2438.push_back(tmp[i2441]);
          }
        }
      }
      prev = next_prev2438;
    }
    prev = star_final_prev2439;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2431=0;i2431<(int)prev.size();++i2431) {
    if( prev[i2431] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2431]);
    }
  }
  return memo[key(340,backtracking_ptr_for_packrat340)] = result;
}

inline deque<int> parse_while2434() { 
  if(memo.count(key(341,i))) {
    return memo[key(341,i)];
  }
  int backtracking_ptr_for_packrat341=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (AnnotationTypeElementModifier) */
    deque<int> next_prev2437;
    for(int i2436=0;i2436<(int)prev.size();++i2436) {
      if( prev[i2436] == FAIL ) {
        if(!(!next_prev2437.empty() && next_prev2437.front() == FAIL )) {
          next_prev2437.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2436];
      tmp = parse_AnnotationTypeElementModifier();
      
      for(int i2436=0;i2436<(int)tmp.size();++i2436) {
        if( tmp[i2436] == FAIL ) {
          if(!( !next_prev2437.empty() && next_prev2437[0] == FAIL )) {
            next_prev2437.push_front(FAIL);
          }
        } else {
          next_prev2437.push_back(tmp[i2436]);
        }
      }
    }
    prev = next_prev2437;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2435=0;i2435<(int)prev.size();++i2435) {
    if( prev[i2435] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2435]);
    }
  }
  return memo[key(341,backtracking_ptr_for_packrat341)] = result;
}

deque<int> parse_AnnotationTypeElementDefaultValue(){
  if(memo.count(key(342,i))) {
    return memo[key(342,i)];
  }
  int backtracking_ptr_for_packrat342=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2443=0;i2443<(int)prev.size();++i2443) {
        if( prev[i2443] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2443]<m&&I[prev[i2443]]=='d') {
          tmp.push_back(prev[i2443]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2444=0;i2444<(int)prev.size();++i2444) {
        if( prev[i2444] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2444]<m&&I[prev[i2444]]=='e') {
          tmp.push_back(prev[i2444]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2445=0;i2445<(int)prev.size();++i2445) {
        if( prev[i2445] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2445]<m&&I[prev[i2445]]=='f') {
          tmp.push_back(prev[i2445]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2446=0;i2446<(int)prev.size();++i2446) {
        if( prev[i2446] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2446]<m&&I[prev[i2446]]=='a') {
          tmp.push_back(prev[i2446]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2447=0;i2447<(int)prev.size();++i2447) {
        if( prev[i2447] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2447]<m&&I[prev[i2447]]=='u') {
          tmp.push_back(prev[i2447]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2448=0;i2448<(int)prev.size();++i2448) {
        if( prev[i2448] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2448]<m&&I[prev[i2448]]=='l') {
          tmp.push_back(prev[i2448]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2449=0;i2449<(int)prev.size();++i2449) {
        if( prev[i2449] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2449]<m&&I[prev[i2449]]=='t') {
          tmp.push_back(prev[i2449]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2455;
      for(int i2454=0;i2454<(int)prev.size();++i2454) {
        i = prev[i2454];
        tmp = parse_not2450();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2455.push_back(prev[i2454]);
        } else {
          if(!(!next_prev2455.empty()&&next_prev2455.front()==FAIL)) {
            next_prev2455.push_front(FAIL);
          }
        }
      }
      prev = next_prev2455;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2457;
      for(int i2456=0;i2456<(int)prev.size();++i2456) {
        if( prev[i2456] == FAIL ) {
          if(!(!next_prev2457.empty() && next_prev2457.front() == FAIL )) {
            next_prev2457.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2456];
        tmp = parse__();
        
        for(int i2456=0;i2456<(int)tmp.size();++i2456) {
          if( tmp[i2456] == FAIL ) {
            if(!( !next_prev2457.empty() && next_prev2457[0] == FAIL )) {
              next_prev2457.push_front(FAIL);
            }
          } else {
            next_prev2457.push_back(tmp[i2456]);
          }
        }
      }
      prev = next_prev2457;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ElementValue) */
    deque<int> next_prev2459;
    for(int i2458=0;i2458<(int)prev.size();++i2458) {
      if( prev[i2458] == FAIL ) {
        if(!(!next_prev2459.empty() && next_prev2459.front() == FAIL )) {
          next_prev2459.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2458];
      tmp = parse_ElementValue();
      
      for(int i2458=0;i2458<(int)tmp.size();++i2458) {
        if( tmp[i2458] == FAIL ) {
          if(!( !next_prev2459.empty() && next_prev2459[0] == FAIL )) {
            next_prev2459.push_front(FAIL);
          }
        } else {
          next_prev2459.push_back(tmp[i2458]);
        }
      }
    }
    prev = next_prev2459;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2442=0;i2442<(int)prev.size();++i2442) {
    if( prev[i2442] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2442]);
    }
  }
  return memo[key(342,backtracking_ptr_for_packrat342)] = result;
}

inline deque<int> parse_not2450() { 
  if(memo.count(key(343,i))) {
    return memo[key(343,i)];
  }
  int backtracking_ptr_for_packrat343=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2453;
  for(int i2452=0;i2452<(int)prev.size();++i2452) {
    if( prev[i2452] == FAIL ) {
      if(!(!next_prev2453.empty() && next_prev2453.front() == FAIL )) {
        next_prev2453.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2452];
    tmp = parse_W();
    
    for(int i2452=0;i2452<(int)tmp.size();++i2452) {
      if( tmp[i2452] == FAIL ) {
        if(!( !next_prev2453.empty() && next_prev2453[0] == FAIL )) {
          next_prev2453.push_front(FAIL);
        }
      } else {
        next_prev2453.push_back(tmp[i2452]);
      }
    }
  }
  prev = next_prev2453;
  for(int i2451=0;i2451<(int)prev.size();++i2451) {
    if( prev[i2451] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2451]);
    }
  }
  return memo[key(343,backtracking_ptr_for_packrat343)] = result;
}

deque<int> parse_FieldDeclaration(){
  if(memo.count(key(344,i))) {
    return memo[key(344,i)];
  }
  int backtracking_ptr_for_packrat344=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev2462;
    deque<int> prioritized_choice_final_prev2463;
    next_prev2462.clear();
    for(int i2461=0;i2461<(int)prev.size();++i2461) {
      i = prev[i2461];
      tmp = parse_slash2464();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2462.push_back(prev[i2461]); }
      for(int i2468=0;i2468<(int)tmp.size();++i2468) {
        if( tmp[i2468] != FAIL ) {
          prioritized_choice_final_prev2463.push_back(tmp[i2468]);
        }
      }
    }
    prev = next_prev2462;
    next_prev2462.clear();
    for(int i2461=0;i2461<(int)prev.size();++i2461) {
      i = prev[i2461];
      tmp = parse_slash2469();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2462.push_back(prev[i2461]); }
      for(int i2471=0;i2471<(int)tmp.size();++i2471) {
        if( tmp[i2471] != FAIL ) {
          prioritized_choice_final_prev2463.push_back(tmp[i2471]);
        }
      }
    }
    prev = next_prev2462;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev2463.empty() && prioritized_choice_final_prev2463.front() == FAIL )) {
        prioritized_choice_final_prev2463.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev2463;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Type) */
    deque<int> next_prev2473;
    for(int i2472=0;i2472<(int)prev.size();++i2472) {
      if( prev[i2472] == FAIL ) {
        if(!(!next_prev2473.empty() && next_prev2473.front() == FAIL )) {
          next_prev2473.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2472];
      tmp = parse_Type();
      
      for(int i2472=0;i2472<(int)tmp.size();++i2472) {
        if( tmp[i2472] == FAIL ) {
          if(!( !next_prev2473.empty() && next_prev2473[0] == FAIL )) {
            next_prev2473.push_front(FAIL);
          }
        } else {
          next_prev2473.push_back(tmp[i2472]);
        }
      }
    }
    prev = next_prev2473;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (InitDeclList) */
    deque<int> next_prev2475;
    for(int i2474=0;i2474<(int)prev.size();++i2474) {
      if( prev[i2474] == FAIL ) {
        if(!(!next_prev2475.empty() && next_prev2475.front() == FAIL )) {
          next_prev2475.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2474];
      tmp = parse_InitDeclList();
      
      for(int i2474=0;i2474<(int)tmp.size();++i2474) {
        if( tmp[i2474] == FAIL ) {
          if(!( !next_prev2475.empty() && next_prev2475[0] == FAIL )) {
            next_prev2475.push_front(FAIL);
          }
        } else {
          next_prev2475.push_back(tmp[i2474]);
        }
      }
    }
    prev = next_prev2475;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2476=0;i2476<(int)prev.size();++i2476) {
        if( prev[i2476] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2476]<m&&I[prev[i2476]]==';') {
          tmp.push_back(prev[i2476]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2478;
      for(int i2477=0;i2477<(int)prev.size();++i2477) {
        if( prev[i2477] == FAIL ) {
          if(!(!next_prev2478.empty() && next_prev2478.front() == FAIL )) {
            next_prev2478.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2477];
        tmp = parse__();
        
        for(int i2477=0;i2477<(int)tmp.size();++i2477) {
          if( tmp[i2477] == FAIL ) {
            if(!( !next_prev2478.empty() && next_prev2478[0] == FAIL )) {
              next_prev2478.push_front(FAIL);
            }
          } else {
            next_prev2478.push_back(tmp[i2477]);
          }
        }
      }
      prev = next_prev2478;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2460=0;i2460<(int)prev.size();++i2460) {
    if( prev[i2460] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2460]);
    }
  }
  return memo[key(344,backtracking_ptr_for_packrat344)] = result;
}

inline deque<int> parse_slash2464() { 
  if(memo.count(key(345,i))) {
    return memo[key(345,i)];
  }
  int backtracking_ptr_for_packrat345=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (FieldModifiers) */
    deque<int> next_prev2467;
    for(int i2466=0;i2466<(int)prev.size();++i2466) {
      if( prev[i2466] == FAIL ) {
        if(!(!next_prev2467.empty() && next_prev2467.front() == FAIL )) {
          next_prev2467.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2466];
      tmp = parse_FieldModifiers();
      
      for(int i2466=0;i2466<(int)tmp.size();++i2466) {
        if( tmp[i2466] == FAIL ) {
          if(!( !next_prev2467.empty() && next_prev2467[0] == FAIL )) {
            next_prev2467.push_front(FAIL);
          }
        } else {
          next_prev2467.push_back(tmp[i2466]);
        }
      }
    }
    prev = next_prev2467;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2465=0;i2465<(int)prev.size();++i2465) {
    if( prev[i2465] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2465]);
    }
  }
  return memo[key(345,backtracking_ptr_for_packrat345)] = result;
}

inline deque<int> parse_slash2469() { 
  if(memo.count(key(346,i))) {
    return memo[key(346,i)];
  }
  int backtracking_ptr_for_packrat346=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i2470=0;i2470<(int)prev.size();++i2470) {
    if( prev[i2470] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2470]);
    }
  }
  return memo[key(346,backtracking_ptr_for_packrat346)] = result;
}

deque<int> parse_FieldModifiers(){
  if(memo.count(key(347,i))) {
    return memo[key(347,i)];
  }
  int backtracking_ptr_for_packrat347=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (FieldModifier) */
    deque<int> next_prev2481;
    for(int i2480=0;i2480<(int)prev.size();++i2480) {
      if( prev[i2480] == FAIL ) {
        if(!(!next_prev2481.empty() && next_prev2481.front() == FAIL )) {
          next_prev2481.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2480];
      tmp = parse_FieldModifier();
      
      for(int i2480=0;i2480<(int)tmp.size();++i2480) {
        if( tmp[i2480] == FAIL ) {
          if(!( !next_prev2481.empty() && next_prev2481[0] == FAIL )) {
            next_prev2481.push_front(FAIL);
          }
        } else {
          next_prev2481.push_back(tmp[i2480]);
        }
      }
    }
    prev = next_prev2481;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev2486;
    deque<int> star_final_prev2487;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev2486.clear();
      for(int i2488=0;i2488<(int)prev.size();++i2488) {
        i = prev[i2488];
        tmp = parse_while2482();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev2487.push_back(prev[i2488]);
        }
        for(int i2489=0;i2489<(int)tmp.size();++i2489) {
          if(tmp[i2489]==FAIL) {
            if(!( !next_prev2486.empty() && next_prev2486.front() == FAIL )) {
              next_prev2486.push_front(FAIL);
            }
          } else {
            next_prev2486.push_back(tmp[i2489]);
          }
        }
      }
      prev = next_prev2486;
    }
    prev = star_final_prev2487;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2479=0;i2479<(int)prev.size();++i2479) {
    if( prev[i2479] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2479]);
    }
  }
  return memo[key(347,backtracking_ptr_for_packrat347)] = result;
}

inline deque<int> parse_while2482() { 
  if(memo.count(key(348,i))) {
    return memo[key(348,i)];
  }
  int backtracking_ptr_for_packrat348=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (FieldModifier) */
    deque<int> next_prev2485;
    for(int i2484=0;i2484<(int)prev.size();++i2484) {
      if( prev[i2484] == FAIL ) {
        if(!(!next_prev2485.empty() && next_prev2485.front() == FAIL )) {
          next_prev2485.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2484];
      tmp = parse_FieldModifier();
      
      for(int i2484=0;i2484<(int)tmp.size();++i2484) {
        if( tmp[i2484] == FAIL ) {
          if(!( !next_prev2485.empty() && next_prev2485[0] == FAIL )) {
            next_prev2485.push_front(FAIL);
          }
        } else {
          next_prev2485.push_back(tmp[i2484]);
        }
      }
    }
    prev = next_prev2485;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2483=0;i2483<(int)prev.size();++i2483) {
    if( prev[i2483] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2483]);
    }
  }
  return memo[key(348,backtracking_ptr_for_packrat348)] = result;
}

deque<int> parse_FieldModifier(){
  if(memo.count(key(349,i))) {
    return memo[key(349,i)];
  }
  int backtracking_ptr_for_packrat349=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev2492;
  deque<int> prioritized_choice_final_prev2493;
  next_prev2492.clear();
  for(int i2491=0;i2491<(int)prev.size();++i2491) {
    i = prev[i2491];
    tmp = parse_slash2494();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2492.push_back(prev[i2491]); }
    for(int i2498=0;i2498<(int)tmp.size();++i2498) {
      if( tmp[i2498] != FAIL ) {
        prioritized_choice_final_prev2493.push_back(tmp[i2498]);
      }
    }
  }
  prev = next_prev2492;
  next_prev2492.clear();
  for(int i2491=0;i2491<(int)prev.size();++i2491) {
    i = prev[i2491];
    tmp = parse_slash2499();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2492.push_back(prev[i2491]); }
    for(int i2515=0;i2515<(int)tmp.size();++i2515) {
      if( tmp[i2515] != FAIL ) {
        prioritized_choice_final_prev2493.push_back(tmp[i2515]);
      }
    }
  }
  prev = next_prev2492;
  next_prev2492.clear();
  for(int i2491=0;i2491<(int)prev.size();++i2491) {
    i = prev[i2491];
    tmp = parse_slash2516();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2492.push_back(prev[i2491]); }
    for(int i2535=0;i2535<(int)tmp.size();++i2535) {
      if( tmp[i2535] != FAIL ) {
        prioritized_choice_final_prev2493.push_back(tmp[i2535]);
      }
    }
  }
  prev = next_prev2492;
  next_prev2492.clear();
  for(int i2491=0;i2491<(int)prev.size();++i2491) {
    i = prev[i2491];
    tmp = parse_slash2536();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2492.push_back(prev[i2491]); }
    for(int i2553=0;i2553<(int)tmp.size();++i2553) {
      if( tmp[i2553] != FAIL ) {
        prioritized_choice_final_prev2493.push_back(tmp[i2553]);
      }
    }
  }
  prev = next_prev2492;
  next_prev2492.clear();
  for(int i2491=0;i2491<(int)prev.size();++i2491) {
    i = prev[i2491];
    tmp = parse_slash2554();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2492.push_back(prev[i2491]); }
    for(int i2569=0;i2569<(int)tmp.size();++i2569) {
      if( tmp[i2569] != FAIL ) {
        prioritized_choice_final_prev2493.push_back(tmp[i2569]);
      }
    }
  }
  prev = next_prev2492;
  next_prev2492.clear();
  for(int i2491=0;i2491<(int)prev.size();++i2491) {
    i = prev[i2491];
    tmp = parse_slash2570();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2492.push_back(prev[i2491]); }
    for(int i2586=0;i2586<(int)tmp.size();++i2586) {
      if( tmp[i2586] != FAIL ) {
        prioritized_choice_final_prev2493.push_back(tmp[i2586]);
      }
    }
  }
  prev = next_prev2492;
  next_prev2492.clear();
  for(int i2491=0;i2491<(int)prev.size();++i2491) {
    i = prev[i2491];
    tmp = parse_slash2587();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2492.push_back(prev[i2491]); }
    for(int i2606=0;i2606<(int)tmp.size();++i2606) {
      if( tmp[i2606] != FAIL ) {
        prioritized_choice_final_prev2493.push_back(tmp[i2606]);
      }
    }
  }
  prev = next_prev2492;
  next_prev2492.clear();
  for(int i2491=0;i2491<(int)prev.size();++i2491) {
    i = prev[i2491];
    tmp = parse_slash2607();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2492.push_back(prev[i2491]); }
    for(int i2625=0;i2625<(int)tmp.size();++i2625) {
      if( tmp[i2625] != FAIL ) {
        prioritized_choice_final_prev2493.push_back(tmp[i2625]);
      }
    }
  }
  prev = next_prev2492;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev2493.empty() && prioritized_choice_final_prev2493.front() == FAIL )) {
      prioritized_choice_final_prev2493.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev2493;
  for(int i2490=0;i2490<(int)prev.size();++i2490) {
    if( prev[i2490] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2490]);
    }
  }
  return memo[key(349,backtracking_ptr_for_packrat349)] = result;
}

inline deque<int> parse_slash2494() { 
  if(memo.count(key(350,i))) {
    return memo[key(350,i)];
  }
  int backtracking_ptr_for_packrat350=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotation) */
    deque<int> next_prev2497;
    for(int i2496=0;i2496<(int)prev.size();++i2496) {
      if( prev[i2496] == FAIL ) {
        if(!(!next_prev2497.empty() && next_prev2497.front() == FAIL )) {
          next_prev2497.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2496];
      tmp = parse_Annotation();
      
      for(int i2496=0;i2496<(int)tmp.size();++i2496) {
        if( tmp[i2496] == FAIL ) {
          if(!( !next_prev2497.empty() && next_prev2497[0] == FAIL )) {
            next_prev2497.push_front(FAIL);
          }
        } else {
          next_prev2497.push_back(tmp[i2496]);
        }
      }
    }
    prev = next_prev2497;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2495=0;i2495<(int)prev.size();++i2495) {
    if( prev[i2495] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2495]);
    }
  }
  return memo[key(350,backtracking_ptr_for_packrat350)] = result;
}

inline deque<int> parse_slash2499() { 
  if(memo.count(key(351,i))) {
    return memo[key(351,i)];
  }
  int backtracking_ptr_for_packrat351=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2501=0;i2501<(int)prev.size();++i2501) {
        if( prev[i2501] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2501]<m&&I[prev[i2501]]=='p') {
          tmp.push_back(prev[i2501]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2502=0;i2502<(int)prev.size();++i2502) {
        if( prev[i2502] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2502]<m&&I[prev[i2502]]=='u') {
          tmp.push_back(prev[i2502]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2503=0;i2503<(int)prev.size();++i2503) {
        if( prev[i2503] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2503]<m&&I[prev[i2503]]=='b') {
          tmp.push_back(prev[i2503]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2504=0;i2504<(int)prev.size();++i2504) {
        if( prev[i2504] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2504]<m&&I[prev[i2504]]=='l') {
          tmp.push_back(prev[i2504]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2505=0;i2505<(int)prev.size();++i2505) {
        if( prev[i2505] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2505]<m&&I[prev[i2505]]=='i') {
          tmp.push_back(prev[i2505]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2506=0;i2506<(int)prev.size();++i2506) {
        if( prev[i2506] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2506]<m&&I[prev[i2506]]=='c') {
          tmp.push_back(prev[i2506]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2512;
      for(int i2511=0;i2511<(int)prev.size();++i2511) {
        i = prev[i2511];
        tmp = parse_not2507();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2512.push_back(prev[i2511]);
        } else {
          if(!(!next_prev2512.empty()&&next_prev2512.front()==FAIL)) {
            next_prev2512.push_front(FAIL);
          }
        }
      }
      prev = next_prev2512;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2514;
      for(int i2513=0;i2513<(int)prev.size();++i2513) {
        if( prev[i2513] == FAIL ) {
          if(!(!next_prev2514.empty() && next_prev2514.front() == FAIL )) {
            next_prev2514.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2513];
        tmp = parse__();
        
        for(int i2513=0;i2513<(int)tmp.size();++i2513) {
          if( tmp[i2513] == FAIL ) {
            if(!( !next_prev2514.empty() && next_prev2514[0] == FAIL )) {
              next_prev2514.push_front(FAIL);
            }
          } else {
            next_prev2514.push_back(tmp[i2513]);
          }
        }
      }
      prev = next_prev2514;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2500=0;i2500<(int)prev.size();++i2500) {
    if( prev[i2500] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2500]);
    }
  }
  return memo[key(351,backtracking_ptr_for_packrat351)] = result;
}

inline deque<int> parse_not2507() { 
  if(memo.count(key(352,i))) {
    return memo[key(352,i)];
  }
  int backtracking_ptr_for_packrat352=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2510;
  for(int i2509=0;i2509<(int)prev.size();++i2509) {
    if( prev[i2509] == FAIL ) {
      if(!(!next_prev2510.empty() && next_prev2510.front() == FAIL )) {
        next_prev2510.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2509];
    tmp = parse_W();
    
    for(int i2509=0;i2509<(int)tmp.size();++i2509) {
      if( tmp[i2509] == FAIL ) {
        if(!( !next_prev2510.empty() && next_prev2510[0] == FAIL )) {
          next_prev2510.push_front(FAIL);
        }
      } else {
        next_prev2510.push_back(tmp[i2509]);
      }
    }
  }
  prev = next_prev2510;
  for(int i2508=0;i2508<(int)prev.size();++i2508) {
    if( prev[i2508] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2508]);
    }
  }
  return memo[key(352,backtracking_ptr_for_packrat352)] = result;
}

inline deque<int> parse_slash2516() { 
  if(memo.count(key(353,i))) {
    return memo[key(353,i)];
  }
  int backtracking_ptr_for_packrat353=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2518=0;i2518<(int)prev.size();++i2518) {
        if( prev[i2518] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2518]<m&&I[prev[i2518]]=='p') {
          tmp.push_back(prev[i2518]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2519=0;i2519<(int)prev.size();++i2519) {
        if( prev[i2519] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2519]<m&&I[prev[i2519]]=='r') {
          tmp.push_back(prev[i2519]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2520=0;i2520<(int)prev.size();++i2520) {
        if( prev[i2520] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2520]<m&&I[prev[i2520]]=='o') {
          tmp.push_back(prev[i2520]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2521=0;i2521<(int)prev.size();++i2521) {
        if( prev[i2521] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2521]<m&&I[prev[i2521]]=='t') {
          tmp.push_back(prev[i2521]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2522=0;i2522<(int)prev.size();++i2522) {
        if( prev[i2522] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2522]<m&&I[prev[i2522]]=='e') {
          tmp.push_back(prev[i2522]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2523=0;i2523<(int)prev.size();++i2523) {
        if( prev[i2523] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2523]<m&&I[prev[i2523]]=='c') {
          tmp.push_back(prev[i2523]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2524=0;i2524<(int)prev.size();++i2524) {
        if( prev[i2524] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2524]<m&&I[prev[i2524]]=='t') {
          tmp.push_back(prev[i2524]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2525=0;i2525<(int)prev.size();++i2525) {
        if( prev[i2525] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2525]<m&&I[prev[i2525]]=='e') {
          tmp.push_back(prev[i2525]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2526=0;i2526<(int)prev.size();++i2526) {
        if( prev[i2526] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2526]<m&&I[prev[i2526]]=='d') {
          tmp.push_back(prev[i2526]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2532;
      for(int i2531=0;i2531<(int)prev.size();++i2531) {
        i = prev[i2531];
        tmp = parse_not2527();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2532.push_back(prev[i2531]);
        } else {
          if(!(!next_prev2532.empty()&&next_prev2532.front()==FAIL)) {
            next_prev2532.push_front(FAIL);
          }
        }
      }
      prev = next_prev2532;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2534;
      for(int i2533=0;i2533<(int)prev.size();++i2533) {
        if( prev[i2533] == FAIL ) {
          if(!(!next_prev2534.empty() && next_prev2534.front() == FAIL )) {
            next_prev2534.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2533];
        tmp = parse__();
        
        for(int i2533=0;i2533<(int)tmp.size();++i2533) {
          if( tmp[i2533] == FAIL ) {
            if(!( !next_prev2534.empty() && next_prev2534[0] == FAIL )) {
              next_prev2534.push_front(FAIL);
            }
          } else {
            next_prev2534.push_back(tmp[i2533]);
          }
        }
      }
      prev = next_prev2534;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2517=0;i2517<(int)prev.size();++i2517) {
    if( prev[i2517] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2517]);
    }
  }
  return memo[key(353,backtracking_ptr_for_packrat353)] = result;
}

inline deque<int> parse_not2527() { 
  if(memo.count(key(354,i))) {
    return memo[key(354,i)];
  }
  int backtracking_ptr_for_packrat354=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2530;
  for(int i2529=0;i2529<(int)prev.size();++i2529) {
    if( prev[i2529] == FAIL ) {
      if(!(!next_prev2530.empty() && next_prev2530.front() == FAIL )) {
        next_prev2530.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2529];
    tmp = parse_W();
    
    for(int i2529=0;i2529<(int)tmp.size();++i2529) {
      if( tmp[i2529] == FAIL ) {
        if(!( !next_prev2530.empty() && next_prev2530[0] == FAIL )) {
          next_prev2530.push_front(FAIL);
        }
      } else {
        next_prev2530.push_back(tmp[i2529]);
      }
    }
  }
  prev = next_prev2530;
  for(int i2528=0;i2528<(int)prev.size();++i2528) {
    if( prev[i2528] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2528]);
    }
  }
  return memo[key(354,backtracking_ptr_for_packrat354)] = result;
}

inline deque<int> parse_slash2536() { 
  if(memo.count(key(355,i))) {
    return memo[key(355,i)];
  }
  int backtracking_ptr_for_packrat355=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2538=0;i2538<(int)prev.size();++i2538) {
        if( prev[i2538] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2538]<m&&I[prev[i2538]]=='p') {
          tmp.push_back(prev[i2538]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2539=0;i2539<(int)prev.size();++i2539) {
        if( prev[i2539] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2539]<m&&I[prev[i2539]]=='r') {
          tmp.push_back(prev[i2539]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2540=0;i2540<(int)prev.size();++i2540) {
        if( prev[i2540] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2540]<m&&I[prev[i2540]]=='i') {
          tmp.push_back(prev[i2540]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2541=0;i2541<(int)prev.size();++i2541) {
        if( prev[i2541] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2541]<m&&I[prev[i2541]]=='v') {
          tmp.push_back(prev[i2541]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2542=0;i2542<(int)prev.size();++i2542) {
        if( prev[i2542] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2542]<m&&I[prev[i2542]]=='a') {
          tmp.push_back(prev[i2542]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2543=0;i2543<(int)prev.size();++i2543) {
        if( prev[i2543] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2543]<m&&I[prev[i2543]]=='t') {
          tmp.push_back(prev[i2543]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2544=0;i2544<(int)prev.size();++i2544) {
        if( prev[i2544] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2544]<m&&I[prev[i2544]]=='e') {
          tmp.push_back(prev[i2544]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2550;
      for(int i2549=0;i2549<(int)prev.size();++i2549) {
        i = prev[i2549];
        tmp = parse_not2545();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2550.push_back(prev[i2549]);
        } else {
          if(!(!next_prev2550.empty()&&next_prev2550.front()==FAIL)) {
            next_prev2550.push_front(FAIL);
          }
        }
      }
      prev = next_prev2550;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2552;
      for(int i2551=0;i2551<(int)prev.size();++i2551) {
        if( prev[i2551] == FAIL ) {
          if(!(!next_prev2552.empty() && next_prev2552.front() == FAIL )) {
            next_prev2552.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2551];
        tmp = parse__();
        
        for(int i2551=0;i2551<(int)tmp.size();++i2551) {
          if( tmp[i2551] == FAIL ) {
            if(!( !next_prev2552.empty() && next_prev2552[0] == FAIL )) {
              next_prev2552.push_front(FAIL);
            }
          } else {
            next_prev2552.push_back(tmp[i2551]);
          }
        }
      }
      prev = next_prev2552;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2537=0;i2537<(int)prev.size();++i2537) {
    if( prev[i2537] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2537]);
    }
  }
  return memo[key(355,backtracking_ptr_for_packrat355)] = result;
}

inline deque<int> parse_not2545() { 
  if(memo.count(key(356,i))) {
    return memo[key(356,i)];
  }
  int backtracking_ptr_for_packrat356=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2548;
  for(int i2547=0;i2547<(int)prev.size();++i2547) {
    if( prev[i2547] == FAIL ) {
      if(!(!next_prev2548.empty() && next_prev2548.front() == FAIL )) {
        next_prev2548.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2547];
    tmp = parse_W();
    
    for(int i2547=0;i2547<(int)tmp.size();++i2547) {
      if( tmp[i2547] == FAIL ) {
        if(!( !next_prev2548.empty() && next_prev2548[0] == FAIL )) {
          next_prev2548.push_front(FAIL);
        }
      } else {
        next_prev2548.push_back(tmp[i2547]);
      }
    }
  }
  prev = next_prev2548;
  for(int i2546=0;i2546<(int)prev.size();++i2546) {
    if( prev[i2546] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2546]);
    }
  }
  return memo[key(356,backtracking_ptr_for_packrat356)] = result;
}

inline deque<int> parse_slash2554() { 
  if(memo.count(key(357,i))) {
    return memo[key(357,i)];
  }
  int backtracking_ptr_for_packrat357=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2556=0;i2556<(int)prev.size();++i2556) {
        if( prev[i2556] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2556]<m&&I[prev[i2556]]=='f') {
          tmp.push_back(prev[i2556]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2557=0;i2557<(int)prev.size();++i2557) {
        if( prev[i2557] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2557]<m&&I[prev[i2557]]=='i') {
          tmp.push_back(prev[i2557]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2558=0;i2558<(int)prev.size();++i2558) {
        if( prev[i2558] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2558]<m&&I[prev[i2558]]=='n') {
          tmp.push_back(prev[i2558]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2559=0;i2559<(int)prev.size();++i2559) {
        if( prev[i2559] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2559]<m&&I[prev[i2559]]=='a') {
          tmp.push_back(prev[i2559]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2560=0;i2560<(int)prev.size();++i2560) {
        if( prev[i2560] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2560]<m&&I[prev[i2560]]=='l') {
          tmp.push_back(prev[i2560]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2566;
      for(int i2565=0;i2565<(int)prev.size();++i2565) {
        i = prev[i2565];
        tmp = parse_not2561();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2566.push_back(prev[i2565]);
        } else {
          if(!(!next_prev2566.empty()&&next_prev2566.front()==FAIL)) {
            next_prev2566.push_front(FAIL);
          }
        }
      }
      prev = next_prev2566;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2568;
      for(int i2567=0;i2567<(int)prev.size();++i2567) {
        if( prev[i2567] == FAIL ) {
          if(!(!next_prev2568.empty() && next_prev2568.front() == FAIL )) {
            next_prev2568.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2567];
        tmp = parse__();
        
        for(int i2567=0;i2567<(int)tmp.size();++i2567) {
          if( tmp[i2567] == FAIL ) {
            if(!( !next_prev2568.empty() && next_prev2568[0] == FAIL )) {
              next_prev2568.push_front(FAIL);
            }
          } else {
            next_prev2568.push_back(tmp[i2567]);
          }
        }
      }
      prev = next_prev2568;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2555=0;i2555<(int)prev.size();++i2555) {
    if( prev[i2555] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2555]);
    }
  }
  return memo[key(357,backtracking_ptr_for_packrat357)] = result;
}

inline deque<int> parse_not2561() { 
  if(memo.count(key(358,i))) {
    return memo[key(358,i)];
  }
  int backtracking_ptr_for_packrat358=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2564;
  for(int i2563=0;i2563<(int)prev.size();++i2563) {
    if( prev[i2563] == FAIL ) {
      if(!(!next_prev2564.empty() && next_prev2564.front() == FAIL )) {
        next_prev2564.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2563];
    tmp = parse_W();
    
    for(int i2563=0;i2563<(int)tmp.size();++i2563) {
      if( tmp[i2563] == FAIL ) {
        if(!( !next_prev2564.empty() && next_prev2564[0] == FAIL )) {
          next_prev2564.push_front(FAIL);
        }
      } else {
        next_prev2564.push_back(tmp[i2563]);
      }
    }
  }
  prev = next_prev2564;
  for(int i2562=0;i2562<(int)prev.size();++i2562) {
    if( prev[i2562] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2562]);
    }
  }
  return memo[key(358,backtracking_ptr_for_packrat358)] = result;
}

inline deque<int> parse_slash2570() { 
  if(memo.count(key(359,i))) {
    return memo[key(359,i)];
  }
  int backtracking_ptr_for_packrat359=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2572=0;i2572<(int)prev.size();++i2572) {
        if( prev[i2572] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2572]<m&&I[prev[i2572]]=='s') {
          tmp.push_back(prev[i2572]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2573=0;i2573<(int)prev.size();++i2573) {
        if( prev[i2573] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2573]<m&&I[prev[i2573]]=='t') {
          tmp.push_back(prev[i2573]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2574=0;i2574<(int)prev.size();++i2574) {
        if( prev[i2574] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2574]<m&&I[prev[i2574]]=='a') {
          tmp.push_back(prev[i2574]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2575=0;i2575<(int)prev.size();++i2575) {
        if( prev[i2575] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2575]<m&&I[prev[i2575]]=='t') {
          tmp.push_back(prev[i2575]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2576=0;i2576<(int)prev.size();++i2576) {
        if( prev[i2576] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2576]<m&&I[prev[i2576]]=='i') {
          tmp.push_back(prev[i2576]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2577=0;i2577<(int)prev.size();++i2577) {
        if( prev[i2577] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2577]<m&&I[prev[i2577]]=='c') {
          tmp.push_back(prev[i2577]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2583;
      for(int i2582=0;i2582<(int)prev.size();++i2582) {
        i = prev[i2582];
        tmp = parse_not2578();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2583.push_back(prev[i2582]);
        } else {
          if(!(!next_prev2583.empty()&&next_prev2583.front()==FAIL)) {
            next_prev2583.push_front(FAIL);
          }
        }
      }
      prev = next_prev2583;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2585;
      for(int i2584=0;i2584<(int)prev.size();++i2584) {
        if( prev[i2584] == FAIL ) {
          if(!(!next_prev2585.empty() && next_prev2585.front() == FAIL )) {
            next_prev2585.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2584];
        tmp = parse__();
        
        for(int i2584=0;i2584<(int)tmp.size();++i2584) {
          if( tmp[i2584] == FAIL ) {
            if(!( !next_prev2585.empty() && next_prev2585[0] == FAIL )) {
              next_prev2585.push_front(FAIL);
            }
          } else {
            next_prev2585.push_back(tmp[i2584]);
          }
        }
      }
      prev = next_prev2585;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2571=0;i2571<(int)prev.size();++i2571) {
    if( prev[i2571] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2571]);
    }
  }
  return memo[key(359,backtracking_ptr_for_packrat359)] = result;
}

inline deque<int> parse_not2578() { 
  if(memo.count(key(360,i))) {
    return memo[key(360,i)];
  }
  int backtracking_ptr_for_packrat360=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2581;
  for(int i2580=0;i2580<(int)prev.size();++i2580) {
    if( prev[i2580] == FAIL ) {
      if(!(!next_prev2581.empty() && next_prev2581.front() == FAIL )) {
        next_prev2581.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2580];
    tmp = parse_W();
    
    for(int i2580=0;i2580<(int)tmp.size();++i2580) {
      if( tmp[i2580] == FAIL ) {
        if(!( !next_prev2581.empty() && next_prev2581[0] == FAIL )) {
          next_prev2581.push_front(FAIL);
        }
      } else {
        next_prev2581.push_back(tmp[i2580]);
      }
    }
  }
  prev = next_prev2581;
  for(int i2579=0;i2579<(int)prev.size();++i2579) {
    if( prev[i2579] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2579]);
    }
  }
  return memo[key(360,backtracking_ptr_for_packrat360)] = result;
}

inline deque<int> parse_slash2587() { 
  if(memo.count(key(361,i))) {
    return memo[key(361,i)];
  }
  int backtracking_ptr_for_packrat361=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2589=0;i2589<(int)prev.size();++i2589) {
        if( prev[i2589] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2589]<m&&I[prev[i2589]]=='t') {
          tmp.push_back(prev[i2589]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2590=0;i2590<(int)prev.size();++i2590) {
        if( prev[i2590] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2590]<m&&I[prev[i2590]]=='r') {
          tmp.push_back(prev[i2590]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2591=0;i2591<(int)prev.size();++i2591) {
        if( prev[i2591] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2591]<m&&I[prev[i2591]]=='a') {
          tmp.push_back(prev[i2591]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2592=0;i2592<(int)prev.size();++i2592) {
        if( prev[i2592] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2592]<m&&I[prev[i2592]]=='n') {
          tmp.push_back(prev[i2592]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2593=0;i2593<(int)prev.size();++i2593) {
        if( prev[i2593] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2593]<m&&I[prev[i2593]]=='s') {
          tmp.push_back(prev[i2593]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2594=0;i2594<(int)prev.size();++i2594) {
        if( prev[i2594] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2594]<m&&I[prev[i2594]]=='i') {
          tmp.push_back(prev[i2594]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2595=0;i2595<(int)prev.size();++i2595) {
        if( prev[i2595] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2595]<m&&I[prev[i2595]]=='e') {
          tmp.push_back(prev[i2595]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2596=0;i2596<(int)prev.size();++i2596) {
        if( prev[i2596] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2596]<m&&I[prev[i2596]]=='n') {
          tmp.push_back(prev[i2596]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2597=0;i2597<(int)prev.size();++i2597) {
        if( prev[i2597] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2597]<m&&I[prev[i2597]]=='t') {
          tmp.push_back(prev[i2597]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2603;
      for(int i2602=0;i2602<(int)prev.size();++i2602) {
        i = prev[i2602];
        tmp = parse_not2598();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2603.push_back(prev[i2602]);
        } else {
          if(!(!next_prev2603.empty()&&next_prev2603.front()==FAIL)) {
            next_prev2603.push_front(FAIL);
          }
        }
      }
      prev = next_prev2603;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2605;
      for(int i2604=0;i2604<(int)prev.size();++i2604) {
        if( prev[i2604] == FAIL ) {
          if(!(!next_prev2605.empty() && next_prev2605.front() == FAIL )) {
            next_prev2605.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2604];
        tmp = parse__();
        
        for(int i2604=0;i2604<(int)tmp.size();++i2604) {
          if( tmp[i2604] == FAIL ) {
            if(!( !next_prev2605.empty() && next_prev2605[0] == FAIL )) {
              next_prev2605.push_front(FAIL);
            }
          } else {
            next_prev2605.push_back(tmp[i2604]);
          }
        }
      }
      prev = next_prev2605;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2588=0;i2588<(int)prev.size();++i2588) {
    if( prev[i2588] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2588]);
    }
  }
  return memo[key(361,backtracking_ptr_for_packrat361)] = result;
}

inline deque<int> parse_not2598() { 
  if(memo.count(key(362,i))) {
    return memo[key(362,i)];
  }
  int backtracking_ptr_for_packrat362=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2601;
  for(int i2600=0;i2600<(int)prev.size();++i2600) {
    if( prev[i2600] == FAIL ) {
      if(!(!next_prev2601.empty() && next_prev2601.front() == FAIL )) {
        next_prev2601.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2600];
    tmp = parse_W();
    
    for(int i2600=0;i2600<(int)tmp.size();++i2600) {
      if( tmp[i2600] == FAIL ) {
        if(!( !next_prev2601.empty() && next_prev2601[0] == FAIL )) {
          next_prev2601.push_front(FAIL);
        }
      } else {
        next_prev2601.push_back(tmp[i2600]);
      }
    }
  }
  prev = next_prev2601;
  for(int i2599=0;i2599<(int)prev.size();++i2599) {
    if( prev[i2599] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2599]);
    }
  }
  return memo[key(362,backtracking_ptr_for_packrat362)] = result;
}

inline deque<int> parse_slash2607() { 
  if(memo.count(key(363,i))) {
    return memo[key(363,i)];
  }
  int backtracking_ptr_for_packrat363=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2609=0;i2609<(int)prev.size();++i2609) {
        if( prev[i2609] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2609]<m&&I[prev[i2609]]=='v') {
          tmp.push_back(prev[i2609]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2610=0;i2610<(int)prev.size();++i2610) {
        if( prev[i2610] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2610]<m&&I[prev[i2610]]=='o') {
          tmp.push_back(prev[i2610]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2611=0;i2611<(int)prev.size();++i2611) {
        if( prev[i2611] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2611]<m&&I[prev[i2611]]=='l') {
          tmp.push_back(prev[i2611]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2612=0;i2612<(int)prev.size();++i2612) {
        if( prev[i2612] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2612]<m&&I[prev[i2612]]=='a') {
          tmp.push_back(prev[i2612]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2613=0;i2613<(int)prev.size();++i2613) {
        if( prev[i2613] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2613]<m&&I[prev[i2613]]=='t') {
          tmp.push_back(prev[i2613]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2614=0;i2614<(int)prev.size();++i2614) {
        if( prev[i2614] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2614]<m&&I[prev[i2614]]=='i') {
          tmp.push_back(prev[i2614]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2615=0;i2615<(int)prev.size();++i2615) {
        if( prev[i2615] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2615]<m&&I[prev[i2615]]=='l') {
          tmp.push_back(prev[i2615]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2616=0;i2616<(int)prev.size();++i2616) {
        if( prev[i2616] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2616]<m&&I[prev[i2616]]=='e') {
          tmp.push_back(prev[i2616]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2622;
      for(int i2621=0;i2621<(int)prev.size();++i2621) {
        i = prev[i2621];
        tmp = parse_not2617();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2622.push_back(prev[i2621]);
        } else {
          if(!(!next_prev2622.empty()&&next_prev2622.front()==FAIL)) {
            next_prev2622.push_front(FAIL);
          }
        }
      }
      prev = next_prev2622;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2624;
      for(int i2623=0;i2623<(int)prev.size();++i2623) {
        if( prev[i2623] == FAIL ) {
          if(!(!next_prev2624.empty() && next_prev2624.front() == FAIL )) {
            next_prev2624.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2623];
        tmp = parse__();
        
        for(int i2623=0;i2623<(int)tmp.size();++i2623) {
          if( tmp[i2623] == FAIL ) {
            if(!( !next_prev2624.empty() && next_prev2624[0] == FAIL )) {
              next_prev2624.push_front(FAIL);
            }
          } else {
            next_prev2624.push_back(tmp[i2623]);
          }
        }
      }
      prev = next_prev2624;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2608=0;i2608<(int)prev.size();++i2608) {
    if( prev[i2608] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2608]);
    }
  }
  return memo[key(363,backtracking_ptr_for_packrat363)] = result;
}

inline deque<int> parse_not2617() { 
  if(memo.count(key(364,i))) {
    return memo[key(364,i)];
  }
  int backtracking_ptr_for_packrat364=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2620;
  for(int i2619=0;i2619<(int)prev.size();++i2619) {
    if( prev[i2619] == FAIL ) {
      if(!(!next_prev2620.empty() && next_prev2620.front() == FAIL )) {
        next_prev2620.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2619];
    tmp = parse_W();
    
    for(int i2619=0;i2619<(int)tmp.size();++i2619) {
      if( tmp[i2619] == FAIL ) {
        if(!( !next_prev2620.empty() && next_prev2620[0] == FAIL )) {
          next_prev2620.push_front(FAIL);
        }
      } else {
        next_prev2620.push_back(tmp[i2619]);
      }
    }
  }
  prev = next_prev2620;
  for(int i2618=0;i2618<(int)prev.size();++i2618) {
    if( prev[i2618] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2618]);
    }
  }
  return memo[key(364,backtracking_ptr_for_packrat364)] = result;
}

deque<int> parse_ConstantDeclaration(){
  if(memo.count(key(365,i))) {
    return memo[key(365,i)];
  }
  int backtracking_ptr_for_packrat365=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev2628;
    deque<int> prioritized_choice_final_prev2629;
    next_prev2628.clear();
    for(int i2627=0;i2627<(int)prev.size();++i2627) {
      i = prev[i2627];
      tmp = parse_slash2630();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2628.push_back(prev[i2627]); }
      for(int i2634=0;i2634<(int)tmp.size();++i2634) {
        if( tmp[i2634] != FAIL ) {
          prioritized_choice_final_prev2629.push_back(tmp[i2634]);
        }
      }
    }
    prev = next_prev2628;
    next_prev2628.clear();
    for(int i2627=0;i2627<(int)prev.size();++i2627) {
      i = prev[i2627];
      tmp = parse_slash2635();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2628.push_back(prev[i2627]); }
      for(int i2637=0;i2637<(int)tmp.size();++i2637) {
        if( tmp[i2637] != FAIL ) {
          prioritized_choice_final_prev2629.push_back(tmp[i2637]);
        }
      }
    }
    prev = next_prev2628;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev2629.empty() && prioritized_choice_final_prev2629.front() == FAIL )) {
        prioritized_choice_final_prev2629.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev2629;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Type) */
    deque<int> next_prev2639;
    for(int i2638=0;i2638<(int)prev.size();++i2638) {
      if( prev[i2638] == FAIL ) {
        if(!(!next_prev2639.empty() && next_prev2639.front() == FAIL )) {
          next_prev2639.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2638];
      tmp = parse_Type();
      
      for(int i2638=0;i2638<(int)tmp.size();++i2638) {
        if( tmp[i2638] == FAIL ) {
          if(!( !next_prev2639.empty() && next_prev2639[0] == FAIL )) {
            next_prev2639.push_front(FAIL);
          }
        } else {
          next_prev2639.push_back(tmp[i2638]);
        }
      }
    }
    prev = next_prev2639;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (InitDeclList) */
    deque<int> next_prev2641;
    for(int i2640=0;i2640<(int)prev.size();++i2640) {
      if( prev[i2640] == FAIL ) {
        if(!(!next_prev2641.empty() && next_prev2641.front() == FAIL )) {
          next_prev2641.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2640];
      tmp = parse_InitDeclList();
      
      for(int i2640=0;i2640<(int)tmp.size();++i2640) {
        if( tmp[i2640] == FAIL ) {
          if(!( !next_prev2641.empty() && next_prev2641[0] == FAIL )) {
            next_prev2641.push_front(FAIL);
          }
        } else {
          next_prev2641.push_back(tmp[i2640]);
        }
      }
    }
    prev = next_prev2641;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2642=0;i2642<(int)prev.size();++i2642) {
        if( prev[i2642] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2642]<m&&I[prev[i2642]]==';') {
          tmp.push_back(prev[i2642]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2644;
      for(int i2643=0;i2643<(int)prev.size();++i2643) {
        if( prev[i2643] == FAIL ) {
          if(!(!next_prev2644.empty() && next_prev2644.front() == FAIL )) {
            next_prev2644.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2643];
        tmp = parse__();
        
        for(int i2643=0;i2643<(int)tmp.size();++i2643) {
          if( tmp[i2643] == FAIL ) {
            if(!( !next_prev2644.empty() && next_prev2644[0] == FAIL )) {
              next_prev2644.push_front(FAIL);
            }
          } else {
            next_prev2644.push_back(tmp[i2643]);
          }
        }
      }
      prev = next_prev2644;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2626=0;i2626<(int)prev.size();++i2626) {
    if( prev[i2626] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2626]);
    }
  }
  return memo[key(365,backtracking_ptr_for_packrat365)] = result;
}

inline deque<int> parse_slash2630() { 
  if(memo.count(key(366,i))) {
    return memo[key(366,i)];
  }
  int backtracking_ptr_for_packrat366=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ConstantModifiers) */
    deque<int> next_prev2633;
    for(int i2632=0;i2632<(int)prev.size();++i2632) {
      if( prev[i2632] == FAIL ) {
        if(!(!next_prev2633.empty() && next_prev2633.front() == FAIL )) {
          next_prev2633.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2632];
      tmp = parse_ConstantModifiers();
      
      for(int i2632=0;i2632<(int)tmp.size();++i2632) {
        if( tmp[i2632] == FAIL ) {
          if(!( !next_prev2633.empty() && next_prev2633[0] == FAIL )) {
            next_prev2633.push_front(FAIL);
          }
        } else {
          next_prev2633.push_back(tmp[i2632]);
        }
      }
    }
    prev = next_prev2633;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2631=0;i2631<(int)prev.size();++i2631) {
    if( prev[i2631] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2631]);
    }
  }
  return memo[key(366,backtracking_ptr_for_packrat366)] = result;
}

inline deque<int> parse_slash2635() { 
  if(memo.count(key(367,i))) {
    return memo[key(367,i)];
  }
  int backtracking_ptr_for_packrat367=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i2636=0;i2636<(int)prev.size();++i2636) {
    if( prev[i2636] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2636]);
    }
  }
  return memo[key(367,backtracking_ptr_for_packrat367)] = result;
}

deque<int> parse_ConstantModifiers(){
  if(memo.count(key(368,i))) {
    return memo[key(368,i)];
  }
  int backtracking_ptr_for_packrat368=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ConstantModifier) */
    deque<int> next_prev2647;
    for(int i2646=0;i2646<(int)prev.size();++i2646) {
      if( prev[i2646] == FAIL ) {
        if(!(!next_prev2647.empty() && next_prev2647.front() == FAIL )) {
          next_prev2647.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2646];
      tmp = parse_ConstantModifier();
      
      for(int i2646=0;i2646<(int)tmp.size();++i2646) {
        if( tmp[i2646] == FAIL ) {
          if(!( !next_prev2647.empty() && next_prev2647[0] == FAIL )) {
            next_prev2647.push_front(FAIL);
          }
        } else {
          next_prev2647.push_back(tmp[i2646]);
        }
      }
    }
    prev = next_prev2647;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev2652;
    deque<int> star_final_prev2653;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev2652.clear();
      for(int i2654=0;i2654<(int)prev.size();++i2654) {
        i = prev[i2654];
        tmp = parse_while2648();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev2653.push_back(prev[i2654]);
        }
        for(int i2655=0;i2655<(int)tmp.size();++i2655) {
          if(tmp[i2655]==FAIL) {
            if(!( !next_prev2652.empty() && next_prev2652.front() == FAIL )) {
              next_prev2652.push_front(FAIL);
            }
          } else {
            next_prev2652.push_back(tmp[i2655]);
          }
        }
      }
      prev = next_prev2652;
    }
    prev = star_final_prev2653;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2645=0;i2645<(int)prev.size();++i2645) {
    if( prev[i2645] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2645]);
    }
  }
  return memo[key(368,backtracking_ptr_for_packrat368)] = result;
}

inline deque<int> parse_while2648() { 
  if(memo.count(key(369,i))) {
    return memo[key(369,i)];
  }
  int backtracking_ptr_for_packrat369=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ConstantModifier) */
    deque<int> next_prev2651;
    for(int i2650=0;i2650<(int)prev.size();++i2650) {
      if( prev[i2650] == FAIL ) {
        if(!(!next_prev2651.empty() && next_prev2651.front() == FAIL )) {
          next_prev2651.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2650];
      tmp = parse_ConstantModifier();
      
      for(int i2650=0;i2650<(int)tmp.size();++i2650) {
        if( tmp[i2650] == FAIL ) {
          if(!( !next_prev2651.empty() && next_prev2651[0] == FAIL )) {
            next_prev2651.push_front(FAIL);
          }
        } else {
          next_prev2651.push_back(tmp[i2650]);
        }
      }
    }
    prev = next_prev2651;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2649=0;i2649<(int)prev.size();++i2649) {
    if( prev[i2649] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2649]);
    }
  }
  return memo[key(369,backtracking_ptr_for_packrat369)] = result;
}

deque<int> parse_ConstantModifier(){
  if(memo.count(key(370,i))) {
    return memo[key(370,i)];
  }
  int backtracking_ptr_for_packrat370=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev2658;
  deque<int> prioritized_choice_final_prev2659;
  next_prev2658.clear();
  for(int i2657=0;i2657<(int)prev.size();++i2657) {
    i = prev[i2657];
    tmp = parse_slash2660();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2658.push_back(prev[i2657]); }
    for(int i2664=0;i2664<(int)tmp.size();++i2664) {
      if( tmp[i2664] != FAIL ) {
        prioritized_choice_final_prev2659.push_back(tmp[i2664]);
      }
    }
  }
  prev = next_prev2658;
  next_prev2658.clear();
  for(int i2657=0;i2657<(int)prev.size();++i2657) {
    i = prev[i2657];
    tmp = parse_slash2665();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2658.push_back(prev[i2657]); }
    for(int i2681=0;i2681<(int)tmp.size();++i2681) {
      if( tmp[i2681] != FAIL ) {
        prioritized_choice_final_prev2659.push_back(tmp[i2681]);
      }
    }
  }
  prev = next_prev2658;
  next_prev2658.clear();
  for(int i2657=0;i2657<(int)prev.size();++i2657) {
    i = prev[i2657];
    tmp = parse_slash2682();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2658.push_back(prev[i2657]); }
    for(int i2701=0;i2701<(int)tmp.size();++i2701) {
      if( tmp[i2701] != FAIL ) {
        prioritized_choice_final_prev2659.push_back(tmp[i2701]);
      }
    }
  }
  prev = next_prev2658;
  next_prev2658.clear();
  for(int i2657=0;i2657<(int)prev.size();++i2657) {
    i = prev[i2657];
    tmp = parse_slash2702();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2658.push_back(prev[i2657]); }
    for(int i2717=0;i2717<(int)tmp.size();++i2717) {
      if( tmp[i2717] != FAIL ) {
        prioritized_choice_final_prev2659.push_back(tmp[i2717]);
      }
    }
  }
  prev = next_prev2658;
  next_prev2658.clear();
  for(int i2657=0;i2657<(int)prev.size();++i2657) {
    i = prev[i2657];
    tmp = parse_slash2718();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2658.push_back(prev[i2657]); }
    for(int i2734=0;i2734<(int)tmp.size();++i2734) {
      if( tmp[i2734] != FAIL ) {
        prioritized_choice_final_prev2659.push_back(tmp[i2734]);
      }
    }
  }
  prev = next_prev2658;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev2659.empty() && prioritized_choice_final_prev2659.front() == FAIL )) {
      prioritized_choice_final_prev2659.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev2659;
  for(int i2656=0;i2656<(int)prev.size();++i2656) {
    if( prev[i2656] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2656]);
    }
  }
  return memo[key(370,backtracking_ptr_for_packrat370)] = result;
}

inline deque<int> parse_slash2660() { 
  if(memo.count(key(371,i))) {
    return memo[key(371,i)];
  }
  int backtracking_ptr_for_packrat371=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotation) */
    deque<int> next_prev2663;
    for(int i2662=0;i2662<(int)prev.size();++i2662) {
      if( prev[i2662] == FAIL ) {
        if(!(!next_prev2663.empty() && next_prev2663.front() == FAIL )) {
          next_prev2663.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2662];
      tmp = parse_Annotation();
      
      for(int i2662=0;i2662<(int)tmp.size();++i2662) {
        if( tmp[i2662] == FAIL ) {
          if(!( !next_prev2663.empty() && next_prev2663[0] == FAIL )) {
            next_prev2663.push_front(FAIL);
          }
        } else {
          next_prev2663.push_back(tmp[i2662]);
        }
      }
    }
    prev = next_prev2663;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2661=0;i2661<(int)prev.size();++i2661) {
    if( prev[i2661] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2661]);
    }
  }
  return memo[key(371,backtracking_ptr_for_packrat371)] = result;
}

inline deque<int> parse_slash2665() { 
  if(memo.count(key(372,i))) {
    return memo[key(372,i)];
  }
  int backtracking_ptr_for_packrat372=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2667=0;i2667<(int)prev.size();++i2667) {
        if( prev[i2667] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2667]<m&&I[prev[i2667]]=='p') {
          tmp.push_back(prev[i2667]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2668=0;i2668<(int)prev.size();++i2668) {
        if( prev[i2668] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2668]<m&&I[prev[i2668]]=='u') {
          tmp.push_back(prev[i2668]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2669=0;i2669<(int)prev.size();++i2669) {
        if( prev[i2669] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2669]<m&&I[prev[i2669]]=='b') {
          tmp.push_back(prev[i2669]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2670=0;i2670<(int)prev.size();++i2670) {
        if( prev[i2670] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2670]<m&&I[prev[i2670]]=='l') {
          tmp.push_back(prev[i2670]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2671=0;i2671<(int)prev.size();++i2671) {
        if( prev[i2671] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2671]<m&&I[prev[i2671]]=='i') {
          tmp.push_back(prev[i2671]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2672=0;i2672<(int)prev.size();++i2672) {
        if( prev[i2672] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2672]<m&&I[prev[i2672]]=='c') {
          tmp.push_back(prev[i2672]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2678;
      for(int i2677=0;i2677<(int)prev.size();++i2677) {
        i = prev[i2677];
        tmp = parse_not2673();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2678.push_back(prev[i2677]);
        } else {
          if(!(!next_prev2678.empty()&&next_prev2678.front()==FAIL)) {
            next_prev2678.push_front(FAIL);
          }
        }
      }
      prev = next_prev2678;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2680;
      for(int i2679=0;i2679<(int)prev.size();++i2679) {
        if( prev[i2679] == FAIL ) {
          if(!(!next_prev2680.empty() && next_prev2680.front() == FAIL )) {
            next_prev2680.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2679];
        tmp = parse__();
        
        for(int i2679=0;i2679<(int)tmp.size();++i2679) {
          if( tmp[i2679] == FAIL ) {
            if(!( !next_prev2680.empty() && next_prev2680[0] == FAIL )) {
              next_prev2680.push_front(FAIL);
            }
          } else {
            next_prev2680.push_back(tmp[i2679]);
          }
        }
      }
      prev = next_prev2680;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2666=0;i2666<(int)prev.size();++i2666) {
    if( prev[i2666] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2666]);
    }
  }
  return memo[key(372,backtracking_ptr_for_packrat372)] = result;
}

inline deque<int> parse_not2673() { 
  if(memo.count(key(373,i))) {
    return memo[key(373,i)];
  }
  int backtracking_ptr_for_packrat373=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2676;
  for(int i2675=0;i2675<(int)prev.size();++i2675) {
    if( prev[i2675] == FAIL ) {
      if(!(!next_prev2676.empty() && next_prev2676.front() == FAIL )) {
        next_prev2676.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2675];
    tmp = parse_W();
    
    for(int i2675=0;i2675<(int)tmp.size();++i2675) {
      if( tmp[i2675] == FAIL ) {
        if(!( !next_prev2676.empty() && next_prev2676[0] == FAIL )) {
          next_prev2676.push_front(FAIL);
        }
      } else {
        next_prev2676.push_back(tmp[i2675]);
      }
    }
  }
  prev = next_prev2676;
  for(int i2674=0;i2674<(int)prev.size();++i2674) {
    if( prev[i2674] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2674]);
    }
  }
  return memo[key(373,backtracking_ptr_for_packrat373)] = result;
}

inline deque<int> parse_slash2682() { 
  if(memo.count(key(374,i))) {
    return memo[key(374,i)];
  }
  int backtracking_ptr_for_packrat374=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2684=0;i2684<(int)prev.size();++i2684) {
        if( prev[i2684] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2684]<m&&I[prev[i2684]]=='p') {
          tmp.push_back(prev[i2684]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2685=0;i2685<(int)prev.size();++i2685) {
        if( prev[i2685] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2685]<m&&I[prev[i2685]]=='r') {
          tmp.push_back(prev[i2685]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2686=0;i2686<(int)prev.size();++i2686) {
        if( prev[i2686] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2686]<m&&I[prev[i2686]]=='o') {
          tmp.push_back(prev[i2686]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2687=0;i2687<(int)prev.size();++i2687) {
        if( prev[i2687] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2687]<m&&I[prev[i2687]]=='t') {
          tmp.push_back(prev[i2687]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2688=0;i2688<(int)prev.size();++i2688) {
        if( prev[i2688] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2688]<m&&I[prev[i2688]]=='e') {
          tmp.push_back(prev[i2688]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2689=0;i2689<(int)prev.size();++i2689) {
        if( prev[i2689] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2689]<m&&I[prev[i2689]]=='c') {
          tmp.push_back(prev[i2689]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2690=0;i2690<(int)prev.size();++i2690) {
        if( prev[i2690] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2690]<m&&I[prev[i2690]]=='t') {
          tmp.push_back(prev[i2690]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2691=0;i2691<(int)prev.size();++i2691) {
        if( prev[i2691] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2691]<m&&I[prev[i2691]]=='e') {
          tmp.push_back(prev[i2691]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2692=0;i2692<(int)prev.size();++i2692) {
        if( prev[i2692] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2692]<m&&I[prev[i2692]]=='d') {
          tmp.push_back(prev[i2692]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2698;
      for(int i2697=0;i2697<(int)prev.size();++i2697) {
        i = prev[i2697];
        tmp = parse_not2693();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2698.push_back(prev[i2697]);
        } else {
          if(!(!next_prev2698.empty()&&next_prev2698.front()==FAIL)) {
            next_prev2698.push_front(FAIL);
          }
        }
      }
      prev = next_prev2698;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2700;
      for(int i2699=0;i2699<(int)prev.size();++i2699) {
        if( prev[i2699] == FAIL ) {
          if(!(!next_prev2700.empty() && next_prev2700.front() == FAIL )) {
            next_prev2700.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2699];
        tmp = parse__();
        
        for(int i2699=0;i2699<(int)tmp.size();++i2699) {
          if( tmp[i2699] == FAIL ) {
            if(!( !next_prev2700.empty() && next_prev2700[0] == FAIL )) {
              next_prev2700.push_front(FAIL);
            }
          } else {
            next_prev2700.push_back(tmp[i2699]);
          }
        }
      }
      prev = next_prev2700;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2683=0;i2683<(int)prev.size();++i2683) {
    if( prev[i2683] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2683]);
    }
  }
  return memo[key(374,backtracking_ptr_for_packrat374)] = result;
}

inline deque<int> parse_not2693() { 
  if(memo.count(key(375,i))) {
    return memo[key(375,i)];
  }
  int backtracking_ptr_for_packrat375=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2696;
  for(int i2695=0;i2695<(int)prev.size();++i2695) {
    if( prev[i2695] == FAIL ) {
      if(!(!next_prev2696.empty() && next_prev2696.front() == FAIL )) {
        next_prev2696.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2695];
    tmp = parse_W();
    
    for(int i2695=0;i2695<(int)tmp.size();++i2695) {
      if( tmp[i2695] == FAIL ) {
        if(!( !next_prev2696.empty() && next_prev2696[0] == FAIL )) {
          next_prev2696.push_front(FAIL);
        }
      } else {
        next_prev2696.push_back(tmp[i2695]);
      }
    }
  }
  prev = next_prev2696;
  for(int i2694=0;i2694<(int)prev.size();++i2694) {
    if( prev[i2694] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2694]);
    }
  }
  return memo[key(375,backtracking_ptr_for_packrat375)] = result;
}

inline deque<int> parse_slash2702() { 
  if(memo.count(key(376,i))) {
    return memo[key(376,i)];
  }
  int backtracking_ptr_for_packrat376=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2704=0;i2704<(int)prev.size();++i2704) {
        if( prev[i2704] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2704]<m&&I[prev[i2704]]=='f') {
          tmp.push_back(prev[i2704]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2705=0;i2705<(int)prev.size();++i2705) {
        if( prev[i2705] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2705]<m&&I[prev[i2705]]=='i') {
          tmp.push_back(prev[i2705]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2706=0;i2706<(int)prev.size();++i2706) {
        if( prev[i2706] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2706]<m&&I[prev[i2706]]=='n') {
          tmp.push_back(prev[i2706]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2707=0;i2707<(int)prev.size();++i2707) {
        if( prev[i2707] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2707]<m&&I[prev[i2707]]=='a') {
          tmp.push_back(prev[i2707]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2708=0;i2708<(int)prev.size();++i2708) {
        if( prev[i2708] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2708]<m&&I[prev[i2708]]=='l') {
          tmp.push_back(prev[i2708]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2714;
      for(int i2713=0;i2713<(int)prev.size();++i2713) {
        i = prev[i2713];
        tmp = parse_not2709();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2714.push_back(prev[i2713]);
        } else {
          if(!(!next_prev2714.empty()&&next_prev2714.front()==FAIL)) {
            next_prev2714.push_front(FAIL);
          }
        }
      }
      prev = next_prev2714;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2716;
      for(int i2715=0;i2715<(int)prev.size();++i2715) {
        if( prev[i2715] == FAIL ) {
          if(!(!next_prev2716.empty() && next_prev2716.front() == FAIL )) {
            next_prev2716.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2715];
        tmp = parse__();
        
        for(int i2715=0;i2715<(int)tmp.size();++i2715) {
          if( tmp[i2715] == FAIL ) {
            if(!( !next_prev2716.empty() && next_prev2716[0] == FAIL )) {
              next_prev2716.push_front(FAIL);
            }
          } else {
            next_prev2716.push_back(tmp[i2715]);
          }
        }
      }
      prev = next_prev2716;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2703=0;i2703<(int)prev.size();++i2703) {
    if( prev[i2703] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2703]);
    }
  }
  return memo[key(376,backtracking_ptr_for_packrat376)] = result;
}

inline deque<int> parse_not2709() { 
  if(memo.count(key(377,i))) {
    return memo[key(377,i)];
  }
  int backtracking_ptr_for_packrat377=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2712;
  for(int i2711=0;i2711<(int)prev.size();++i2711) {
    if( prev[i2711] == FAIL ) {
      if(!(!next_prev2712.empty() && next_prev2712.front() == FAIL )) {
        next_prev2712.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2711];
    tmp = parse_W();
    
    for(int i2711=0;i2711<(int)tmp.size();++i2711) {
      if( tmp[i2711] == FAIL ) {
        if(!( !next_prev2712.empty() && next_prev2712[0] == FAIL )) {
          next_prev2712.push_front(FAIL);
        }
      } else {
        next_prev2712.push_back(tmp[i2711]);
      }
    }
  }
  prev = next_prev2712;
  for(int i2710=0;i2710<(int)prev.size();++i2710) {
    if( prev[i2710] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2710]);
    }
  }
  return memo[key(377,backtracking_ptr_for_packrat377)] = result;
}

inline deque<int> parse_slash2718() { 
  if(memo.count(key(378,i))) {
    return memo[key(378,i)];
  }
  int backtracking_ptr_for_packrat378=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2720=0;i2720<(int)prev.size();++i2720) {
        if( prev[i2720] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2720]<m&&I[prev[i2720]]=='s') {
          tmp.push_back(prev[i2720]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2721=0;i2721<(int)prev.size();++i2721) {
        if( prev[i2721] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2721]<m&&I[prev[i2721]]=='t') {
          tmp.push_back(prev[i2721]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2722=0;i2722<(int)prev.size();++i2722) {
        if( prev[i2722] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2722]<m&&I[prev[i2722]]=='a') {
          tmp.push_back(prev[i2722]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2723=0;i2723<(int)prev.size();++i2723) {
        if( prev[i2723] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2723]<m&&I[prev[i2723]]=='t') {
          tmp.push_back(prev[i2723]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2724=0;i2724<(int)prev.size();++i2724) {
        if( prev[i2724] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2724]<m&&I[prev[i2724]]=='i') {
          tmp.push_back(prev[i2724]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2725=0;i2725<(int)prev.size();++i2725) {
        if( prev[i2725] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2725]<m&&I[prev[i2725]]=='c') {
          tmp.push_back(prev[i2725]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2731;
      for(int i2730=0;i2730<(int)prev.size();++i2730) {
        i = prev[i2730];
        tmp = parse_not2726();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2731.push_back(prev[i2730]);
        } else {
          if(!(!next_prev2731.empty()&&next_prev2731.front()==FAIL)) {
            next_prev2731.push_front(FAIL);
          }
        }
      }
      prev = next_prev2731;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2733;
      for(int i2732=0;i2732<(int)prev.size();++i2732) {
        if( prev[i2732] == FAIL ) {
          if(!(!next_prev2733.empty() && next_prev2733.front() == FAIL )) {
            next_prev2733.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2732];
        tmp = parse__();
        
        for(int i2732=0;i2732<(int)tmp.size();++i2732) {
          if( tmp[i2732] == FAIL ) {
            if(!( !next_prev2733.empty() && next_prev2733[0] == FAIL )) {
              next_prev2733.push_front(FAIL);
            }
          } else {
            next_prev2733.push_back(tmp[i2732]);
          }
        }
      }
      prev = next_prev2733;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2719=0;i2719<(int)prev.size();++i2719) {
    if( prev[i2719] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2719]);
    }
  }
  return memo[key(378,backtracking_ptr_for_packrat378)] = result;
}

inline deque<int> parse_not2726() { 
  if(memo.count(key(379,i))) {
    return memo[key(379,i)];
  }
  int backtracking_ptr_for_packrat379=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2729;
  for(int i2728=0;i2728<(int)prev.size();++i2728) {
    if( prev[i2728] == FAIL ) {
      if(!(!next_prev2729.empty() && next_prev2729.front() == FAIL )) {
        next_prev2729.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2728];
    tmp = parse_W();
    
    for(int i2728=0;i2728<(int)tmp.size();++i2728) {
      if( tmp[i2728] == FAIL ) {
        if(!( !next_prev2729.empty() && next_prev2729[0] == FAIL )) {
          next_prev2729.push_front(FAIL);
        }
      } else {
        next_prev2729.push_back(tmp[i2728]);
      }
    }
  }
  prev = next_prev2729;
  for(int i2727=0;i2727<(int)prev.size();++i2727) {
    if( prev[i2727] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2727]);
    }
  }
  return memo[key(379,backtracking_ptr_for_packrat379)] = result;
}

deque<int> parse_MethodDeclaration(){
  if(memo.count(key(380,i))) {
    return memo[key(380,i)];
  }
  int backtracking_ptr_for_packrat380=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev2737;
    deque<int> prioritized_choice_final_prev2738;
    next_prev2737.clear();
    for(int i2736=0;i2736<(int)prev.size();++i2736) {
      i = prev[i2736];
      tmp = parse_slash2739();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2737.push_back(prev[i2736]); }
      for(int i2743=0;i2743<(int)tmp.size();++i2743) {
        if( tmp[i2743] != FAIL ) {
          prioritized_choice_final_prev2738.push_back(tmp[i2743]);
        }
      }
    }
    prev = next_prev2737;
    next_prev2737.clear();
    for(int i2736=0;i2736<(int)prev.size();++i2736) {
      i = prev[i2736];
      tmp = parse_slash2744();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2737.push_back(prev[i2736]); }
      for(int i2746=0;i2746<(int)tmp.size();++i2746) {
        if( tmp[i2746] != FAIL ) {
          prioritized_choice_final_prev2738.push_back(tmp[i2746]);
        }
      }
    }
    prev = next_prev2737;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev2738.empty() && prioritized_choice_final_prev2738.front() == FAIL )) {
        prioritized_choice_final_prev2738.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev2738;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev2748;
    deque<int> prioritized_choice_final_prev2749;
    next_prev2748.clear();
    for(int i2747=0;i2747<(int)prev.size();++i2747) {
      i = prev[i2747];
      tmp = parse_slash2750();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2748.push_back(prev[i2747]); }
      for(int i2765=0;i2765<(int)tmp.size();++i2765) {
        if( tmp[i2765] != FAIL ) {
          prioritized_choice_final_prev2749.push_back(tmp[i2765]);
        }
      }
    }
    prev = next_prev2748;
    next_prev2748.clear();
    for(int i2747=0;i2747<(int)prev.size();++i2747) {
      i = prev[i2747];
      tmp = parse_slash2766();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2748.push_back(prev[i2747]); }
      for(int i2768=0;i2768<(int)tmp.size();++i2768) {
        if( tmp[i2768] != FAIL ) {
          prioritized_choice_final_prev2749.push_back(tmp[i2768]);
        }
      }
    }
    prev = next_prev2748;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev2749.empty() && prioritized_choice_final_prev2749.front() == FAIL )) {
        prioritized_choice_final_prev2749.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev2749;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (TypeOrVoid) */
    deque<int> next_prev2770;
    for(int i2769=0;i2769<(int)prev.size();++i2769) {
      if( prev[i2769] == FAIL ) {
        if(!(!next_prev2770.empty() && next_prev2770.front() == FAIL )) {
          next_prev2770.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2769];
      tmp = parse_TypeOrVoid();
      
      for(int i2769=0;i2769<(int)tmp.size();++i2769) {
        if( tmp[i2769] == FAIL ) {
          if(!( !next_prev2770.empty() && next_prev2770[0] == FAIL )) {
            next_prev2770.push_front(FAIL);
          }
        } else {
          next_prev2770.push_back(tmp[i2769]);
        }
      }
    }
    prev = next_prev2770;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev2772;
    for(int i2771=0;i2771<(int)prev.size();++i2771) {
      if( prev[i2771] == FAIL ) {
        if(!(!next_prev2772.empty() && next_prev2772.front() == FAIL )) {
          next_prev2772.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2771];
      tmp = parse_Identifier();
      
      for(int i2771=0;i2771<(int)tmp.size();++i2771) {
        if( tmp[i2771] == FAIL ) {
          if(!( !next_prev2772.empty() && next_prev2772[0] == FAIL )) {
            next_prev2772.push_front(FAIL);
          }
        } else {
          next_prev2772.push_back(tmp[i2771]);
        }
      }
    }
    prev = next_prev2772;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2773=0;i2773<(int)prev.size();++i2773) {
        if( prev[i2773] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2773]<m&&I[prev[i2773]]=='(') {
          tmp.push_back(prev[i2773]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2775;
      for(int i2774=0;i2774<(int)prev.size();++i2774) {
        if( prev[i2774] == FAIL ) {
          if(!(!next_prev2775.empty() && next_prev2775.front() == FAIL )) {
            next_prev2775.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2774];
        tmp = parse__();
        
        for(int i2774=0;i2774<(int)tmp.size();++i2774) {
          if( tmp[i2774] == FAIL ) {
            if(!( !next_prev2775.empty() && next_prev2775[0] == FAIL )) {
              next_prev2775.push_front(FAIL);
            }
          } else {
            next_prev2775.push_back(tmp[i2774]);
          }
        }
      }
      prev = next_prev2775;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (MethodParamList) */
    deque<int> next_prev2777;
    for(int i2776=0;i2776<(int)prev.size();++i2776) {
      if( prev[i2776] == FAIL ) {
        if(!(!next_prev2777.empty() && next_prev2777.front() == FAIL )) {
          next_prev2777.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2776];
      tmp = parse_MethodParamList();
      
      for(int i2776=0;i2776<(int)tmp.size();++i2776) {
        if( tmp[i2776] == FAIL ) {
          if(!( !next_prev2777.empty() && next_prev2777[0] == FAIL )) {
            next_prev2777.push_front(FAIL);
          }
        } else {
          next_prev2777.push_back(tmp[i2776]);
        }
      }
    }
    prev = next_prev2777;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2778=0;i2778<(int)prev.size();++i2778) {
        if( prev[i2778] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2778]<m&&I[prev[i2778]]==')') {
          tmp.push_back(prev[i2778]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2780;
      for(int i2779=0;i2779<(int)prev.size();++i2779) {
        if( prev[i2779] == FAIL ) {
          if(!(!next_prev2780.empty() && next_prev2780.front() == FAIL )) {
            next_prev2780.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2779];
        tmp = parse__();
        
        for(int i2779=0;i2779<(int)tmp.size();++i2779) {
          if( tmp[i2779] == FAIL ) {
            if(!( !next_prev2780.empty() && next_prev2780[0] == FAIL )) {
              next_prev2780.push_front(FAIL);
            }
          } else {
            next_prev2780.push_back(tmp[i2779]);
          }
        }
      }
      prev = next_prev2780;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev2782;
    deque<int> prioritized_choice_final_prev2783;
    next_prev2782.clear();
    for(int i2781=0;i2781<(int)prev.size();++i2781) {
      i = prev[i2781];
      tmp = parse_slash2784();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2782.push_back(prev[i2781]); }
      for(int i2788=0;i2788<(int)tmp.size();++i2788) {
        if( tmp[i2788] != FAIL ) {
          prioritized_choice_final_prev2783.push_back(tmp[i2788]);
        }
      }
    }
    prev = next_prev2782;
    next_prev2782.clear();
    for(int i2781=0;i2781<(int)prev.size();++i2781) {
      i = prev[i2781];
      tmp = parse_slash2789();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2782.push_back(prev[i2781]); }
      for(int i2791=0;i2791<(int)tmp.size();++i2791) {
        if( tmp[i2791] != FAIL ) {
          prioritized_choice_final_prev2783.push_back(tmp[i2791]);
        }
      }
    }
    prev = next_prev2782;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev2783.empty() && prioritized_choice_final_prev2783.front() == FAIL )) {
        prioritized_choice_final_prev2783.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev2783;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev2793;
    deque<int> prioritized_choice_final_prev2794;
    next_prev2793.clear();
    for(int i2792=0;i2792<(int)prev.size();++i2792) {
      i = prev[i2792];
      tmp = parse_slash2795();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2793.push_back(prev[i2792]); }
      for(int i2799=0;i2799<(int)tmp.size();++i2799) {
        if( tmp[i2799] != FAIL ) {
          prioritized_choice_final_prev2794.push_back(tmp[i2799]);
        }
      }
    }
    prev = next_prev2793;
    next_prev2793.clear();
    for(int i2792=0;i2792<(int)prev.size();++i2792) {
      i = prev[i2792];
      tmp = parse_slash2800();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2793.push_back(prev[i2792]); }
      for(int i2805=0;i2805<(int)tmp.size();++i2805) {
        if( tmp[i2805] != FAIL ) {
          prioritized_choice_final_prev2794.push_back(tmp[i2805]);
        }
      }
    }
    prev = next_prev2793;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev2794.empty() && prioritized_choice_final_prev2794.front() == FAIL )) {
        prioritized_choice_final_prev2794.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev2794;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2735=0;i2735<(int)prev.size();++i2735) {
    if( prev[i2735] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2735]);
    }
  }
  return memo[key(380,backtracking_ptr_for_packrat380)] = result;
}

inline deque<int> parse_slash2739() { 
  if(memo.count(key(381,i))) {
    return memo[key(381,i)];
  }
  int backtracking_ptr_for_packrat381=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (MethodModifiers) */
    deque<int> next_prev2742;
    for(int i2741=0;i2741<(int)prev.size();++i2741) {
      if( prev[i2741] == FAIL ) {
        if(!(!next_prev2742.empty() && next_prev2742.front() == FAIL )) {
          next_prev2742.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2741];
      tmp = parse_MethodModifiers();
      
      for(int i2741=0;i2741<(int)tmp.size();++i2741) {
        if( tmp[i2741] == FAIL ) {
          if(!( !next_prev2742.empty() && next_prev2742[0] == FAIL )) {
            next_prev2742.push_front(FAIL);
          }
        } else {
          next_prev2742.push_back(tmp[i2741]);
        }
      }
    }
    prev = next_prev2742;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2740=0;i2740<(int)prev.size();++i2740) {
    if( prev[i2740] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2740]);
    }
  }
  return memo[key(381,backtracking_ptr_for_packrat381)] = result;
}

inline deque<int> parse_slash2744() { 
  if(memo.count(key(382,i))) {
    return memo[key(382,i)];
  }
  int backtracking_ptr_for_packrat382=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i2745=0;i2745<(int)prev.size();++i2745) {
    if( prev[i2745] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2745]);
    }
  }
  return memo[key(382,backtracking_ptr_for_packrat382)] = result;
}

inline deque<int> parse_slash2750() { 
  if(memo.count(key(383,i))) {
    return memo[key(383,i)];
  }
  int backtracking_ptr_for_packrat383=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (TypeParameters) */
    deque<int> next_prev2753;
    for(int i2752=0;i2752<(int)prev.size();++i2752) {
      if( prev[i2752] == FAIL ) {
        if(!(!next_prev2753.empty() && next_prev2753.front() == FAIL )) {
          next_prev2753.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2752];
      tmp = parse_TypeParameters();
      
      for(int i2752=0;i2752<(int)tmp.size();++i2752) {
        if( tmp[i2752] == FAIL ) {
          if(!( !next_prev2753.empty() && next_prev2753[0] == FAIL )) {
            next_prev2753.push_front(FAIL);
          }
        } else {
          next_prev2753.push_back(tmp[i2752]);
        }
      }
    }
    prev = next_prev2753;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev2755;
    deque<int> prioritized_choice_final_prev2756;
    next_prev2755.clear();
    for(int i2754=0;i2754<(int)prev.size();++i2754) {
      i = prev[i2754];
      tmp = parse_slash2757();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2755.push_back(prev[i2754]); }
      for(int i2761=0;i2761<(int)tmp.size();++i2761) {
        if( tmp[i2761] != FAIL ) {
          prioritized_choice_final_prev2756.push_back(tmp[i2761]);
        }
      }
    }
    prev = next_prev2755;
    next_prev2755.clear();
    for(int i2754=0;i2754<(int)prev.size();++i2754) {
      i = prev[i2754];
      tmp = parse_slash2762();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2755.push_back(prev[i2754]); }
      for(int i2764=0;i2764<(int)tmp.size();++i2764) {
        if( tmp[i2764] != FAIL ) {
          prioritized_choice_final_prev2756.push_back(tmp[i2764]);
        }
      }
    }
    prev = next_prev2755;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev2756.empty() && prioritized_choice_final_prev2756.front() == FAIL )) {
        prioritized_choice_final_prev2756.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev2756;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2751=0;i2751<(int)prev.size();++i2751) {
    if( prev[i2751] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2751]);
    }
  }
  return memo[key(383,backtracking_ptr_for_packrat383)] = result;
}

inline deque<int> parse_slash2757() { 
  if(memo.count(key(384,i))) {
    return memo[key(384,i)];
  }
  int backtracking_ptr_for_packrat384=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotations) */
    deque<int> next_prev2760;
    for(int i2759=0;i2759<(int)prev.size();++i2759) {
      if( prev[i2759] == FAIL ) {
        if(!(!next_prev2760.empty() && next_prev2760.front() == FAIL )) {
          next_prev2760.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2759];
      tmp = parse_Annotations();
      
      for(int i2759=0;i2759<(int)tmp.size();++i2759) {
        if( tmp[i2759] == FAIL ) {
          if(!( !next_prev2760.empty() && next_prev2760[0] == FAIL )) {
            next_prev2760.push_front(FAIL);
          }
        } else {
          next_prev2760.push_back(tmp[i2759]);
        }
      }
    }
    prev = next_prev2760;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2758=0;i2758<(int)prev.size();++i2758) {
    if( prev[i2758] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2758]);
    }
  }
  return memo[key(384,backtracking_ptr_for_packrat384)] = result;
}

inline deque<int> parse_slash2762() { 
  if(memo.count(key(385,i))) {
    return memo[key(385,i)];
  }
  int backtracking_ptr_for_packrat385=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i2763=0;i2763<(int)prev.size();++i2763) {
    if( prev[i2763] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2763]);
    }
  }
  return memo[key(385,backtracking_ptr_for_packrat385)] = result;
}

inline deque<int> parse_slash2766() { 
  if(memo.count(key(386,i))) {
    return memo[key(386,i)];
  }
  int backtracking_ptr_for_packrat386=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i2767=0;i2767<(int)prev.size();++i2767) {
    if( prev[i2767] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2767]);
    }
  }
  return memo[key(386,backtracking_ptr_for_packrat386)] = result;
}

inline deque<int> parse_slash2784() { 
  if(memo.count(key(387,i))) {
    return memo[key(387,i)];
  }
  int backtracking_ptr_for_packrat387=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Throws) */
    deque<int> next_prev2787;
    for(int i2786=0;i2786<(int)prev.size();++i2786) {
      if( prev[i2786] == FAIL ) {
        if(!(!next_prev2787.empty() && next_prev2787.front() == FAIL )) {
          next_prev2787.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2786];
      tmp = parse_Throws();
      
      for(int i2786=0;i2786<(int)tmp.size();++i2786) {
        if( tmp[i2786] == FAIL ) {
          if(!( !next_prev2787.empty() && next_prev2787[0] == FAIL )) {
            next_prev2787.push_front(FAIL);
          }
        } else {
          next_prev2787.push_back(tmp[i2786]);
        }
      }
    }
    prev = next_prev2787;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2785=0;i2785<(int)prev.size();++i2785) {
    if( prev[i2785] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2785]);
    }
  }
  return memo[key(387,backtracking_ptr_for_packrat387)] = result;
}

inline deque<int> parse_slash2789() { 
  if(memo.count(key(388,i))) {
    return memo[key(388,i)];
  }
  int backtracking_ptr_for_packrat388=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i2790=0;i2790<(int)prev.size();++i2790) {
    if( prev[i2790] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2790]);
    }
  }
  return memo[key(388,backtracking_ptr_for_packrat388)] = result;
}

inline deque<int> parse_slash2795() { 
  if(memo.count(key(389,i))) {
    return memo[key(389,i)];
  }
  int backtracking_ptr_for_packrat389=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Block) */
    deque<int> next_prev2798;
    for(int i2797=0;i2797<(int)prev.size();++i2797) {
      if( prev[i2797] == FAIL ) {
        if(!(!next_prev2798.empty() && next_prev2798.front() == FAIL )) {
          next_prev2798.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2797];
      tmp = parse_Block();
      
      for(int i2797=0;i2797<(int)tmp.size();++i2797) {
        if( tmp[i2797] == FAIL ) {
          if(!( !next_prev2798.empty() && next_prev2798[0] == FAIL )) {
            next_prev2798.push_front(FAIL);
          }
        } else {
          next_prev2798.push_back(tmp[i2797]);
        }
      }
    }
    prev = next_prev2798;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2796=0;i2796<(int)prev.size();++i2796) {
    if( prev[i2796] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2796]);
    }
  }
  return memo[key(389,backtracking_ptr_for_packrat389)] = result;
}

inline deque<int> parse_slash2800() { 
  if(memo.count(key(390,i))) {
    return memo[key(390,i)];
  }
  int backtracking_ptr_for_packrat390=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2802=0;i2802<(int)prev.size();++i2802) {
        if( prev[i2802] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2802]<m&&I[prev[i2802]]==';') {
          tmp.push_back(prev[i2802]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2804;
      for(int i2803=0;i2803<(int)prev.size();++i2803) {
        if( prev[i2803] == FAIL ) {
          if(!(!next_prev2804.empty() && next_prev2804.front() == FAIL )) {
            next_prev2804.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2803];
        tmp = parse__();
        
        for(int i2803=0;i2803<(int)tmp.size();++i2803) {
          if( tmp[i2803] == FAIL ) {
            if(!( !next_prev2804.empty() && next_prev2804[0] == FAIL )) {
              next_prev2804.push_front(FAIL);
            }
          } else {
            next_prev2804.push_back(tmp[i2803]);
          }
        }
      }
      prev = next_prev2804;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2801=0;i2801<(int)prev.size();++i2801) {
    if( prev[i2801] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2801]);
    }
  }
  return memo[key(390,backtracking_ptr_for_packrat390)] = result;
}

deque<int> parse_MethodModifiers(){
  if(memo.count(key(391,i))) {
    return memo[key(391,i)];
  }
  int backtracking_ptr_for_packrat391=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (MethodModifier) */
    deque<int> next_prev2808;
    for(int i2807=0;i2807<(int)prev.size();++i2807) {
      if( prev[i2807] == FAIL ) {
        if(!(!next_prev2808.empty() && next_prev2808.front() == FAIL )) {
          next_prev2808.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2807];
      tmp = parse_MethodModifier();
      
      for(int i2807=0;i2807<(int)tmp.size();++i2807) {
        if( tmp[i2807] == FAIL ) {
          if(!( !next_prev2808.empty() && next_prev2808[0] == FAIL )) {
            next_prev2808.push_front(FAIL);
          }
        } else {
          next_prev2808.push_back(tmp[i2807]);
        }
      }
    }
    prev = next_prev2808;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev2813;
    deque<int> star_final_prev2814;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev2813.clear();
      for(int i2815=0;i2815<(int)prev.size();++i2815) {
        i = prev[i2815];
        tmp = parse_while2809();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev2814.push_back(prev[i2815]);
        }
        for(int i2816=0;i2816<(int)tmp.size();++i2816) {
          if(tmp[i2816]==FAIL) {
            if(!( !next_prev2813.empty() && next_prev2813.front() == FAIL )) {
              next_prev2813.push_front(FAIL);
            }
          } else {
            next_prev2813.push_back(tmp[i2816]);
          }
        }
      }
      prev = next_prev2813;
    }
    prev = star_final_prev2814;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2806=0;i2806<(int)prev.size();++i2806) {
    if( prev[i2806] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2806]);
    }
  }
  return memo[key(391,backtracking_ptr_for_packrat391)] = result;
}

inline deque<int> parse_while2809() { 
  if(memo.count(key(392,i))) {
    return memo[key(392,i)];
  }
  int backtracking_ptr_for_packrat392=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (MethodModifier) */
    deque<int> next_prev2812;
    for(int i2811=0;i2811<(int)prev.size();++i2811) {
      if( prev[i2811] == FAIL ) {
        if(!(!next_prev2812.empty() && next_prev2812.front() == FAIL )) {
          next_prev2812.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2811];
      tmp = parse_MethodModifier();
      
      for(int i2811=0;i2811<(int)tmp.size();++i2811) {
        if( tmp[i2811] == FAIL ) {
          if(!( !next_prev2812.empty() && next_prev2812[0] == FAIL )) {
            next_prev2812.push_front(FAIL);
          }
        } else {
          next_prev2812.push_back(tmp[i2811]);
        }
      }
    }
    prev = next_prev2812;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2810=0;i2810<(int)prev.size();++i2810) {
    if( prev[i2810] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2810]);
    }
  }
  return memo[key(392,backtracking_ptr_for_packrat392)] = result;
}

deque<int> parse_MethodModifier(){
  if(memo.count(key(393,i))) {
    return memo[key(393,i)];
  }
  int backtracking_ptr_for_packrat393=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev2819;
  deque<int> prioritized_choice_final_prev2820;
  next_prev2819.clear();
  for(int i2818=0;i2818<(int)prev.size();++i2818) {
    i = prev[i2818];
    tmp = parse_slash2821();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2819.push_back(prev[i2818]); }
    for(int i2825=0;i2825<(int)tmp.size();++i2825) {
      if( tmp[i2825] != FAIL ) {
        prioritized_choice_final_prev2820.push_back(tmp[i2825]);
      }
    }
  }
  prev = next_prev2819;
  next_prev2819.clear();
  for(int i2818=0;i2818<(int)prev.size();++i2818) {
    i = prev[i2818];
    tmp = parse_slash2826();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2819.push_back(prev[i2818]); }
    for(int i2842=0;i2842<(int)tmp.size();++i2842) {
      if( tmp[i2842] != FAIL ) {
        prioritized_choice_final_prev2820.push_back(tmp[i2842]);
      }
    }
  }
  prev = next_prev2819;
  next_prev2819.clear();
  for(int i2818=0;i2818<(int)prev.size();++i2818) {
    i = prev[i2818];
    tmp = parse_slash2843();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2819.push_back(prev[i2818]); }
    for(int i2862=0;i2862<(int)tmp.size();++i2862) {
      if( tmp[i2862] != FAIL ) {
        prioritized_choice_final_prev2820.push_back(tmp[i2862]);
      }
    }
  }
  prev = next_prev2819;
  next_prev2819.clear();
  for(int i2818=0;i2818<(int)prev.size();++i2818) {
    i = prev[i2818];
    tmp = parse_slash2863();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2819.push_back(prev[i2818]); }
    for(int i2880=0;i2880<(int)tmp.size();++i2880) {
      if( tmp[i2880] != FAIL ) {
        prioritized_choice_final_prev2820.push_back(tmp[i2880]);
      }
    }
  }
  prev = next_prev2819;
  next_prev2819.clear();
  for(int i2818=0;i2818<(int)prev.size();++i2818) {
    i = prev[i2818];
    tmp = parse_slash2881();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2819.push_back(prev[i2818]); }
    for(int i2896=0;i2896<(int)tmp.size();++i2896) {
      if( tmp[i2896] != FAIL ) {
        prioritized_choice_final_prev2820.push_back(tmp[i2896]);
      }
    }
  }
  prev = next_prev2819;
  next_prev2819.clear();
  for(int i2818=0;i2818<(int)prev.size();++i2818) {
    i = prev[i2818];
    tmp = parse_slash2897();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2819.push_back(prev[i2818]); }
    for(int i2913=0;i2913<(int)tmp.size();++i2913) {
      if( tmp[i2913] != FAIL ) {
        prioritized_choice_final_prev2820.push_back(tmp[i2913]);
      }
    }
  }
  prev = next_prev2819;
  next_prev2819.clear();
  for(int i2818=0;i2818<(int)prev.size();++i2818) {
    i = prev[i2818];
    tmp = parse_slash2914();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2819.push_back(prev[i2818]); }
    for(int i2936=0;i2936<(int)tmp.size();++i2936) {
      if( tmp[i2936] != FAIL ) {
        prioritized_choice_final_prev2820.push_back(tmp[i2936]);
      }
    }
  }
  prev = next_prev2819;
  next_prev2819.clear();
  for(int i2818=0;i2818<(int)prev.size();++i2818) {
    i = prev[i2818];
    tmp = parse_slash2937();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2819.push_back(prev[i2818]); }
    for(int i2956=0;i2956<(int)tmp.size();++i2956) {
      if( tmp[i2956] != FAIL ) {
        prioritized_choice_final_prev2820.push_back(tmp[i2956]);
      }
    }
  }
  prev = next_prev2819;
  next_prev2819.clear();
  for(int i2818=0;i2818<(int)prev.size();++i2818) {
    i = prev[i2818];
    tmp = parse_slash2957();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2819.push_back(prev[i2818]); }
    for(int i2975=0;i2975<(int)tmp.size();++i2975) {
      if( tmp[i2975] != FAIL ) {
        prioritized_choice_final_prev2820.push_back(tmp[i2975]);
      }
    }
  }
  prev = next_prev2819;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev2820.empty() && prioritized_choice_final_prev2820.front() == FAIL )) {
      prioritized_choice_final_prev2820.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev2820;
  for(int i2817=0;i2817<(int)prev.size();++i2817) {
    if( prev[i2817] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2817]);
    }
  }
  return memo[key(393,backtracking_ptr_for_packrat393)] = result;
}

inline deque<int> parse_slash2821() { 
  if(memo.count(key(394,i))) {
    return memo[key(394,i)];
  }
  int backtracking_ptr_for_packrat394=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotation) */
    deque<int> next_prev2824;
    for(int i2823=0;i2823<(int)prev.size();++i2823) {
      if( prev[i2823] == FAIL ) {
        if(!(!next_prev2824.empty() && next_prev2824.front() == FAIL )) {
          next_prev2824.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2823];
      tmp = parse_Annotation();
      
      for(int i2823=0;i2823<(int)tmp.size();++i2823) {
        if( tmp[i2823] == FAIL ) {
          if(!( !next_prev2824.empty() && next_prev2824[0] == FAIL )) {
            next_prev2824.push_front(FAIL);
          }
        } else {
          next_prev2824.push_back(tmp[i2823]);
        }
      }
    }
    prev = next_prev2824;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2822=0;i2822<(int)prev.size();++i2822) {
    if( prev[i2822] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2822]);
    }
  }
  return memo[key(394,backtracking_ptr_for_packrat394)] = result;
}

inline deque<int> parse_slash2826() { 
  if(memo.count(key(395,i))) {
    return memo[key(395,i)];
  }
  int backtracking_ptr_for_packrat395=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2828=0;i2828<(int)prev.size();++i2828) {
        if( prev[i2828] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2828]<m&&I[prev[i2828]]=='p') {
          tmp.push_back(prev[i2828]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2829=0;i2829<(int)prev.size();++i2829) {
        if( prev[i2829] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2829]<m&&I[prev[i2829]]=='u') {
          tmp.push_back(prev[i2829]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2830=0;i2830<(int)prev.size();++i2830) {
        if( prev[i2830] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2830]<m&&I[prev[i2830]]=='b') {
          tmp.push_back(prev[i2830]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2831=0;i2831<(int)prev.size();++i2831) {
        if( prev[i2831] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2831]<m&&I[prev[i2831]]=='l') {
          tmp.push_back(prev[i2831]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2832=0;i2832<(int)prev.size();++i2832) {
        if( prev[i2832] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2832]<m&&I[prev[i2832]]=='i') {
          tmp.push_back(prev[i2832]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2833=0;i2833<(int)prev.size();++i2833) {
        if( prev[i2833] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2833]<m&&I[prev[i2833]]=='c') {
          tmp.push_back(prev[i2833]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2839;
      for(int i2838=0;i2838<(int)prev.size();++i2838) {
        i = prev[i2838];
        tmp = parse_not2834();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2839.push_back(prev[i2838]);
        } else {
          if(!(!next_prev2839.empty()&&next_prev2839.front()==FAIL)) {
            next_prev2839.push_front(FAIL);
          }
        }
      }
      prev = next_prev2839;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2841;
      for(int i2840=0;i2840<(int)prev.size();++i2840) {
        if( prev[i2840] == FAIL ) {
          if(!(!next_prev2841.empty() && next_prev2841.front() == FAIL )) {
            next_prev2841.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2840];
        tmp = parse__();
        
        for(int i2840=0;i2840<(int)tmp.size();++i2840) {
          if( tmp[i2840] == FAIL ) {
            if(!( !next_prev2841.empty() && next_prev2841[0] == FAIL )) {
              next_prev2841.push_front(FAIL);
            }
          } else {
            next_prev2841.push_back(tmp[i2840]);
          }
        }
      }
      prev = next_prev2841;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2827=0;i2827<(int)prev.size();++i2827) {
    if( prev[i2827] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2827]);
    }
  }
  return memo[key(395,backtracking_ptr_for_packrat395)] = result;
}

inline deque<int> parse_not2834() { 
  if(memo.count(key(396,i))) {
    return memo[key(396,i)];
  }
  int backtracking_ptr_for_packrat396=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2837;
  for(int i2836=0;i2836<(int)prev.size();++i2836) {
    if( prev[i2836] == FAIL ) {
      if(!(!next_prev2837.empty() && next_prev2837.front() == FAIL )) {
        next_prev2837.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2836];
    tmp = parse_W();
    
    for(int i2836=0;i2836<(int)tmp.size();++i2836) {
      if( tmp[i2836] == FAIL ) {
        if(!( !next_prev2837.empty() && next_prev2837[0] == FAIL )) {
          next_prev2837.push_front(FAIL);
        }
      } else {
        next_prev2837.push_back(tmp[i2836]);
      }
    }
  }
  prev = next_prev2837;
  for(int i2835=0;i2835<(int)prev.size();++i2835) {
    if( prev[i2835] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2835]);
    }
  }
  return memo[key(396,backtracking_ptr_for_packrat396)] = result;
}

inline deque<int> parse_slash2843() { 
  if(memo.count(key(397,i))) {
    return memo[key(397,i)];
  }
  int backtracking_ptr_for_packrat397=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2845=0;i2845<(int)prev.size();++i2845) {
        if( prev[i2845] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2845]<m&&I[prev[i2845]]=='p') {
          tmp.push_back(prev[i2845]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2846=0;i2846<(int)prev.size();++i2846) {
        if( prev[i2846] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2846]<m&&I[prev[i2846]]=='r') {
          tmp.push_back(prev[i2846]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2847=0;i2847<(int)prev.size();++i2847) {
        if( prev[i2847] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2847]<m&&I[prev[i2847]]=='o') {
          tmp.push_back(prev[i2847]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2848=0;i2848<(int)prev.size();++i2848) {
        if( prev[i2848] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2848]<m&&I[prev[i2848]]=='t') {
          tmp.push_back(prev[i2848]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2849=0;i2849<(int)prev.size();++i2849) {
        if( prev[i2849] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2849]<m&&I[prev[i2849]]=='e') {
          tmp.push_back(prev[i2849]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2850=0;i2850<(int)prev.size();++i2850) {
        if( prev[i2850] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2850]<m&&I[prev[i2850]]=='c') {
          tmp.push_back(prev[i2850]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2851=0;i2851<(int)prev.size();++i2851) {
        if( prev[i2851] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2851]<m&&I[prev[i2851]]=='t') {
          tmp.push_back(prev[i2851]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2852=0;i2852<(int)prev.size();++i2852) {
        if( prev[i2852] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2852]<m&&I[prev[i2852]]=='e') {
          tmp.push_back(prev[i2852]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2853=0;i2853<(int)prev.size();++i2853) {
        if( prev[i2853] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2853]<m&&I[prev[i2853]]=='d') {
          tmp.push_back(prev[i2853]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2859;
      for(int i2858=0;i2858<(int)prev.size();++i2858) {
        i = prev[i2858];
        tmp = parse_not2854();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2859.push_back(prev[i2858]);
        } else {
          if(!(!next_prev2859.empty()&&next_prev2859.front()==FAIL)) {
            next_prev2859.push_front(FAIL);
          }
        }
      }
      prev = next_prev2859;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2861;
      for(int i2860=0;i2860<(int)prev.size();++i2860) {
        if( prev[i2860] == FAIL ) {
          if(!(!next_prev2861.empty() && next_prev2861.front() == FAIL )) {
            next_prev2861.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2860];
        tmp = parse__();
        
        for(int i2860=0;i2860<(int)tmp.size();++i2860) {
          if( tmp[i2860] == FAIL ) {
            if(!( !next_prev2861.empty() && next_prev2861[0] == FAIL )) {
              next_prev2861.push_front(FAIL);
            }
          } else {
            next_prev2861.push_back(tmp[i2860]);
          }
        }
      }
      prev = next_prev2861;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2844=0;i2844<(int)prev.size();++i2844) {
    if( prev[i2844] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2844]);
    }
  }
  return memo[key(397,backtracking_ptr_for_packrat397)] = result;
}

inline deque<int> parse_not2854() { 
  if(memo.count(key(398,i))) {
    return memo[key(398,i)];
  }
  int backtracking_ptr_for_packrat398=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2857;
  for(int i2856=0;i2856<(int)prev.size();++i2856) {
    if( prev[i2856] == FAIL ) {
      if(!(!next_prev2857.empty() && next_prev2857.front() == FAIL )) {
        next_prev2857.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2856];
    tmp = parse_W();
    
    for(int i2856=0;i2856<(int)tmp.size();++i2856) {
      if( tmp[i2856] == FAIL ) {
        if(!( !next_prev2857.empty() && next_prev2857[0] == FAIL )) {
          next_prev2857.push_front(FAIL);
        }
      } else {
        next_prev2857.push_back(tmp[i2856]);
      }
    }
  }
  prev = next_prev2857;
  for(int i2855=0;i2855<(int)prev.size();++i2855) {
    if( prev[i2855] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2855]);
    }
  }
  return memo[key(398,backtracking_ptr_for_packrat398)] = result;
}

inline deque<int> parse_slash2863() { 
  if(memo.count(key(399,i))) {
    return memo[key(399,i)];
  }
  int backtracking_ptr_for_packrat399=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2865=0;i2865<(int)prev.size();++i2865) {
        if( prev[i2865] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2865]<m&&I[prev[i2865]]=='p') {
          tmp.push_back(prev[i2865]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2866=0;i2866<(int)prev.size();++i2866) {
        if( prev[i2866] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2866]<m&&I[prev[i2866]]=='r') {
          tmp.push_back(prev[i2866]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2867=0;i2867<(int)prev.size();++i2867) {
        if( prev[i2867] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2867]<m&&I[prev[i2867]]=='i') {
          tmp.push_back(prev[i2867]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2868=0;i2868<(int)prev.size();++i2868) {
        if( prev[i2868] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2868]<m&&I[prev[i2868]]=='v') {
          tmp.push_back(prev[i2868]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2869=0;i2869<(int)prev.size();++i2869) {
        if( prev[i2869] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2869]<m&&I[prev[i2869]]=='a') {
          tmp.push_back(prev[i2869]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2870=0;i2870<(int)prev.size();++i2870) {
        if( prev[i2870] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2870]<m&&I[prev[i2870]]=='t') {
          tmp.push_back(prev[i2870]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2871=0;i2871<(int)prev.size();++i2871) {
        if( prev[i2871] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2871]<m&&I[prev[i2871]]=='e') {
          tmp.push_back(prev[i2871]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2877;
      for(int i2876=0;i2876<(int)prev.size();++i2876) {
        i = prev[i2876];
        tmp = parse_not2872();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2877.push_back(prev[i2876]);
        } else {
          if(!(!next_prev2877.empty()&&next_prev2877.front()==FAIL)) {
            next_prev2877.push_front(FAIL);
          }
        }
      }
      prev = next_prev2877;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2879;
      for(int i2878=0;i2878<(int)prev.size();++i2878) {
        if( prev[i2878] == FAIL ) {
          if(!(!next_prev2879.empty() && next_prev2879.front() == FAIL )) {
            next_prev2879.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2878];
        tmp = parse__();
        
        for(int i2878=0;i2878<(int)tmp.size();++i2878) {
          if( tmp[i2878] == FAIL ) {
            if(!( !next_prev2879.empty() && next_prev2879[0] == FAIL )) {
              next_prev2879.push_front(FAIL);
            }
          } else {
            next_prev2879.push_back(tmp[i2878]);
          }
        }
      }
      prev = next_prev2879;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2864=0;i2864<(int)prev.size();++i2864) {
    if( prev[i2864] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2864]);
    }
  }
  return memo[key(399,backtracking_ptr_for_packrat399)] = result;
}

inline deque<int> parse_not2872() { 
  if(memo.count(key(400,i))) {
    return memo[key(400,i)];
  }
  int backtracking_ptr_for_packrat400=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2875;
  for(int i2874=0;i2874<(int)prev.size();++i2874) {
    if( prev[i2874] == FAIL ) {
      if(!(!next_prev2875.empty() && next_prev2875.front() == FAIL )) {
        next_prev2875.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2874];
    tmp = parse_W();
    
    for(int i2874=0;i2874<(int)tmp.size();++i2874) {
      if( tmp[i2874] == FAIL ) {
        if(!( !next_prev2875.empty() && next_prev2875[0] == FAIL )) {
          next_prev2875.push_front(FAIL);
        }
      } else {
        next_prev2875.push_back(tmp[i2874]);
      }
    }
  }
  prev = next_prev2875;
  for(int i2873=0;i2873<(int)prev.size();++i2873) {
    if( prev[i2873] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2873]);
    }
  }
  return memo[key(400,backtracking_ptr_for_packrat400)] = result;
}

inline deque<int> parse_slash2881() { 
  if(memo.count(key(401,i))) {
    return memo[key(401,i)];
  }
  int backtracking_ptr_for_packrat401=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2883=0;i2883<(int)prev.size();++i2883) {
        if( prev[i2883] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2883]<m&&I[prev[i2883]]=='f') {
          tmp.push_back(prev[i2883]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2884=0;i2884<(int)prev.size();++i2884) {
        if( prev[i2884] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2884]<m&&I[prev[i2884]]=='i') {
          tmp.push_back(prev[i2884]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2885=0;i2885<(int)prev.size();++i2885) {
        if( prev[i2885] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2885]<m&&I[prev[i2885]]=='n') {
          tmp.push_back(prev[i2885]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2886=0;i2886<(int)prev.size();++i2886) {
        if( prev[i2886] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2886]<m&&I[prev[i2886]]=='a') {
          tmp.push_back(prev[i2886]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2887=0;i2887<(int)prev.size();++i2887) {
        if( prev[i2887] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2887]<m&&I[prev[i2887]]=='l') {
          tmp.push_back(prev[i2887]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2893;
      for(int i2892=0;i2892<(int)prev.size();++i2892) {
        i = prev[i2892];
        tmp = parse_not2888();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2893.push_back(prev[i2892]);
        } else {
          if(!(!next_prev2893.empty()&&next_prev2893.front()==FAIL)) {
            next_prev2893.push_front(FAIL);
          }
        }
      }
      prev = next_prev2893;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2895;
      for(int i2894=0;i2894<(int)prev.size();++i2894) {
        if( prev[i2894] == FAIL ) {
          if(!(!next_prev2895.empty() && next_prev2895.front() == FAIL )) {
            next_prev2895.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2894];
        tmp = parse__();
        
        for(int i2894=0;i2894<(int)tmp.size();++i2894) {
          if( tmp[i2894] == FAIL ) {
            if(!( !next_prev2895.empty() && next_prev2895[0] == FAIL )) {
              next_prev2895.push_front(FAIL);
            }
          } else {
            next_prev2895.push_back(tmp[i2894]);
          }
        }
      }
      prev = next_prev2895;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2882=0;i2882<(int)prev.size();++i2882) {
    if( prev[i2882] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2882]);
    }
  }
  return memo[key(401,backtracking_ptr_for_packrat401)] = result;
}

inline deque<int> parse_not2888() { 
  if(memo.count(key(402,i))) {
    return memo[key(402,i)];
  }
  int backtracking_ptr_for_packrat402=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2891;
  for(int i2890=0;i2890<(int)prev.size();++i2890) {
    if( prev[i2890] == FAIL ) {
      if(!(!next_prev2891.empty() && next_prev2891.front() == FAIL )) {
        next_prev2891.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2890];
    tmp = parse_W();
    
    for(int i2890=0;i2890<(int)tmp.size();++i2890) {
      if( tmp[i2890] == FAIL ) {
        if(!( !next_prev2891.empty() && next_prev2891[0] == FAIL )) {
          next_prev2891.push_front(FAIL);
        }
      } else {
        next_prev2891.push_back(tmp[i2890]);
      }
    }
  }
  prev = next_prev2891;
  for(int i2889=0;i2889<(int)prev.size();++i2889) {
    if( prev[i2889] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2889]);
    }
  }
  return memo[key(402,backtracking_ptr_for_packrat402)] = result;
}

inline deque<int> parse_slash2897() { 
  if(memo.count(key(403,i))) {
    return memo[key(403,i)];
  }
  int backtracking_ptr_for_packrat403=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2899=0;i2899<(int)prev.size();++i2899) {
        if( prev[i2899] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2899]<m&&I[prev[i2899]]=='s') {
          tmp.push_back(prev[i2899]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2900=0;i2900<(int)prev.size();++i2900) {
        if( prev[i2900] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2900]<m&&I[prev[i2900]]=='t') {
          tmp.push_back(prev[i2900]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2901=0;i2901<(int)prev.size();++i2901) {
        if( prev[i2901] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2901]<m&&I[prev[i2901]]=='a') {
          tmp.push_back(prev[i2901]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2902=0;i2902<(int)prev.size();++i2902) {
        if( prev[i2902] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2902]<m&&I[prev[i2902]]=='t') {
          tmp.push_back(prev[i2902]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2903=0;i2903<(int)prev.size();++i2903) {
        if( prev[i2903] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2903]<m&&I[prev[i2903]]=='i') {
          tmp.push_back(prev[i2903]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2904=0;i2904<(int)prev.size();++i2904) {
        if( prev[i2904] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2904]<m&&I[prev[i2904]]=='c') {
          tmp.push_back(prev[i2904]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2910;
      for(int i2909=0;i2909<(int)prev.size();++i2909) {
        i = prev[i2909];
        tmp = parse_not2905();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2910.push_back(prev[i2909]);
        } else {
          if(!(!next_prev2910.empty()&&next_prev2910.front()==FAIL)) {
            next_prev2910.push_front(FAIL);
          }
        }
      }
      prev = next_prev2910;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2912;
      for(int i2911=0;i2911<(int)prev.size();++i2911) {
        if( prev[i2911] == FAIL ) {
          if(!(!next_prev2912.empty() && next_prev2912.front() == FAIL )) {
            next_prev2912.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2911];
        tmp = parse__();
        
        for(int i2911=0;i2911<(int)tmp.size();++i2911) {
          if( tmp[i2911] == FAIL ) {
            if(!( !next_prev2912.empty() && next_prev2912[0] == FAIL )) {
              next_prev2912.push_front(FAIL);
            }
          } else {
            next_prev2912.push_back(tmp[i2911]);
          }
        }
      }
      prev = next_prev2912;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2898=0;i2898<(int)prev.size();++i2898) {
    if( prev[i2898] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2898]);
    }
  }
  return memo[key(403,backtracking_ptr_for_packrat403)] = result;
}

inline deque<int> parse_not2905() { 
  if(memo.count(key(404,i))) {
    return memo[key(404,i)];
  }
  int backtracking_ptr_for_packrat404=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2908;
  for(int i2907=0;i2907<(int)prev.size();++i2907) {
    if( prev[i2907] == FAIL ) {
      if(!(!next_prev2908.empty() && next_prev2908.front() == FAIL )) {
        next_prev2908.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2907];
    tmp = parse_W();
    
    for(int i2907=0;i2907<(int)tmp.size();++i2907) {
      if( tmp[i2907] == FAIL ) {
        if(!( !next_prev2908.empty() && next_prev2908[0] == FAIL )) {
          next_prev2908.push_front(FAIL);
        }
      } else {
        next_prev2908.push_back(tmp[i2907]);
      }
    }
  }
  prev = next_prev2908;
  for(int i2906=0;i2906<(int)prev.size();++i2906) {
    if( prev[i2906] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2906]);
    }
  }
  return memo[key(404,backtracking_ptr_for_packrat404)] = result;
}

inline deque<int> parse_slash2914() { 
  if(memo.count(key(405,i))) {
    return memo[key(405,i)];
  }
  int backtracking_ptr_for_packrat405=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2916=0;i2916<(int)prev.size();++i2916) {
        if( prev[i2916] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2916]<m&&I[prev[i2916]]=='s') {
          tmp.push_back(prev[i2916]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2917=0;i2917<(int)prev.size();++i2917) {
        if( prev[i2917] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2917]<m&&I[prev[i2917]]=='y') {
          tmp.push_back(prev[i2917]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2918=0;i2918<(int)prev.size();++i2918) {
        if( prev[i2918] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2918]<m&&I[prev[i2918]]=='n') {
          tmp.push_back(prev[i2918]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2919=0;i2919<(int)prev.size();++i2919) {
        if( prev[i2919] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2919]<m&&I[prev[i2919]]=='c') {
          tmp.push_back(prev[i2919]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2920=0;i2920<(int)prev.size();++i2920) {
        if( prev[i2920] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2920]<m&&I[prev[i2920]]=='h') {
          tmp.push_back(prev[i2920]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2921=0;i2921<(int)prev.size();++i2921) {
        if( prev[i2921] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2921]<m&&I[prev[i2921]]=='r') {
          tmp.push_back(prev[i2921]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2922=0;i2922<(int)prev.size();++i2922) {
        if( prev[i2922] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2922]<m&&I[prev[i2922]]=='o') {
          tmp.push_back(prev[i2922]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2923=0;i2923<(int)prev.size();++i2923) {
        if( prev[i2923] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2923]<m&&I[prev[i2923]]=='n') {
          tmp.push_back(prev[i2923]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2924=0;i2924<(int)prev.size();++i2924) {
        if( prev[i2924] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2924]<m&&I[prev[i2924]]=='i') {
          tmp.push_back(prev[i2924]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2925=0;i2925<(int)prev.size();++i2925) {
        if( prev[i2925] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2925]<m&&I[prev[i2925]]=='z') {
          tmp.push_back(prev[i2925]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2926=0;i2926<(int)prev.size();++i2926) {
        if( prev[i2926] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2926]<m&&I[prev[i2926]]=='e') {
          tmp.push_back(prev[i2926]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2927=0;i2927<(int)prev.size();++i2927) {
        if( prev[i2927] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2927]<m&&I[prev[i2927]]=='d') {
          tmp.push_back(prev[i2927]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2933;
      for(int i2932=0;i2932<(int)prev.size();++i2932) {
        i = prev[i2932];
        tmp = parse_not2928();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2933.push_back(prev[i2932]);
        } else {
          if(!(!next_prev2933.empty()&&next_prev2933.front()==FAIL)) {
            next_prev2933.push_front(FAIL);
          }
        }
      }
      prev = next_prev2933;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2935;
      for(int i2934=0;i2934<(int)prev.size();++i2934) {
        if( prev[i2934] == FAIL ) {
          if(!(!next_prev2935.empty() && next_prev2935.front() == FAIL )) {
            next_prev2935.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2934];
        tmp = parse__();
        
        for(int i2934=0;i2934<(int)tmp.size();++i2934) {
          if( tmp[i2934] == FAIL ) {
            if(!( !next_prev2935.empty() && next_prev2935[0] == FAIL )) {
              next_prev2935.push_front(FAIL);
            }
          } else {
            next_prev2935.push_back(tmp[i2934]);
          }
        }
      }
      prev = next_prev2935;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2915=0;i2915<(int)prev.size();++i2915) {
    if( prev[i2915] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2915]);
    }
  }
  return memo[key(405,backtracking_ptr_for_packrat405)] = result;
}

inline deque<int> parse_not2928() { 
  if(memo.count(key(406,i))) {
    return memo[key(406,i)];
  }
  int backtracking_ptr_for_packrat406=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2931;
  for(int i2930=0;i2930<(int)prev.size();++i2930) {
    if( prev[i2930] == FAIL ) {
      if(!(!next_prev2931.empty() && next_prev2931.front() == FAIL )) {
        next_prev2931.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2930];
    tmp = parse_W();
    
    for(int i2930=0;i2930<(int)tmp.size();++i2930) {
      if( tmp[i2930] == FAIL ) {
        if(!( !next_prev2931.empty() && next_prev2931[0] == FAIL )) {
          next_prev2931.push_front(FAIL);
        }
      } else {
        next_prev2931.push_back(tmp[i2930]);
      }
    }
  }
  prev = next_prev2931;
  for(int i2929=0;i2929<(int)prev.size();++i2929) {
    if( prev[i2929] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2929]);
    }
  }
  return memo[key(406,backtracking_ptr_for_packrat406)] = result;
}

inline deque<int> parse_slash2937() { 
  if(memo.count(key(407,i))) {
    return memo[key(407,i)];
  }
  int backtracking_ptr_for_packrat407=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2939=0;i2939<(int)prev.size();++i2939) {
        if( prev[i2939] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2939]<m&&I[prev[i2939]]=='t') {
          tmp.push_back(prev[i2939]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2940=0;i2940<(int)prev.size();++i2940) {
        if( prev[i2940] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2940]<m&&I[prev[i2940]]=='r') {
          tmp.push_back(prev[i2940]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2941=0;i2941<(int)prev.size();++i2941) {
        if( prev[i2941] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2941]<m&&I[prev[i2941]]=='a') {
          tmp.push_back(prev[i2941]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2942=0;i2942<(int)prev.size();++i2942) {
        if( prev[i2942] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2942]<m&&I[prev[i2942]]=='n') {
          tmp.push_back(prev[i2942]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2943=0;i2943<(int)prev.size();++i2943) {
        if( prev[i2943] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2943]<m&&I[prev[i2943]]=='s') {
          tmp.push_back(prev[i2943]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2944=0;i2944<(int)prev.size();++i2944) {
        if( prev[i2944] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2944]<m&&I[prev[i2944]]=='i') {
          tmp.push_back(prev[i2944]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2945=0;i2945<(int)prev.size();++i2945) {
        if( prev[i2945] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2945]<m&&I[prev[i2945]]=='e') {
          tmp.push_back(prev[i2945]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2946=0;i2946<(int)prev.size();++i2946) {
        if( prev[i2946] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2946]<m&&I[prev[i2946]]=='n') {
          tmp.push_back(prev[i2946]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2947=0;i2947<(int)prev.size();++i2947) {
        if( prev[i2947] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2947]<m&&I[prev[i2947]]=='t') {
          tmp.push_back(prev[i2947]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2953;
      for(int i2952=0;i2952<(int)prev.size();++i2952) {
        i = prev[i2952];
        tmp = parse_not2948();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2953.push_back(prev[i2952]);
        } else {
          if(!(!next_prev2953.empty()&&next_prev2953.front()==FAIL)) {
            next_prev2953.push_front(FAIL);
          }
        }
      }
      prev = next_prev2953;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2955;
      for(int i2954=0;i2954<(int)prev.size();++i2954) {
        if( prev[i2954] == FAIL ) {
          if(!(!next_prev2955.empty() && next_prev2955.front() == FAIL )) {
            next_prev2955.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2954];
        tmp = parse__();
        
        for(int i2954=0;i2954<(int)tmp.size();++i2954) {
          if( tmp[i2954] == FAIL ) {
            if(!( !next_prev2955.empty() && next_prev2955[0] == FAIL )) {
              next_prev2955.push_front(FAIL);
            }
          } else {
            next_prev2955.push_back(tmp[i2954]);
          }
        }
      }
      prev = next_prev2955;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2938=0;i2938<(int)prev.size();++i2938) {
    if( prev[i2938] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2938]);
    }
  }
  return memo[key(407,backtracking_ptr_for_packrat407)] = result;
}

inline deque<int> parse_not2948() { 
  if(memo.count(key(408,i))) {
    return memo[key(408,i)];
  }
  int backtracking_ptr_for_packrat408=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2951;
  for(int i2950=0;i2950<(int)prev.size();++i2950) {
    if( prev[i2950] == FAIL ) {
      if(!(!next_prev2951.empty() && next_prev2951.front() == FAIL )) {
        next_prev2951.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2950];
    tmp = parse_W();
    
    for(int i2950=0;i2950<(int)tmp.size();++i2950) {
      if( tmp[i2950] == FAIL ) {
        if(!( !next_prev2951.empty() && next_prev2951[0] == FAIL )) {
          next_prev2951.push_front(FAIL);
        }
      } else {
        next_prev2951.push_back(tmp[i2950]);
      }
    }
  }
  prev = next_prev2951;
  for(int i2949=0;i2949<(int)prev.size();++i2949) {
    if( prev[i2949] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2949]);
    }
  }
  return memo[key(408,backtracking_ptr_for_packrat408)] = result;
}

inline deque<int> parse_slash2957() { 
  if(memo.count(key(409,i))) {
    return memo[key(409,i)];
  }
  int backtracking_ptr_for_packrat409=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i2959=0;i2959<(int)prev.size();++i2959) {
        if( prev[i2959] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2959]<m&&I[prev[i2959]]=='v') {
          tmp.push_back(prev[i2959]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2960=0;i2960<(int)prev.size();++i2960) {
        if( prev[i2960] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2960]<m&&I[prev[i2960]]=='o') {
          tmp.push_back(prev[i2960]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2961=0;i2961<(int)prev.size();++i2961) {
        if( prev[i2961] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2961]<m&&I[prev[i2961]]=='l') {
          tmp.push_back(prev[i2961]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2962=0;i2962<(int)prev.size();++i2962) {
        if( prev[i2962] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2962]<m&&I[prev[i2962]]=='a') {
          tmp.push_back(prev[i2962]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2963=0;i2963<(int)prev.size();++i2963) {
        if( prev[i2963] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2963]<m&&I[prev[i2963]]=='t') {
          tmp.push_back(prev[i2963]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2964=0;i2964<(int)prev.size();++i2964) {
        if( prev[i2964] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2964]<m&&I[prev[i2964]]=='i') {
          tmp.push_back(prev[i2964]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2965=0;i2965<(int)prev.size();++i2965) {
        if( prev[i2965] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2965]<m&&I[prev[i2965]]=='l') {
          tmp.push_back(prev[i2965]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i2966=0;i2966<(int)prev.size();++i2966) {
        if( prev[i2966] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i2966]<m&&I[prev[i2966]]=='e') {
          tmp.push_back(prev[i2966]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev2972;
      for(int i2971=0;i2971<(int)prev.size();++i2971) {
        i = prev[i2971];
        tmp = parse_not2967();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev2972.push_back(prev[i2971]);
        } else {
          if(!(!next_prev2972.empty()&&next_prev2972.front()==FAIL)) {
            next_prev2972.push_front(FAIL);
          }
        }
      }
      prev = next_prev2972;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev2974;
      for(int i2973=0;i2973<(int)prev.size();++i2973) {
        if( prev[i2973] == FAIL ) {
          if(!(!next_prev2974.empty() && next_prev2974.front() == FAIL )) {
            next_prev2974.push_front(FAIL);
          }
          continue;
        }
        i = prev[i2973];
        tmp = parse__();
        
        for(int i2973=0;i2973<(int)tmp.size();++i2973) {
          if( tmp[i2973] == FAIL ) {
            if(!( !next_prev2974.empty() && next_prev2974[0] == FAIL )) {
              next_prev2974.push_front(FAIL);
            }
          } else {
            next_prev2974.push_back(tmp[i2973]);
          }
        }
      }
      prev = next_prev2974;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2958=0;i2958<(int)prev.size();++i2958) {
    if( prev[i2958] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2958]);
    }
  }
  return memo[key(409,backtracking_ptr_for_packrat409)] = result;
}

inline deque<int> parse_not2967() { 
  if(memo.count(key(410,i))) {
    return memo[key(410,i)];
  }
  int backtracking_ptr_for_packrat410=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev2970;
  for(int i2969=0;i2969<(int)prev.size();++i2969) {
    if( prev[i2969] == FAIL ) {
      if(!(!next_prev2970.empty() && next_prev2970.front() == FAIL )) {
        next_prev2970.push_front(FAIL);
      }
      continue;
    }
    i = prev[i2969];
    tmp = parse_W();
    
    for(int i2969=0;i2969<(int)tmp.size();++i2969) {
      if( tmp[i2969] == FAIL ) {
        if(!( !next_prev2970.empty() && next_prev2970[0] == FAIL )) {
          next_prev2970.push_front(FAIL);
        }
      } else {
        next_prev2970.push_back(tmp[i2969]);
      }
    }
  }
  prev = next_prev2970;
  for(int i2968=0;i2968<(int)prev.size();++i2968) {
    if( prev[i2968] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2968]);
    }
  }
  return memo[key(410,backtracking_ptr_for_packrat410)] = result;
}

deque<int> parse_InterfaceMethodDeclaration(){
  if(memo.count(key(411,i))) {
    return memo[key(411,i)];
  }
  int backtracking_ptr_for_packrat411=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev2978;
    deque<int> prioritized_choice_final_prev2979;
    next_prev2978.clear();
    for(int i2977=0;i2977<(int)prev.size();++i2977) {
      i = prev[i2977];
      tmp = parse_slash2980();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2978.push_back(prev[i2977]); }
      for(int i2984=0;i2984<(int)tmp.size();++i2984) {
        if( tmp[i2984] != FAIL ) {
          prioritized_choice_final_prev2979.push_back(tmp[i2984]);
        }
      }
    }
    prev = next_prev2978;
    next_prev2978.clear();
    for(int i2977=0;i2977<(int)prev.size();++i2977) {
      i = prev[i2977];
      tmp = parse_slash2985();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2978.push_back(prev[i2977]); }
      for(int i2987=0;i2987<(int)tmp.size();++i2987) {
        if( tmp[i2987] != FAIL ) {
          prioritized_choice_final_prev2979.push_back(tmp[i2987]);
        }
      }
    }
    prev = next_prev2978;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev2979.empty() && prioritized_choice_final_prev2979.front() == FAIL )) {
        prioritized_choice_final_prev2979.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev2979;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev2989;
    deque<int> prioritized_choice_final_prev2990;
    next_prev2989.clear();
    for(int i2988=0;i2988<(int)prev.size();++i2988) {
      i = prev[i2988];
      tmp = parse_slash2991();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2989.push_back(prev[i2988]); }
      for(int i3006=0;i3006<(int)tmp.size();++i3006) {
        if( tmp[i3006] != FAIL ) {
          prioritized_choice_final_prev2990.push_back(tmp[i3006]);
        }
      }
    }
    prev = next_prev2989;
    next_prev2989.clear();
    for(int i2988=0;i2988<(int)prev.size();++i2988) {
      i = prev[i2988];
      tmp = parse_slash3007();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2989.push_back(prev[i2988]); }
      for(int i3009=0;i3009<(int)tmp.size();++i3009) {
        if( tmp[i3009] != FAIL ) {
          prioritized_choice_final_prev2990.push_back(tmp[i3009]);
        }
      }
    }
    prev = next_prev2989;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev2990.empty() && prioritized_choice_final_prev2990.front() == FAIL )) {
        prioritized_choice_final_prev2990.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev2990;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (TypeOrVoid) */
    deque<int> next_prev3011;
    for(int i3010=0;i3010<(int)prev.size();++i3010) {
      if( prev[i3010] == FAIL ) {
        if(!(!next_prev3011.empty() && next_prev3011.front() == FAIL )) {
          next_prev3011.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3010];
      tmp = parse_TypeOrVoid();
      
      for(int i3010=0;i3010<(int)tmp.size();++i3010) {
        if( tmp[i3010] == FAIL ) {
          if(!( !next_prev3011.empty() && next_prev3011[0] == FAIL )) {
            next_prev3011.push_front(FAIL);
          }
        } else {
          next_prev3011.push_back(tmp[i3010]);
        }
      }
    }
    prev = next_prev3011;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev3013;
    for(int i3012=0;i3012<(int)prev.size();++i3012) {
      if( prev[i3012] == FAIL ) {
        if(!(!next_prev3013.empty() && next_prev3013.front() == FAIL )) {
          next_prev3013.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3012];
      tmp = parse_Identifier();
      
      for(int i3012=0;i3012<(int)tmp.size();++i3012) {
        if( tmp[i3012] == FAIL ) {
          if(!( !next_prev3013.empty() && next_prev3013[0] == FAIL )) {
            next_prev3013.push_front(FAIL);
          }
        } else {
          next_prev3013.push_back(tmp[i3012]);
        }
      }
    }
    prev = next_prev3013;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3014=0;i3014<(int)prev.size();++i3014) {
        if( prev[i3014] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3014]<m&&I[prev[i3014]]=='(') {
          tmp.push_back(prev[i3014]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3016;
      for(int i3015=0;i3015<(int)prev.size();++i3015) {
        if( prev[i3015] == FAIL ) {
          if(!(!next_prev3016.empty() && next_prev3016.front() == FAIL )) {
            next_prev3016.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3015];
        tmp = parse__();
        
        for(int i3015=0;i3015<(int)tmp.size();++i3015) {
          if( tmp[i3015] == FAIL ) {
            if(!( !next_prev3016.empty() && next_prev3016[0] == FAIL )) {
              next_prev3016.push_front(FAIL);
            }
          } else {
            next_prev3016.push_back(tmp[i3015]);
          }
        }
      }
      prev = next_prev3016;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (MethodParamList) */
    deque<int> next_prev3018;
    for(int i3017=0;i3017<(int)prev.size();++i3017) {
      if( prev[i3017] == FAIL ) {
        if(!(!next_prev3018.empty() && next_prev3018.front() == FAIL )) {
          next_prev3018.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3017];
      tmp = parse_MethodParamList();
      
      for(int i3017=0;i3017<(int)tmp.size();++i3017) {
        if( tmp[i3017] == FAIL ) {
          if(!( !next_prev3018.empty() && next_prev3018[0] == FAIL )) {
            next_prev3018.push_front(FAIL);
          }
        } else {
          next_prev3018.push_back(tmp[i3017]);
        }
      }
    }
    prev = next_prev3018;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3019=0;i3019<(int)prev.size();++i3019) {
        if( prev[i3019] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3019]<m&&I[prev[i3019]]==')') {
          tmp.push_back(prev[i3019]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3021;
      for(int i3020=0;i3020<(int)prev.size();++i3020) {
        if( prev[i3020] == FAIL ) {
          if(!(!next_prev3021.empty() && next_prev3021.front() == FAIL )) {
            next_prev3021.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3020];
        tmp = parse__();
        
        for(int i3020=0;i3020<(int)tmp.size();++i3020) {
          if( tmp[i3020] == FAIL ) {
            if(!( !next_prev3021.empty() && next_prev3021[0] == FAIL )) {
              next_prev3021.push_front(FAIL);
            }
          } else {
            next_prev3021.push_back(tmp[i3020]);
          }
        }
      }
      prev = next_prev3021;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev3023;
    deque<int> prioritized_choice_final_prev3024;
    next_prev3023.clear();
    for(int i3022=0;i3022<(int)prev.size();++i3022) {
      i = prev[i3022];
      tmp = parse_slash3025();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3023.push_back(prev[i3022]); }
      for(int i3029=0;i3029<(int)tmp.size();++i3029) {
        if( tmp[i3029] != FAIL ) {
          prioritized_choice_final_prev3024.push_back(tmp[i3029]);
        }
      }
    }
    prev = next_prev3023;
    next_prev3023.clear();
    for(int i3022=0;i3022<(int)prev.size();++i3022) {
      i = prev[i3022];
      tmp = parse_slash3030();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3023.push_back(prev[i3022]); }
      for(int i3032=0;i3032<(int)tmp.size();++i3032) {
        if( tmp[i3032] != FAIL ) {
          prioritized_choice_final_prev3024.push_back(tmp[i3032]);
        }
      }
    }
    prev = next_prev3023;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev3024.empty() && prioritized_choice_final_prev3024.front() == FAIL )) {
        prioritized_choice_final_prev3024.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev3024;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev3034;
    deque<int> prioritized_choice_final_prev3035;
    next_prev3034.clear();
    for(int i3033=0;i3033<(int)prev.size();++i3033) {
      i = prev[i3033];
      tmp = parse_slash3036();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3034.push_back(prev[i3033]); }
      for(int i3040=0;i3040<(int)tmp.size();++i3040) {
        if( tmp[i3040] != FAIL ) {
          prioritized_choice_final_prev3035.push_back(tmp[i3040]);
        }
      }
    }
    prev = next_prev3034;
    next_prev3034.clear();
    for(int i3033=0;i3033<(int)prev.size();++i3033) {
      i = prev[i3033];
      tmp = parse_slash3041();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3034.push_back(prev[i3033]); }
      for(int i3046=0;i3046<(int)tmp.size();++i3046) {
        if( tmp[i3046] != FAIL ) {
          prioritized_choice_final_prev3035.push_back(tmp[i3046]);
        }
      }
    }
    prev = next_prev3034;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev3035.empty() && prioritized_choice_final_prev3035.front() == FAIL )) {
        prioritized_choice_final_prev3035.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev3035;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2976=0;i2976<(int)prev.size();++i2976) {
    if( prev[i2976] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2976]);
    }
  }
  return memo[key(411,backtracking_ptr_for_packrat411)] = result;
}

inline deque<int> parse_slash2980() { 
  if(memo.count(key(412,i))) {
    return memo[key(412,i)];
  }
  int backtracking_ptr_for_packrat412=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (InterfaceMethodModifiers) */
    deque<int> next_prev2983;
    for(int i2982=0;i2982<(int)prev.size();++i2982) {
      if( prev[i2982] == FAIL ) {
        if(!(!next_prev2983.empty() && next_prev2983.front() == FAIL )) {
          next_prev2983.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2982];
      tmp = parse_InterfaceMethodModifiers();
      
      for(int i2982=0;i2982<(int)tmp.size();++i2982) {
        if( tmp[i2982] == FAIL ) {
          if(!( !next_prev2983.empty() && next_prev2983[0] == FAIL )) {
            next_prev2983.push_front(FAIL);
          }
        } else {
          next_prev2983.push_back(tmp[i2982]);
        }
      }
    }
    prev = next_prev2983;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2981=0;i2981<(int)prev.size();++i2981) {
    if( prev[i2981] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2981]);
    }
  }
  return memo[key(412,backtracking_ptr_for_packrat412)] = result;
}

inline deque<int> parse_slash2985() { 
  if(memo.count(key(413,i))) {
    return memo[key(413,i)];
  }
  int backtracking_ptr_for_packrat413=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i2986=0;i2986<(int)prev.size();++i2986) {
    if( prev[i2986] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2986]);
    }
  }
  return memo[key(413,backtracking_ptr_for_packrat413)] = result;
}

inline deque<int> parse_slash2991() { 
  if(memo.count(key(414,i))) {
    return memo[key(414,i)];
  }
  int backtracking_ptr_for_packrat414=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (TypeParameters) */
    deque<int> next_prev2994;
    for(int i2993=0;i2993<(int)prev.size();++i2993) {
      if( prev[i2993] == FAIL ) {
        if(!(!next_prev2994.empty() && next_prev2994.front() == FAIL )) {
          next_prev2994.push_front(FAIL);
        }
        continue;
      }
      i = prev[i2993];
      tmp = parse_TypeParameters();
      
      for(int i2993=0;i2993<(int)tmp.size();++i2993) {
        if( tmp[i2993] == FAIL ) {
          if(!( !next_prev2994.empty() && next_prev2994[0] == FAIL )) {
            next_prev2994.push_front(FAIL);
          }
        } else {
          next_prev2994.push_back(tmp[i2993]);
        }
      }
    }
    prev = next_prev2994;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev2996;
    deque<int> prioritized_choice_final_prev2997;
    next_prev2996.clear();
    for(int i2995=0;i2995<(int)prev.size();++i2995) {
      i = prev[i2995];
      tmp = parse_slash2998();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2996.push_back(prev[i2995]); }
      for(int i3002=0;i3002<(int)tmp.size();++i3002) {
        if( tmp[i3002] != FAIL ) {
          prioritized_choice_final_prev2997.push_back(tmp[i3002]);
        }
      }
    }
    prev = next_prev2996;
    next_prev2996.clear();
    for(int i2995=0;i2995<(int)prev.size();++i2995) {
      i = prev[i2995];
      tmp = parse_slash3003();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev2996.push_back(prev[i2995]); }
      for(int i3005=0;i3005<(int)tmp.size();++i3005) {
        if( tmp[i3005] != FAIL ) {
          prioritized_choice_final_prev2997.push_back(tmp[i3005]);
        }
      }
    }
    prev = next_prev2996;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev2997.empty() && prioritized_choice_final_prev2997.front() == FAIL )) {
        prioritized_choice_final_prev2997.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev2997;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2992=0;i2992<(int)prev.size();++i2992) {
    if( prev[i2992] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2992]);
    }
  }
  return memo[key(414,backtracking_ptr_for_packrat414)] = result;
}

inline deque<int> parse_slash2998() { 
  if(memo.count(key(415,i))) {
    return memo[key(415,i)];
  }
  int backtracking_ptr_for_packrat415=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotations) */
    deque<int> next_prev3001;
    for(int i3000=0;i3000<(int)prev.size();++i3000) {
      if( prev[i3000] == FAIL ) {
        if(!(!next_prev3001.empty() && next_prev3001.front() == FAIL )) {
          next_prev3001.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3000];
      tmp = parse_Annotations();
      
      for(int i3000=0;i3000<(int)tmp.size();++i3000) {
        if( tmp[i3000] == FAIL ) {
          if(!( !next_prev3001.empty() && next_prev3001[0] == FAIL )) {
            next_prev3001.push_front(FAIL);
          }
        } else {
          next_prev3001.push_back(tmp[i3000]);
        }
      }
    }
    prev = next_prev3001;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i2999=0;i2999<(int)prev.size();++i2999) {
    if( prev[i2999] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i2999]);
    }
  }
  return memo[key(415,backtracking_ptr_for_packrat415)] = result;
}

inline deque<int> parse_slash3003() { 
  if(memo.count(key(416,i))) {
    return memo[key(416,i)];
  }
  int backtracking_ptr_for_packrat416=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i3004=0;i3004<(int)prev.size();++i3004) {
    if( prev[i3004] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3004]);
    }
  }
  return memo[key(416,backtracking_ptr_for_packrat416)] = result;
}

inline deque<int> parse_slash3007() { 
  if(memo.count(key(417,i))) {
    return memo[key(417,i)];
  }
  int backtracking_ptr_for_packrat417=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i3008=0;i3008<(int)prev.size();++i3008) {
    if( prev[i3008] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3008]);
    }
  }
  return memo[key(417,backtracking_ptr_for_packrat417)] = result;
}

inline deque<int> parse_slash3025() { 
  if(memo.count(key(418,i))) {
    return memo[key(418,i)];
  }
  int backtracking_ptr_for_packrat418=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Throws) */
    deque<int> next_prev3028;
    for(int i3027=0;i3027<(int)prev.size();++i3027) {
      if( prev[i3027] == FAIL ) {
        if(!(!next_prev3028.empty() && next_prev3028.front() == FAIL )) {
          next_prev3028.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3027];
      tmp = parse_Throws();
      
      for(int i3027=0;i3027<(int)tmp.size();++i3027) {
        if( tmp[i3027] == FAIL ) {
          if(!( !next_prev3028.empty() && next_prev3028[0] == FAIL )) {
            next_prev3028.push_front(FAIL);
          }
        } else {
          next_prev3028.push_back(tmp[i3027]);
        }
      }
    }
    prev = next_prev3028;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3026=0;i3026<(int)prev.size();++i3026) {
    if( prev[i3026] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3026]);
    }
  }
  return memo[key(418,backtracking_ptr_for_packrat418)] = result;
}

inline deque<int> parse_slash3030() { 
  if(memo.count(key(419,i))) {
    return memo[key(419,i)];
  }
  int backtracking_ptr_for_packrat419=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i3031=0;i3031<(int)prev.size();++i3031) {
    if( prev[i3031] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3031]);
    }
  }
  return memo[key(419,backtracking_ptr_for_packrat419)] = result;
}

inline deque<int> parse_slash3036() { 
  if(memo.count(key(420,i))) {
    return memo[key(420,i)];
  }
  int backtracking_ptr_for_packrat420=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Block) */
    deque<int> next_prev3039;
    for(int i3038=0;i3038<(int)prev.size();++i3038) {
      if( prev[i3038] == FAIL ) {
        if(!(!next_prev3039.empty() && next_prev3039.front() == FAIL )) {
          next_prev3039.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3038];
      tmp = parse_Block();
      
      for(int i3038=0;i3038<(int)tmp.size();++i3038) {
        if( tmp[i3038] == FAIL ) {
          if(!( !next_prev3039.empty() && next_prev3039[0] == FAIL )) {
            next_prev3039.push_front(FAIL);
          }
        } else {
          next_prev3039.push_back(tmp[i3038]);
        }
      }
    }
    prev = next_prev3039;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3037=0;i3037<(int)prev.size();++i3037) {
    if( prev[i3037] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3037]);
    }
  }
  return memo[key(420,backtracking_ptr_for_packrat420)] = result;
}

inline deque<int> parse_slash3041() { 
  if(memo.count(key(421,i))) {
    return memo[key(421,i)];
  }
  int backtracking_ptr_for_packrat421=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3043=0;i3043<(int)prev.size();++i3043) {
        if( prev[i3043] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3043]<m&&I[prev[i3043]]==';') {
          tmp.push_back(prev[i3043]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3045;
      for(int i3044=0;i3044<(int)prev.size();++i3044) {
        if( prev[i3044] == FAIL ) {
          if(!(!next_prev3045.empty() && next_prev3045.front() == FAIL )) {
            next_prev3045.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3044];
        tmp = parse__();
        
        for(int i3044=0;i3044<(int)tmp.size();++i3044) {
          if( tmp[i3044] == FAIL ) {
            if(!( !next_prev3045.empty() && next_prev3045[0] == FAIL )) {
              next_prev3045.push_front(FAIL);
            }
          } else {
            next_prev3045.push_back(tmp[i3044]);
          }
        }
      }
      prev = next_prev3045;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3042=0;i3042<(int)prev.size();++i3042) {
    if( prev[i3042] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3042]);
    }
  }
  return memo[key(421,backtracking_ptr_for_packrat421)] = result;
}

deque<int> parse_InterfaceMethodModifier(){
  if(memo.count(key(422,i))) {
    return memo[key(422,i)];
  }
  int backtracking_ptr_for_packrat422=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev3049;
  deque<int> prioritized_choice_final_prev3050;
  next_prev3049.clear();
  for(int i3048=0;i3048<(int)prev.size();++i3048) {
    i = prev[i3048];
    tmp = parse_slash3051();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3049.push_back(prev[i3048]); }
    for(int i3055=0;i3055<(int)tmp.size();++i3055) {
      if( tmp[i3055] != FAIL ) {
        prioritized_choice_final_prev3050.push_back(tmp[i3055]);
      }
    }
  }
  prev = next_prev3049;
  next_prev3049.clear();
  for(int i3048=0;i3048<(int)prev.size();++i3048) {
    i = prev[i3048];
    tmp = parse_slash3056();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3049.push_back(prev[i3048]); }
    for(int i3072=0;i3072<(int)tmp.size();++i3072) {
      if( tmp[i3072] != FAIL ) {
        prioritized_choice_final_prev3050.push_back(tmp[i3072]);
      }
    }
  }
  prev = next_prev3049;
  next_prev3049.clear();
  for(int i3048=0;i3048<(int)prev.size();++i3048) {
    i = prev[i3048];
    tmp = parse_slash3073();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3049.push_back(prev[i3048]); }
    for(int i3092=0;i3092<(int)tmp.size();++i3092) {
      if( tmp[i3092] != FAIL ) {
        prioritized_choice_final_prev3050.push_back(tmp[i3092]);
      }
    }
  }
  prev = next_prev3049;
  next_prev3049.clear();
  for(int i3048=0;i3048<(int)prev.size();++i3048) {
    i = prev[i3048];
    tmp = parse_slash3093();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3049.push_back(prev[i3048]); }
    for(int i3110=0;i3110<(int)tmp.size();++i3110) {
      if( tmp[i3110] != FAIL ) {
        prioritized_choice_final_prev3050.push_back(tmp[i3110]);
      }
    }
  }
  prev = next_prev3049;
  next_prev3049.clear();
  for(int i3048=0;i3048<(int)prev.size();++i3048) {
    i = prev[i3048];
    tmp = parse_slash3111();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3049.push_back(prev[i3048]); }
    for(int i3127=0;i3127<(int)tmp.size();++i3127) {
      if( tmp[i3127] != FAIL ) {
        prioritized_choice_final_prev3050.push_back(tmp[i3127]);
      }
    }
  }
  prev = next_prev3049;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev3050.empty() && prioritized_choice_final_prev3050.front() == FAIL )) {
      prioritized_choice_final_prev3050.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev3050;
  for(int i3047=0;i3047<(int)prev.size();++i3047) {
    if( prev[i3047] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3047]);
    }
  }
  return memo[key(422,backtracking_ptr_for_packrat422)] = result;
}

inline deque<int> parse_slash3051() { 
  if(memo.count(key(423,i))) {
    return memo[key(423,i)];
  }
  int backtracking_ptr_for_packrat423=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotation) */
    deque<int> next_prev3054;
    for(int i3053=0;i3053<(int)prev.size();++i3053) {
      if( prev[i3053] == FAIL ) {
        if(!(!next_prev3054.empty() && next_prev3054.front() == FAIL )) {
          next_prev3054.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3053];
      tmp = parse_Annotation();
      
      for(int i3053=0;i3053<(int)tmp.size();++i3053) {
        if( tmp[i3053] == FAIL ) {
          if(!( !next_prev3054.empty() && next_prev3054[0] == FAIL )) {
            next_prev3054.push_front(FAIL);
          }
        } else {
          next_prev3054.push_back(tmp[i3053]);
        }
      }
    }
    prev = next_prev3054;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3052=0;i3052<(int)prev.size();++i3052) {
    if( prev[i3052] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3052]);
    }
  }
  return memo[key(423,backtracking_ptr_for_packrat423)] = result;
}

inline deque<int> parse_slash3056() { 
  if(memo.count(key(424,i))) {
    return memo[key(424,i)];
  }
  int backtracking_ptr_for_packrat424=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3058=0;i3058<(int)prev.size();++i3058) {
        if( prev[i3058] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3058]<m&&I[prev[i3058]]=='p') {
          tmp.push_back(prev[i3058]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3059=0;i3059<(int)prev.size();++i3059) {
        if( prev[i3059] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3059]<m&&I[prev[i3059]]=='u') {
          tmp.push_back(prev[i3059]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3060=0;i3060<(int)prev.size();++i3060) {
        if( prev[i3060] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3060]<m&&I[prev[i3060]]=='b') {
          tmp.push_back(prev[i3060]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3061=0;i3061<(int)prev.size();++i3061) {
        if( prev[i3061] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3061]<m&&I[prev[i3061]]=='l') {
          tmp.push_back(prev[i3061]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3062=0;i3062<(int)prev.size();++i3062) {
        if( prev[i3062] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3062]<m&&I[prev[i3062]]=='i') {
          tmp.push_back(prev[i3062]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3063=0;i3063<(int)prev.size();++i3063) {
        if( prev[i3063] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3063]<m&&I[prev[i3063]]=='c') {
          tmp.push_back(prev[i3063]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev3069;
      for(int i3068=0;i3068<(int)prev.size();++i3068) {
        i = prev[i3068];
        tmp = parse_not3064();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev3069.push_back(prev[i3068]);
        } else {
          if(!(!next_prev3069.empty()&&next_prev3069.front()==FAIL)) {
            next_prev3069.push_front(FAIL);
          }
        }
      }
      prev = next_prev3069;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3071;
      for(int i3070=0;i3070<(int)prev.size();++i3070) {
        if( prev[i3070] == FAIL ) {
          if(!(!next_prev3071.empty() && next_prev3071.front() == FAIL )) {
            next_prev3071.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3070];
        tmp = parse__();
        
        for(int i3070=0;i3070<(int)tmp.size();++i3070) {
          if( tmp[i3070] == FAIL ) {
            if(!( !next_prev3071.empty() && next_prev3071[0] == FAIL )) {
              next_prev3071.push_front(FAIL);
            }
          } else {
            next_prev3071.push_back(tmp[i3070]);
          }
        }
      }
      prev = next_prev3071;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3057=0;i3057<(int)prev.size();++i3057) {
    if( prev[i3057] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3057]);
    }
  }
  return memo[key(424,backtracking_ptr_for_packrat424)] = result;
}

inline deque<int> parse_not3064() { 
  if(memo.count(key(425,i))) {
    return memo[key(425,i)];
  }
  int backtracking_ptr_for_packrat425=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev3067;
  for(int i3066=0;i3066<(int)prev.size();++i3066) {
    if( prev[i3066] == FAIL ) {
      if(!(!next_prev3067.empty() && next_prev3067.front() == FAIL )) {
        next_prev3067.push_front(FAIL);
      }
      continue;
    }
    i = prev[i3066];
    tmp = parse_W();
    
    for(int i3066=0;i3066<(int)tmp.size();++i3066) {
      if( tmp[i3066] == FAIL ) {
        if(!( !next_prev3067.empty() && next_prev3067[0] == FAIL )) {
          next_prev3067.push_front(FAIL);
        }
      } else {
        next_prev3067.push_back(tmp[i3066]);
      }
    }
  }
  prev = next_prev3067;
  for(int i3065=0;i3065<(int)prev.size();++i3065) {
    if( prev[i3065] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3065]);
    }
  }
  return memo[key(425,backtracking_ptr_for_packrat425)] = result;
}

inline deque<int> parse_slash3073() { 
  if(memo.count(key(426,i))) {
    return memo[key(426,i)];
  }
  int backtracking_ptr_for_packrat426=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3075=0;i3075<(int)prev.size();++i3075) {
        if( prev[i3075] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3075]<m&&I[prev[i3075]]=='p') {
          tmp.push_back(prev[i3075]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3076=0;i3076<(int)prev.size();++i3076) {
        if( prev[i3076] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3076]<m&&I[prev[i3076]]=='r') {
          tmp.push_back(prev[i3076]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3077=0;i3077<(int)prev.size();++i3077) {
        if( prev[i3077] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3077]<m&&I[prev[i3077]]=='o') {
          tmp.push_back(prev[i3077]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3078=0;i3078<(int)prev.size();++i3078) {
        if( prev[i3078] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3078]<m&&I[prev[i3078]]=='t') {
          tmp.push_back(prev[i3078]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3079=0;i3079<(int)prev.size();++i3079) {
        if( prev[i3079] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3079]<m&&I[prev[i3079]]=='e') {
          tmp.push_back(prev[i3079]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3080=0;i3080<(int)prev.size();++i3080) {
        if( prev[i3080] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3080]<m&&I[prev[i3080]]=='c') {
          tmp.push_back(prev[i3080]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3081=0;i3081<(int)prev.size();++i3081) {
        if( prev[i3081] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3081]<m&&I[prev[i3081]]=='t') {
          tmp.push_back(prev[i3081]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3082=0;i3082<(int)prev.size();++i3082) {
        if( prev[i3082] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3082]<m&&I[prev[i3082]]=='e') {
          tmp.push_back(prev[i3082]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3083=0;i3083<(int)prev.size();++i3083) {
        if( prev[i3083] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3083]<m&&I[prev[i3083]]=='d') {
          tmp.push_back(prev[i3083]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev3089;
      for(int i3088=0;i3088<(int)prev.size();++i3088) {
        i = prev[i3088];
        tmp = parse_not3084();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev3089.push_back(prev[i3088]);
        } else {
          if(!(!next_prev3089.empty()&&next_prev3089.front()==FAIL)) {
            next_prev3089.push_front(FAIL);
          }
        }
      }
      prev = next_prev3089;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3091;
      for(int i3090=0;i3090<(int)prev.size();++i3090) {
        if( prev[i3090] == FAIL ) {
          if(!(!next_prev3091.empty() && next_prev3091.front() == FAIL )) {
            next_prev3091.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3090];
        tmp = parse__();
        
        for(int i3090=0;i3090<(int)tmp.size();++i3090) {
          if( tmp[i3090] == FAIL ) {
            if(!( !next_prev3091.empty() && next_prev3091[0] == FAIL )) {
              next_prev3091.push_front(FAIL);
            }
          } else {
            next_prev3091.push_back(tmp[i3090]);
          }
        }
      }
      prev = next_prev3091;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3074=0;i3074<(int)prev.size();++i3074) {
    if( prev[i3074] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3074]);
    }
  }
  return memo[key(426,backtracking_ptr_for_packrat426)] = result;
}

inline deque<int> parse_not3084() { 
  if(memo.count(key(427,i))) {
    return memo[key(427,i)];
  }
  int backtracking_ptr_for_packrat427=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev3087;
  for(int i3086=0;i3086<(int)prev.size();++i3086) {
    if( prev[i3086] == FAIL ) {
      if(!(!next_prev3087.empty() && next_prev3087.front() == FAIL )) {
        next_prev3087.push_front(FAIL);
      }
      continue;
    }
    i = prev[i3086];
    tmp = parse_W();
    
    for(int i3086=0;i3086<(int)tmp.size();++i3086) {
      if( tmp[i3086] == FAIL ) {
        if(!( !next_prev3087.empty() && next_prev3087[0] == FAIL )) {
          next_prev3087.push_front(FAIL);
        }
      } else {
        next_prev3087.push_back(tmp[i3086]);
      }
    }
  }
  prev = next_prev3087;
  for(int i3085=0;i3085<(int)prev.size();++i3085) {
    if( prev[i3085] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3085]);
    }
  }
  return memo[key(427,backtracking_ptr_for_packrat427)] = result;
}

inline deque<int> parse_slash3093() { 
  if(memo.count(key(428,i))) {
    return memo[key(428,i)];
  }
  int backtracking_ptr_for_packrat428=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3095=0;i3095<(int)prev.size();++i3095) {
        if( prev[i3095] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3095]<m&&I[prev[i3095]]=='d') {
          tmp.push_back(prev[i3095]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3096=0;i3096<(int)prev.size();++i3096) {
        if( prev[i3096] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3096]<m&&I[prev[i3096]]=='e') {
          tmp.push_back(prev[i3096]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3097=0;i3097<(int)prev.size();++i3097) {
        if( prev[i3097] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3097]<m&&I[prev[i3097]]=='f') {
          tmp.push_back(prev[i3097]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3098=0;i3098<(int)prev.size();++i3098) {
        if( prev[i3098] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3098]<m&&I[prev[i3098]]=='a') {
          tmp.push_back(prev[i3098]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3099=0;i3099<(int)prev.size();++i3099) {
        if( prev[i3099] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3099]<m&&I[prev[i3099]]=='u') {
          tmp.push_back(prev[i3099]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3100=0;i3100<(int)prev.size();++i3100) {
        if( prev[i3100] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3100]<m&&I[prev[i3100]]=='l') {
          tmp.push_back(prev[i3100]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3101=0;i3101<(int)prev.size();++i3101) {
        if( prev[i3101] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3101]<m&&I[prev[i3101]]=='t') {
          tmp.push_back(prev[i3101]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev3107;
      for(int i3106=0;i3106<(int)prev.size();++i3106) {
        i = prev[i3106];
        tmp = parse_not3102();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev3107.push_back(prev[i3106]);
        } else {
          if(!(!next_prev3107.empty()&&next_prev3107.front()==FAIL)) {
            next_prev3107.push_front(FAIL);
          }
        }
      }
      prev = next_prev3107;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3109;
      for(int i3108=0;i3108<(int)prev.size();++i3108) {
        if( prev[i3108] == FAIL ) {
          if(!(!next_prev3109.empty() && next_prev3109.front() == FAIL )) {
            next_prev3109.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3108];
        tmp = parse__();
        
        for(int i3108=0;i3108<(int)tmp.size();++i3108) {
          if( tmp[i3108] == FAIL ) {
            if(!( !next_prev3109.empty() && next_prev3109[0] == FAIL )) {
              next_prev3109.push_front(FAIL);
            }
          } else {
            next_prev3109.push_back(tmp[i3108]);
          }
        }
      }
      prev = next_prev3109;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3094=0;i3094<(int)prev.size();++i3094) {
    if( prev[i3094] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3094]);
    }
  }
  return memo[key(428,backtracking_ptr_for_packrat428)] = result;
}

inline deque<int> parse_not3102() { 
  if(memo.count(key(429,i))) {
    return memo[key(429,i)];
  }
  int backtracking_ptr_for_packrat429=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev3105;
  for(int i3104=0;i3104<(int)prev.size();++i3104) {
    if( prev[i3104] == FAIL ) {
      if(!(!next_prev3105.empty() && next_prev3105.front() == FAIL )) {
        next_prev3105.push_front(FAIL);
      }
      continue;
    }
    i = prev[i3104];
    tmp = parse_W();
    
    for(int i3104=0;i3104<(int)tmp.size();++i3104) {
      if( tmp[i3104] == FAIL ) {
        if(!( !next_prev3105.empty() && next_prev3105[0] == FAIL )) {
          next_prev3105.push_front(FAIL);
        }
      } else {
        next_prev3105.push_back(tmp[i3104]);
      }
    }
  }
  prev = next_prev3105;
  for(int i3103=0;i3103<(int)prev.size();++i3103) {
    if( prev[i3103] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3103]);
    }
  }
  return memo[key(429,backtracking_ptr_for_packrat429)] = result;
}

inline deque<int> parse_slash3111() { 
  if(memo.count(key(430,i))) {
    return memo[key(430,i)];
  }
  int backtracking_ptr_for_packrat430=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3113=0;i3113<(int)prev.size();++i3113) {
        if( prev[i3113] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3113]<m&&I[prev[i3113]]=='s') {
          tmp.push_back(prev[i3113]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3114=0;i3114<(int)prev.size();++i3114) {
        if( prev[i3114] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3114]<m&&I[prev[i3114]]=='t') {
          tmp.push_back(prev[i3114]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3115=0;i3115<(int)prev.size();++i3115) {
        if( prev[i3115] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3115]<m&&I[prev[i3115]]=='a') {
          tmp.push_back(prev[i3115]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3116=0;i3116<(int)prev.size();++i3116) {
        if( prev[i3116] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3116]<m&&I[prev[i3116]]=='t') {
          tmp.push_back(prev[i3116]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3117=0;i3117<(int)prev.size();++i3117) {
        if( prev[i3117] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3117]<m&&I[prev[i3117]]=='i') {
          tmp.push_back(prev[i3117]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3118=0;i3118<(int)prev.size();++i3118) {
        if( prev[i3118] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3118]<m&&I[prev[i3118]]=='c') {
          tmp.push_back(prev[i3118]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev3124;
      for(int i3123=0;i3123<(int)prev.size();++i3123) {
        i = prev[i3123];
        tmp = parse_not3119();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev3124.push_back(prev[i3123]);
        } else {
          if(!(!next_prev3124.empty()&&next_prev3124.front()==FAIL)) {
            next_prev3124.push_front(FAIL);
          }
        }
      }
      prev = next_prev3124;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3126;
      for(int i3125=0;i3125<(int)prev.size();++i3125) {
        if( prev[i3125] == FAIL ) {
          if(!(!next_prev3126.empty() && next_prev3126.front() == FAIL )) {
            next_prev3126.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3125];
        tmp = parse__();
        
        for(int i3125=0;i3125<(int)tmp.size();++i3125) {
          if( tmp[i3125] == FAIL ) {
            if(!( !next_prev3126.empty() && next_prev3126[0] == FAIL )) {
              next_prev3126.push_front(FAIL);
            }
          } else {
            next_prev3126.push_back(tmp[i3125]);
          }
        }
      }
      prev = next_prev3126;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3112=0;i3112<(int)prev.size();++i3112) {
    if( prev[i3112] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3112]);
    }
  }
  return memo[key(430,backtracking_ptr_for_packrat430)] = result;
}

inline deque<int> parse_not3119() { 
  if(memo.count(key(431,i))) {
    return memo[key(431,i)];
  }
  int backtracking_ptr_for_packrat431=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev3122;
  for(int i3121=0;i3121<(int)prev.size();++i3121) {
    if( prev[i3121] == FAIL ) {
      if(!(!next_prev3122.empty() && next_prev3122.front() == FAIL )) {
        next_prev3122.push_front(FAIL);
      }
      continue;
    }
    i = prev[i3121];
    tmp = parse_W();
    
    for(int i3121=0;i3121<(int)tmp.size();++i3121) {
      if( tmp[i3121] == FAIL ) {
        if(!( !next_prev3122.empty() && next_prev3122[0] == FAIL )) {
          next_prev3122.push_front(FAIL);
        }
      } else {
        next_prev3122.push_back(tmp[i3121]);
      }
    }
  }
  prev = next_prev3122;
  for(int i3120=0;i3120<(int)prev.size();++i3120) {
    if( prev[i3120] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3120]);
    }
  }
  return memo[key(431,backtracking_ptr_for_packrat431)] = result;
}

deque<int> parse_InterfaceMethodModifiers(){
  if(memo.count(key(432,i))) {
    return memo[key(432,i)];
  }
  int backtracking_ptr_for_packrat432=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (InterfaceMethodModifier) */
    deque<int> next_prev3130;
    for(int i3129=0;i3129<(int)prev.size();++i3129) {
      if( prev[i3129] == FAIL ) {
        if(!(!next_prev3130.empty() && next_prev3130.front() == FAIL )) {
          next_prev3130.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3129];
      tmp = parse_InterfaceMethodModifier();
      
      for(int i3129=0;i3129<(int)tmp.size();++i3129) {
        if( tmp[i3129] == FAIL ) {
          if(!( !next_prev3130.empty() && next_prev3130[0] == FAIL )) {
            next_prev3130.push_front(FAIL);
          }
        } else {
          next_prev3130.push_back(tmp[i3129]);
        }
      }
    }
    prev = next_prev3130;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev3135;
    deque<int> star_final_prev3136;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev3135.clear();
      for(int i3137=0;i3137<(int)prev.size();++i3137) {
        i = prev[i3137];
        tmp = parse_while3131();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev3136.push_back(prev[i3137]);
        }
        for(int i3138=0;i3138<(int)tmp.size();++i3138) {
          if(tmp[i3138]==FAIL) {
            if(!( !next_prev3135.empty() && next_prev3135.front() == FAIL )) {
              next_prev3135.push_front(FAIL);
            }
          } else {
            next_prev3135.push_back(tmp[i3138]);
          }
        }
      }
      prev = next_prev3135;
    }
    prev = star_final_prev3136;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3128=0;i3128<(int)prev.size();++i3128) {
    if( prev[i3128] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3128]);
    }
  }
  return memo[key(432,backtracking_ptr_for_packrat432)] = result;
}

inline deque<int> parse_while3131() { 
  if(memo.count(key(433,i))) {
    return memo[key(433,i)];
  }
  int backtracking_ptr_for_packrat433=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (InterfaceMethodModifier) */
    deque<int> next_prev3134;
    for(int i3133=0;i3133<(int)prev.size();++i3133) {
      if( prev[i3133] == FAIL ) {
        if(!(!next_prev3134.empty() && next_prev3134.front() == FAIL )) {
          next_prev3134.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3133];
      tmp = parse_InterfaceMethodModifier();
      
      for(int i3133=0;i3133<(int)tmp.size();++i3133) {
        if( tmp[i3133] == FAIL ) {
          if(!( !next_prev3134.empty() && next_prev3134[0] == FAIL )) {
            next_prev3134.push_front(FAIL);
          }
        } else {
          next_prev3134.push_back(tmp[i3133]);
        }
      }
    }
    prev = next_prev3134;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3132=0;i3132<(int)prev.size();++i3132) {
    if( prev[i3132] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3132]);
    }
  }
  return memo[key(433,backtracking_ptr_for_packrat433)] = result;
}

deque<int> parse_MethodParamList(){
  if(memo.count(key(434,i))) {
    return memo[key(434,i)];
  }
  int backtracking_ptr_for_packrat434=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev3141;
  deque<int> prioritized_choice_final_prev3142;
  next_prev3141.clear();
  for(int i3140=0;i3140<(int)prev.size();++i3140) {
    i = prev[i3140];
    tmp = parse_slash3143();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3141.push_back(prev[i3140]); }
    for(int i3158=0;i3158<(int)tmp.size();++i3158) {
      if( tmp[i3158] != FAIL ) {
        prioritized_choice_final_prev3142.push_back(tmp[i3158]);
      }
    }
  }
  prev = next_prev3141;
  next_prev3141.clear();
  for(int i3140=0;i3140<(int)prev.size();++i3140) {
    i = prev[i3140];
    tmp = parse_slash3159();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3141.push_back(prev[i3140]); }
    for(int i3183=0;i3183<(int)tmp.size();++i3183) {
      if( tmp[i3183] != FAIL ) {
        prioritized_choice_final_prev3142.push_back(tmp[i3183]);
      }
    }
  }
  prev = next_prev3141;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev3142.empty() && prioritized_choice_final_prev3142.front() == FAIL )) {
      prioritized_choice_final_prev3142.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev3142;
  for(int i3139=0;i3139<(int)prev.size();++i3139) {
    if( prev[i3139] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3139]);
    }
  }
  return memo[key(434,backtracking_ptr_for_packrat434)] = result;
}

inline deque<int> parse_slash3143() { 
  if(memo.count(key(435,i))) {
    return memo[key(435,i)];
  }
  int backtracking_ptr_for_packrat435=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev3152;
    deque<int> star_final_prev3153;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev3152.clear();
      for(int i3154=0;i3154<(int)prev.size();++i3154) {
        i = prev[i3154];
        tmp = parse_while3145();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev3153.push_back(prev[i3154]);
        }
        for(int i3155=0;i3155<(int)tmp.size();++i3155) {
          if(tmp[i3155]==FAIL) {
            if(!( !next_prev3152.empty() && next_prev3152.front() == FAIL )) {
              next_prev3152.push_front(FAIL);
            }
          } else {
            next_prev3152.push_back(tmp[i3155]);
          }
        }
      }
      prev = next_prev3152;
    }
    prev = star_final_prev3153;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (VarParam) */
    deque<int> next_prev3157;
    for(int i3156=0;i3156<(int)prev.size();++i3156) {
      if( prev[i3156] == FAIL ) {
        if(!(!next_prev3157.empty() && next_prev3157.front() == FAIL )) {
          next_prev3157.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3156];
      tmp = parse_VarParam();
      
      for(int i3156=0;i3156<(int)tmp.size();++i3156) {
        if( tmp[i3156] == FAIL ) {
          if(!( !next_prev3157.empty() && next_prev3157[0] == FAIL )) {
            next_prev3157.push_front(FAIL);
          }
        } else {
          next_prev3157.push_back(tmp[i3156]);
        }
      }
    }
    prev = next_prev3157;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3144=0;i3144<(int)prev.size();++i3144) {
    if( prev[i3144] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3144]);
    }
  }
  return memo[key(435,backtracking_ptr_for_packrat435)] = result;
}

inline deque<int> parse_while3145() { 
  if(memo.count(key(436,i))) {
    return memo[key(436,i)];
  }
  int backtracking_ptr_for_packrat436=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (MethodParam) */
    deque<int> next_prev3148;
    for(int i3147=0;i3147<(int)prev.size();++i3147) {
      if( prev[i3147] == FAIL ) {
        if(!(!next_prev3148.empty() && next_prev3148.front() == FAIL )) {
          next_prev3148.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3147];
      tmp = parse_MethodParam();
      
      for(int i3147=0;i3147<(int)tmp.size();++i3147) {
        if( tmp[i3147] == FAIL ) {
          if(!( !next_prev3148.empty() && next_prev3148[0] == FAIL )) {
            next_prev3148.push_front(FAIL);
          }
        } else {
          next_prev3148.push_back(tmp[i3147]);
        }
      }
    }
    prev = next_prev3148;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3149=0;i3149<(int)prev.size();++i3149) {
        if( prev[i3149] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3149]<m&&I[prev[i3149]]==',') {
          tmp.push_back(prev[i3149]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3151;
      for(int i3150=0;i3150<(int)prev.size();++i3150) {
        if( prev[i3150] == FAIL ) {
          if(!(!next_prev3151.empty() && next_prev3151.front() == FAIL )) {
            next_prev3151.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3150];
        tmp = parse__();
        
        for(int i3150=0;i3150<(int)tmp.size();++i3150) {
          if( tmp[i3150] == FAIL ) {
            if(!( !next_prev3151.empty() && next_prev3151[0] == FAIL )) {
              next_prev3151.push_front(FAIL);
            }
          } else {
            next_prev3151.push_back(tmp[i3150]);
          }
        }
      }
      prev = next_prev3151;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3146=0;i3146<(int)prev.size();++i3146) {
    if( prev[i3146] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3146]);
    }
  }
  return memo[key(436,backtracking_ptr_for_packrat436)] = result;
}

inline deque<int> parse_slash3159() { 
  if(memo.count(key(437,i))) {
    return memo[key(437,i)];
  }
  int backtracking_ptr_for_packrat437=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev3162;
    deque<int> prioritized_choice_final_prev3163;
    next_prev3162.clear();
    for(int i3161=0;i3161<(int)prev.size();++i3161) {
      i = prev[i3161];
      tmp = parse_slash3164();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3162.push_back(prev[i3161]); }
      for(int i3179=0;i3179<(int)tmp.size();++i3179) {
        if( tmp[i3179] != FAIL ) {
          prioritized_choice_final_prev3163.push_back(tmp[i3179]);
        }
      }
    }
    prev = next_prev3162;
    next_prev3162.clear();
    for(int i3161=0;i3161<(int)prev.size();++i3161) {
      i = prev[i3161];
      tmp = parse_slash3180();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3162.push_back(prev[i3161]); }
      for(int i3182=0;i3182<(int)tmp.size();++i3182) {
        if( tmp[i3182] != FAIL ) {
          prioritized_choice_final_prev3163.push_back(tmp[i3182]);
        }
      }
    }
    prev = next_prev3162;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev3163.empty() && prioritized_choice_final_prev3163.front() == FAIL )) {
        prioritized_choice_final_prev3163.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev3163;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3160=0;i3160<(int)prev.size();++i3160) {
    if( prev[i3160] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3160]);
    }
  }
  return memo[key(437,backtracking_ptr_for_packrat437)] = result;
}

inline deque<int> parse_slash3164() { 
  if(memo.count(key(438,i))) {
    return memo[key(438,i)];
  }
  int backtracking_ptr_for_packrat438=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (MethodParam) */
    deque<int> next_prev3167;
    for(int i3166=0;i3166<(int)prev.size();++i3166) {
      if( prev[i3166] == FAIL ) {
        if(!(!next_prev3167.empty() && next_prev3167.front() == FAIL )) {
          next_prev3167.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3166];
      tmp = parse_MethodParam();
      
      for(int i3166=0;i3166<(int)tmp.size();++i3166) {
        if( tmp[i3166] == FAIL ) {
          if(!( !next_prev3167.empty() && next_prev3167[0] == FAIL )) {
            next_prev3167.push_front(FAIL);
          }
        } else {
          next_prev3167.push_back(tmp[i3166]);
        }
      }
    }
    prev = next_prev3167;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev3175;
    deque<int> star_final_prev3176;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev3175.clear();
      for(int i3177=0;i3177<(int)prev.size();++i3177) {
        i = prev[i3177];
        tmp = parse_while3168();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev3176.push_back(prev[i3177]);
        }
        for(int i3178=0;i3178<(int)tmp.size();++i3178) {
          if(tmp[i3178]==FAIL) {
            if(!( !next_prev3175.empty() && next_prev3175.front() == FAIL )) {
              next_prev3175.push_front(FAIL);
            }
          } else {
            next_prev3175.push_back(tmp[i3178]);
          }
        }
      }
      prev = next_prev3175;
    }
    prev = star_final_prev3176;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3165=0;i3165<(int)prev.size();++i3165) {
    if( prev[i3165] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3165]);
    }
  }
  return memo[key(438,backtracking_ptr_for_packrat438)] = result;
}

inline deque<int> parse_while3168() { 
  if(memo.count(key(439,i))) {
    return memo[key(439,i)];
  }
  int backtracking_ptr_for_packrat439=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3170=0;i3170<(int)prev.size();++i3170) {
        if( prev[i3170] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3170]<m&&I[prev[i3170]]==',') {
          tmp.push_back(prev[i3170]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3172;
      for(int i3171=0;i3171<(int)prev.size();++i3171) {
        if( prev[i3171] == FAIL ) {
          if(!(!next_prev3172.empty() && next_prev3172.front() == FAIL )) {
            next_prev3172.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3171];
        tmp = parse__();
        
        for(int i3171=0;i3171<(int)tmp.size();++i3171) {
          if( tmp[i3171] == FAIL ) {
            if(!( !next_prev3172.empty() && next_prev3172[0] == FAIL )) {
              next_prev3172.push_front(FAIL);
            }
          } else {
            next_prev3172.push_back(tmp[i3171]);
          }
        }
      }
      prev = next_prev3172;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (MethodParam) */
    deque<int> next_prev3174;
    for(int i3173=0;i3173<(int)prev.size();++i3173) {
      if( prev[i3173] == FAIL ) {
        if(!(!next_prev3174.empty() && next_prev3174.front() == FAIL )) {
          next_prev3174.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3173];
      tmp = parse_MethodParam();
      
      for(int i3173=0;i3173<(int)tmp.size();++i3173) {
        if( tmp[i3173] == FAIL ) {
          if(!( !next_prev3174.empty() && next_prev3174[0] == FAIL )) {
            next_prev3174.push_front(FAIL);
          }
        } else {
          next_prev3174.push_back(tmp[i3173]);
        }
      }
    }
    prev = next_prev3174;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3169=0;i3169<(int)prev.size();++i3169) {
    if( prev[i3169] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3169]);
    }
  }
  return memo[key(439,backtracking_ptr_for_packrat439)] = result;
}

inline deque<int> parse_slash3180() { 
  if(memo.count(key(440,i))) {
    return memo[key(440,i)];
  }
  int backtracking_ptr_for_packrat440=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i3181=0;i3181<(int)prev.size();++i3181) {
    if( prev[i3181] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3181]);
    }
  }
  return memo[key(440,backtracking_ptr_for_packrat440)] = result;
}

deque<int> parse_MethodParam(){
  if(memo.count(key(441,i))) {
    return memo[key(441,i)];
  }
  int backtracking_ptr_for_packrat441=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev3186;
    deque<int> prioritized_choice_final_prev3187;
    next_prev3186.clear();
    for(int i3185=0;i3185<(int)prev.size();++i3185) {
      i = prev[i3185];
      tmp = parse_slash3188();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3186.push_back(prev[i3185]); }
      for(int i3192=0;i3192<(int)tmp.size();++i3192) {
        if( tmp[i3192] != FAIL ) {
          prioritized_choice_final_prev3187.push_back(tmp[i3192]);
        }
      }
    }
    prev = next_prev3186;
    next_prev3186.clear();
    for(int i3185=0;i3185<(int)prev.size();++i3185) {
      i = prev[i3185];
      tmp = parse_slash3193();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3186.push_back(prev[i3185]); }
      for(int i3195=0;i3195<(int)tmp.size();++i3195) {
        if( tmp[i3195] != FAIL ) {
          prioritized_choice_final_prev3187.push_back(tmp[i3195]);
        }
      }
    }
    prev = next_prev3186;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev3187.empty() && prioritized_choice_final_prev3187.front() == FAIL )) {
        prioritized_choice_final_prev3187.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev3187;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Type) */
    deque<int> next_prev3197;
    for(int i3196=0;i3196<(int)prev.size();++i3196) {
      if( prev[i3196] == FAIL ) {
        if(!(!next_prev3197.empty() && next_prev3197.front() == FAIL )) {
          next_prev3197.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3196];
      tmp = parse_Type();
      
      for(int i3196=0;i3196<(int)tmp.size();++i3196) {
        if( tmp[i3196] == FAIL ) {
          if(!( !next_prev3197.empty() && next_prev3197[0] == FAIL )) {
            next_prev3197.push_front(FAIL);
          }
        } else {
          next_prev3197.push_back(tmp[i3196]);
        }
      }
    }
    prev = next_prev3197;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (VarName) */
    deque<int> next_prev3199;
    for(int i3198=0;i3198<(int)prev.size();++i3198) {
      if( prev[i3198] == FAIL ) {
        if(!(!next_prev3199.empty() && next_prev3199.front() == FAIL )) {
          next_prev3199.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3198];
      tmp = parse_VarName();
      
      for(int i3198=0;i3198<(int)tmp.size();++i3198) {
        if( tmp[i3198] == FAIL ) {
          if(!( !next_prev3199.empty() && next_prev3199[0] == FAIL )) {
            next_prev3199.push_front(FAIL);
          }
        } else {
          next_prev3199.push_back(tmp[i3198]);
        }
      }
    }
    prev = next_prev3199;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3184=0;i3184<(int)prev.size();++i3184) {
    if( prev[i3184] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3184]);
    }
  }
  return memo[key(441,backtracking_ptr_for_packrat441)] = result;
}

inline deque<int> parse_slash3188() { 
  if(memo.count(key(442,i))) {
    return memo[key(442,i)];
  }
  int backtracking_ptr_for_packrat442=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (VariableModifiers) */
    deque<int> next_prev3191;
    for(int i3190=0;i3190<(int)prev.size();++i3190) {
      if( prev[i3190] == FAIL ) {
        if(!(!next_prev3191.empty() && next_prev3191.front() == FAIL )) {
          next_prev3191.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3190];
      tmp = parse_VariableModifiers();
      
      for(int i3190=0;i3190<(int)tmp.size();++i3190) {
        if( tmp[i3190] == FAIL ) {
          if(!( !next_prev3191.empty() && next_prev3191[0] == FAIL )) {
            next_prev3191.push_front(FAIL);
          }
        } else {
          next_prev3191.push_back(tmp[i3190]);
        }
      }
    }
    prev = next_prev3191;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3189=0;i3189<(int)prev.size();++i3189) {
    if( prev[i3189] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3189]);
    }
  }
  return memo[key(442,backtracking_ptr_for_packrat442)] = result;
}

inline deque<int> parse_slash3193() { 
  if(memo.count(key(443,i))) {
    return memo[key(443,i)];
  }
  int backtracking_ptr_for_packrat443=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i3194=0;i3194<(int)prev.size();++i3194) {
    if( prev[i3194] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3194]);
    }
  }
  return memo[key(443,backtracking_ptr_for_packrat443)] = result;
}

deque<int> parse_VarParam(){
  if(memo.count(key(444,i))) {
    return memo[key(444,i)];
  }
  int backtracking_ptr_for_packrat444=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev3202;
    deque<int> prioritized_choice_final_prev3203;
    next_prev3202.clear();
    for(int i3201=0;i3201<(int)prev.size();++i3201) {
      i = prev[i3201];
      tmp = parse_slash3204();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3202.push_back(prev[i3201]); }
      for(int i3208=0;i3208<(int)tmp.size();++i3208) {
        if( tmp[i3208] != FAIL ) {
          prioritized_choice_final_prev3203.push_back(tmp[i3208]);
        }
      }
    }
    prev = next_prev3202;
    next_prev3202.clear();
    for(int i3201=0;i3201<(int)prev.size();++i3201) {
      i = prev[i3201];
      tmp = parse_slash3209();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3202.push_back(prev[i3201]); }
      for(int i3211=0;i3211<(int)tmp.size();++i3211) {
        if( tmp[i3211] != FAIL ) {
          prioritized_choice_final_prev3203.push_back(tmp[i3211]);
        }
      }
    }
    prev = next_prev3202;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev3203.empty() && prioritized_choice_final_prev3203.front() == FAIL )) {
        prioritized_choice_final_prev3203.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev3203;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Type) */
    deque<int> next_prev3213;
    for(int i3212=0;i3212<(int)prev.size();++i3212) {
      if( prev[i3212] == FAIL ) {
        if(!(!next_prev3213.empty() && next_prev3213.front() == FAIL )) {
          next_prev3213.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3212];
      tmp = parse_Type();
      
      for(int i3212=0;i3212<(int)tmp.size();++i3212) {
        if( tmp[i3212] == FAIL ) {
          if(!( !next_prev3213.empty() && next_prev3213[0] == FAIL )) {
            next_prev3213.push_front(FAIL);
          }
        } else {
          next_prev3213.push_back(tmp[i3212]);
        }
      }
    }
    prev = next_prev3213;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3214=0;i3214<(int)prev.size();++i3214) {
        if( prev[i3214] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3214]<m&&I[prev[i3214]]=='.') {
          tmp.push_back(prev[i3214]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3215=0;i3215<(int)prev.size();++i3215) {
        if( prev[i3215] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3215]<m&&I[prev[i3215]]=='.') {
          tmp.push_back(prev[i3215]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3216=0;i3216<(int)prev.size();++i3216) {
        if( prev[i3216] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3216]<m&&I[prev[i3216]]=='.') {
          tmp.push_back(prev[i3216]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3218;
      for(int i3217=0;i3217<(int)prev.size();++i3217) {
        if( prev[i3217] == FAIL ) {
          if(!(!next_prev3218.empty() && next_prev3218.front() == FAIL )) {
            next_prev3218.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3217];
        tmp = parse__();
        
        for(int i3217=0;i3217<(int)tmp.size();++i3217) {
          if( tmp[i3217] == FAIL ) {
            if(!( !next_prev3218.empty() && next_prev3218[0] == FAIL )) {
              next_prev3218.push_front(FAIL);
            }
          } else {
            next_prev3218.push_back(tmp[i3217]);
          }
        }
      }
      prev = next_prev3218;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (VarName) */
    deque<int> next_prev3220;
    for(int i3219=0;i3219<(int)prev.size();++i3219) {
      if( prev[i3219] == FAIL ) {
        if(!(!next_prev3220.empty() && next_prev3220.front() == FAIL )) {
          next_prev3220.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3219];
      tmp = parse_VarName();
      
      for(int i3219=0;i3219<(int)tmp.size();++i3219) {
        if( tmp[i3219] == FAIL ) {
          if(!( !next_prev3220.empty() && next_prev3220[0] == FAIL )) {
            next_prev3220.push_front(FAIL);
          }
        } else {
          next_prev3220.push_back(tmp[i3219]);
        }
      }
    }
    prev = next_prev3220;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3200=0;i3200<(int)prev.size();++i3200) {
    if( prev[i3200] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3200]);
    }
  }
  return memo[key(444,backtracking_ptr_for_packrat444)] = result;
}

inline deque<int> parse_slash3204() { 
  if(memo.count(key(445,i))) {
    return memo[key(445,i)];
  }
  int backtracking_ptr_for_packrat445=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (VariableModifiers) */
    deque<int> next_prev3207;
    for(int i3206=0;i3206<(int)prev.size();++i3206) {
      if( prev[i3206] == FAIL ) {
        if(!(!next_prev3207.empty() && next_prev3207.front() == FAIL )) {
          next_prev3207.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3206];
      tmp = parse_VariableModifiers();
      
      for(int i3206=0;i3206<(int)tmp.size();++i3206) {
        if( tmp[i3206] == FAIL ) {
          if(!( !next_prev3207.empty() && next_prev3207[0] == FAIL )) {
            next_prev3207.push_front(FAIL);
          }
        } else {
          next_prev3207.push_back(tmp[i3206]);
        }
      }
    }
    prev = next_prev3207;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3205=0;i3205<(int)prev.size();++i3205) {
    if( prev[i3205] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3205]);
    }
  }
  return memo[key(445,backtracking_ptr_for_packrat445)] = result;
}

inline deque<int> parse_slash3209() { 
  if(memo.count(key(446,i))) {
    return memo[key(446,i)];
  }
  int backtracking_ptr_for_packrat446=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i3210=0;i3210<(int)prev.size();++i3210) {
    if( prev[i3210] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3210]);
    }
  }
  return memo[key(446,backtracking_ptr_for_packrat446)] = result;
}

deque<int> parse_Throws(){
  if(memo.count(key(447,i))) {
    return memo[key(447,i)];
  }
  int backtracking_ptr_for_packrat447=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3222=0;i3222<(int)prev.size();++i3222) {
        if( prev[i3222] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3222]<m&&I[prev[i3222]]=='t') {
          tmp.push_back(prev[i3222]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3223=0;i3223<(int)prev.size();++i3223) {
        if( prev[i3223] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3223]<m&&I[prev[i3223]]=='h') {
          tmp.push_back(prev[i3223]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3224=0;i3224<(int)prev.size();++i3224) {
        if( prev[i3224] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3224]<m&&I[prev[i3224]]=='r') {
          tmp.push_back(prev[i3224]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3225=0;i3225<(int)prev.size();++i3225) {
        if( prev[i3225] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3225]<m&&I[prev[i3225]]=='o') {
          tmp.push_back(prev[i3225]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3226=0;i3226<(int)prev.size();++i3226) {
        if( prev[i3226] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3226]<m&&I[prev[i3226]]=='w') {
          tmp.push_back(prev[i3226]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3227=0;i3227<(int)prev.size();++i3227) {
        if( prev[i3227] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3227]<m&&I[prev[i3227]]=='s') {
          tmp.push_back(prev[i3227]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev3233;
      for(int i3232=0;i3232<(int)prev.size();++i3232) {
        i = prev[i3232];
        tmp = parse_not3228();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev3233.push_back(prev[i3232]);
        } else {
          if(!(!next_prev3233.empty()&&next_prev3233.front()==FAIL)) {
            next_prev3233.push_front(FAIL);
          }
        }
      }
      prev = next_prev3233;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3235;
      for(int i3234=0;i3234<(int)prev.size();++i3234) {
        if( prev[i3234] == FAIL ) {
          if(!(!next_prev3235.empty() && next_prev3235.front() == FAIL )) {
            next_prev3235.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3234];
        tmp = parse__();
        
        for(int i3234=0;i3234<(int)tmp.size();++i3234) {
          if( tmp[i3234] == FAIL ) {
            if(!( !next_prev3235.empty() && next_prev3235[0] == FAIL )) {
              next_prev3235.push_front(FAIL);
            }
          } else {
            next_prev3235.push_back(tmp[i3234]);
          }
        }
      }
      prev = next_prev3235;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassOrInterfaceTypes) */
    deque<int> next_prev3237;
    for(int i3236=0;i3236<(int)prev.size();++i3236) {
      if( prev[i3236] == FAIL ) {
        if(!(!next_prev3237.empty() && next_prev3237.front() == FAIL )) {
          next_prev3237.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3236];
      tmp = parse_ClassOrInterfaceTypes();
      
      for(int i3236=0;i3236<(int)tmp.size();++i3236) {
        if( tmp[i3236] == FAIL ) {
          if(!( !next_prev3237.empty() && next_prev3237[0] == FAIL )) {
            next_prev3237.push_front(FAIL);
          }
        } else {
          next_prev3237.push_back(tmp[i3236]);
        }
      }
    }
    prev = next_prev3237;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3221=0;i3221<(int)prev.size();++i3221) {
    if( prev[i3221] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3221]);
    }
  }
  return memo[key(447,backtracking_ptr_for_packrat447)] = result;
}

inline deque<int> parse_not3228() { 
  if(memo.count(key(448,i))) {
    return memo[key(448,i)];
  }
  int backtracking_ptr_for_packrat448=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev3231;
  for(int i3230=0;i3230<(int)prev.size();++i3230) {
    if( prev[i3230] == FAIL ) {
      if(!(!next_prev3231.empty() && next_prev3231.front() == FAIL )) {
        next_prev3231.push_front(FAIL);
      }
      continue;
    }
    i = prev[i3230];
    tmp = parse_W();
    
    for(int i3230=0;i3230<(int)tmp.size();++i3230) {
      if( tmp[i3230] == FAIL ) {
        if(!( !next_prev3231.empty() && next_prev3231[0] == FAIL )) {
          next_prev3231.push_front(FAIL);
        }
      } else {
        next_prev3231.push_back(tmp[i3230]);
      }
    }
  }
  prev = next_prev3231;
  for(int i3229=0;i3229<(int)prev.size();++i3229) {
    if( prev[i3229] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3229]);
    }
  }
  return memo[key(448,backtracking_ptr_for_packrat448)] = result;
}

deque<int> parse_ConstructorDeclaration(){
  if(memo.count(key(449,i))) {
    return memo[key(449,i)];
  }
  int backtracking_ptr_for_packrat449=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev3240;
    deque<int> prioritized_choice_final_prev3241;
    next_prev3240.clear();
    for(int i3239=0;i3239<(int)prev.size();++i3239) {
      i = prev[i3239];
      tmp = parse_slash3242();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3240.push_back(prev[i3239]); }
      for(int i3246=0;i3246<(int)tmp.size();++i3246) {
        if( tmp[i3246] != FAIL ) {
          prioritized_choice_final_prev3241.push_back(tmp[i3246]);
        }
      }
    }
    prev = next_prev3240;
    next_prev3240.clear();
    for(int i3239=0;i3239<(int)prev.size();++i3239) {
      i = prev[i3239];
      tmp = parse_slash3247();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3240.push_back(prev[i3239]); }
      for(int i3249=0;i3249<(int)tmp.size();++i3249) {
        if( tmp[i3249] != FAIL ) {
          prioritized_choice_final_prev3241.push_back(tmp[i3249]);
        }
      }
    }
    prev = next_prev3240;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev3241.empty() && prioritized_choice_final_prev3241.front() == FAIL )) {
        prioritized_choice_final_prev3241.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev3241;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ReferenceType) */
    deque<int> next_prev3251;
    for(int i3250=0;i3250<(int)prev.size();++i3250) {
      if( prev[i3250] == FAIL ) {
        if(!(!next_prev3251.empty() && next_prev3251.front() == FAIL )) {
          next_prev3251.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3250];
      tmp = parse_ReferenceType();
      
      for(int i3250=0;i3250<(int)tmp.size();++i3250) {
        if( tmp[i3250] == FAIL ) {
          if(!( !next_prev3251.empty() && next_prev3251[0] == FAIL )) {
            next_prev3251.push_front(FAIL);
          }
        } else {
          next_prev3251.push_back(tmp[i3250]);
        }
      }
    }
    prev = next_prev3251;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3252=0;i3252<(int)prev.size();++i3252) {
        if( prev[i3252] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3252]<m&&I[prev[i3252]]=='(') {
          tmp.push_back(prev[i3252]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3254;
      for(int i3253=0;i3253<(int)prev.size();++i3253) {
        if( prev[i3253] == FAIL ) {
          if(!(!next_prev3254.empty() && next_prev3254.front() == FAIL )) {
            next_prev3254.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3253];
        tmp = parse__();
        
        for(int i3253=0;i3253<(int)tmp.size();++i3253) {
          if( tmp[i3253] == FAIL ) {
            if(!( !next_prev3254.empty() && next_prev3254[0] == FAIL )) {
              next_prev3254.push_front(FAIL);
            }
          } else {
            next_prev3254.push_back(tmp[i3253]);
          }
        }
      }
      prev = next_prev3254;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (MethodParamList) */
    deque<int> next_prev3256;
    for(int i3255=0;i3255<(int)prev.size();++i3255) {
      if( prev[i3255] == FAIL ) {
        if(!(!next_prev3256.empty() && next_prev3256.front() == FAIL )) {
          next_prev3256.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3255];
      tmp = parse_MethodParamList();
      
      for(int i3255=0;i3255<(int)tmp.size();++i3255) {
        if( tmp[i3255] == FAIL ) {
          if(!( !next_prev3256.empty() && next_prev3256[0] == FAIL )) {
            next_prev3256.push_front(FAIL);
          }
        } else {
          next_prev3256.push_back(tmp[i3255]);
        }
      }
    }
    prev = next_prev3256;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3257=0;i3257<(int)prev.size();++i3257) {
        if( prev[i3257] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3257]<m&&I[prev[i3257]]==')') {
          tmp.push_back(prev[i3257]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3259;
      for(int i3258=0;i3258<(int)prev.size();++i3258) {
        if( prev[i3258] == FAIL ) {
          if(!(!next_prev3259.empty() && next_prev3259.front() == FAIL )) {
            next_prev3259.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3258];
        tmp = parse__();
        
        for(int i3258=0;i3258<(int)tmp.size();++i3258) {
          if( tmp[i3258] == FAIL ) {
            if(!( !next_prev3259.empty() && next_prev3259[0] == FAIL )) {
              next_prev3259.push_front(FAIL);
            }
          } else {
            next_prev3259.push_back(tmp[i3258]);
          }
        }
      }
      prev = next_prev3259;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev3261;
    deque<int> prioritized_choice_final_prev3262;
    next_prev3261.clear();
    for(int i3260=0;i3260<(int)prev.size();++i3260) {
      i = prev[i3260];
      tmp = parse_slash3263();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3261.push_back(prev[i3260]); }
      for(int i3267=0;i3267<(int)tmp.size();++i3267) {
        if( tmp[i3267] != FAIL ) {
          prioritized_choice_final_prev3262.push_back(tmp[i3267]);
        }
      }
    }
    prev = next_prev3261;
    next_prev3261.clear();
    for(int i3260=0;i3260<(int)prev.size();++i3260) {
      i = prev[i3260];
      tmp = parse_slash3268();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3261.push_back(prev[i3260]); }
      for(int i3270=0;i3270<(int)tmp.size();++i3270) {
        if( tmp[i3270] != FAIL ) {
          prioritized_choice_final_prev3262.push_back(tmp[i3270]);
        }
      }
    }
    prev = next_prev3261;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev3262.empty() && prioritized_choice_final_prev3262.front() == FAIL )) {
        prioritized_choice_final_prev3262.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev3262;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ConstructorBody) */
    deque<int> next_prev3272;
    for(int i3271=0;i3271<(int)prev.size();++i3271) {
      if( prev[i3271] == FAIL ) {
        if(!(!next_prev3272.empty() && next_prev3272.front() == FAIL )) {
          next_prev3272.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3271];
      tmp = parse_ConstructorBody();
      
      for(int i3271=0;i3271<(int)tmp.size();++i3271) {
        if( tmp[i3271] == FAIL ) {
          if(!( !next_prev3272.empty() && next_prev3272[0] == FAIL )) {
            next_prev3272.push_front(FAIL);
          }
        } else {
          next_prev3272.push_back(tmp[i3271]);
        }
      }
    }
    prev = next_prev3272;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3238=0;i3238<(int)prev.size();++i3238) {
    if( prev[i3238] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3238]);
    }
  }
  return memo[key(449,backtracking_ptr_for_packrat449)] = result;
}

inline deque<int> parse_slash3242() { 
  if(memo.count(key(450,i))) {
    return memo[key(450,i)];
  }
  int backtracking_ptr_for_packrat450=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ConstructorModifiers) */
    deque<int> next_prev3245;
    for(int i3244=0;i3244<(int)prev.size();++i3244) {
      if( prev[i3244] == FAIL ) {
        if(!(!next_prev3245.empty() && next_prev3245.front() == FAIL )) {
          next_prev3245.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3244];
      tmp = parse_ConstructorModifiers();
      
      for(int i3244=0;i3244<(int)tmp.size();++i3244) {
        if( tmp[i3244] == FAIL ) {
          if(!( !next_prev3245.empty() && next_prev3245[0] == FAIL )) {
            next_prev3245.push_front(FAIL);
          }
        } else {
          next_prev3245.push_back(tmp[i3244]);
        }
      }
    }
    prev = next_prev3245;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3243=0;i3243<(int)prev.size();++i3243) {
    if( prev[i3243] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3243]);
    }
  }
  return memo[key(450,backtracking_ptr_for_packrat450)] = result;
}

inline deque<int> parse_slash3247() { 
  if(memo.count(key(451,i))) {
    return memo[key(451,i)];
  }
  int backtracking_ptr_for_packrat451=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i3248=0;i3248<(int)prev.size();++i3248) {
    if( prev[i3248] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3248]);
    }
  }
  return memo[key(451,backtracking_ptr_for_packrat451)] = result;
}

inline deque<int> parse_slash3263() { 
  if(memo.count(key(452,i))) {
    return memo[key(452,i)];
  }
  int backtracking_ptr_for_packrat452=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Throws) */
    deque<int> next_prev3266;
    for(int i3265=0;i3265<(int)prev.size();++i3265) {
      if( prev[i3265] == FAIL ) {
        if(!(!next_prev3266.empty() && next_prev3266.front() == FAIL )) {
          next_prev3266.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3265];
      tmp = parse_Throws();
      
      for(int i3265=0;i3265<(int)tmp.size();++i3265) {
        if( tmp[i3265] == FAIL ) {
          if(!( !next_prev3266.empty() && next_prev3266[0] == FAIL )) {
            next_prev3266.push_front(FAIL);
          }
        } else {
          next_prev3266.push_back(tmp[i3265]);
        }
      }
    }
    prev = next_prev3266;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3264=0;i3264<(int)prev.size();++i3264) {
    if( prev[i3264] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3264]);
    }
  }
  return memo[key(452,backtracking_ptr_for_packrat452)] = result;
}

inline deque<int> parse_slash3268() { 
  if(memo.count(key(453,i))) {
    return memo[key(453,i)];
  }
  int backtracking_ptr_for_packrat453=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i3269=0;i3269<(int)prev.size();++i3269) {
    if( prev[i3269] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3269]);
    }
  }
  return memo[key(453,backtracking_ptr_for_packrat453)] = result;
}

deque<int> parse_ConstructorModifiers(){
  if(memo.count(key(454,i))) {
    return memo[key(454,i)];
  }
  int backtracking_ptr_for_packrat454=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ConstructorModifier) */
    deque<int> next_prev3275;
    for(int i3274=0;i3274<(int)prev.size();++i3274) {
      if( prev[i3274] == FAIL ) {
        if(!(!next_prev3275.empty() && next_prev3275.front() == FAIL )) {
          next_prev3275.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3274];
      tmp = parse_ConstructorModifier();
      
      for(int i3274=0;i3274<(int)tmp.size();++i3274) {
        if( tmp[i3274] == FAIL ) {
          if(!( !next_prev3275.empty() && next_prev3275[0] == FAIL )) {
            next_prev3275.push_front(FAIL);
          }
        } else {
          next_prev3275.push_back(tmp[i3274]);
        }
      }
    }
    prev = next_prev3275;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev3280;
    deque<int> star_final_prev3281;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev3280.clear();
      for(int i3282=0;i3282<(int)prev.size();++i3282) {
        i = prev[i3282];
        tmp = parse_while3276();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev3281.push_back(prev[i3282]);
        }
        for(int i3283=0;i3283<(int)tmp.size();++i3283) {
          if(tmp[i3283]==FAIL) {
            if(!( !next_prev3280.empty() && next_prev3280.front() == FAIL )) {
              next_prev3280.push_front(FAIL);
            }
          } else {
            next_prev3280.push_back(tmp[i3283]);
          }
        }
      }
      prev = next_prev3280;
    }
    prev = star_final_prev3281;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3273=0;i3273<(int)prev.size();++i3273) {
    if( prev[i3273] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3273]);
    }
  }
  return memo[key(454,backtracking_ptr_for_packrat454)] = result;
}

inline deque<int> parse_while3276() { 
  if(memo.count(key(455,i))) {
    return memo[key(455,i)];
  }
  int backtracking_ptr_for_packrat455=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ConstructorModifier) */
    deque<int> next_prev3279;
    for(int i3278=0;i3278<(int)prev.size();++i3278) {
      if( prev[i3278] == FAIL ) {
        if(!(!next_prev3279.empty() && next_prev3279.front() == FAIL )) {
          next_prev3279.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3278];
      tmp = parse_ConstructorModifier();
      
      for(int i3278=0;i3278<(int)tmp.size();++i3278) {
        if( tmp[i3278] == FAIL ) {
          if(!( !next_prev3279.empty() && next_prev3279[0] == FAIL )) {
            next_prev3279.push_front(FAIL);
          }
        } else {
          next_prev3279.push_back(tmp[i3278]);
        }
      }
    }
    prev = next_prev3279;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3277=0;i3277<(int)prev.size();++i3277) {
    if( prev[i3277] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3277]);
    }
  }
  return memo[key(455,backtracking_ptr_for_packrat455)] = result;
}

deque<int> parse_ConstructorModifier(){
  if(memo.count(key(456,i))) {
    return memo[key(456,i)];
  }
  int backtracking_ptr_for_packrat456=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev3286;
  deque<int> prioritized_choice_final_prev3287;
  next_prev3286.clear();
  for(int i3285=0;i3285<(int)prev.size();++i3285) {
    i = prev[i3285];
    tmp = parse_slash3288();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3286.push_back(prev[i3285]); }
    for(int i3292=0;i3292<(int)tmp.size();++i3292) {
      if( tmp[i3292] != FAIL ) {
        prioritized_choice_final_prev3287.push_back(tmp[i3292]);
      }
    }
  }
  prev = next_prev3286;
  next_prev3286.clear();
  for(int i3285=0;i3285<(int)prev.size();++i3285) {
    i = prev[i3285];
    tmp = parse_slash3293();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3286.push_back(prev[i3285]); }
    for(int i3309=0;i3309<(int)tmp.size();++i3309) {
      if( tmp[i3309] != FAIL ) {
        prioritized_choice_final_prev3287.push_back(tmp[i3309]);
      }
    }
  }
  prev = next_prev3286;
  next_prev3286.clear();
  for(int i3285=0;i3285<(int)prev.size();++i3285) {
    i = prev[i3285];
    tmp = parse_slash3310();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3286.push_back(prev[i3285]); }
    for(int i3329=0;i3329<(int)tmp.size();++i3329) {
      if( tmp[i3329] != FAIL ) {
        prioritized_choice_final_prev3287.push_back(tmp[i3329]);
      }
    }
  }
  prev = next_prev3286;
  next_prev3286.clear();
  for(int i3285=0;i3285<(int)prev.size();++i3285) {
    i = prev[i3285];
    tmp = parse_slash3330();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3286.push_back(prev[i3285]); }
    for(int i3347=0;i3347<(int)tmp.size();++i3347) {
      if( tmp[i3347] != FAIL ) {
        prioritized_choice_final_prev3287.push_back(tmp[i3347]);
      }
    }
  }
  prev = next_prev3286;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev3287.empty() && prioritized_choice_final_prev3287.front() == FAIL )) {
      prioritized_choice_final_prev3287.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev3287;
  for(int i3284=0;i3284<(int)prev.size();++i3284) {
    if( prev[i3284] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3284]);
    }
  }
  return memo[key(456,backtracking_ptr_for_packrat456)] = result;
}

inline deque<int> parse_slash3288() { 
  if(memo.count(key(457,i))) {
    return memo[key(457,i)];
  }
  int backtracking_ptr_for_packrat457=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotation) */
    deque<int> next_prev3291;
    for(int i3290=0;i3290<(int)prev.size();++i3290) {
      if( prev[i3290] == FAIL ) {
        if(!(!next_prev3291.empty() && next_prev3291.front() == FAIL )) {
          next_prev3291.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3290];
      tmp = parse_Annotation();
      
      for(int i3290=0;i3290<(int)tmp.size();++i3290) {
        if( tmp[i3290] == FAIL ) {
          if(!( !next_prev3291.empty() && next_prev3291[0] == FAIL )) {
            next_prev3291.push_front(FAIL);
          }
        } else {
          next_prev3291.push_back(tmp[i3290]);
        }
      }
    }
    prev = next_prev3291;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3289=0;i3289<(int)prev.size();++i3289) {
    if( prev[i3289] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3289]);
    }
  }
  return memo[key(457,backtracking_ptr_for_packrat457)] = result;
}

inline deque<int> parse_slash3293() { 
  if(memo.count(key(458,i))) {
    return memo[key(458,i)];
  }
  int backtracking_ptr_for_packrat458=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3295=0;i3295<(int)prev.size();++i3295) {
        if( prev[i3295] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3295]<m&&I[prev[i3295]]=='p') {
          tmp.push_back(prev[i3295]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3296=0;i3296<(int)prev.size();++i3296) {
        if( prev[i3296] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3296]<m&&I[prev[i3296]]=='u') {
          tmp.push_back(prev[i3296]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3297=0;i3297<(int)prev.size();++i3297) {
        if( prev[i3297] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3297]<m&&I[prev[i3297]]=='b') {
          tmp.push_back(prev[i3297]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3298=0;i3298<(int)prev.size();++i3298) {
        if( prev[i3298] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3298]<m&&I[prev[i3298]]=='l') {
          tmp.push_back(prev[i3298]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3299=0;i3299<(int)prev.size();++i3299) {
        if( prev[i3299] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3299]<m&&I[prev[i3299]]=='i') {
          tmp.push_back(prev[i3299]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3300=0;i3300<(int)prev.size();++i3300) {
        if( prev[i3300] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3300]<m&&I[prev[i3300]]=='c') {
          tmp.push_back(prev[i3300]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev3306;
      for(int i3305=0;i3305<(int)prev.size();++i3305) {
        i = prev[i3305];
        tmp = parse_not3301();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev3306.push_back(prev[i3305]);
        } else {
          if(!(!next_prev3306.empty()&&next_prev3306.front()==FAIL)) {
            next_prev3306.push_front(FAIL);
          }
        }
      }
      prev = next_prev3306;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3308;
      for(int i3307=0;i3307<(int)prev.size();++i3307) {
        if( prev[i3307] == FAIL ) {
          if(!(!next_prev3308.empty() && next_prev3308.front() == FAIL )) {
            next_prev3308.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3307];
        tmp = parse__();
        
        for(int i3307=0;i3307<(int)tmp.size();++i3307) {
          if( tmp[i3307] == FAIL ) {
            if(!( !next_prev3308.empty() && next_prev3308[0] == FAIL )) {
              next_prev3308.push_front(FAIL);
            }
          } else {
            next_prev3308.push_back(tmp[i3307]);
          }
        }
      }
      prev = next_prev3308;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3294=0;i3294<(int)prev.size();++i3294) {
    if( prev[i3294] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3294]);
    }
  }
  return memo[key(458,backtracking_ptr_for_packrat458)] = result;
}

inline deque<int> parse_not3301() { 
  if(memo.count(key(459,i))) {
    return memo[key(459,i)];
  }
  int backtracking_ptr_for_packrat459=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev3304;
  for(int i3303=0;i3303<(int)prev.size();++i3303) {
    if( prev[i3303] == FAIL ) {
      if(!(!next_prev3304.empty() && next_prev3304.front() == FAIL )) {
        next_prev3304.push_front(FAIL);
      }
      continue;
    }
    i = prev[i3303];
    tmp = parse_W();
    
    for(int i3303=0;i3303<(int)tmp.size();++i3303) {
      if( tmp[i3303] == FAIL ) {
        if(!( !next_prev3304.empty() && next_prev3304[0] == FAIL )) {
          next_prev3304.push_front(FAIL);
        }
      } else {
        next_prev3304.push_back(tmp[i3303]);
      }
    }
  }
  prev = next_prev3304;
  for(int i3302=0;i3302<(int)prev.size();++i3302) {
    if( prev[i3302] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3302]);
    }
  }
  return memo[key(459,backtracking_ptr_for_packrat459)] = result;
}

inline deque<int> parse_slash3310() { 
  if(memo.count(key(460,i))) {
    return memo[key(460,i)];
  }
  int backtracking_ptr_for_packrat460=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3312=0;i3312<(int)prev.size();++i3312) {
        if( prev[i3312] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3312]<m&&I[prev[i3312]]=='p') {
          tmp.push_back(prev[i3312]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3313=0;i3313<(int)prev.size();++i3313) {
        if( prev[i3313] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3313]<m&&I[prev[i3313]]=='r') {
          tmp.push_back(prev[i3313]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3314=0;i3314<(int)prev.size();++i3314) {
        if( prev[i3314] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3314]<m&&I[prev[i3314]]=='o') {
          tmp.push_back(prev[i3314]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3315=0;i3315<(int)prev.size();++i3315) {
        if( prev[i3315] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3315]<m&&I[prev[i3315]]=='t') {
          tmp.push_back(prev[i3315]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3316=0;i3316<(int)prev.size();++i3316) {
        if( prev[i3316] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3316]<m&&I[prev[i3316]]=='e') {
          tmp.push_back(prev[i3316]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3317=0;i3317<(int)prev.size();++i3317) {
        if( prev[i3317] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3317]<m&&I[prev[i3317]]=='c') {
          tmp.push_back(prev[i3317]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3318=0;i3318<(int)prev.size();++i3318) {
        if( prev[i3318] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3318]<m&&I[prev[i3318]]=='t') {
          tmp.push_back(prev[i3318]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3319=0;i3319<(int)prev.size();++i3319) {
        if( prev[i3319] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3319]<m&&I[prev[i3319]]=='e') {
          tmp.push_back(prev[i3319]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3320=0;i3320<(int)prev.size();++i3320) {
        if( prev[i3320] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3320]<m&&I[prev[i3320]]=='d') {
          tmp.push_back(prev[i3320]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev3326;
      for(int i3325=0;i3325<(int)prev.size();++i3325) {
        i = prev[i3325];
        tmp = parse_not3321();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev3326.push_back(prev[i3325]);
        } else {
          if(!(!next_prev3326.empty()&&next_prev3326.front()==FAIL)) {
            next_prev3326.push_front(FAIL);
          }
        }
      }
      prev = next_prev3326;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3328;
      for(int i3327=0;i3327<(int)prev.size();++i3327) {
        if( prev[i3327] == FAIL ) {
          if(!(!next_prev3328.empty() && next_prev3328.front() == FAIL )) {
            next_prev3328.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3327];
        tmp = parse__();
        
        for(int i3327=0;i3327<(int)tmp.size();++i3327) {
          if( tmp[i3327] == FAIL ) {
            if(!( !next_prev3328.empty() && next_prev3328[0] == FAIL )) {
              next_prev3328.push_front(FAIL);
            }
          } else {
            next_prev3328.push_back(tmp[i3327]);
          }
        }
      }
      prev = next_prev3328;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3311=0;i3311<(int)prev.size();++i3311) {
    if( prev[i3311] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3311]);
    }
  }
  return memo[key(460,backtracking_ptr_for_packrat460)] = result;
}

inline deque<int> parse_not3321() { 
  if(memo.count(key(461,i))) {
    return memo[key(461,i)];
  }
  int backtracking_ptr_for_packrat461=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev3324;
  for(int i3323=0;i3323<(int)prev.size();++i3323) {
    if( prev[i3323] == FAIL ) {
      if(!(!next_prev3324.empty() && next_prev3324.front() == FAIL )) {
        next_prev3324.push_front(FAIL);
      }
      continue;
    }
    i = prev[i3323];
    tmp = parse_W();
    
    for(int i3323=0;i3323<(int)tmp.size();++i3323) {
      if( tmp[i3323] == FAIL ) {
        if(!( !next_prev3324.empty() && next_prev3324[0] == FAIL )) {
          next_prev3324.push_front(FAIL);
        }
      } else {
        next_prev3324.push_back(tmp[i3323]);
      }
    }
  }
  prev = next_prev3324;
  for(int i3322=0;i3322<(int)prev.size();++i3322) {
    if( prev[i3322] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3322]);
    }
  }
  return memo[key(461,backtracking_ptr_for_packrat461)] = result;
}

inline deque<int> parse_slash3330() { 
  if(memo.count(key(462,i))) {
    return memo[key(462,i)];
  }
  int backtracking_ptr_for_packrat462=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3332=0;i3332<(int)prev.size();++i3332) {
        if( prev[i3332] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3332]<m&&I[prev[i3332]]=='p') {
          tmp.push_back(prev[i3332]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3333=0;i3333<(int)prev.size();++i3333) {
        if( prev[i3333] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3333]<m&&I[prev[i3333]]=='r') {
          tmp.push_back(prev[i3333]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3334=0;i3334<(int)prev.size();++i3334) {
        if( prev[i3334] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3334]<m&&I[prev[i3334]]=='i') {
          tmp.push_back(prev[i3334]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3335=0;i3335<(int)prev.size();++i3335) {
        if( prev[i3335] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3335]<m&&I[prev[i3335]]=='v') {
          tmp.push_back(prev[i3335]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3336=0;i3336<(int)prev.size();++i3336) {
        if( prev[i3336] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3336]<m&&I[prev[i3336]]=='a') {
          tmp.push_back(prev[i3336]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3337=0;i3337<(int)prev.size();++i3337) {
        if( prev[i3337] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3337]<m&&I[prev[i3337]]=='t') {
          tmp.push_back(prev[i3337]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3338=0;i3338<(int)prev.size();++i3338) {
        if( prev[i3338] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3338]<m&&I[prev[i3338]]=='e') {
          tmp.push_back(prev[i3338]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev3344;
      for(int i3343=0;i3343<(int)prev.size();++i3343) {
        i = prev[i3343];
        tmp = parse_not3339();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev3344.push_back(prev[i3343]);
        } else {
          if(!(!next_prev3344.empty()&&next_prev3344.front()==FAIL)) {
            next_prev3344.push_front(FAIL);
          }
        }
      }
      prev = next_prev3344;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3346;
      for(int i3345=0;i3345<(int)prev.size();++i3345) {
        if( prev[i3345] == FAIL ) {
          if(!(!next_prev3346.empty() && next_prev3346.front() == FAIL )) {
            next_prev3346.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3345];
        tmp = parse__();
        
        for(int i3345=0;i3345<(int)tmp.size();++i3345) {
          if( tmp[i3345] == FAIL ) {
            if(!( !next_prev3346.empty() && next_prev3346[0] == FAIL )) {
              next_prev3346.push_front(FAIL);
            }
          } else {
            next_prev3346.push_back(tmp[i3345]);
          }
        }
      }
      prev = next_prev3346;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3331=0;i3331<(int)prev.size();++i3331) {
    if( prev[i3331] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3331]);
    }
  }
  return memo[key(462,backtracking_ptr_for_packrat462)] = result;
}

inline deque<int> parse_not3339() { 
  if(memo.count(key(463,i))) {
    return memo[key(463,i)];
  }
  int backtracking_ptr_for_packrat463=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev3342;
  for(int i3341=0;i3341<(int)prev.size();++i3341) {
    if( prev[i3341] == FAIL ) {
      if(!(!next_prev3342.empty() && next_prev3342.front() == FAIL )) {
        next_prev3342.push_front(FAIL);
      }
      continue;
    }
    i = prev[i3341];
    tmp = parse_W();
    
    for(int i3341=0;i3341<(int)tmp.size();++i3341) {
      if( tmp[i3341] == FAIL ) {
        if(!( !next_prev3342.empty() && next_prev3342[0] == FAIL )) {
          next_prev3342.push_front(FAIL);
        }
      } else {
        next_prev3342.push_back(tmp[i3341]);
      }
    }
  }
  prev = next_prev3342;
  for(int i3340=0;i3340<(int)prev.size();++i3340) {
    if( prev[i3340] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3340]);
    }
  }
  return memo[key(463,backtracking_ptr_for_packrat463)] = result;
}

deque<int> parse_ConstructorBody(){
  if(memo.count(key(464,i))) {
    return memo[key(464,i)];
  }
  int backtracking_ptr_for_packrat464=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3349=0;i3349<(int)prev.size();++i3349) {
        if( prev[i3349] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3349]<m&&I[prev[i3349]]=='{') {
          tmp.push_back(prev[i3349]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3351;
      for(int i3350=0;i3350<(int)prev.size();++i3350) {
        if( prev[i3350] == FAIL ) {
          if(!(!next_prev3351.empty() && next_prev3351.front() == FAIL )) {
            next_prev3351.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3350];
        tmp = parse__();
        
        for(int i3350=0;i3350<(int)tmp.size();++i3350) {
          if( tmp[i3350] == FAIL ) {
            if(!( !next_prev3351.empty() && next_prev3351[0] == FAIL )) {
              next_prev3351.push_front(FAIL);
            }
          } else {
            next_prev3351.push_back(tmp[i3350]);
          }
        }
      }
      prev = next_prev3351;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev3353;
    deque<int> prioritized_choice_final_prev3354;
    next_prev3353.clear();
    for(int i3352=0;i3352<(int)prev.size();++i3352) {
      i = prev[i3352];
      tmp = parse_slash3355();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3353.push_back(prev[i3352]); }
      for(int i3359=0;i3359<(int)tmp.size();++i3359) {
        if( tmp[i3359] != FAIL ) {
          prioritized_choice_final_prev3354.push_back(tmp[i3359]);
        }
      }
    }
    prev = next_prev3353;
    next_prev3353.clear();
    for(int i3352=0;i3352<(int)prev.size();++i3352) {
      i = prev[i3352];
      tmp = parse_slash3360();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3353.push_back(prev[i3352]); }
      for(int i3362=0;i3362<(int)tmp.size();++i3362) {
        if( tmp[i3362] != FAIL ) {
          prioritized_choice_final_prev3354.push_back(tmp[i3362]);
        }
      }
    }
    prev = next_prev3353;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev3354.empty() && prioritized_choice_final_prev3354.front() == FAIL )) {
        prioritized_choice_final_prev3354.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev3354;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev3378;
    deque<int> star_final_prev3379;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev3378.clear();
      for(int i3380=0;i3380<(int)prev.size();++i3380) {
        i = prev[i3380];
        tmp = parse_while3363();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev3379.push_back(prev[i3380]);
        }
        for(int i3381=0;i3381<(int)tmp.size();++i3381) {
          if(tmp[i3381]==FAIL) {
            if(!( !next_prev3378.empty() && next_prev3378.front() == FAIL )) {
              next_prev3378.push_front(FAIL);
            }
          } else {
            next_prev3378.push_back(tmp[i3381]);
          }
        }
      }
      prev = next_prev3378;
    }
    prev = star_final_prev3379;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3382=0;i3382<(int)prev.size();++i3382) {
        if( prev[i3382] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3382]<m&&I[prev[i3382]]=='}') {
          tmp.push_back(prev[i3382]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3384;
      for(int i3383=0;i3383<(int)prev.size();++i3383) {
        if( prev[i3383] == FAIL ) {
          if(!(!next_prev3384.empty() && next_prev3384.front() == FAIL )) {
            next_prev3384.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3383];
        tmp = parse__();
        
        for(int i3383=0;i3383<(int)tmp.size();++i3383) {
          if( tmp[i3383] == FAIL ) {
            if(!( !next_prev3384.empty() && next_prev3384[0] == FAIL )) {
              next_prev3384.push_front(FAIL);
            }
          } else {
            next_prev3384.push_back(tmp[i3383]);
          }
        }
      }
      prev = next_prev3384;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3348=0;i3348<(int)prev.size();++i3348) {
    if( prev[i3348] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3348]);
    }
  }
  return memo[key(464,backtracking_ptr_for_packrat464)] = result;
}

inline deque<int> parse_slash3355() { 
  if(memo.count(key(465,i))) {
    return memo[key(465,i)];
  }
  int backtracking_ptr_for_packrat465=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ExplicitConstructorInvocation) */
    deque<int> next_prev3358;
    for(int i3357=0;i3357<(int)prev.size();++i3357) {
      if( prev[i3357] == FAIL ) {
        if(!(!next_prev3358.empty() && next_prev3358.front() == FAIL )) {
          next_prev3358.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3357];
      tmp = parse_ExplicitConstructorInvocation();
      
      for(int i3357=0;i3357<(int)tmp.size();++i3357) {
        if( tmp[i3357] == FAIL ) {
          if(!( !next_prev3358.empty() && next_prev3358[0] == FAIL )) {
            next_prev3358.push_front(FAIL);
          }
        } else {
          next_prev3358.push_back(tmp[i3357]);
        }
      }
    }
    prev = next_prev3358;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3356=0;i3356<(int)prev.size();++i3356) {
    if( prev[i3356] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3356]);
    }
  }
  return memo[key(465,backtracking_ptr_for_packrat465)] = result;
}

inline deque<int> parse_slash3360() { 
  if(memo.count(key(466,i))) {
    return memo[key(466,i)];
  }
  int backtracking_ptr_for_packrat466=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i3361=0;i3361<(int)prev.size();++i3361) {
    if( prev[i3361] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3361]);
    }
  }
  return memo[key(466,backtracking_ptr_for_packrat466)] = result;
}

inline deque<int> parse_while3363() { 
  if(memo.count(key(467,i))) {
    return memo[key(467,i)];
  }
  int backtracking_ptr_for_packrat467=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev3366;
    deque<int> prioritized_choice_final_prev3367;
    next_prev3366.clear();
    for(int i3365=0;i3365<(int)prev.size();++i3365) {
      i = prev[i3365];
      tmp = parse_slash3368();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3366.push_back(prev[i3365]); }
      for(int i3372=0;i3372<(int)tmp.size();++i3372) {
        if( tmp[i3372] != FAIL ) {
          prioritized_choice_final_prev3367.push_back(tmp[i3372]);
        }
      }
    }
    prev = next_prev3366;
    next_prev3366.clear();
    for(int i3365=0;i3365<(int)prev.size();++i3365) {
      i = prev[i3365];
      tmp = parse_slash3373();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3366.push_back(prev[i3365]); }
      for(int i3377=0;i3377<(int)tmp.size();++i3377) {
        if( tmp[i3377] != FAIL ) {
          prioritized_choice_final_prev3367.push_back(tmp[i3377]);
        }
      }
    }
    prev = next_prev3366;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev3367.empty() && prioritized_choice_final_prev3367.front() == FAIL )) {
        prioritized_choice_final_prev3367.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev3367;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3364=0;i3364<(int)prev.size();++i3364) {
    if( prev[i3364] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3364]);
    }
  }
  return memo[key(467,backtracking_ptr_for_packrat467)] = result;
}

inline deque<int> parse_slash3368() { 
  if(memo.count(key(468,i))) {
    return memo[key(468,i)];
  }
  int backtracking_ptr_for_packrat468=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Statement) */
    deque<int> next_prev3371;
    for(int i3370=0;i3370<(int)prev.size();++i3370) {
      if( prev[i3370] == FAIL ) {
        if(!(!next_prev3371.empty() && next_prev3371.front() == FAIL )) {
          next_prev3371.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3370];
      tmp = parse_Statement();
      
      for(int i3370=0;i3370<(int)tmp.size();++i3370) {
        if( tmp[i3370] == FAIL ) {
          if(!( !next_prev3371.empty() && next_prev3371[0] == FAIL )) {
            next_prev3371.push_front(FAIL);
          }
        } else {
          next_prev3371.push_back(tmp[i3370]);
        }
      }
    }
    prev = next_prev3371;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3369=0;i3369<(int)prev.size();++i3369) {
    if( prev[i3369] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3369]);
    }
  }
  return memo[key(468,backtracking_ptr_for_packrat468)] = result;
}

inline deque<int> parse_slash3373() { 
  if(memo.count(key(469,i))) {
    return memo[key(469,i)];
  }
  int backtracking_ptr_for_packrat469=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (LocalDeclaration) */
    deque<int> next_prev3376;
    for(int i3375=0;i3375<(int)prev.size();++i3375) {
      if( prev[i3375] == FAIL ) {
        if(!(!next_prev3376.empty() && next_prev3376.front() == FAIL )) {
          next_prev3376.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3375];
      tmp = parse_LocalDeclaration();
      
      for(int i3375=0;i3375<(int)tmp.size();++i3375) {
        if( tmp[i3375] == FAIL ) {
          if(!( !next_prev3376.empty() && next_prev3376[0] == FAIL )) {
            next_prev3376.push_front(FAIL);
          }
        } else {
          next_prev3376.push_back(tmp[i3375]);
        }
      }
    }
    prev = next_prev3376;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3374=0;i3374<(int)prev.size();++i3374) {
    if( prev[i3374] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3374]);
    }
  }
  return memo[key(469,backtracking_ptr_for_packrat469)] = result;
}

deque<int> parse_ExplicitConstructorInvocation(){
  if(memo.count(key(470,i))) {
    return memo[key(470,i)];
  }
  int backtracking_ptr_for_packrat470=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev3387;
  deque<int> prioritized_choice_final_prev3388;
  next_prev3387.clear();
  for(int i3386=0;i3386<(int)prev.size();++i3386) {
    i = prev[i3386];
    tmp = parse_slash3389();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3387.push_back(prev[i3386]); }
    for(int i3424=0;i3424<(int)tmp.size();++i3424) {
      if( tmp[i3424] != FAIL ) {
        prioritized_choice_final_prev3388.push_back(tmp[i3424]);
      }
    }
  }
  prev = next_prev3387;
  next_prev3387.clear();
  for(int i3386=0;i3386<(int)prev.size();++i3386) {
    i = prev[i3386];
    tmp = parse_slash3425();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3387.push_back(prev[i3386]); }
    for(int i3460=0;i3460<(int)tmp.size();++i3460) {
      if( tmp[i3460] != FAIL ) {
        prioritized_choice_final_prev3388.push_back(tmp[i3460]);
      }
    }
  }
  prev = next_prev3387;
  next_prev3387.clear();
  for(int i3386=0;i3386<(int)prev.size();++i3386) {
    i = prev[i3386];
    tmp = parse_slash3461();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3387.push_back(prev[i3386]); }
    for(int i3506=0;i3506<(int)tmp.size();++i3506) {
      if( tmp[i3506] != FAIL ) {
        prioritized_choice_final_prev3388.push_back(tmp[i3506]);
      }
    }
  }
  prev = next_prev3387;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev3388.empty() && prioritized_choice_final_prev3388.front() == FAIL )) {
      prioritized_choice_final_prev3388.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev3388;
  for(int i3385=0;i3385<(int)prev.size();++i3385) {
    if( prev[i3385] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3385]);
    }
  }
  return memo[key(470,backtracking_ptr_for_packrat470)] = result;
}

inline deque<int> parse_slash3389() { 
  if(memo.count(key(471,i))) {
    return memo[key(471,i)];
  }
  int backtracking_ptr_for_packrat471=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Prioritized Choice */
      deque<int> next_prev3392;
      deque<int> prioritized_choice_final_prev3393;
      next_prev3392.clear();
      for(int i3391=0;i3391<(int)prev.size();++i3391) {
        i = prev[i3391];
        tmp = parse_slash3394();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3392.push_back(prev[i3391]); }
        for(int i3398=0;i3398<(int)tmp.size();++i3398) {
          if( tmp[i3398] != FAIL ) {
            prioritized_choice_final_prev3393.push_back(tmp[i3398]);
          }
        }
      }
      prev = next_prev3392;
      next_prev3392.clear();
      for(int i3391=0;i3391<(int)prev.size();++i3391) {
        i = prev[i3391];
        tmp = parse_slash3399();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3392.push_back(prev[i3391]); }
        for(int i3401=0;i3401<(int)tmp.size();++i3401) {
          if( tmp[i3401] != FAIL ) {
            prioritized_choice_final_prev3393.push_back(tmp[i3401]);
          }
        }
      }
      prev = next_prev3392;
      if(!prev.empty()) {
        if(!(!prioritized_choice_final_prev3393.empty() && prioritized_choice_final_prev3393.front() == FAIL )) {
          prioritized_choice_final_prev3393.push_front(FAIL);
        }
      }
      prev = prioritized_choice_final_prev3393;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Nonterminal (This) */
        deque<int> next_prev3403;
        for(int i3402=0;i3402<(int)prev.size();++i3402) {
          if( prev[i3402] == FAIL ) {
            if(!(!next_prev3403.empty() && next_prev3403.front() == FAIL )) {
              next_prev3403.push_front(FAIL);
            }
            continue;
          }
          i = prev[i3402];
          tmp = parse_This();
          
          for(int i3402=0;i3402<(int)tmp.size();++i3402) {
            if( tmp[i3402] == FAIL ) {
              if(!( !next_prev3403.empty() && next_prev3403[0] == FAIL )) {
                next_prev3403.push_front(FAIL);
              }
            } else {
              next_prev3403.push_back(tmp[i3402]);
            }
          }
        }
        prev = next_prev3403;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        if(!((int)prev.size()==1&&prev.front()==FAIL)) {
          tmp.clear();
          for(int i3404=0;i3404<(int)prev.size();++i3404) {
            if( prev[i3404] == FAIL ) {
              if(!(!tmp.empty()&&tmp.front()==FAIL)) {
                tmp.push_front(FAIL);
              }
              continue;
            }
            if(prev[i3404]<m&&I[prev[i3404]]=='(') {
              tmp.push_back(prev[i3404]+1);
            } else {
              if(!( !tmp.empty() && tmp[0] == FAIL )){
                tmp.push_front(FAIL);
              }
            }
          }
          prev = tmp;
          sort(prev.begin(),prev.end());
          prev.erase(unique(prev.begin(),prev.end()),prev.end());
        }
        if(!((int)prev.size()==1&&prev.front()==FAIL)) {
          /* Nonterminal (_) */
          deque<int> next_prev3406;
          for(int i3405=0;i3405<(int)prev.size();++i3405) {
            if( prev[i3405] == FAIL ) {
              if(!(!next_prev3406.empty() && next_prev3406.front() == FAIL )) {
                next_prev3406.push_front(FAIL);
              }
              continue;
            }
            i = prev[i3405];
            tmp = parse__();
            
            for(int i3405=0;i3405<(int)tmp.size();++i3405) {
              if( tmp[i3405] == FAIL ) {
                if(!( !next_prev3406.empty() && next_prev3406[0] == FAIL )) {
                  next_prev3406.push_front(FAIL);
                }
              } else {
                next_prev3406.push_back(tmp[i3405]);
              }
            }
          }
          prev = next_prev3406;
          sort(prev.begin(),prev.end());
          prev.erase(unique(prev.begin(),prev.end()),prev.end());
        }
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Prioritized Choice */
        deque<int> next_prev3408;
        deque<int> prioritized_choice_final_prev3409;
        next_prev3408.clear();
        for(int i3407=0;i3407<(int)prev.size();++i3407) {
          i = prev[i3407];
          tmp = parse_slash3410();
          if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3408.push_back(prev[i3407]); }
          for(int i3414=0;i3414<(int)tmp.size();++i3414) {
            if( tmp[i3414] != FAIL ) {
              prioritized_choice_final_prev3409.push_back(tmp[i3414]);
            }
          }
        }
        prev = next_prev3408;
        next_prev3408.clear();
        for(int i3407=0;i3407<(int)prev.size();++i3407) {
          i = prev[i3407];
          tmp = parse_slash3415();
          if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3408.push_back(prev[i3407]); }
          for(int i3417=0;i3417<(int)tmp.size();++i3417) {
            if( tmp[i3417] != FAIL ) {
              prioritized_choice_final_prev3409.push_back(tmp[i3417]);
            }
          }
        }
        prev = next_prev3408;
        if(!prev.empty()) {
          if(!(!prioritized_choice_final_prev3409.empty() && prioritized_choice_final_prev3409.front() == FAIL )) {
            prioritized_choice_final_prev3409.push_front(FAIL);
          }
        }
        prev = prioritized_choice_final_prev3409;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        if(!((int)prev.size()==1&&prev.front()==FAIL)) {
          tmp.clear();
          for(int i3418=0;i3418<(int)prev.size();++i3418) {
            if( prev[i3418] == FAIL ) {
              if(!(!tmp.empty()&&tmp.front()==FAIL)) {
                tmp.push_front(FAIL);
              }
              continue;
            }
            if(prev[i3418]<m&&I[prev[i3418]]==')') {
              tmp.push_back(prev[i3418]+1);
            } else {
              if(!( !tmp.empty() && tmp[0] == FAIL )){
                tmp.push_front(FAIL);
              }
            }
          }
          prev = tmp;
          sort(prev.begin(),prev.end());
          prev.erase(unique(prev.begin(),prev.end()),prev.end());
        }
        if(!((int)prev.size()==1&&prev.front()==FAIL)) {
          /* Nonterminal (_) */
          deque<int> next_prev3420;
          for(int i3419=0;i3419<(int)prev.size();++i3419) {
            if( prev[i3419] == FAIL ) {
              if(!(!next_prev3420.empty() && next_prev3420.front() == FAIL )) {
                next_prev3420.push_front(FAIL);
              }
              continue;
            }
            i = prev[i3419];
            tmp = parse__();
            
            for(int i3419=0;i3419<(int)tmp.size();++i3419) {
              if( tmp[i3419] == FAIL ) {
                if(!( !next_prev3420.empty() && next_prev3420[0] == FAIL )) {
                  next_prev3420.push_front(FAIL);
                }
              } else {
                next_prev3420.push_back(tmp[i3419]);
              }
            }
          }
          prev = next_prev3420;
          sort(prev.begin(),prev.end());
          prev.erase(unique(prev.begin(),prev.end()),prev.end());
        }
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3421=0;i3421<(int)prev.size();++i3421) {
        if( prev[i3421] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3421]<m&&I[prev[i3421]]==';') {
          tmp.push_back(prev[i3421]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3423;
      for(int i3422=0;i3422<(int)prev.size();++i3422) {
        if( prev[i3422] == FAIL ) {
          if(!(!next_prev3423.empty() && next_prev3423.front() == FAIL )) {
            next_prev3423.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3422];
        tmp = parse__();
        
        for(int i3422=0;i3422<(int)tmp.size();++i3422) {
          if( tmp[i3422] == FAIL ) {
            if(!( !next_prev3423.empty() && next_prev3423[0] == FAIL )) {
              next_prev3423.push_front(FAIL);
            }
          } else {
            next_prev3423.push_back(tmp[i3422]);
          }
        }
      }
      prev = next_prev3423;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3390=0;i3390<(int)prev.size();++i3390) {
    if( prev[i3390] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3390]);
    }
  }
  return memo[key(471,backtracking_ptr_for_packrat471)] = result;
}

inline deque<int> parse_slash3394() { 
  if(memo.count(key(472,i))) {
    return memo[key(472,i)];
  }
  int backtracking_ptr_for_packrat472=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (TypeArguments) */
    deque<int> next_prev3397;
    for(int i3396=0;i3396<(int)prev.size();++i3396) {
      if( prev[i3396] == FAIL ) {
        if(!(!next_prev3397.empty() && next_prev3397.front() == FAIL )) {
          next_prev3397.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3396];
      tmp = parse_TypeArguments();
      
      for(int i3396=0;i3396<(int)tmp.size();++i3396) {
        if( tmp[i3396] == FAIL ) {
          if(!( !next_prev3397.empty() && next_prev3397[0] == FAIL )) {
            next_prev3397.push_front(FAIL);
          }
        } else {
          next_prev3397.push_back(tmp[i3396]);
        }
      }
    }
    prev = next_prev3397;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3395=0;i3395<(int)prev.size();++i3395) {
    if( prev[i3395] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3395]);
    }
  }
  return memo[key(472,backtracking_ptr_for_packrat472)] = result;
}

inline deque<int> parse_slash3399() { 
  if(memo.count(key(473,i))) {
    return memo[key(473,i)];
  }
  int backtracking_ptr_for_packrat473=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i3400=0;i3400<(int)prev.size();++i3400) {
    if( prev[i3400] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3400]);
    }
  }
  return memo[key(473,backtracking_ptr_for_packrat473)] = result;
}

inline deque<int> parse_slash3410() { 
  if(memo.count(key(474,i))) {
    return memo[key(474,i)];
  }
  int backtracking_ptr_for_packrat474=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (addArgumentExpressionList) */
  deque<int> next_prev3413;
  for(int i3412=0;i3412<(int)prev.size();++i3412) {
    if( prev[i3412] == FAIL ) {
      if(!(!next_prev3413.empty() && next_prev3413.front() == FAIL )) {
        next_prev3413.push_front(FAIL);
      }
      continue;
    }
    i = prev[i3412];
    tmp = parse_addArgumentExpressionList();
    
    for(int i3412=0;i3412<(int)tmp.size();++i3412) {
      if( tmp[i3412] == FAIL ) {
        if(!( !next_prev3413.empty() && next_prev3413[0] == FAIL )) {
          next_prev3413.push_front(FAIL);
        }
      } else {
        next_prev3413.push_back(tmp[i3412]);
      }
    }
  }
  prev = next_prev3413;
  for(int i3411=0;i3411<(int)prev.size();++i3411) {
    if( prev[i3411] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3411]);
    }
  }
  return memo[key(474,backtracking_ptr_for_packrat474)] = result;
}

inline deque<int> parse_slash3415() { 
  if(memo.count(key(475,i))) {
    return memo[key(475,i)];
  }
  int backtracking_ptr_for_packrat475=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i3416=0;i3416<(int)prev.size();++i3416) {
    if( prev[i3416] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3416]);
    }
  }
  return memo[key(475,backtracking_ptr_for_packrat475)] = result;
}

inline deque<int> parse_slash3425() { 
  if(memo.count(key(476,i))) {
    return memo[key(476,i)];
  }
  int backtracking_ptr_for_packrat476=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Prioritized Choice */
      deque<int> next_prev3428;
      deque<int> prioritized_choice_final_prev3429;
      next_prev3428.clear();
      for(int i3427=0;i3427<(int)prev.size();++i3427) {
        i = prev[i3427];
        tmp = parse_slash3430();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3428.push_back(prev[i3427]); }
        for(int i3434=0;i3434<(int)tmp.size();++i3434) {
          if( tmp[i3434] != FAIL ) {
            prioritized_choice_final_prev3429.push_back(tmp[i3434]);
          }
        }
      }
      prev = next_prev3428;
      next_prev3428.clear();
      for(int i3427=0;i3427<(int)prev.size();++i3427) {
        i = prev[i3427];
        tmp = parse_slash3435();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3428.push_back(prev[i3427]); }
        for(int i3437=0;i3437<(int)tmp.size();++i3437) {
          if( tmp[i3437] != FAIL ) {
            prioritized_choice_final_prev3429.push_back(tmp[i3437]);
          }
        }
      }
      prev = next_prev3428;
      if(!prev.empty()) {
        if(!(!prioritized_choice_final_prev3429.empty() && prioritized_choice_final_prev3429.front() == FAIL )) {
          prioritized_choice_final_prev3429.push_front(FAIL);
        }
      }
      prev = prioritized_choice_final_prev3429;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Nonterminal (Super) */
        deque<int> next_prev3439;
        for(int i3438=0;i3438<(int)prev.size();++i3438) {
          if( prev[i3438] == FAIL ) {
            if(!(!next_prev3439.empty() && next_prev3439.front() == FAIL )) {
              next_prev3439.push_front(FAIL);
            }
            continue;
          }
          i = prev[i3438];
          tmp = parse_Super();
          
          for(int i3438=0;i3438<(int)tmp.size();++i3438) {
            if( tmp[i3438] == FAIL ) {
              if(!( !next_prev3439.empty() && next_prev3439[0] == FAIL )) {
                next_prev3439.push_front(FAIL);
              }
            } else {
              next_prev3439.push_back(tmp[i3438]);
            }
          }
        }
        prev = next_prev3439;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        if(!((int)prev.size()==1&&prev.front()==FAIL)) {
          tmp.clear();
          for(int i3440=0;i3440<(int)prev.size();++i3440) {
            if( prev[i3440] == FAIL ) {
              if(!(!tmp.empty()&&tmp.front()==FAIL)) {
                tmp.push_front(FAIL);
              }
              continue;
            }
            if(prev[i3440]<m&&I[prev[i3440]]=='(') {
              tmp.push_back(prev[i3440]+1);
            } else {
              if(!( !tmp.empty() && tmp[0] == FAIL )){
                tmp.push_front(FAIL);
              }
            }
          }
          prev = tmp;
          sort(prev.begin(),prev.end());
          prev.erase(unique(prev.begin(),prev.end()),prev.end());
        }
        if(!((int)prev.size()==1&&prev.front()==FAIL)) {
          /* Nonterminal (_) */
          deque<int> next_prev3442;
          for(int i3441=0;i3441<(int)prev.size();++i3441) {
            if( prev[i3441] == FAIL ) {
              if(!(!next_prev3442.empty() && next_prev3442.front() == FAIL )) {
                next_prev3442.push_front(FAIL);
              }
              continue;
            }
            i = prev[i3441];
            tmp = parse__();
            
            for(int i3441=0;i3441<(int)tmp.size();++i3441) {
              if( tmp[i3441] == FAIL ) {
                if(!( !next_prev3442.empty() && next_prev3442[0] == FAIL )) {
                  next_prev3442.push_front(FAIL);
                }
              } else {
                next_prev3442.push_back(tmp[i3441]);
              }
            }
          }
          prev = next_prev3442;
          sort(prev.begin(),prev.end());
          prev.erase(unique(prev.begin(),prev.end()),prev.end());
        }
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Prioritized Choice */
        deque<int> next_prev3444;
        deque<int> prioritized_choice_final_prev3445;
        next_prev3444.clear();
        for(int i3443=0;i3443<(int)prev.size();++i3443) {
          i = prev[i3443];
          tmp = parse_slash3446();
          if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3444.push_back(prev[i3443]); }
          for(int i3450=0;i3450<(int)tmp.size();++i3450) {
            if( tmp[i3450] != FAIL ) {
              prioritized_choice_final_prev3445.push_back(tmp[i3450]);
            }
          }
        }
        prev = next_prev3444;
        next_prev3444.clear();
        for(int i3443=0;i3443<(int)prev.size();++i3443) {
          i = prev[i3443];
          tmp = parse_slash3451();
          if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3444.push_back(prev[i3443]); }
          for(int i3453=0;i3453<(int)tmp.size();++i3453) {
            if( tmp[i3453] != FAIL ) {
              prioritized_choice_final_prev3445.push_back(tmp[i3453]);
            }
          }
        }
        prev = next_prev3444;
        if(!prev.empty()) {
          if(!(!prioritized_choice_final_prev3445.empty() && prioritized_choice_final_prev3445.front() == FAIL )) {
            prioritized_choice_final_prev3445.push_front(FAIL);
          }
        }
        prev = prioritized_choice_final_prev3445;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        if(!((int)prev.size()==1&&prev.front()==FAIL)) {
          tmp.clear();
          for(int i3454=0;i3454<(int)prev.size();++i3454) {
            if( prev[i3454] == FAIL ) {
              if(!(!tmp.empty()&&tmp.front()==FAIL)) {
                tmp.push_front(FAIL);
              }
              continue;
            }
            if(prev[i3454]<m&&I[prev[i3454]]==')') {
              tmp.push_back(prev[i3454]+1);
            } else {
              if(!( !tmp.empty() && tmp[0] == FAIL )){
                tmp.push_front(FAIL);
              }
            }
          }
          prev = tmp;
          sort(prev.begin(),prev.end());
          prev.erase(unique(prev.begin(),prev.end()),prev.end());
        }
        if(!((int)prev.size()==1&&prev.front()==FAIL)) {
          /* Nonterminal (_) */
          deque<int> next_prev3456;
          for(int i3455=0;i3455<(int)prev.size();++i3455) {
            if( prev[i3455] == FAIL ) {
              if(!(!next_prev3456.empty() && next_prev3456.front() == FAIL )) {
                next_prev3456.push_front(FAIL);
              }
              continue;
            }
            i = prev[i3455];
            tmp = parse__();
            
            for(int i3455=0;i3455<(int)tmp.size();++i3455) {
              if( tmp[i3455] == FAIL ) {
                if(!( !next_prev3456.empty() && next_prev3456[0] == FAIL )) {
                  next_prev3456.push_front(FAIL);
                }
              } else {
                next_prev3456.push_back(tmp[i3455]);
              }
            }
          }
          prev = next_prev3456;
          sort(prev.begin(),prev.end());
          prev.erase(unique(prev.begin(),prev.end()),prev.end());
        }
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3457=0;i3457<(int)prev.size();++i3457) {
        if( prev[i3457] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3457]<m&&I[prev[i3457]]==';') {
          tmp.push_back(prev[i3457]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3459;
      for(int i3458=0;i3458<(int)prev.size();++i3458) {
        if( prev[i3458] == FAIL ) {
          if(!(!next_prev3459.empty() && next_prev3459.front() == FAIL )) {
            next_prev3459.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3458];
        tmp = parse__();
        
        for(int i3458=0;i3458<(int)tmp.size();++i3458) {
          if( tmp[i3458] == FAIL ) {
            if(!( !next_prev3459.empty() && next_prev3459[0] == FAIL )) {
              next_prev3459.push_front(FAIL);
            }
          } else {
            next_prev3459.push_back(tmp[i3458]);
          }
        }
      }
      prev = next_prev3459;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3426=0;i3426<(int)prev.size();++i3426) {
    if( prev[i3426] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3426]);
    }
  }
  return memo[key(476,backtracking_ptr_for_packrat476)] = result;
}

inline deque<int> parse_slash3430() { 
  if(memo.count(key(477,i))) {
    return memo[key(477,i)];
  }
  int backtracking_ptr_for_packrat477=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (TypeArguments) */
    deque<int> next_prev3433;
    for(int i3432=0;i3432<(int)prev.size();++i3432) {
      if( prev[i3432] == FAIL ) {
        if(!(!next_prev3433.empty() && next_prev3433.front() == FAIL )) {
          next_prev3433.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3432];
      tmp = parse_TypeArguments();
      
      for(int i3432=0;i3432<(int)tmp.size();++i3432) {
        if( tmp[i3432] == FAIL ) {
          if(!( !next_prev3433.empty() && next_prev3433[0] == FAIL )) {
            next_prev3433.push_front(FAIL);
          }
        } else {
          next_prev3433.push_back(tmp[i3432]);
        }
      }
    }
    prev = next_prev3433;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3431=0;i3431<(int)prev.size();++i3431) {
    if( prev[i3431] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3431]);
    }
  }
  return memo[key(477,backtracking_ptr_for_packrat477)] = result;
}

inline deque<int> parse_slash3435() { 
  if(memo.count(key(478,i))) {
    return memo[key(478,i)];
  }
  int backtracking_ptr_for_packrat478=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i3436=0;i3436<(int)prev.size();++i3436) {
    if( prev[i3436] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3436]);
    }
  }
  return memo[key(478,backtracking_ptr_for_packrat478)] = result;
}

inline deque<int> parse_slash3446() { 
  if(memo.count(key(479,i))) {
    return memo[key(479,i)];
  }
  int backtracking_ptr_for_packrat479=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (addArgumentExpressionList) */
  deque<int> next_prev3449;
  for(int i3448=0;i3448<(int)prev.size();++i3448) {
    if( prev[i3448] == FAIL ) {
      if(!(!next_prev3449.empty() && next_prev3449.front() == FAIL )) {
        next_prev3449.push_front(FAIL);
      }
      continue;
    }
    i = prev[i3448];
    tmp = parse_addArgumentExpressionList();
    
    for(int i3448=0;i3448<(int)tmp.size();++i3448) {
      if( tmp[i3448] == FAIL ) {
        if(!( !next_prev3449.empty() && next_prev3449[0] == FAIL )) {
          next_prev3449.push_front(FAIL);
        }
      } else {
        next_prev3449.push_back(tmp[i3448]);
      }
    }
  }
  prev = next_prev3449;
  for(int i3447=0;i3447<(int)prev.size();++i3447) {
    if( prev[i3447] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3447]);
    }
  }
  return memo[key(479,backtracking_ptr_for_packrat479)] = result;
}

inline deque<int> parse_slash3451() { 
  if(memo.count(key(480,i))) {
    return memo[key(480,i)];
  }
  int backtracking_ptr_for_packrat480=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i3452=0;i3452<(int)prev.size();++i3452) {
    if( prev[i3452] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3452]);
    }
  }
  return memo[key(480,backtracking_ptr_for_packrat480)] = result;
}

inline deque<int> parse_slash3461() { 
  if(memo.count(key(481,i))) {
    return memo[key(481,i)];
  }
  int backtracking_ptr_for_packrat481=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (PostfixExpression) */
      deque<int> next_prev3464;
      for(int i3463=0;i3463<(int)prev.size();++i3463) {
        if( prev[i3463] == FAIL ) {
          if(!(!next_prev3464.empty() && next_prev3464.front() == FAIL )) {
            next_prev3464.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3463];
        tmp = parse_PostfixExpression();
        
        for(int i3463=0;i3463<(int)tmp.size();++i3463) {
          if( tmp[i3463] == FAIL ) {
            if(!( !next_prev3464.empty() && next_prev3464[0] == FAIL )) {
              next_prev3464.push_front(FAIL);
            }
          } else {
            next_prev3464.push_back(tmp[i3463]);
          }
        }
      }
      prev = next_prev3464;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        tmp.clear();
        for(int i3465=0;i3465<(int)prev.size();++i3465) {
          if( prev[i3465] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i3465]<m&&I[prev[i3465]]=='.') {
            tmp.push_back(prev[i3465]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Not */
        deque<int> next_prev3470;
        for(int i3469=0;i3469<(int)prev.size();++i3469) {
          i = prev[i3469];
          tmp = parse_not3466();
          if(!tmp.empty()&&tmp.front()==FAIL) {
            next_prev3470.push_back(prev[i3469]);
          } else {
            if(!(!next_prev3470.empty()&&next_prev3470.front()==FAIL)) {
              next_prev3470.push_front(FAIL);
            }
          }
        }
        prev = next_prev3470;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Nonterminal (_) */
        deque<int> next_prev3472;
        for(int i3471=0;i3471<(int)prev.size();++i3471) {
          if( prev[i3471] == FAIL ) {
            if(!(!next_prev3472.empty() && next_prev3472.front() == FAIL )) {
              next_prev3472.push_front(FAIL);
            }
            continue;
          }
          i = prev[i3471];
          tmp = parse__();
          
          for(int i3471=0;i3471<(int)tmp.size();++i3471) {
            if( tmp[i3471] == FAIL ) {
              if(!( !next_prev3472.empty() && next_prev3472[0] == FAIL )) {
                next_prev3472.push_front(FAIL);
              }
            } else {
              next_prev3472.push_back(tmp[i3471]);
            }
          }
        }
        prev = next_prev3472;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Prioritized Choice */
      deque<int> next_prev3474;
      deque<int> prioritized_choice_final_prev3475;
      next_prev3474.clear();
      for(int i3473=0;i3473<(int)prev.size();++i3473) {
        i = prev[i3473];
        tmp = parse_slash3476();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3474.push_back(prev[i3473]); }
        for(int i3480=0;i3480<(int)tmp.size();++i3480) {
          if( tmp[i3480] != FAIL ) {
            prioritized_choice_final_prev3475.push_back(tmp[i3480]);
          }
        }
      }
      prev = next_prev3474;
      next_prev3474.clear();
      for(int i3473=0;i3473<(int)prev.size();++i3473) {
        i = prev[i3473];
        tmp = parse_slash3481();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3474.push_back(prev[i3473]); }
        for(int i3483=0;i3483<(int)tmp.size();++i3483) {
          if( tmp[i3483] != FAIL ) {
            prioritized_choice_final_prev3475.push_back(tmp[i3483]);
          }
        }
      }
      prev = next_prev3474;
      if(!prev.empty()) {
        if(!(!prioritized_choice_final_prev3475.empty() && prioritized_choice_final_prev3475.front() == FAIL )) {
          prioritized_choice_final_prev3475.push_front(FAIL);
        }
      }
      prev = prioritized_choice_final_prev3475;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (Super) */
      deque<int> next_prev3485;
      for(int i3484=0;i3484<(int)prev.size();++i3484) {
        if( prev[i3484] == FAIL ) {
          if(!(!next_prev3485.empty() && next_prev3485.front() == FAIL )) {
            next_prev3485.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3484];
        tmp = parse_Super();
        
        for(int i3484=0;i3484<(int)tmp.size();++i3484) {
          if( tmp[i3484] == FAIL ) {
            if(!( !next_prev3485.empty() && next_prev3485[0] == FAIL )) {
              next_prev3485.push_front(FAIL);
            }
          } else {
            next_prev3485.push_back(tmp[i3484]);
          }
        }
      }
      prev = next_prev3485;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        if(!((int)prev.size()==1&&prev.front()==FAIL)) {
          tmp.clear();
          for(int i3486=0;i3486<(int)prev.size();++i3486) {
            if( prev[i3486] == FAIL ) {
              if(!(!tmp.empty()&&tmp.front()==FAIL)) {
                tmp.push_front(FAIL);
              }
              continue;
            }
            if(prev[i3486]<m&&I[prev[i3486]]=='(') {
              tmp.push_back(prev[i3486]+1);
            } else {
              if(!( !tmp.empty() && tmp[0] == FAIL )){
                tmp.push_front(FAIL);
              }
            }
          }
          prev = tmp;
          sort(prev.begin(),prev.end());
          prev.erase(unique(prev.begin(),prev.end()),prev.end());
        }
        if(!((int)prev.size()==1&&prev.front()==FAIL)) {
          /* Nonterminal (_) */
          deque<int> next_prev3488;
          for(int i3487=0;i3487<(int)prev.size();++i3487) {
            if( prev[i3487] == FAIL ) {
              if(!(!next_prev3488.empty() && next_prev3488.front() == FAIL )) {
                next_prev3488.push_front(FAIL);
              }
              continue;
            }
            i = prev[i3487];
            tmp = parse__();
            
            for(int i3487=0;i3487<(int)tmp.size();++i3487) {
              if( tmp[i3487] == FAIL ) {
                if(!( !next_prev3488.empty() && next_prev3488[0] == FAIL )) {
                  next_prev3488.push_front(FAIL);
                }
              } else {
                next_prev3488.push_back(tmp[i3487]);
              }
            }
          }
          prev = next_prev3488;
          sort(prev.begin(),prev.end());
          prev.erase(unique(prev.begin(),prev.end()),prev.end());
        }
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Prioritized Choice */
        deque<int> next_prev3490;
        deque<int> prioritized_choice_final_prev3491;
        next_prev3490.clear();
        for(int i3489=0;i3489<(int)prev.size();++i3489) {
          i = prev[i3489];
          tmp = parse_slash3492();
          if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3490.push_back(prev[i3489]); }
          for(int i3496=0;i3496<(int)tmp.size();++i3496) {
            if( tmp[i3496] != FAIL ) {
              prioritized_choice_final_prev3491.push_back(tmp[i3496]);
            }
          }
        }
        prev = next_prev3490;
        next_prev3490.clear();
        for(int i3489=0;i3489<(int)prev.size();++i3489) {
          i = prev[i3489];
          tmp = parse_slash3497();
          if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3490.push_back(prev[i3489]); }
          for(int i3499=0;i3499<(int)tmp.size();++i3499) {
            if( tmp[i3499] != FAIL ) {
              prioritized_choice_final_prev3491.push_back(tmp[i3499]);
            }
          }
        }
        prev = next_prev3490;
        if(!prev.empty()) {
          if(!(!prioritized_choice_final_prev3491.empty() && prioritized_choice_final_prev3491.front() == FAIL )) {
            prioritized_choice_final_prev3491.push_front(FAIL);
          }
        }
        prev = prioritized_choice_final_prev3491;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        if(!((int)prev.size()==1&&prev.front()==FAIL)) {
          tmp.clear();
          for(int i3500=0;i3500<(int)prev.size();++i3500) {
            if( prev[i3500] == FAIL ) {
              if(!(!tmp.empty()&&tmp.front()==FAIL)) {
                tmp.push_front(FAIL);
              }
              continue;
            }
            if(prev[i3500]<m&&I[prev[i3500]]==')') {
              tmp.push_back(prev[i3500]+1);
            } else {
              if(!( !tmp.empty() && tmp[0] == FAIL )){
                tmp.push_front(FAIL);
              }
            }
          }
          prev = tmp;
          sort(prev.begin(),prev.end());
          prev.erase(unique(prev.begin(),prev.end()),prev.end());
        }
        if(!((int)prev.size()==1&&prev.front()==FAIL)) {
          /* Nonterminal (_) */
          deque<int> next_prev3502;
          for(int i3501=0;i3501<(int)prev.size();++i3501) {
            if( prev[i3501] == FAIL ) {
              if(!(!next_prev3502.empty() && next_prev3502.front() == FAIL )) {
                next_prev3502.push_front(FAIL);
              }
              continue;
            }
            i = prev[i3501];
            tmp = parse__();
            
            for(int i3501=0;i3501<(int)tmp.size();++i3501) {
              if( tmp[i3501] == FAIL ) {
                if(!( !next_prev3502.empty() && next_prev3502[0] == FAIL )) {
                  next_prev3502.push_front(FAIL);
                }
              } else {
                next_prev3502.push_back(tmp[i3501]);
              }
            }
          }
          prev = next_prev3502;
          sort(prev.begin(),prev.end());
          prev.erase(unique(prev.begin(),prev.end()),prev.end());
        }
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3503=0;i3503<(int)prev.size();++i3503) {
        if( prev[i3503] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3503]<m&&I[prev[i3503]]==';') {
          tmp.push_back(prev[i3503]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3505;
      for(int i3504=0;i3504<(int)prev.size();++i3504) {
        if( prev[i3504] == FAIL ) {
          if(!(!next_prev3505.empty() && next_prev3505.front() == FAIL )) {
            next_prev3505.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3504];
        tmp = parse__();
        
        for(int i3504=0;i3504<(int)tmp.size();++i3504) {
          if( tmp[i3504] == FAIL ) {
            if(!( !next_prev3505.empty() && next_prev3505[0] == FAIL )) {
              next_prev3505.push_front(FAIL);
            }
          } else {
            next_prev3505.push_back(tmp[i3504]);
          }
        }
      }
      prev = next_prev3505;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3462=0;i3462<(int)prev.size();++i3462) {
    if( prev[i3462] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3462]);
    }
  }
  return memo[key(481,backtracking_ptr_for_packrat481)] = result;
}

inline deque<int> parse_not3466() { 
  if(memo.count(key(482,i))) {
    return memo[key(482,i)];
  }
  int backtracking_ptr_for_packrat482=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i3468=0;i3468<(int)prev.size();++i3468) {
    if( prev[i3468] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i3468]<m&&I[prev[i3468]]=='.') {
      tmp.push_back(prev[i3468]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i3467=0;i3467<(int)prev.size();++i3467) {
    if( prev[i3467] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3467]);
    }
  }
  return memo[key(482,backtracking_ptr_for_packrat482)] = result;
}

inline deque<int> parse_slash3476() { 
  if(memo.count(key(483,i))) {
    return memo[key(483,i)];
  }
  int backtracking_ptr_for_packrat483=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (TypeArguments) */
    deque<int> next_prev3479;
    for(int i3478=0;i3478<(int)prev.size();++i3478) {
      if( prev[i3478] == FAIL ) {
        if(!(!next_prev3479.empty() && next_prev3479.front() == FAIL )) {
          next_prev3479.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3478];
      tmp = parse_TypeArguments();
      
      for(int i3478=0;i3478<(int)tmp.size();++i3478) {
        if( tmp[i3478] == FAIL ) {
          if(!( !next_prev3479.empty() && next_prev3479[0] == FAIL )) {
            next_prev3479.push_front(FAIL);
          }
        } else {
          next_prev3479.push_back(tmp[i3478]);
        }
      }
    }
    prev = next_prev3479;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3477=0;i3477<(int)prev.size();++i3477) {
    if( prev[i3477] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3477]);
    }
  }
  return memo[key(483,backtracking_ptr_for_packrat483)] = result;
}

inline deque<int> parse_slash3481() { 
  if(memo.count(key(484,i))) {
    return memo[key(484,i)];
  }
  int backtracking_ptr_for_packrat484=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i3482=0;i3482<(int)prev.size();++i3482) {
    if( prev[i3482] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3482]);
    }
  }
  return memo[key(484,backtracking_ptr_for_packrat484)] = result;
}

inline deque<int> parse_slash3492() { 
  if(memo.count(key(485,i))) {
    return memo[key(485,i)];
  }
  int backtracking_ptr_for_packrat485=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (addArgumentExpressionList) */
  deque<int> next_prev3495;
  for(int i3494=0;i3494<(int)prev.size();++i3494) {
    if( prev[i3494] == FAIL ) {
      if(!(!next_prev3495.empty() && next_prev3495.front() == FAIL )) {
        next_prev3495.push_front(FAIL);
      }
      continue;
    }
    i = prev[i3494];
    tmp = parse_addArgumentExpressionList();
    
    for(int i3494=0;i3494<(int)tmp.size();++i3494) {
      if( tmp[i3494] == FAIL ) {
        if(!( !next_prev3495.empty() && next_prev3495[0] == FAIL )) {
          next_prev3495.push_front(FAIL);
        }
      } else {
        next_prev3495.push_back(tmp[i3494]);
      }
    }
  }
  prev = next_prev3495;
  for(int i3493=0;i3493<(int)prev.size();++i3493) {
    if( prev[i3493] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3493]);
    }
  }
  return memo[key(485,backtracking_ptr_for_packrat485)] = result;
}

inline deque<int> parse_slash3497() { 
  if(memo.count(key(486,i))) {
    return memo[key(486,i)];
  }
  int backtracking_ptr_for_packrat486=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i3498=0;i3498<(int)prev.size();++i3498) {
    if( prev[i3498] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3498]);
    }
  }
  return memo[key(486,backtracking_ptr_for_packrat486)] = result;
}

deque<int> parse_Type(){
  if(memo.count(key(487,i))) {
    return memo[key(487,i)];
  }
  int backtracking_ptr_for_packrat487=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev3509;
  deque<int> prioritized_choice_final_prev3510;
  next_prev3509.clear();
  for(int i3508=0;i3508<(int)prev.size();++i3508) {
    i = prev[i3508];
    tmp = parse_slash3511();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3509.push_back(prev[i3508]); }
    for(int i3515=0;i3515<(int)tmp.size();++i3515) {
      if( tmp[i3515] != FAIL ) {
        prioritized_choice_final_prev3510.push_back(tmp[i3515]);
      }
    }
  }
  prev = next_prev3509;
  next_prev3509.clear();
  for(int i3508=0;i3508<(int)prev.size();++i3508) {
    i = prev[i3508];
    tmp = parse_slash3516();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3509.push_back(prev[i3508]); }
    for(int i3520=0;i3520<(int)tmp.size();++i3520) {
      if( tmp[i3520] != FAIL ) {
        prioritized_choice_final_prev3510.push_back(tmp[i3520]);
      }
    }
  }
  prev = next_prev3509;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev3510.empty() && prioritized_choice_final_prev3510.front() == FAIL )) {
      prioritized_choice_final_prev3510.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev3510;
  for(int i3507=0;i3507<(int)prev.size();++i3507) {
    if( prev[i3507] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3507]);
    }
  }
  return memo[key(487,backtracking_ptr_for_packrat487)] = result;
}

inline deque<int> parse_slash3511() { 
  if(memo.count(key(488,i))) {
    return memo[key(488,i)];
  }
  int backtracking_ptr_for_packrat488=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ReferenceType) */
    deque<int> next_prev3514;
    for(int i3513=0;i3513<(int)prev.size();++i3513) {
      if( prev[i3513] == FAIL ) {
        if(!(!next_prev3514.empty() && next_prev3514.front() == FAIL )) {
          next_prev3514.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3513];
      tmp = parse_ReferenceType();
      
      for(int i3513=0;i3513<(int)tmp.size();++i3513) {
        if( tmp[i3513] == FAIL ) {
          if(!( !next_prev3514.empty() && next_prev3514[0] == FAIL )) {
            next_prev3514.push_front(FAIL);
          }
        } else {
          next_prev3514.push_back(tmp[i3513]);
        }
      }
    }
    prev = next_prev3514;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3512=0;i3512<(int)prev.size();++i3512) {
    if( prev[i3512] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3512]);
    }
  }
  return memo[key(488,backtracking_ptr_for_packrat488)] = result;
}

inline deque<int> parse_slash3516() { 
  if(memo.count(key(489,i))) {
    return memo[key(489,i)];
  }
  int backtracking_ptr_for_packrat489=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (PrimitiveType) */
    deque<int> next_prev3519;
    for(int i3518=0;i3518<(int)prev.size();++i3518) {
      if( prev[i3518] == FAIL ) {
        if(!(!next_prev3519.empty() && next_prev3519.front() == FAIL )) {
          next_prev3519.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3518];
      tmp = parse_PrimitiveType();
      
      for(int i3518=0;i3518<(int)tmp.size();++i3518) {
        if( tmp[i3518] == FAIL ) {
          if(!( !next_prev3519.empty() && next_prev3519[0] == FAIL )) {
            next_prev3519.push_front(FAIL);
          }
        } else {
          next_prev3519.push_back(tmp[i3518]);
        }
      }
    }
    prev = next_prev3519;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3517=0;i3517<(int)prev.size();++i3517) {
    if( prev[i3517] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3517]);
    }
  }
  return memo[key(489,backtracking_ptr_for_packrat489)] = result;
}

deque<int> parse_PrimitiveType(){
  if(memo.count(key(490,i))) {
    return memo[key(490,i)];
  }
  int backtracking_ptr_for_packrat490=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev3523;
  deque<int> prioritized_choice_final_prev3524;
  next_prev3523.clear();
  for(int i3522=0;i3522<(int)prev.size();++i3522) {
    i = prev[i3522];
    tmp = parse_slash3525();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3523.push_back(prev[i3522]); }
    for(int i3531=0;i3531<(int)tmp.size();++i3531) {
      if( tmp[i3531] != FAIL ) {
        prioritized_choice_final_prev3524.push_back(tmp[i3531]);
      }
    }
  }
  prev = next_prev3523;
  next_prev3523.clear();
  for(int i3522=0;i3522<(int)prev.size();++i3522) {
    i = prev[i3522];
    tmp = parse_slash3532();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3523.push_back(prev[i3522]); }
    for(int i3536=0;i3536<(int)tmp.size();++i3536) {
      if( tmp[i3536] != FAIL ) {
        prioritized_choice_final_prev3524.push_back(tmp[i3536]);
      }
    }
  }
  prev = next_prev3523;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev3524.empty() && prioritized_choice_final_prev3524.front() == FAIL )) {
      prioritized_choice_final_prev3524.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev3524;
  for(int i3521=0;i3521<(int)prev.size();++i3521) {
    if( prev[i3521] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3521]);
    }
  }
  return memo[key(490,backtracking_ptr_for_packrat490)] = result;
}

inline deque<int> parse_slash3525() { 
  if(memo.count(key(491,i))) {
    return memo[key(491,i)];
  }
  int backtracking_ptr_for_packrat491=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotations) */
    deque<int> next_prev3528;
    for(int i3527=0;i3527<(int)prev.size();++i3527) {
      if( prev[i3527] == FAIL ) {
        if(!(!next_prev3528.empty() && next_prev3528.front() == FAIL )) {
          next_prev3528.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3527];
      tmp = parse_Annotations();
      
      for(int i3527=0;i3527<(int)tmp.size();++i3527) {
        if( tmp[i3527] == FAIL ) {
          if(!( !next_prev3528.empty() && next_prev3528[0] == FAIL )) {
            next_prev3528.push_front(FAIL);
          }
        } else {
          next_prev3528.push_back(tmp[i3527]);
        }
      }
    }
    prev = next_prev3528;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (UnannoPrimitiveType) */
    deque<int> next_prev3530;
    for(int i3529=0;i3529<(int)prev.size();++i3529) {
      if( prev[i3529] == FAIL ) {
        if(!(!next_prev3530.empty() && next_prev3530.front() == FAIL )) {
          next_prev3530.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3529];
      tmp = parse_UnannoPrimitiveType();
      
      for(int i3529=0;i3529<(int)tmp.size();++i3529) {
        if( tmp[i3529] == FAIL ) {
          if(!( !next_prev3530.empty() && next_prev3530[0] == FAIL )) {
            next_prev3530.push_front(FAIL);
          }
        } else {
          next_prev3530.push_back(tmp[i3529]);
        }
      }
    }
    prev = next_prev3530;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3526=0;i3526<(int)prev.size();++i3526) {
    if( prev[i3526] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3526]);
    }
  }
  return memo[key(491,backtracking_ptr_for_packrat491)] = result;
}

inline deque<int> parse_slash3532() { 
  if(memo.count(key(492,i))) {
    return memo[key(492,i)];
  }
  int backtracking_ptr_for_packrat492=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (UnannoPrimitiveType) */
    deque<int> next_prev3535;
    for(int i3534=0;i3534<(int)prev.size();++i3534) {
      if( prev[i3534] == FAIL ) {
        if(!(!next_prev3535.empty() && next_prev3535.front() == FAIL )) {
          next_prev3535.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3534];
      tmp = parse_UnannoPrimitiveType();
      
      for(int i3534=0;i3534<(int)tmp.size();++i3534) {
        if( tmp[i3534] == FAIL ) {
          if(!( !next_prev3535.empty() && next_prev3535[0] == FAIL )) {
            next_prev3535.push_front(FAIL);
          }
        } else {
          next_prev3535.push_back(tmp[i3534]);
        }
      }
    }
    prev = next_prev3535;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3533=0;i3533<(int)prev.size();++i3533) {
    if( prev[i3533] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3533]);
    }
  }
  return memo[key(492,backtracking_ptr_for_packrat492)] = result;
}

deque<int> parse_UnannoPrimitiveType(){
  if(memo.count(key(493,i))) {
    return memo[key(493,i)];
  }
  int backtracking_ptr_for_packrat493=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev3539;
  deque<int> prioritized_choice_final_prev3540;
  next_prev3539.clear();
  for(int i3538=0;i3538<(int)prev.size();++i3538) {
    i = prev[i3538];
    tmp = parse_slash3541();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3539.push_back(prev[i3538]); }
    for(int i3545=0;i3545<(int)tmp.size();++i3545) {
      if( tmp[i3545] != FAIL ) {
        prioritized_choice_final_prev3540.push_back(tmp[i3545]);
      }
    }
  }
  prev = next_prev3539;
  next_prev3539.clear();
  for(int i3538=0;i3538<(int)prev.size();++i3538) {
    i = prev[i3538];
    tmp = parse_slash3546();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3539.push_back(prev[i3538]); }
    for(int i3550=0;i3550<(int)tmp.size();++i3550) {
      if( tmp[i3550] != FAIL ) {
        prioritized_choice_final_prev3540.push_back(tmp[i3550]);
      }
    }
  }
  prev = next_prev3539;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev3540.empty() && prioritized_choice_final_prev3540.front() == FAIL )) {
      prioritized_choice_final_prev3540.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev3540;
  for(int i3537=0;i3537<(int)prev.size();++i3537) {
    if( prev[i3537] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3537]);
    }
  }
  return memo[key(493,backtracking_ptr_for_packrat493)] = result;
}

inline deque<int> parse_slash3541() { 
  if(memo.count(key(494,i))) {
    return memo[key(494,i)];
  }
  int backtracking_ptr_for_packrat494=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (NumericType) */
    deque<int> next_prev3544;
    for(int i3543=0;i3543<(int)prev.size();++i3543) {
      if( prev[i3543] == FAIL ) {
        if(!(!next_prev3544.empty() && next_prev3544.front() == FAIL )) {
          next_prev3544.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3543];
      tmp = parse_NumericType();
      
      for(int i3543=0;i3543<(int)tmp.size();++i3543) {
        if( tmp[i3543] == FAIL ) {
          if(!( !next_prev3544.empty() && next_prev3544[0] == FAIL )) {
            next_prev3544.push_front(FAIL);
          }
        } else {
          next_prev3544.push_back(tmp[i3543]);
        }
      }
    }
    prev = next_prev3544;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3542=0;i3542<(int)prev.size();++i3542) {
    if( prev[i3542] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3542]);
    }
  }
  return memo[key(494,backtracking_ptr_for_packrat494)] = result;
}

inline deque<int> parse_slash3546() { 
  if(memo.count(key(495,i))) {
    return memo[key(495,i)];
  }
  int backtracking_ptr_for_packrat495=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (BooleanType) */
    deque<int> next_prev3549;
    for(int i3548=0;i3548<(int)prev.size();++i3548) {
      if( prev[i3548] == FAIL ) {
        if(!(!next_prev3549.empty() && next_prev3549.front() == FAIL )) {
          next_prev3549.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3548];
      tmp = parse_BooleanType();
      
      for(int i3548=0;i3548<(int)tmp.size();++i3548) {
        if( tmp[i3548] == FAIL ) {
          if(!( !next_prev3549.empty() && next_prev3549[0] == FAIL )) {
            next_prev3549.push_front(FAIL);
          }
        } else {
          next_prev3549.push_back(tmp[i3548]);
        }
      }
    }
    prev = next_prev3549;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3547=0;i3547<(int)prev.size();++i3547) {
    if( prev[i3547] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3547]);
    }
  }
  return memo[key(495,backtracking_ptr_for_packrat495)] = result;
}

deque<int> parse_NumericType(){
  if(memo.count(key(496,i))) {
    return memo[key(496,i)];
  }
  int backtracking_ptr_for_packrat496=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev3553;
  deque<int> prioritized_choice_final_prev3554;
  next_prev3553.clear();
  for(int i3552=0;i3552<(int)prev.size();++i3552) {
    i = prev[i3552];
    tmp = parse_slash3555();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3553.push_back(prev[i3552]); }
    for(int i3559=0;i3559<(int)tmp.size();++i3559) {
      if( tmp[i3559] != FAIL ) {
        prioritized_choice_final_prev3554.push_back(tmp[i3559]);
      }
    }
  }
  prev = next_prev3553;
  next_prev3553.clear();
  for(int i3552=0;i3552<(int)prev.size();++i3552) {
    i = prev[i3552];
    tmp = parse_slash3560();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3553.push_back(prev[i3552]); }
    for(int i3564=0;i3564<(int)tmp.size();++i3564) {
      if( tmp[i3564] != FAIL ) {
        prioritized_choice_final_prev3554.push_back(tmp[i3564]);
      }
    }
  }
  prev = next_prev3553;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev3554.empty() && prioritized_choice_final_prev3554.front() == FAIL )) {
      prioritized_choice_final_prev3554.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev3554;
  for(int i3551=0;i3551<(int)prev.size();++i3551) {
    if( prev[i3551] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3551]);
    }
  }
  return memo[key(496,backtracking_ptr_for_packrat496)] = result;
}

inline deque<int> parse_slash3555() { 
  if(memo.count(key(497,i))) {
    return memo[key(497,i)];
  }
  int backtracking_ptr_for_packrat497=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (IntegralType) */
    deque<int> next_prev3558;
    for(int i3557=0;i3557<(int)prev.size();++i3557) {
      if( prev[i3557] == FAIL ) {
        if(!(!next_prev3558.empty() && next_prev3558.front() == FAIL )) {
          next_prev3558.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3557];
      tmp = parse_IntegralType();
      
      for(int i3557=0;i3557<(int)tmp.size();++i3557) {
        if( tmp[i3557] == FAIL ) {
          if(!( !next_prev3558.empty() && next_prev3558[0] == FAIL )) {
            next_prev3558.push_front(FAIL);
          }
        } else {
          next_prev3558.push_back(tmp[i3557]);
        }
      }
    }
    prev = next_prev3558;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3556=0;i3556<(int)prev.size();++i3556) {
    if( prev[i3556] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3556]);
    }
  }
  return memo[key(497,backtracking_ptr_for_packrat497)] = result;
}

inline deque<int> parse_slash3560() { 
  if(memo.count(key(498,i))) {
    return memo[key(498,i)];
  }
  int backtracking_ptr_for_packrat498=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (FloatingPointType) */
    deque<int> next_prev3563;
    for(int i3562=0;i3562<(int)prev.size();++i3562) {
      if( prev[i3562] == FAIL ) {
        if(!(!next_prev3563.empty() && next_prev3563.front() == FAIL )) {
          next_prev3563.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3562];
      tmp = parse_FloatingPointType();
      
      for(int i3562=0;i3562<(int)tmp.size();++i3562) {
        if( tmp[i3562] == FAIL ) {
          if(!( !next_prev3563.empty() && next_prev3563[0] == FAIL )) {
            next_prev3563.push_front(FAIL);
          }
        } else {
          next_prev3563.push_back(tmp[i3562]);
        }
      }
    }
    prev = next_prev3563;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3561=0;i3561<(int)prev.size();++i3561) {
    if( prev[i3561] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3561]);
    }
  }
  return memo[key(498,backtracking_ptr_for_packrat498)] = result;
}

deque<int> parse_IntegralType(){
  if(memo.count(key(499,i))) {
    return memo[key(499,i)];
  }
  int backtracking_ptr_for_packrat499=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev3567;
  deque<int> prioritized_choice_final_prev3568;
  next_prev3567.clear();
  for(int i3566=0;i3566<(int)prev.size();++i3566) {
    i = prev[i3566];
    tmp = parse_slash3569();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3567.push_back(prev[i3566]); }
    for(int i3583=0;i3583<(int)tmp.size();++i3583) {
      if( tmp[i3583] != FAIL ) {
        prioritized_choice_final_prev3568.push_back(tmp[i3583]);
      }
    }
  }
  prev = next_prev3567;
  next_prev3567.clear();
  for(int i3566=0;i3566<(int)prev.size();++i3566) {
    i = prev[i3566];
    tmp = parse_slash3584();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3567.push_back(prev[i3566]); }
    for(int i3598=0;i3598<(int)tmp.size();++i3598) {
      if( tmp[i3598] != FAIL ) {
        prioritized_choice_final_prev3568.push_back(tmp[i3598]);
      }
    }
  }
  prev = next_prev3567;
  next_prev3567.clear();
  for(int i3566=0;i3566<(int)prev.size();++i3566) {
    i = prev[i3566];
    tmp = parse_slash3599();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3567.push_back(prev[i3566]); }
    for(int i3614=0;i3614<(int)tmp.size();++i3614) {
      if( tmp[i3614] != FAIL ) {
        prioritized_choice_final_prev3568.push_back(tmp[i3614]);
      }
    }
  }
  prev = next_prev3567;
  next_prev3567.clear();
  for(int i3566=0;i3566<(int)prev.size();++i3566) {
    i = prev[i3566];
    tmp = parse_slash3615();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3567.push_back(prev[i3566]); }
    for(int i3628=0;i3628<(int)tmp.size();++i3628) {
      if( tmp[i3628] != FAIL ) {
        prioritized_choice_final_prev3568.push_back(tmp[i3628]);
      }
    }
  }
  prev = next_prev3567;
  next_prev3567.clear();
  for(int i3566=0;i3566<(int)prev.size();++i3566) {
    i = prev[i3566];
    tmp = parse_slash3629();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3567.push_back(prev[i3566]); }
    for(int i3643=0;i3643<(int)tmp.size();++i3643) {
      if( tmp[i3643] != FAIL ) {
        prioritized_choice_final_prev3568.push_back(tmp[i3643]);
      }
    }
  }
  prev = next_prev3567;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev3568.empty() && prioritized_choice_final_prev3568.front() == FAIL )) {
      prioritized_choice_final_prev3568.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev3568;
  for(int i3565=0;i3565<(int)prev.size();++i3565) {
    if( prev[i3565] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3565]);
    }
  }
  return memo[key(499,backtracking_ptr_for_packrat499)] = result;
}

inline deque<int> parse_slash3569() { 
  if(memo.count(key(500,i))) {
    return memo[key(500,i)];
  }
  int backtracking_ptr_for_packrat500=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3571=0;i3571<(int)prev.size();++i3571) {
        if( prev[i3571] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3571]<m&&I[prev[i3571]]=='b') {
          tmp.push_back(prev[i3571]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3572=0;i3572<(int)prev.size();++i3572) {
        if( prev[i3572] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3572]<m&&I[prev[i3572]]=='y') {
          tmp.push_back(prev[i3572]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3573=0;i3573<(int)prev.size();++i3573) {
        if( prev[i3573] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3573]<m&&I[prev[i3573]]=='t') {
          tmp.push_back(prev[i3573]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3574=0;i3574<(int)prev.size();++i3574) {
        if( prev[i3574] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3574]<m&&I[prev[i3574]]=='e') {
          tmp.push_back(prev[i3574]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev3580;
      for(int i3579=0;i3579<(int)prev.size();++i3579) {
        i = prev[i3579];
        tmp = parse_not3575();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev3580.push_back(prev[i3579]);
        } else {
          if(!(!next_prev3580.empty()&&next_prev3580.front()==FAIL)) {
            next_prev3580.push_front(FAIL);
          }
        }
      }
      prev = next_prev3580;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3582;
      for(int i3581=0;i3581<(int)prev.size();++i3581) {
        if( prev[i3581] == FAIL ) {
          if(!(!next_prev3582.empty() && next_prev3582.front() == FAIL )) {
            next_prev3582.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3581];
        tmp = parse__();
        
        for(int i3581=0;i3581<(int)tmp.size();++i3581) {
          if( tmp[i3581] == FAIL ) {
            if(!( !next_prev3582.empty() && next_prev3582[0] == FAIL )) {
              next_prev3582.push_front(FAIL);
            }
          } else {
            next_prev3582.push_back(tmp[i3581]);
          }
        }
      }
      prev = next_prev3582;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3570=0;i3570<(int)prev.size();++i3570) {
    if( prev[i3570] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3570]);
    }
  }
  return memo[key(500,backtracking_ptr_for_packrat500)] = result;
}

inline deque<int> parse_not3575() { 
  if(memo.count(key(501,i))) {
    return memo[key(501,i)];
  }
  int backtracking_ptr_for_packrat501=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev3578;
  for(int i3577=0;i3577<(int)prev.size();++i3577) {
    if( prev[i3577] == FAIL ) {
      if(!(!next_prev3578.empty() && next_prev3578.front() == FAIL )) {
        next_prev3578.push_front(FAIL);
      }
      continue;
    }
    i = prev[i3577];
    tmp = parse_W();
    
    for(int i3577=0;i3577<(int)tmp.size();++i3577) {
      if( tmp[i3577] == FAIL ) {
        if(!( !next_prev3578.empty() && next_prev3578[0] == FAIL )) {
          next_prev3578.push_front(FAIL);
        }
      } else {
        next_prev3578.push_back(tmp[i3577]);
      }
    }
  }
  prev = next_prev3578;
  for(int i3576=0;i3576<(int)prev.size();++i3576) {
    if( prev[i3576] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3576]);
    }
  }
  return memo[key(501,backtracking_ptr_for_packrat501)] = result;
}

inline deque<int> parse_slash3584() { 
  if(memo.count(key(502,i))) {
    return memo[key(502,i)];
  }
  int backtracking_ptr_for_packrat502=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3586=0;i3586<(int)prev.size();++i3586) {
        if( prev[i3586] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3586]<m&&I[prev[i3586]]=='c') {
          tmp.push_back(prev[i3586]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3587=0;i3587<(int)prev.size();++i3587) {
        if( prev[i3587] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3587]<m&&I[prev[i3587]]=='h') {
          tmp.push_back(prev[i3587]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3588=0;i3588<(int)prev.size();++i3588) {
        if( prev[i3588] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3588]<m&&I[prev[i3588]]=='a') {
          tmp.push_back(prev[i3588]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3589=0;i3589<(int)prev.size();++i3589) {
        if( prev[i3589] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3589]<m&&I[prev[i3589]]=='r') {
          tmp.push_back(prev[i3589]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev3595;
      for(int i3594=0;i3594<(int)prev.size();++i3594) {
        i = prev[i3594];
        tmp = parse_not3590();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev3595.push_back(prev[i3594]);
        } else {
          if(!(!next_prev3595.empty()&&next_prev3595.front()==FAIL)) {
            next_prev3595.push_front(FAIL);
          }
        }
      }
      prev = next_prev3595;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3597;
      for(int i3596=0;i3596<(int)prev.size();++i3596) {
        if( prev[i3596] == FAIL ) {
          if(!(!next_prev3597.empty() && next_prev3597.front() == FAIL )) {
            next_prev3597.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3596];
        tmp = parse__();
        
        for(int i3596=0;i3596<(int)tmp.size();++i3596) {
          if( tmp[i3596] == FAIL ) {
            if(!( !next_prev3597.empty() && next_prev3597[0] == FAIL )) {
              next_prev3597.push_front(FAIL);
            }
          } else {
            next_prev3597.push_back(tmp[i3596]);
          }
        }
      }
      prev = next_prev3597;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3585=0;i3585<(int)prev.size();++i3585) {
    if( prev[i3585] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3585]);
    }
  }
  return memo[key(502,backtracking_ptr_for_packrat502)] = result;
}

inline deque<int> parse_not3590() { 
  if(memo.count(key(503,i))) {
    return memo[key(503,i)];
  }
  int backtracking_ptr_for_packrat503=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev3593;
  for(int i3592=0;i3592<(int)prev.size();++i3592) {
    if( prev[i3592] == FAIL ) {
      if(!(!next_prev3593.empty() && next_prev3593.front() == FAIL )) {
        next_prev3593.push_front(FAIL);
      }
      continue;
    }
    i = prev[i3592];
    tmp = parse_W();
    
    for(int i3592=0;i3592<(int)tmp.size();++i3592) {
      if( tmp[i3592] == FAIL ) {
        if(!( !next_prev3593.empty() && next_prev3593[0] == FAIL )) {
          next_prev3593.push_front(FAIL);
        }
      } else {
        next_prev3593.push_back(tmp[i3592]);
      }
    }
  }
  prev = next_prev3593;
  for(int i3591=0;i3591<(int)prev.size();++i3591) {
    if( prev[i3591] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3591]);
    }
  }
  return memo[key(503,backtracking_ptr_for_packrat503)] = result;
}

inline deque<int> parse_slash3599() { 
  if(memo.count(key(504,i))) {
    return memo[key(504,i)];
  }
  int backtracking_ptr_for_packrat504=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3601=0;i3601<(int)prev.size();++i3601) {
        if( prev[i3601] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3601]<m&&I[prev[i3601]]=='s') {
          tmp.push_back(prev[i3601]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3602=0;i3602<(int)prev.size();++i3602) {
        if( prev[i3602] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3602]<m&&I[prev[i3602]]=='h') {
          tmp.push_back(prev[i3602]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3603=0;i3603<(int)prev.size();++i3603) {
        if( prev[i3603] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3603]<m&&I[prev[i3603]]=='o') {
          tmp.push_back(prev[i3603]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3604=0;i3604<(int)prev.size();++i3604) {
        if( prev[i3604] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3604]<m&&I[prev[i3604]]=='r') {
          tmp.push_back(prev[i3604]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3605=0;i3605<(int)prev.size();++i3605) {
        if( prev[i3605] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3605]<m&&I[prev[i3605]]=='t') {
          tmp.push_back(prev[i3605]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev3611;
      for(int i3610=0;i3610<(int)prev.size();++i3610) {
        i = prev[i3610];
        tmp = parse_not3606();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev3611.push_back(prev[i3610]);
        } else {
          if(!(!next_prev3611.empty()&&next_prev3611.front()==FAIL)) {
            next_prev3611.push_front(FAIL);
          }
        }
      }
      prev = next_prev3611;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3613;
      for(int i3612=0;i3612<(int)prev.size();++i3612) {
        if( prev[i3612] == FAIL ) {
          if(!(!next_prev3613.empty() && next_prev3613.front() == FAIL )) {
            next_prev3613.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3612];
        tmp = parse__();
        
        for(int i3612=0;i3612<(int)tmp.size();++i3612) {
          if( tmp[i3612] == FAIL ) {
            if(!( !next_prev3613.empty() && next_prev3613[0] == FAIL )) {
              next_prev3613.push_front(FAIL);
            }
          } else {
            next_prev3613.push_back(tmp[i3612]);
          }
        }
      }
      prev = next_prev3613;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3600=0;i3600<(int)prev.size();++i3600) {
    if( prev[i3600] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3600]);
    }
  }
  return memo[key(504,backtracking_ptr_for_packrat504)] = result;
}

inline deque<int> parse_not3606() { 
  if(memo.count(key(505,i))) {
    return memo[key(505,i)];
  }
  int backtracking_ptr_for_packrat505=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev3609;
  for(int i3608=0;i3608<(int)prev.size();++i3608) {
    if( prev[i3608] == FAIL ) {
      if(!(!next_prev3609.empty() && next_prev3609.front() == FAIL )) {
        next_prev3609.push_front(FAIL);
      }
      continue;
    }
    i = prev[i3608];
    tmp = parse_W();
    
    for(int i3608=0;i3608<(int)tmp.size();++i3608) {
      if( tmp[i3608] == FAIL ) {
        if(!( !next_prev3609.empty() && next_prev3609[0] == FAIL )) {
          next_prev3609.push_front(FAIL);
        }
      } else {
        next_prev3609.push_back(tmp[i3608]);
      }
    }
  }
  prev = next_prev3609;
  for(int i3607=0;i3607<(int)prev.size();++i3607) {
    if( prev[i3607] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3607]);
    }
  }
  return memo[key(505,backtracking_ptr_for_packrat505)] = result;
}

inline deque<int> parse_slash3615() { 
  if(memo.count(key(506,i))) {
    return memo[key(506,i)];
  }
  int backtracking_ptr_for_packrat506=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3617=0;i3617<(int)prev.size();++i3617) {
        if( prev[i3617] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3617]<m&&I[prev[i3617]]=='i') {
          tmp.push_back(prev[i3617]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3618=0;i3618<(int)prev.size();++i3618) {
        if( prev[i3618] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3618]<m&&I[prev[i3618]]=='n') {
          tmp.push_back(prev[i3618]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3619=0;i3619<(int)prev.size();++i3619) {
        if( prev[i3619] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3619]<m&&I[prev[i3619]]=='t') {
          tmp.push_back(prev[i3619]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev3625;
      for(int i3624=0;i3624<(int)prev.size();++i3624) {
        i = prev[i3624];
        tmp = parse_not3620();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev3625.push_back(prev[i3624]);
        } else {
          if(!(!next_prev3625.empty()&&next_prev3625.front()==FAIL)) {
            next_prev3625.push_front(FAIL);
          }
        }
      }
      prev = next_prev3625;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3627;
      for(int i3626=0;i3626<(int)prev.size();++i3626) {
        if( prev[i3626] == FAIL ) {
          if(!(!next_prev3627.empty() && next_prev3627.front() == FAIL )) {
            next_prev3627.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3626];
        tmp = parse__();
        
        for(int i3626=0;i3626<(int)tmp.size();++i3626) {
          if( tmp[i3626] == FAIL ) {
            if(!( !next_prev3627.empty() && next_prev3627[0] == FAIL )) {
              next_prev3627.push_front(FAIL);
            }
          } else {
            next_prev3627.push_back(tmp[i3626]);
          }
        }
      }
      prev = next_prev3627;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3616=0;i3616<(int)prev.size();++i3616) {
    if( prev[i3616] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3616]);
    }
  }
  return memo[key(506,backtracking_ptr_for_packrat506)] = result;
}

inline deque<int> parse_not3620() { 
  if(memo.count(key(507,i))) {
    return memo[key(507,i)];
  }
  int backtracking_ptr_for_packrat507=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev3623;
  for(int i3622=0;i3622<(int)prev.size();++i3622) {
    if( prev[i3622] == FAIL ) {
      if(!(!next_prev3623.empty() && next_prev3623.front() == FAIL )) {
        next_prev3623.push_front(FAIL);
      }
      continue;
    }
    i = prev[i3622];
    tmp = parse_W();
    
    for(int i3622=0;i3622<(int)tmp.size();++i3622) {
      if( tmp[i3622] == FAIL ) {
        if(!( !next_prev3623.empty() && next_prev3623[0] == FAIL )) {
          next_prev3623.push_front(FAIL);
        }
      } else {
        next_prev3623.push_back(tmp[i3622]);
      }
    }
  }
  prev = next_prev3623;
  for(int i3621=0;i3621<(int)prev.size();++i3621) {
    if( prev[i3621] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3621]);
    }
  }
  return memo[key(507,backtracking_ptr_for_packrat507)] = result;
}

inline deque<int> parse_slash3629() { 
  if(memo.count(key(508,i))) {
    return memo[key(508,i)];
  }
  int backtracking_ptr_for_packrat508=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3631=0;i3631<(int)prev.size();++i3631) {
        if( prev[i3631] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3631]<m&&I[prev[i3631]]=='l') {
          tmp.push_back(prev[i3631]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3632=0;i3632<(int)prev.size();++i3632) {
        if( prev[i3632] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3632]<m&&I[prev[i3632]]=='o') {
          tmp.push_back(prev[i3632]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3633=0;i3633<(int)prev.size();++i3633) {
        if( prev[i3633] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3633]<m&&I[prev[i3633]]=='n') {
          tmp.push_back(prev[i3633]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3634=0;i3634<(int)prev.size();++i3634) {
        if( prev[i3634] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3634]<m&&I[prev[i3634]]=='g') {
          tmp.push_back(prev[i3634]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev3640;
      for(int i3639=0;i3639<(int)prev.size();++i3639) {
        i = prev[i3639];
        tmp = parse_not3635();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev3640.push_back(prev[i3639]);
        } else {
          if(!(!next_prev3640.empty()&&next_prev3640.front()==FAIL)) {
            next_prev3640.push_front(FAIL);
          }
        }
      }
      prev = next_prev3640;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3642;
      for(int i3641=0;i3641<(int)prev.size();++i3641) {
        if( prev[i3641] == FAIL ) {
          if(!(!next_prev3642.empty() && next_prev3642.front() == FAIL )) {
            next_prev3642.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3641];
        tmp = parse__();
        
        for(int i3641=0;i3641<(int)tmp.size();++i3641) {
          if( tmp[i3641] == FAIL ) {
            if(!( !next_prev3642.empty() && next_prev3642[0] == FAIL )) {
              next_prev3642.push_front(FAIL);
            }
          } else {
            next_prev3642.push_back(tmp[i3641]);
          }
        }
      }
      prev = next_prev3642;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3630=0;i3630<(int)prev.size();++i3630) {
    if( prev[i3630] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3630]);
    }
  }
  return memo[key(508,backtracking_ptr_for_packrat508)] = result;
}

inline deque<int> parse_not3635() { 
  if(memo.count(key(509,i))) {
    return memo[key(509,i)];
  }
  int backtracking_ptr_for_packrat509=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev3638;
  for(int i3637=0;i3637<(int)prev.size();++i3637) {
    if( prev[i3637] == FAIL ) {
      if(!(!next_prev3638.empty() && next_prev3638.front() == FAIL )) {
        next_prev3638.push_front(FAIL);
      }
      continue;
    }
    i = prev[i3637];
    tmp = parse_W();
    
    for(int i3637=0;i3637<(int)tmp.size();++i3637) {
      if( tmp[i3637] == FAIL ) {
        if(!( !next_prev3638.empty() && next_prev3638[0] == FAIL )) {
          next_prev3638.push_front(FAIL);
        }
      } else {
        next_prev3638.push_back(tmp[i3637]);
      }
    }
  }
  prev = next_prev3638;
  for(int i3636=0;i3636<(int)prev.size();++i3636) {
    if( prev[i3636] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3636]);
    }
  }
  return memo[key(509,backtracking_ptr_for_packrat509)] = result;
}

deque<int> parse_FloatingPointType(){
  if(memo.count(key(510,i))) {
    return memo[key(510,i)];
  }
  int backtracking_ptr_for_packrat510=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev3646;
  deque<int> prioritized_choice_final_prev3647;
  next_prev3646.clear();
  for(int i3645=0;i3645<(int)prev.size();++i3645) {
    i = prev[i3645];
    tmp = parse_slash3648();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3646.push_back(prev[i3645]); }
    for(int i3663=0;i3663<(int)tmp.size();++i3663) {
      if( tmp[i3663] != FAIL ) {
        prioritized_choice_final_prev3647.push_back(tmp[i3663]);
      }
    }
  }
  prev = next_prev3646;
  next_prev3646.clear();
  for(int i3645=0;i3645<(int)prev.size();++i3645) {
    i = prev[i3645];
    tmp = parse_slash3664();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3646.push_back(prev[i3645]); }
    for(int i3680=0;i3680<(int)tmp.size();++i3680) {
      if( tmp[i3680] != FAIL ) {
        prioritized_choice_final_prev3647.push_back(tmp[i3680]);
      }
    }
  }
  prev = next_prev3646;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev3647.empty() && prioritized_choice_final_prev3647.front() == FAIL )) {
      prioritized_choice_final_prev3647.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev3647;
  for(int i3644=0;i3644<(int)prev.size();++i3644) {
    if( prev[i3644] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3644]);
    }
  }
  return memo[key(510,backtracking_ptr_for_packrat510)] = result;
}

inline deque<int> parse_slash3648() { 
  if(memo.count(key(511,i))) {
    return memo[key(511,i)];
  }
  int backtracking_ptr_for_packrat511=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3650=0;i3650<(int)prev.size();++i3650) {
        if( prev[i3650] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3650]<m&&I[prev[i3650]]=='f') {
          tmp.push_back(prev[i3650]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3651=0;i3651<(int)prev.size();++i3651) {
        if( prev[i3651] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3651]<m&&I[prev[i3651]]=='l') {
          tmp.push_back(prev[i3651]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3652=0;i3652<(int)prev.size();++i3652) {
        if( prev[i3652] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3652]<m&&I[prev[i3652]]=='o') {
          tmp.push_back(prev[i3652]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3653=0;i3653<(int)prev.size();++i3653) {
        if( prev[i3653] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3653]<m&&I[prev[i3653]]=='a') {
          tmp.push_back(prev[i3653]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3654=0;i3654<(int)prev.size();++i3654) {
        if( prev[i3654] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3654]<m&&I[prev[i3654]]=='t') {
          tmp.push_back(prev[i3654]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev3660;
      for(int i3659=0;i3659<(int)prev.size();++i3659) {
        i = prev[i3659];
        tmp = parse_not3655();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev3660.push_back(prev[i3659]);
        } else {
          if(!(!next_prev3660.empty()&&next_prev3660.front()==FAIL)) {
            next_prev3660.push_front(FAIL);
          }
        }
      }
      prev = next_prev3660;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3662;
      for(int i3661=0;i3661<(int)prev.size();++i3661) {
        if( prev[i3661] == FAIL ) {
          if(!(!next_prev3662.empty() && next_prev3662.front() == FAIL )) {
            next_prev3662.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3661];
        tmp = parse__();
        
        for(int i3661=0;i3661<(int)tmp.size();++i3661) {
          if( tmp[i3661] == FAIL ) {
            if(!( !next_prev3662.empty() && next_prev3662[0] == FAIL )) {
              next_prev3662.push_front(FAIL);
            }
          } else {
            next_prev3662.push_back(tmp[i3661]);
          }
        }
      }
      prev = next_prev3662;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3649=0;i3649<(int)prev.size();++i3649) {
    if( prev[i3649] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3649]);
    }
  }
  return memo[key(511,backtracking_ptr_for_packrat511)] = result;
}

inline deque<int> parse_not3655() { 
  if(memo.count(key(512,i))) {
    return memo[key(512,i)];
  }
  int backtracking_ptr_for_packrat512=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev3658;
  for(int i3657=0;i3657<(int)prev.size();++i3657) {
    if( prev[i3657] == FAIL ) {
      if(!(!next_prev3658.empty() && next_prev3658.front() == FAIL )) {
        next_prev3658.push_front(FAIL);
      }
      continue;
    }
    i = prev[i3657];
    tmp = parse_W();
    
    for(int i3657=0;i3657<(int)tmp.size();++i3657) {
      if( tmp[i3657] == FAIL ) {
        if(!( !next_prev3658.empty() && next_prev3658[0] == FAIL )) {
          next_prev3658.push_front(FAIL);
        }
      } else {
        next_prev3658.push_back(tmp[i3657]);
      }
    }
  }
  prev = next_prev3658;
  for(int i3656=0;i3656<(int)prev.size();++i3656) {
    if( prev[i3656] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3656]);
    }
  }
  return memo[key(512,backtracking_ptr_for_packrat512)] = result;
}

inline deque<int> parse_slash3664() { 
  if(memo.count(key(513,i))) {
    return memo[key(513,i)];
  }
  int backtracking_ptr_for_packrat513=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3666=0;i3666<(int)prev.size();++i3666) {
        if( prev[i3666] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3666]<m&&I[prev[i3666]]=='d') {
          tmp.push_back(prev[i3666]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3667=0;i3667<(int)prev.size();++i3667) {
        if( prev[i3667] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3667]<m&&I[prev[i3667]]=='o') {
          tmp.push_back(prev[i3667]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3668=0;i3668<(int)prev.size();++i3668) {
        if( prev[i3668] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3668]<m&&I[prev[i3668]]=='u') {
          tmp.push_back(prev[i3668]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3669=0;i3669<(int)prev.size();++i3669) {
        if( prev[i3669] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3669]<m&&I[prev[i3669]]=='b') {
          tmp.push_back(prev[i3669]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3670=0;i3670<(int)prev.size();++i3670) {
        if( prev[i3670] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3670]<m&&I[prev[i3670]]=='l') {
          tmp.push_back(prev[i3670]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3671=0;i3671<(int)prev.size();++i3671) {
        if( prev[i3671] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3671]<m&&I[prev[i3671]]=='e') {
          tmp.push_back(prev[i3671]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev3677;
      for(int i3676=0;i3676<(int)prev.size();++i3676) {
        i = prev[i3676];
        tmp = parse_not3672();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev3677.push_back(prev[i3676]);
        } else {
          if(!(!next_prev3677.empty()&&next_prev3677.front()==FAIL)) {
            next_prev3677.push_front(FAIL);
          }
        }
      }
      prev = next_prev3677;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3679;
      for(int i3678=0;i3678<(int)prev.size();++i3678) {
        if( prev[i3678] == FAIL ) {
          if(!(!next_prev3679.empty() && next_prev3679.front() == FAIL )) {
            next_prev3679.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3678];
        tmp = parse__();
        
        for(int i3678=0;i3678<(int)tmp.size();++i3678) {
          if( tmp[i3678] == FAIL ) {
            if(!( !next_prev3679.empty() && next_prev3679[0] == FAIL )) {
              next_prev3679.push_front(FAIL);
            }
          } else {
            next_prev3679.push_back(tmp[i3678]);
          }
        }
      }
      prev = next_prev3679;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3665=0;i3665<(int)prev.size();++i3665) {
    if( prev[i3665] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3665]);
    }
  }
  return memo[key(513,backtracking_ptr_for_packrat513)] = result;
}

inline deque<int> parse_not3672() { 
  if(memo.count(key(514,i))) {
    return memo[key(514,i)];
  }
  int backtracking_ptr_for_packrat514=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev3675;
  for(int i3674=0;i3674<(int)prev.size();++i3674) {
    if( prev[i3674] == FAIL ) {
      if(!(!next_prev3675.empty() && next_prev3675.front() == FAIL )) {
        next_prev3675.push_front(FAIL);
      }
      continue;
    }
    i = prev[i3674];
    tmp = parse_W();
    
    for(int i3674=0;i3674<(int)tmp.size();++i3674) {
      if( tmp[i3674] == FAIL ) {
        if(!( !next_prev3675.empty() && next_prev3675[0] == FAIL )) {
          next_prev3675.push_front(FAIL);
        }
      } else {
        next_prev3675.push_back(tmp[i3674]);
      }
    }
  }
  prev = next_prev3675;
  for(int i3673=0;i3673<(int)prev.size();++i3673) {
    if( prev[i3673] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3673]);
    }
  }
  return memo[key(514,backtracking_ptr_for_packrat514)] = result;
}

deque<int> parse_BooleanType(){
  if(memo.count(key(515,i))) {
    return memo[key(515,i)];
  }
  int backtracking_ptr_for_packrat515=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3682=0;i3682<(int)prev.size();++i3682) {
        if( prev[i3682] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3682]<m&&I[prev[i3682]]=='b') {
          tmp.push_back(prev[i3682]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3683=0;i3683<(int)prev.size();++i3683) {
        if( prev[i3683] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3683]<m&&I[prev[i3683]]=='o') {
          tmp.push_back(prev[i3683]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3684=0;i3684<(int)prev.size();++i3684) {
        if( prev[i3684] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3684]<m&&I[prev[i3684]]=='o') {
          tmp.push_back(prev[i3684]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3685=0;i3685<(int)prev.size();++i3685) {
        if( prev[i3685] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3685]<m&&I[prev[i3685]]=='l') {
          tmp.push_back(prev[i3685]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3686=0;i3686<(int)prev.size();++i3686) {
        if( prev[i3686] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3686]<m&&I[prev[i3686]]=='e') {
          tmp.push_back(prev[i3686]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3687=0;i3687<(int)prev.size();++i3687) {
        if( prev[i3687] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3687]<m&&I[prev[i3687]]=='a') {
          tmp.push_back(prev[i3687]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3688=0;i3688<(int)prev.size();++i3688) {
        if( prev[i3688] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3688]<m&&I[prev[i3688]]=='n') {
          tmp.push_back(prev[i3688]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev3694;
      for(int i3693=0;i3693<(int)prev.size();++i3693) {
        i = prev[i3693];
        tmp = parse_not3689();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev3694.push_back(prev[i3693]);
        } else {
          if(!(!next_prev3694.empty()&&next_prev3694.front()==FAIL)) {
            next_prev3694.push_front(FAIL);
          }
        }
      }
      prev = next_prev3694;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3696;
      for(int i3695=0;i3695<(int)prev.size();++i3695) {
        if( prev[i3695] == FAIL ) {
          if(!(!next_prev3696.empty() && next_prev3696.front() == FAIL )) {
            next_prev3696.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3695];
        tmp = parse__();
        
        for(int i3695=0;i3695<(int)tmp.size();++i3695) {
          if( tmp[i3695] == FAIL ) {
            if(!( !next_prev3696.empty() && next_prev3696[0] == FAIL )) {
              next_prev3696.push_front(FAIL);
            }
          } else {
            next_prev3696.push_back(tmp[i3695]);
          }
        }
      }
      prev = next_prev3696;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3681=0;i3681<(int)prev.size();++i3681) {
    if( prev[i3681] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3681]);
    }
  }
  return memo[key(515,backtracking_ptr_for_packrat515)] = result;
}

inline deque<int> parse_not3689() { 
  if(memo.count(key(516,i))) {
    return memo[key(516,i)];
  }
  int backtracking_ptr_for_packrat516=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev3692;
  for(int i3691=0;i3691<(int)prev.size();++i3691) {
    if( prev[i3691] == FAIL ) {
      if(!(!next_prev3692.empty() && next_prev3692.front() == FAIL )) {
        next_prev3692.push_front(FAIL);
      }
      continue;
    }
    i = prev[i3691];
    tmp = parse_W();
    
    for(int i3691=0;i3691<(int)tmp.size();++i3691) {
      if( tmp[i3691] == FAIL ) {
        if(!( !next_prev3692.empty() && next_prev3692[0] == FAIL )) {
          next_prev3692.push_front(FAIL);
        }
      } else {
        next_prev3692.push_back(tmp[i3691]);
      }
    }
  }
  prev = next_prev3692;
  for(int i3690=0;i3690<(int)prev.size();++i3690) {
    if( prev[i3690] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3690]);
    }
  }
  return memo[key(516,backtracking_ptr_for_packrat516)] = result;
}

deque<int> parse_ReferenceType(){
  if(memo.count(key(517,i))) {
    return memo[key(517,i)];
  }
  int backtracking_ptr_for_packrat517=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev3699;
  deque<int> prioritized_choice_final_prev3700;
  next_prev3699.clear();
  for(int i3698=0;i3698<(int)prev.size();++i3698) {
    i = prev[i3698];
    tmp = parse_slash3701();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3699.push_back(prev[i3698]); }
    for(int i3705=0;i3705<(int)tmp.size();++i3705) {
      if( tmp[i3705] != FAIL ) {
        prioritized_choice_final_prev3700.push_back(tmp[i3705]);
      }
    }
  }
  prev = next_prev3699;
  next_prev3699.clear();
  for(int i3698=0;i3698<(int)prev.size();++i3698) {
    i = prev[i3698];
    tmp = parse_slash3706();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3699.push_back(prev[i3698]); }
    for(int i3710=0;i3710<(int)tmp.size();++i3710) {
      if( tmp[i3710] != FAIL ) {
        prioritized_choice_final_prev3700.push_back(tmp[i3710]);
      }
    }
  }
  prev = next_prev3699;
  next_prev3699.clear();
  for(int i3698=0;i3698<(int)prev.size();++i3698) {
    i = prev[i3698];
    tmp = parse_slash3711();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3699.push_back(prev[i3698]); }
    for(int i3715=0;i3715<(int)tmp.size();++i3715) {
      if( tmp[i3715] != FAIL ) {
        prioritized_choice_final_prev3700.push_back(tmp[i3715]);
      }
    }
  }
  prev = next_prev3699;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev3700.empty() && prioritized_choice_final_prev3700.front() == FAIL )) {
      prioritized_choice_final_prev3700.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev3700;
  for(int i3697=0;i3697<(int)prev.size();++i3697) {
    if( prev[i3697] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3697]);
    }
  }
  return memo[key(517,backtracking_ptr_for_packrat517)] = result;
}

inline deque<int> parse_slash3701() { 
  if(memo.count(key(518,i))) {
    return memo[key(518,i)];
  }
  int backtracking_ptr_for_packrat518=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ArrayType) */
    deque<int> next_prev3704;
    for(int i3703=0;i3703<(int)prev.size();++i3703) {
      if( prev[i3703] == FAIL ) {
        if(!(!next_prev3704.empty() && next_prev3704.front() == FAIL )) {
          next_prev3704.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3703];
      tmp = parse_ArrayType();
      
      for(int i3703=0;i3703<(int)tmp.size();++i3703) {
        if( tmp[i3703] == FAIL ) {
          if(!( !next_prev3704.empty() && next_prev3704[0] == FAIL )) {
            next_prev3704.push_front(FAIL);
          }
        } else {
          next_prev3704.push_back(tmp[i3703]);
        }
      }
    }
    prev = next_prev3704;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3702=0;i3702<(int)prev.size();++i3702) {
    if( prev[i3702] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3702]);
    }
  }
  return memo[key(518,backtracking_ptr_for_packrat518)] = result;
}

inline deque<int> parse_slash3706() { 
  if(memo.count(key(519,i))) {
    return memo[key(519,i)];
  }
  int backtracking_ptr_for_packrat519=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassOrInterfaceType) */
    deque<int> next_prev3709;
    for(int i3708=0;i3708<(int)prev.size();++i3708) {
      if( prev[i3708] == FAIL ) {
        if(!(!next_prev3709.empty() && next_prev3709.front() == FAIL )) {
          next_prev3709.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3708];
      tmp = parse_ClassOrInterfaceType();
      
      for(int i3708=0;i3708<(int)tmp.size();++i3708) {
        if( tmp[i3708] == FAIL ) {
          if(!( !next_prev3709.empty() && next_prev3709[0] == FAIL )) {
            next_prev3709.push_front(FAIL);
          }
        } else {
          next_prev3709.push_back(tmp[i3708]);
        }
      }
    }
    prev = next_prev3709;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3707=0;i3707<(int)prev.size();++i3707) {
    if( prev[i3707] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3707]);
    }
  }
  return memo[key(519,backtracking_ptr_for_packrat519)] = result;
}

inline deque<int> parse_slash3711() { 
  if(memo.count(key(520,i))) {
    return memo[key(520,i)];
  }
  int backtracking_ptr_for_packrat520=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (TypeVariable) */
    deque<int> next_prev3714;
    for(int i3713=0;i3713<(int)prev.size();++i3713) {
      if( prev[i3713] == FAIL ) {
        if(!(!next_prev3714.empty() && next_prev3714.front() == FAIL )) {
          next_prev3714.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3713];
      tmp = parse_TypeVariable();
      
      for(int i3713=0;i3713<(int)tmp.size();++i3713) {
        if( tmp[i3713] == FAIL ) {
          if(!( !next_prev3714.empty() && next_prev3714[0] == FAIL )) {
            next_prev3714.push_front(FAIL);
          }
        } else {
          next_prev3714.push_back(tmp[i3713]);
        }
      }
    }
    prev = next_prev3714;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3712=0;i3712<(int)prev.size();++i3712) {
    if( prev[i3712] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3712]);
    }
  }
  return memo[key(520,backtracking_ptr_for_packrat520)] = result;
}

deque<int> parse_ArrayType(){
  if(memo.count(key(521,i))) {
    return memo[key(521,i)];
  }
  int backtracking_ptr_for_packrat521=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev3718;
    deque<int> prioritized_choice_final_prev3719;
    next_prev3718.clear();
    for(int i3717=0;i3717<(int)prev.size();++i3717) {
      i = prev[i3717];
      tmp = parse_slash3720();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3718.push_back(prev[i3717]); }
      for(int i3724=0;i3724<(int)tmp.size();++i3724) {
        if( tmp[i3724] != FAIL ) {
          prioritized_choice_final_prev3719.push_back(tmp[i3724]);
        }
      }
    }
    prev = next_prev3718;
    next_prev3718.clear();
    for(int i3717=0;i3717<(int)prev.size();++i3717) {
      i = prev[i3717];
      tmp = parse_slash3725();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3718.push_back(prev[i3717]); }
      for(int i3729=0;i3729<(int)tmp.size();++i3729) {
        if( tmp[i3729] != FAIL ) {
          prioritized_choice_final_prev3719.push_back(tmp[i3729]);
        }
      }
    }
    prev = next_prev3718;
    next_prev3718.clear();
    for(int i3717=0;i3717<(int)prev.size();++i3717) {
      i = prev[i3717];
      tmp = parse_slash3730();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3718.push_back(prev[i3717]); }
      for(int i3734=0;i3734<(int)tmp.size();++i3734) {
        if( tmp[i3734] != FAIL ) {
          prioritized_choice_final_prev3719.push_back(tmp[i3734]);
        }
      }
    }
    prev = next_prev3718;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev3719.empty() && prioritized_choice_final_prev3719.front() == FAIL )) {
        prioritized_choice_final_prev3719.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev3719;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Prioritized Choice */
        deque<int> next_prev3736;
        deque<int> prioritized_choice_final_prev3737;
        next_prev3736.clear();
        for(int i3735=0;i3735<(int)prev.size();++i3735) {
          i = prev[i3735];
          tmp = parse_slash3738();
          if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3736.push_back(prev[i3735]); }
          for(int i3742=0;i3742<(int)tmp.size();++i3742) {
            if( tmp[i3742] != FAIL ) {
              prioritized_choice_final_prev3737.push_back(tmp[i3742]);
            }
          }
        }
        prev = next_prev3736;
        next_prev3736.clear();
        for(int i3735=0;i3735<(int)prev.size();++i3735) {
          i = prev[i3735];
          tmp = parse_slash3743();
          if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3736.push_back(prev[i3735]); }
          for(int i3745=0;i3745<(int)tmp.size();++i3745) {
            if( tmp[i3745] != FAIL ) {
              prioritized_choice_final_prev3737.push_back(tmp[i3745]);
            }
          }
        }
        prev = next_prev3736;
        if(!prev.empty()) {
          if(!(!prioritized_choice_final_prev3737.empty() && prioritized_choice_final_prev3737.front() == FAIL )) {
            prioritized_choice_final_prev3737.push_front(FAIL);
          }
        }
        prev = prioritized_choice_final_prev3737;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        if(!((int)prev.size()==1&&prev.front()==FAIL)) {
          tmp.clear();
          for(int i3746=0;i3746<(int)prev.size();++i3746) {
            if( prev[i3746] == FAIL ) {
              if(!(!tmp.empty()&&tmp.front()==FAIL)) {
                tmp.push_front(FAIL);
              }
              continue;
            }
            if(prev[i3746]<m&&I[prev[i3746]]=='[') {
              tmp.push_back(prev[i3746]+1);
            } else {
              if(!( !tmp.empty() && tmp[0] == FAIL )){
                tmp.push_front(FAIL);
              }
            }
          }
          prev = tmp;
          sort(prev.begin(),prev.end());
          prev.erase(unique(prev.begin(),prev.end()),prev.end());
        }
        if(!((int)prev.size()==1&&prev.front()==FAIL)) {
          /* Nonterminal (_) */
          deque<int> next_prev3748;
          for(int i3747=0;i3747<(int)prev.size();++i3747) {
            if( prev[i3747] == FAIL ) {
              if(!(!next_prev3748.empty() && next_prev3748.front() == FAIL )) {
                next_prev3748.push_front(FAIL);
              }
              continue;
            }
            i = prev[i3747];
            tmp = parse__();
            
            for(int i3747=0;i3747<(int)tmp.size();++i3747) {
              if( tmp[i3747] == FAIL ) {
                if(!( !next_prev3748.empty() && next_prev3748[0] == FAIL )) {
                  next_prev3748.push_front(FAIL);
                }
              } else {
                next_prev3748.push_back(tmp[i3747]);
              }
            }
          }
          prev = next_prev3748;
          sort(prev.begin(),prev.end());
          prev.erase(unique(prev.begin(),prev.end()),prev.end());
        }
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        if(!((int)prev.size()==1&&prev.front()==FAIL)) {
          tmp.clear();
          for(int i3749=0;i3749<(int)prev.size();++i3749) {
            if( prev[i3749] == FAIL ) {
              if(!(!tmp.empty()&&tmp.front()==FAIL)) {
                tmp.push_front(FAIL);
              }
              continue;
            }
            if(prev[i3749]<m&&I[prev[i3749]]==']') {
              tmp.push_back(prev[i3749]+1);
            } else {
              if(!( !tmp.empty() && tmp[0] == FAIL )){
                tmp.push_front(FAIL);
              }
            }
          }
          prev = tmp;
          sort(prev.begin(),prev.end());
          prev.erase(unique(prev.begin(),prev.end()),prev.end());
        }
        if(!((int)prev.size()==1&&prev.front()==FAIL)) {
          /* Nonterminal (_) */
          deque<int> next_prev3751;
          for(int i3750=0;i3750<(int)prev.size();++i3750) {
            if( prev[i3750] == FAIL ) {
              if(!(!next_prev3751.empty() && next_prev3751.front() == FAIL )) {
                next_prev3751.push_front(FAIL);
              }
              continue;
            }
            i = prev[i3750];
            tmp = parse__();
            
            for(int i3750=0;i3750<(int)tmp.size();++i3750) {
              if( tmp[i3750] == FAIL ) {
                if(!( !next_prev3751.empty() && next_prev3751[0] == FAIL )) {
                  next_prev3751.push_front(FAIL);
                }
              } else {
                next_prev3751.push_back(tmp[i3750]);
              }
            }
          }
          prev = next_prev3751;
          sort(prev.begin(),prev.end());
          prev.erase(unique(prev.begin(),prev.end()),prev.end());
        }
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Star */
      deque<int> next_prev3771;
      deque<int> star_final_prev3772;
      while(!((int)prev.size()==1&&prev.front()==FAIL)) {
        next_prev3771.clear();
        for(int i3773=0;i3773<(int)prev.size();++i3773) {
          i = prev[i3773];
          tmp = parse_while3752();
          if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
            star_final_prev3772.push_back(prev[i3773]);
          }
          for(int i3774=0;i3774<(int)tmp.size();++i3774) {
            if(tmp[i3774]==FAIL) {
              if(!( !next_prev3771.empty() && next_prev3771.front() == FAIL )) {
                next_prev3771.push_front(FAIL);
              }
            } else {
              next_prev3771.push_back(tmp[i3774]);
            }
          }
        }
        prev = next_prev3771;
      }
      prev = star_final_prev3772;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3716=0;i3716<(int)prev.size();++i3716) {
    if( prev[i3716] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3716]);
    }
  }
  return memo[key(521,backtracking_ptr_for_packrat521)] = result;
}

inline deque<int> parse_slash3720() { 
  if(memo.count(key(522,i))) {
    return memo[key(522,i)];
  }
  int backtracking_ptr_for_packrat522=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (PrimitiveType) */
    deque<int> next_prev3723;
    for(int i3722=0;i3722<(int)prev.size();++i3722) {
      if( prev[i3722] == FAIL ) {
        if(!(!next_prev3723.empty() && next_prev3723.front() == FAIL )) {
          next_prev3723.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3722];
      tmp = parse_PrimitiveType();
      
      for(int i3722=0;i3722<(int)tmp.size();++i3722) {
        if( tmp[i3722] == FAIL ) {
          if(!( !next_prev3723.empty() && next_prev3723[0] == FAIL )) {
            next_prev3723.push_front(FAIL);
          }
        } else {
          next_prev3723.push_back(tmp[i3722]);
        }
      }
    }
    prev = next_prev3723;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3721=0;i3721<(int)prev.size();++i3721) {
    if( prev[i3721] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3721]);
    }
  }
  return memo[key(522,backtracking_ptr_for_packrat522)] = result;
}

inline deque<int> parse_slash3725() { 
  if(memo.count(key(523,i))) {
    return memo[key(523,i)];
  }
  int backtracking_ptr_for_packrat523=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassOrInterfaceType) */
    deque<int> next_prev3728;
    for(int i3727=0;i3727<(int)prev.size();++i3727) {
      if( prev[i3727] == FAIL ) {
        if(!(!next_prev3728.empty() && next_prev3728.front() == FAIL )) {
          next_prev3728.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3727];
      tmp = parse_ClassOrInterfaceType();
      
      for(int i3727=0;i3727<(int)tmp.size();++i3727) {
        if( tmp[i3727] == FAIL ) {
          if(!( !next_prev3728.empty() && next_prev3728[0] == FAIL )) {
            next_prev3728.push_front(FAIL);
          }
        } else {
          next_prev3728.push_back(tmp[i3727]);
        }
      }
    }
    prev = next_prev3728;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3726=0;i3726<(int)prev.size();++i3726) {
    if( prev[i3726] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3726]);
    }
  }
  return memo[key(523,backtracking_ptr_for_packrat523)] = result;
}

inline deque<int> parse_slash3730() { 
  if(memo.count(key(524,i))) {
    return memo[key(524,i)];
  }
  int backtracking_ptr_for_packrat524=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (TypeVariable) */
    deque<int> next_prev3733;
    for(int i3732=0;i3732<(int)prev.size();++i3732) {
      if( prev[i3732] == FAIL ) {
        if(!(!next_prev3733.empty() && next_prev3733.front() == FAIL )) {
          next_prev3733.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3732];
      tmp = parse_TypeVariable();
      
      for(int i3732=0;i3732<(int)tmp.size();++i3732) {
        if( tmp[i3732] == FAIL ) {
          if(!( !next_prev3733.empty() && next_prev3733[0] == FAIL )) {
            next_prev3733.push_front(FAIL);
          }
        } else {
          next_prev3733.push_back(tmp[i3732]);
        }
      }
    }
    prev = next_prev3733;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3731=0;i3731<(int)prev.size();++i3731) {
    if( prev[i3731] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3731]);
    }
  }
  return memo[key(524,backtracking_ptr_for_packrat524)] = result;
}

inline deque<int> parse_slash3738() { 
  if(memo.count(key(525,i))) {
    return memo[key(525,i)];
  }
  int backtracking_ptr_for_packrat525=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotations) */
    deque<int> next_prev3741;
    for(int i3740=0;i3740<(int)prev.size();++i3740) {
      if( prev[i3740] == FAIL ) {
        if(!(!next_prev3741.empty() && next_prev3741.front() == FAIL )) {
          next_prev3741.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3740];
      tmp = parse_Annotations();
      
      for(int i3740=0;i3740<(int)tmp.size();++i3740) {
        if( tmp[i3740] == FAIL ) {
          if(!( !next_prev3741.empty() && next_prev3741[0] == FAIL )) {
            next_prev3741.push_front(FAIL);
          }
        } else {
          next_prev3741.push_back(tmp[i3740]);
        }
      }
    }
    prev = next_prev3741;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3739=0;i3739<(int)prev.size();++i3739) {
    if( prev[i3739] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3739]);
    }
  }
  return memo[key(525,backtracking_ptr_for_packrat525)] = result;
}

inline deque<int> parse_slash3743() { 
  if(memo.count(key(526,i))) {
    return memo[key(526,i)];
  }
  int backtracking_ptr_for_packrat526=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i3744=0;i3744<(int)prev.size();++i3744) {
    if( prev[i3744] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3744]);
    }
  }
  return memo[key(526,backtracking_ptr_for_packrat526)] = result;
}

inline deque<int> parse_while3752() { 
  if(memo.count(key(527,i))) {
    return memo[key(527,i)];
  }
  int backtracking_ptr_for_packrat527=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev3755;
    deque<int> prioritized_choice_final_prev3756;
    next_prev3755.clear();
    for(int i3754=0;i3754<(int)prev.size();++i3754) {
      i = prev[i3754];
      tmp = parse_slash3757();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3755.push_back(prev[i3754]); }
      for(int i3761=0;i3761<(int)tmp.size();++i3761) {
        if( tmp[i3761] != FAIL ) {
          prioritized_choice_final_prev3756.push_back(tmp[i3761]);
        }
      }
    }
    prev = next_prev3755;
    next_prev3755.clear();
    for(int i3754=0;i3754<(int)prev.size();++i3754) {
      i = prev[i3754];
      tmp = parse_slash3762();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3755.push_back(prev[i3754]); }
      for(int i3764=0;i3764<(int)tmp.size();++i3764) {
        if( tmp[i3764] != FAIL ) {
          prioritized_choice_final_prev3756.push_back(tmp[i3764]);
        }
      }
    }
    prev = next_prev3755;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev3756.empty() && prioritized_choice_final_prev3756.front() == FAIL )) {
        prioritized_choice_final_prev3756.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev3756;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3765=0;i3765<(int)prev.size();++i3765) {
        if( prev[i3765] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3765]<m&&I[prev[i3765]]=='[') {
          tmp.push_back(prev[i3765]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3767;
      for(int i3766=0;i3766<(int)prev.size();++i3766) {
        if( prev[i3766] == FAIL ) {
          if(!(!next_prev3767.empty() && next_prev3767.front() == FAIL )) {
            next_prev3767.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3766];
        tmp = parse__();
        
        for(int i3766=0;i3766<(int)tmp.size();++i3766) {
          if( tmp[i3766] == FAIL ) {
            if(!( !next_prev3767.empty() && next_prev3767[0] == FAIL )) {
              next_prev3767.push_front(FAIL);
            }
          } else {
            next_prev3767.push_back(tmp[i3766]);
          }
        }
      }
      prev = next_prev3767;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3768=0;i3768<(int)prev.size();++i3768) {
        if( prev[i3768] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3768]<m&&I[prev[i3768]]==']') {
          tmp.push_back(prev[i3768]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3770;
      for(int i3769=0;i3769<(int)prev.size();++i3769) {
        if( prev[i3769] == FAIL ) {
          if(!(!next_prev3770.empty() && next_prev3770.front() == FAIL )) {
            next_prev3770.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3769];
        tmp = parse__();
        
        for(int i3769=0;i3769<(int)tmp.size();++i3769) {
          if( tmp[i3769] == FAIL ) {
            if(!( !next_prev3770.empty() && next_prev3770[0] == FAIL )) {
              next_prev3770.push_front(FAIL);
            }
          } else {
            next_prev3770.push_back(tmp[i3769]);
          }
        }
      }
      prev = next_prev3770;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3753=0;i3753<(int)prev.size();++i3753) {
    if( prev[i3753] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3753]);
    }
  }
  return memo[key(527,backtracking_ptr_for_packrat527)] = result;
}

inline deque<int> parse_slash3757() { 
  if(memo.count(key(528,i))) {
    return memo[key(528,i)];
  }
  int backtracking_ptr_for_packrat528=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotations) */
    deque<int> next_prev3760;
    for(int i3759=0;i3759<(int)prev.size();++i3759) {
      if( prev[i3759] == FAIL ) {
        if(!(!next_prev3760.empty() && next_prev3760.front() == FAIL )) {
          next_prev3760.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3759];
      tmp = parse_Annotations();
      
      for(int i3759=0;i3759<(int)tmp.size();++i3759) {
        if( tmp[i3759] == FAIL ) {
          if(!( !next_prev3760.empty() && next_prev3760[0] == FAIL )) {
            next_prev3760.push_front(FAIL);
          }
        } else {
          next_prev3760.push_back(tmp[i3759]);
        }
      }
    }
    prev = next_prev3760;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3758=0;i3758<(int)prev.size();++i3758) {
    if( prev[i3758] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3758]);
    }
  }
  return memo[key(528,backtracking_ptr_for_packrat528)] = result;
}

inline deque<int> parse_slash3762() { 
  if(memo.count(key(529,i))) {
    return memo[key(529,i)];
  }
  int backtracking_ptr_for_packrat529=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i3763=0;i3763<(int)prev.size();++i3763) {
    if( prev[i3763] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3763]);
    }
  }
  return memo[key(529,backtracking_ptr_for_packrat529)] = result;
}

deque<int> parse_ClassOrInterfaceType(){
  if(memo.count(key(530,i))) {
    return memo[key(530,i)];
  }
  int backtracking_ptr_for_packrat530=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev3777;
  deque<int> prioritized_choice_final_prev3778;
  next_prev3777.clear();
  for(int i3776=0;i3776<(int)prev.size();++i3776) {
    i = prev[i3776];
    tmp = parse_slash3779();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3777.push_back(prev[i3776]); }
    for(int i3783=0;i3783<(int)tmp.size();++i3783) {
      if( tmp[i3783] != FAIL ) {
        prioritized_choice_final_prev3778.push_back(tmp[i3783]);
      }
    }
  }
  prev = next_prev3777;
  next_prev3777.clear();
  for(int i3776=0;i3776<(int)prev.size();++i3776) {
    i = prev[i3776];
    tmp = parse_slash3784();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3777.push_back(prev[i3776]); }
    for(int i3788=0;i3788<(int)tmp.size();++i3788) {
      if( tmp[i3788] != FAIL ) {
        prioritized_choice_final_prev3778.push_back(tmp[i3788]);
      }
    }
  }
  prev = next_prev3777;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev3778.empty() && prioritized_choice_final_prev3778.front() == FAIL )) {
      prioritized_choice_final_prev3778.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev3778;
  for(int i3775=0;i3775<(int)prev.size();++i3775) {
    if( prev[i3775] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3775]);
    }
  }
  return memo[key(530,backtracking_ptr_for_packrat530)] = result;
}

inline deque<int> parse_slash3779() { 
  if(memo.count(key(531,i))) {
    return memo[key(531,i)];
  }
  int backtracking_ptr_for_packrat531=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassType) */
    deque<int> next_prev3782;
    for(int i3781=0;i3781<(int)prev.size();++i3781) {
      if( prev[i3781] == FAIL ) {
        if(!(!next_prev3782.empty() && next_prev3782.front() == FAIL )) {
          next_prev3782.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3781];
      tmp = parse_ClassType();
      
      for(int i3781=0;i3781<(int)tmp.size();++i3781) {
        if( tmp[i3781] == FAIL ) {
          if(!( !next_prev3782.empty() && next_prev3782[0] == FAIL )) {
            next_prev3782.push_front(FAIL);
          }
        } else {
          next_prev3782.push_back(tmp[i3781]);
        }
      }
    }
    prev = next_prev3782;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3780=0;i3780<(int)prev.size();++i3780) {
    if( prev[i3780] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3780]);
    }
  }
  return memo[key(531,backtracking_ptr_for_packrat531)] = result;
}

inline deque<int> parse_slash3784() { 
  if(memo.count(key(532,i))) {
    return memo[key(532,i)];
  }
  int backtracking_ptr_for_packrat532=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (InterfaceType) */
    deque<int> next_prev3787;
    for(int i3786=0;i3786<(int)prev.size();++i3786) {
      if( prev[i3786] == FAIL ) {
        if(!(!next_prev3787.empty() && next_prev3787.front() == FAIL )) {
          next_prev3787.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3786];
      tmp = parse_InterfaceType();
      
      for(int i3786=0;i3786<(int)tmp.size();++i3786) {
        if( tmp[i3786] == FAIL ) {
          if(!( !next_prev3787.empty() && next_prev3787[0] == FAIL )) {
            next_prev3787.push_front(FAIL);
          }
        } else {
          next_prev3787.push_back(tmp[i3786]);
        }
      }
    }
    prev = next_prev3787;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3785=0;i3785<(int)prev.size();++i3785) {
    if( prev[i3785] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3785]);
    }
  }
  return memo[key(532,backtracking_ptr_for_packrat532)] = result;
}

deque<int> parse_ClassType(){
  if(memo.count(key(533,i))) {
    return memo[key(533,i)];
  }
  int backtracking_ptr_for_packrat533=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (QualifiedName) */
    deque<int> next_prev3791;
    for(int i3790=0;i3790<(int)prev.size();++i3790) {
      if( prev[i3790] == FAIL ) {
        if(!(!next_prev3791.empty() && next_prev3791.front() == FAIL )) {
          next_prev3791.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3790];
      tmp = parse_QualifiedName();
      
      for(int i3790=0;i3790<(int)tmp.size();++i3790) {
        if( tmp[i3790] == FAIL ) {
          if(!( !next_prev3791.empty() && next_prev3791[0] == FAIL )) {
            next_prev3791.push_front(FAIL);
          }
        } else {
          next_prev3791.push_back(tmp[i3790]);
        }
      }
    }
    prev = next_prev3791;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev3793;
    deque<int> prioritized_choice_final_prev3794;
    next_prev3793.clear();
    for(int i3792=0;i3792<(int)prev.size();++i3792) {
      i = prev[i3792];
      tmp = parse_slash3795();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3793.push_back(prev[i3792]); }
      for(int i3799=0;i3799<(int)tmp.size();++i3799) {
        if( tmp[i3799] != FAIL ) {
          prioritized_choice_final_prev3794.push_back(tmp[i3799]);
        }
      }
    }
    prev = next_prev3793;
    next_prev3793.clear();
    for(int i3792=0;i3792<(int)prev.size();++i3792) {
      i = prev[i3792];
      tmp = parse_slash3800();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3793.push_back(prev[i3792]); }
      for(int i3802=0;i3802<(int)tmp.size();++i3802) {
        if( tmp[i3802] != FAIL ) {
          prioritized_choice_final_prev3794.push_back(tmp[i3802]);
        }
      }
    }
    prev = next_prev3793;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev3794.empty() && prioritized_choice_final_prev3794.front() == FAIL )) {
        prioritized_choice_final_prev3794.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev3794;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3789=0;i3789<(int)prev.size();++i3789) {
    if( prev[i3789] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3789]);
    }
  }
  return memo[key(533,backtracking_ptr_for_packrat533)] = result;
}

inline deque<int> parse_slash3795() { 
  if(memo.count(key(534,i))) {
    return memo[key(534,i)];
  }
  int backtracking_ptr_for_packrat534=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (TypeArguments) */
    deque<int> next_prev3798;
    for(int i3797=0;i3797<(int)prev.size();++i3797) {
      if( prev[i3797] == FAIL ) {
        if(!(!next_prev3798.empty() && next_prev3798.front() == FAIL )) {
          next_prev3798.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3797];
      tmp = parse_TypeArguments();
      
      for(int i3797=0;i3797<(int)tmp.size();++i3797) {
        if( tmp[i3797] == FAIL ) {
          if(!( !next_prev3798.empty() && next_prev3798[0] == FAIL )) {
            next_prev3798.push_front(FAIL);
          }
        } else {
          next_prev3798.push_back(tmp[i3797]);
        }
      }
    }
    prev = next_prev3798;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3796=0;i3796<(int)prev.size();++i3796) {
    if( prev[i3796] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3796]);
    }
  }
  return memo[key(534,backtracking_ptr_for_packrat534)] = result;
}

inline deque<int> parse_slash3800() { 
  if(memo.count(key(535,i))) {
    return memo[key(535,i)];
  }
  int backtracking_ptr_for_packrat535=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i3801=0;i3801<(int)prev.size();++i3801) {
    if( prev[i3801] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3801]);
    }
  }
  return memo[key(535,backtracking_ptr_for_packrat535)] = result;
}

deque<int> parse_InterfaceType(){
  if(memo.count(key(536,i))) {
    return memo[key(536,i)];
  }
  int backtracking_ptr_for_packrat536=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassType) */
    deque<int> next_prev3805;
    for(int i3804=0;i3804<(int)prev.size();++i3804) {
      if( prev[i3804] == FAIL ) {
        if(!(!next_prev3805.empty() && next_prev3805.front() == FAIL )) {
          next_prev3805.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3804];
      tmp = parse_ClassType();
      
      for(int i3804=0;i3804<(int)tmp.size();++i3804) {
        if( tmp[i3804] == FAIL ) {
          if(!( !next_prev3805.empty() && next_prev3805[0] == FAIL )) {
            next_prev3805.push_front(FAIL);
          }
        } else {
          next_prev3805.push_back(tmp[i3804]);
        }
      }
    }
    prev = next_prev3805;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3803=0;i3803<(int)prev.size();++i3803) {
    if( prev[i3803] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3803]);
    }
  }
  return memo[key(536,backtracking_ptr_for_packrat536)] = result;
}

deque<int> parse_TypeVariable(){
  if(memo.count(key(537,i))) {
    return memo[key(537,i)];
  }
  int backtracking_ptr_for_packrat537=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev3808;
  deque<int> prioritized_choice_final_prev3809;
  next_prev3808.clear();
  for(int i3807=0;i3807<(int)prev.size();++i3807) {
    i = prev[i3807];
    tmp = parse_slash3810();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3808.push_back(prev[i3807]); }
    for(int i3816=0;i3816<(int)tmp.size();++i3816) {
      if( tmp[i3816] != FAIL ) {
        prioritized_choice_final_prev3809.push_back(tmp[i3816]);
      }
    }
  }
  prev = next_prev3808;
  next_prev3808.clear();
  for(int i3807=0;i3807<(int)prev.size();++i3807) {
    i = prev[i3807];
    tmp = parse_slash3817();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3808.push_back(prev[i3807]); }
    for(int i3821=0;i3821<(int)tmp.size();++i3821) {
      if( tmp[i3821] != FAIL ) {
        prioritized_choice_final_prev3809.push_back(tmp[i3821]);
      }
    }
  }
  prev = next_prev3808;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev3809.empty() && prioritized_choice_final_prev3809.front() == FAIL )) {
      prioritized_choice_final_prev3809.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev3809;
  for(int i3806=0;i3806<(int)prev.size();++i3806) {
    if( prev[i3806] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3806]);
    }
  }
  return memo[key(537,backtracking_ptr_for_packrat537)] = result;
}

inline deque<int> parse_slash3810() { 
  if(memo.count(key(538,i))) {
    return memo[key(538,i)];
  }
  int backtracking_ptr_for_packrat538=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotations) */
    deque<int> next_prev3813;
    for(int i3812=0;i3812<(int)prev.size();++i3812) {
      if( prev[i3812] == FAIL ) {
        if(!(!next_prev3813.empty() && next_prev3813.front() == FAIL )) {
          next_prev3813.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3812];
      tmp = parse_Annotations();
      
      for(int i3812=0;i3812<(int)tmp.size();++i3812) {
        if( tmp[i3812] == FAIL ) {
          if(!( !next_prev3813.empty() && next_prev3813[0] == FAIL )) {
            next_prev3813.push_front(FAIL);
          }
        } else {
          next_prev3813.push_back(tmp[i3812]);
        }
      }
    }
    prev = next_prev3813;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev3815;
    for(int i3814=0;i3814<(int)prev.size();++i3814) {
      if( prev[i3814] == FAIL ) {
        if(!(!next_prev3815.empty() && next_prev3815.front() == FAIL )) {
          next_prev3815.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3814];
      tmp = parse_Identifier();
      
      for(int i3814=0;i3814<(int)tmp.size();++i3814) {
        if( tmp[i3814] == FAIL ) {
          if(!( !next_prev3815.empty() && next_prev3815[0] == FAIL )) {
            next_prev3815.push_front(FAIL);
          }
        } else {
          next_prev3815.push_back(tmp[i3814]);
        }
      }
    }
    prev = next_prev3815;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3811=0;i3811<(int)prev.size();++i3811) {
    if( prev[i3811] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3811]);
    }
  }
  return memo[key(538,backtracking_ptr_for_packrat538)] = result;
}

inline deque<int> parse_slash3817() { 
  if(memo.count(key(539,i))) {
    return memo[key(539,i)];
  }
  int backtracking_ptr_for_packrat539=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev3820;
    for(int i3819=0;i3819<(int)prev.size();++i3819) {
      if( prev[i3819] == FAIL ) {
        if(!(!next_prev3820.empty() && next_prev3820.front() == FAIL )) {
          next_prev3820.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3819];
      tmp = parse_Identifier();
      
      for(int i3819=0;i3819<(int)tmp.size();++i3819) {
        if( tmp[i3819] == FAIL ) {
          if(!( !next_prev3820.empty() && next_prev3820[0] == FAIL )) {
            next_prev3820.push_front(FAIL);
          }
        } else {
          next_prev3820.push_back(tmp[i3819]);
        }
      }
    }
    prev = next_prev3820;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3818=0;i3818<(int)prev.size();++i3818) {
    if( prev[i3818] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3818]);
    }
  }
  return memo[key(539,backtracking_ptr_for_packrat539)] = result;
}

deque<int> parse_TypeParameter(){
  if(memo.count(key(540,i))) {
    return memo[key(540,i)];
  }
  int backtracking_ptr_for_packrat540=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev3824;
  deque<int> prioritized_choice_final_prev3825;
  next_prev3824.clear();
  for(int i3823=0;i3823<(int)prev.size();++i3823) {
    i = prev[i3823];
    tmp = parse_slash3826();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3824.push_back(prev[i3823]); }
    for(int i3832=0;i3832<(int)tmp.size();++i3832) {
      if( tmp[i3832] != FAIL ) {
        prioritized_choice_final_prev3825.push_back(tmp[i3832]);
      }
    }
  }
  prev = next_prev3824;
  next_prev3824.clear();
  for(int i3823=0;i3823<(int)prev.size();++i3823) {
    i = prev[i3823];
    tmp = parse_slash3833();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3824.push_back(prev[i3823]); }
    for(int i3837=0;i3837<(int)tmp.size();++i3837) {
      if( tmp[i3837] != FAIL ) {
        prioritized_choice_final_prev3825.push_back(tmp[i3837]);
      }
    }
  }
  prev = next_prev3824;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev3825.empty() && prioritized_choice_final_prev3825.front() == FAIL )) {
      prioritized_choice_final_prev3825.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev3825;
  for(int i3822=0;i3822<(int)prev.size();++i3822) {
    if( prev[i3822] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3822]);
    }
  }
  return memo[key(540,backtracking_ptr_for_packrat540)] = result;
}

inline deque<int> parse_slash3826() { 
  if(memo.count(key(541,i))) {
    return memo[key(541,i)];
  }
  int backtracking_ptr_for_packrat541=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotations) */
    deque<int> next_prev3829;
    for(int i3828=0;i3828<(int)prev.size();++i3828) {
      if( prev[i3828] == FAIL ) {
        if(!(!next_prev3829.empty() && next_prev3829.front() == FAIL )) {
          next_prev3829.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3828];
      tmp = parse_Annotations();
      
      for(int i3828=0;i3828<(int)tmp.size();++i3828) {
        if( tmp[i3828] == FAIL ) {
          if(!( !next_prev3829.empty() && next_prev3829[0] == FAIL )) {
            next_prev3829.push_front(FAIL);
          }
        } else {
          next_prev3829.push_back(tmp[i3828]);
        }
      }
    }
    prev = next_prev3829;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (UnannoTypeParameter) */
    deque<int> next_prev3831;
    for(int i3830=0;i3830<(int)prev.size();++i3830) {
      if( prev[i3830] == FAIL ) {
        if(!(!next_prev3831.empty() && next_prev3831.front() == FAIL )) {
          next_prev3831.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3830];
      tmp = parse_UnannoTypeParameter();
      
      for(int i3830=0;i3830<(int)tmp.size();++i3830) {
        if( tmp[i3830] == FAIL ) {
          if(!( !next_prev3831.empty() && next_prev3831[0] == FAIL )) {
            next_prev3831.push_front(FAIL);
          }
        } else {
          next_prev3831.push_back(tmp[i3830]);
        }
      }
    }
    prev = next_prev3831;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3827=0;i3827<(int)prev.size();++i3827) {
    if( prev[i3827] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3827]);
    }
  }
  return memo[key(541,backtracking_ptr_for_packrat541)] = result;
}

inline deque<int> parse_slash3833() { 
  if(memo.count(key(542,i))) {
    return memo[key(542,i)];
  }
  int backtracking_ptr_for_packrat542=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (UnannoTypeParameter) */
    deque<int> next_prev3836;
    for(int i3835=0;i3835<(int)prev.size();++i3835) {
      if( prev[i3835] == FAIL ) {
        if(!(!next_prev3836.empty() && next_prev3836.front() == FAIL )) {
          next_prev3836.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3835];
      tmp = parse_UnannoTypeParameter();
      
      for(int i3835=0;i3835<(int)tmp.size();++i3835) {
        if( tmp[i3835] == FAIL ) {
          if(!( !next_prev3836.empty() && next_prev3836[0] == FAIL )) {
            next_prev3836.push_front(FAIL);
          }
        } else {
          next_prev3836.push_back(tmp[i3835]);
        }
      }
    }
    prev = next_prev3836;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3834=0;i3834<(int)prev.size();++i3834) {
    if( prev[i3834] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3834]);
    }
  }
  return memo[key(542,backtracking_ptr_for_packrat542)] = result;
}

deque<int> parse_UnannoTypeParameter(){
  if(memo.count(key(543,i))) {
    return memo[key(543,i)];
  }
  int backtracking_ptr_for_packrat543=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev3840;
    for(int i3839=0;i3839<(int)prev.size();++i3839) {
      if( prev[i3839] == FAIL ) {
        if(!(!next_prev3840.empty() && next_prev3840.front() == FAIL )) {
          next_prev3840.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3839];
      tmp = parse_Identifier();
      
      for(int i3839=0;i3839<(int)tmp.size();++i3839) {
        if( tmp[i3839] == FAIL ) {
          if(!( !next_prev3840.empty() && next_prev3840[0] == FAIL )) {
            next_prev3840.push_front(FAIL);
          }
        } else {
          next_prev3840.push_back(tmp[i3839]);
        }
      }
    }
    prev = next_prev3840;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev3842;
    deque<int> prioritized_choice_final_prev3843;
    next_prev3842.clear();
    for(int i3841=0;i3841<(int)prev.size();++i3841) {
      i = prev[i3841];
      tmp = parse_slash3844();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3842.push_back(prev[i3841]); }
      for(int i3879=0;i3879<(int)tmp.size();++i3879) {
        if( tmp[i3879] != FAIL ) {
          prioritized_choice_final_prev3843.push_back(tmp[i3879]);
        }
      }
    }
    prev = next_prev3842;
    next_prev3842.clear();
    for(int i3841=0;i3841<(int)prev.size();++i3841) {
      i = prev[i3841];
      tmp = parse_slash3880();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3842.push_back(prev[i3841]); }
      for(int i3882=0;i3882<(int)tmp.size();++i3882) {
        if( tmp[i3882] != FAIL ) {
          prioritized_choice_final_prev3843.push_back(tmp[i3882]);
        }
      }
    }
    prev = next_prev3842;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev3843.empty() && prioritized_choice_final_prev3843.front() == FAIL )) {
        prioritized_choice_final_prev3843.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev3843;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3838=0;i3838<(int)prev.size();++i3838) {
    if( prev[i3838] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3838]);
    }
  }
  return memo[key(543,backtracking_ptr_for_packrat543)] = result;
}

inline deque<int> parse_slash3844() { 
  if(memo.count(key(544,i))) {
    return memo[key(544,i)];
  }
  int backtracking_ptr_for_packrat544=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3846=0;i3846<(int)prev.size();++i3846) {
        if( prev[i3846] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3846]<m&&I[prev[i3846]]=='e') {
          tmp.push_back(prev[i3846]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3847=0;i3847<(int)prev.size();++i3847) {
        if( prev[i3847] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3847]<m&&I[prev[i3847]]=='x') {
          tmp.push_back(prev[i3847]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3848=0;i3848<(int)prev.size();++i3848) {
        if( prev[i3848] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3848]<m&&I[prev[i3848]]=='t') {
          tmp.push_back(prev[i3848]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3849=0;i3849<(int)prev.size();++i3849) {
        if( prev[i3849] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3849]<m&&I[prev[i3849]]=='e') {
          tmp.push_back(prev[i3849]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3850=0;i3850<(int)prev.size();++i3850) {
        if( prev[i3850] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3850]<m&&I[prev[i3850]]=='n') {
          tmp.push_back(prev[i3850]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3851=0;i3851<(int)prev.size();++i3851) {
        if( prev[i3851] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3851]<m&&I[prev[i3851]]=='d') {
          tmp.push_back(prev[i3851]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3852=0;i3852<(int)prev.size();++i3852) {
        if( prev[i3852] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3852]<m&&I[prev[i3852]]=='s') {
          tmp.push_back(prev[i3852]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev3858;
      for(int i3857=0;i3857<(int)prev.size();++i3857) {
        i = prev[i3857];
        tmp = parse_not3853();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev3858.push_back(prev[i3857]);
        } else {
          if(!(!next_prev3858.empty()&&next_prev3858.front()==FAIL)) {
            next_prev3858.push_front(FAIL);
          }
        }
      }
      prev = next_prev3858;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3860;
      for(int i3859=0;i3859<(int)prev.size();++i3859) {
        if( prev[i3859] == FAIL ) {
          if(!(!next_prev3860.empty() && next_prev3860.front() == FAIL )) {
            next_prev3860.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3859];
        tmp = parse__();
        
        for(int i3859=0;i3859<(int)tmp.size();++i3859) {
          if( tmp[i3859] == FAIL ) {
            if(!( !next_prev3860.empty() && next_prev3860[0] == FAIL )) {
              next_prev3860.push_front(FAIL);
            }
          } else {
            next_prev3860.push_back(tmp[i3859]);
          }
        }
      }
      prev = next_prev3860;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassOrInterfaceType) */
    deque<int> next_prev3862;
    for(int i3861=0;i3861<(int)prev.size();++i3861) {
      if( prev[i3861] == FAIL ) {
        if(!(!next_prev3862.empty() && next_prev3862.front() == FAIL )) {
          next_prev3862.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3861];
      tmp = parse_ClassOrInterfaceType();
      
      for(int i3861=0;i3861<(int)tmp.size();++i3861) {
        if( tmp[i3861] == FAIL ) {
          if(!( !next_prev3862.empty() && next_prev3862[0] == FAIL )) {
            next_prev3862.push_front(FAIL);
          }
        } else {
          next_prev3862.push_back(tmp[i3861]);
        }
      }
    }
    prev = next_prev3862;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev3875;
    deque<int> star_final_prev3876;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev3875.clear();
      for(int i3877=0;i3877<(int)prev.size();++i3877) {
        i = prev[i3877];
        tmp = parse_while3863();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev3876.push_back(prev[i3877]);
        }
        for(int i3878=0;i3878<(int)tmp.size();++i3878) {
          if(tmp[i3878]==FAIL) {
            if(!( !next_prev3875.empty() && next_prev3875.front() == FAIL )) {
              next_prev3875.push_front(FAIL);
            }
          } else {
            next_prev3875.push_back(tmp[i3878]);
          }
        }
      }
      prev = next_prev3875;
    }
    prev = star_final_prev3876;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3845=0;i3845<(int)prev.size();++i3845) {
    if( prev[i3845] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3845]);
    }
  }
  return memo[key(544,backtracking_ptr_for_packrat544)] = result;
}

inline deque<int> parse_not3853() { 
  if(memo.count(key(545,i))) {
    return memo[key(545,i)];
  }
  int backtracking_ptr_for_packrat545=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev3856;
  for(int i3855=0;i3855<(int)prev.size();++i3855) {
    if( prev[i3855] == FAIL ) {
      if(!(!next_prev3856.empty() && next_prev3856.front() == FAIL )) {
        next_prev3856.push_front(FAIL);
      }
      continue;
    }
    i = prev[i3855];
    tmp = parse_W();
    
    for(int i3855=0;i3855<(int)tmp.size();++i3855) {
      if( tmp[i3855] == FAIL ) {
        if(!( !next_prev3856.empty() && next_prev3856[0] == FAIL )) {
          next_prev3856.push_front(FAIL);
        }
      } else {
        next_prev3856.push_back(tmp[i3855]);
      }
    }
  }
  prev = next_prev3856;
  for(int i3854=0;i3854<(int)prev.size();++i3854) {
    if( prev[i3854] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3854]);
    }
  }
  return memo[key(545,backtracking_ptr_for_packrat545)] = result;
}

inline deque<int> parse_while3863() { 
  if(memo.count(key(546,i))) {
    return memo[key(546,i)];
  }
  int backtracking_ptr_for_packrat546=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3865=0;i3865<(int)prev.size();++i3865) {
        if( prev[i3865] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3865]<m&&I[prev[i3865]]=='&') {
          tmp.push_back(prev[i3865]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev3870;
      for(int i3869=0;i3869<(int)prev.size();++i3869) {
        i = prev[i3869];
        tmp = parse_not3866();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev3870.push_back(prev[i3869]);
        } else {
          if(!(!next_prev3870.empty()&&next_prev3870.front()==FAIL)) {
            next_prev3870.push_front(FAIL);
          }
        }
      }
      prev = next_prev3870;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3872;
      for(int i3871=0;i3871<(int)prev.size();++i3871) {
        if( prev[i3871] == FAIL ) {
          if(!(!next_prev3872.empty() && next_prev3872.front() == FAIL )) {
            next_prev3872.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3871];
        tmp = parse__();
        
        for(int i3871=0;i3871<(int)tmp.size();++i3871) {
          if( tmp[i3871] == FAIL ) {
            if(!( !next_prev3872.empty() && next_prev3872[0] == FAIL )) {
              next_prev3872.push_front(FAIL);
            }
          } else {
            next_prev3872.push_back(tmp[i3871]);
          }
        }
      }
      prev = next_prev3872;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (InterfaceType) */
    deque<int> next_prev3874;
    for(int i3873=0;i3873<(int)prev.size();++i3873) {
      if( prev[i3873] == FAIL ) {
        if(!(!next_prev3874.empty() && next_prev3874.front() == FAIL )) {
          next_prev3874.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3873];
      tmp = parse_InterfaceType();
      
      for(int i3873=0;i3873<(int)tmp.size();++i3873) {
        if( tmp[i3873] == FAIL ) {
          if(!( !next_prev3874.empty() && next_prev3874[0] == FAIL )) {
            next_prev3874.push_front(FAIL);
          }
        } else {
          next_prev3874.push_back(tmp[i3873]);
        }
      }
    }
    prev = next_prev3874;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3864=0;i3864<(int)prev.size();++i3864) {
    if( prev[i3864] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3864]);
    }
  }
  return memo[key(546,backtracking_ptr_for_packrat546)] = result;
}

inline deque<int> parse_not3866() { 
  if(memo.count(key(547,i))) {
    return memo[key(547,i)];
  }
  int backtracking_ptr_for_packrat547=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i3868=0;i3868<(int)prev.size();++i3868) {
    if( prev[i3868] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i3868]<m&&(I[prev[i3868]]=='&'||I[prev[i3868]]=='=')) {
      tmp.push_back(prev[i3868]+1);
    } else {
      if(!( !tmp.empty() && tmp.front() == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i3867=0;i3867<(int)prev.size();++i3867) {
    if( prev[i3867] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3867]);
    }
  }
  return memo[key(547,backtracking_ptr_for_packrat547)] = result;
}

inline deque<int> parse_slash3880() { 
  if(memo.count(key(548,i))) {
    return memo[key(548,i)];
  }
  int backtracking_ptr_for_packrat548=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i3881=0;i3881<(int)prev.size();++i3881) {
    if( prev[i3881] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3881]);
    }
  }
  return memo[key(548,backtracking_ptr_for_packrat548)] = result;
}

deque<int> parse_TypeParameters(){
  if(memo.count(key(549,i))) {
    return memo[key(549,i)];
  }
  int backtracking_ptr_for_packrat549=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3884=0;i3884<(int)prev.size();++i3884) {
        if( prev[i3884] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3884]<m&&I[prev[i3884]]=='<') {
          tmp.push_back(prev[i3884]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev3889;
      for(int i3888=0;i3888<(int)prev.size();++i3888) {
        i = prev[i3888];
        tmp = parse_not3885();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev3889.push_back(prev[i3888]);
        } else {
          if(!(!next_prev3889.empty()&&next_prev3889.front()==FAIL)) {
            next_prev3889.push_front(FAIL);
          }
        }
      }
      prev = next_prev3889;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3891;
      for(int i3890=0;i3890<(int)prev.size();++i3890) {
        if( prev[i3890] == FAIL ) {
          if(!(!next_prev3891.empty() && next_prev3891.front() == FAIL )) {
            next_prev3891.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3890];
        tmp = parse__();
        
        for(int i3890=0;i3890<(int)tmp.size();++i3890) {
          if( tmp[i3890] == FAIL ) {
            if(!( !next_prev3891.empty() && next_prev3891[0] == FAIL )) {
              next_prev3891.push_front(FAIL);
            }
          } else {
            next_prev3891.push_back(tmp[i3890]);
          }
        }
      }
      prev = next_prev3891;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (TypeParameter) */
    deque<int> next_prev3893;
    for(int i3892=0;i3892<(int)prev.size();++i3892) {
      if( prev[i3892] == FAIL ) {
        if(!(!next_prev3893.empty() && next_prev3893.front() == FAIL )) {
          next_prev3893.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3892];
      tmp = parse_TypeParameter();
      
      for(int i3892=0;i3892<(int)tmp.size();++i3892) {
        if( tmp[i3892] == FAIL ) {
          if(!( !next_prev3893.empty() && next_prev3893[0] == FAIL )) {
            next_prev3893.push_front(FAIL);
          }
        } else {
          next_prev3893.push_back(tmp[i3892]);
        }
      }
    }
    prev = next_prev3893;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev3901;
    deque<int> star_final_prev3902;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev3901.clear();
      for(int i3903=0;i3903<(int)prev.size();++i3903) {
        i = prev[i3903];
        tmp = parse_while3894();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev3902.push_back(prev[i3903]);
        }
        for(int i3904=0;i3904<(int)tmp.size();++i3904) {
          if(tmp[i3904]==FAIL) {
            if(!( !next_prev3901.empty() && next_prev3901.front() == FAIL )) {
              next_prev3901.push_front(FAIL);
            }
          } else {
            next_prev3901.push_back(tmp[i3904]);
          }
        }
      }
      prev = next_prev3901;
    }
    prev = star_final_prev3902;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3905=0;i3905<(int)prev.size();++i3905) {
        if( prev[i3905] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3905]<m&&I[prev[i3905]]=='>') {
          tmp.push_back(prev[i3905]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev3910;
      for(int i3909=0;i3909<(int)prev.size();++i3909) {
        i = prev[i3909];
        tmp = parse_not3906();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev3910.push_back(prev[i3909]);
        } else {
          if(!(!next_prev3910.empty()&&next_prev3910.front()==FAIL)) {
            next_prev3910.push_front(FAIL);
          }
        }
      }
      prev = next_prev3910;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3912;
      for(int i3911=0;i3911<(int)prev.size();++i3911) {
        if( prev[i3911] == FAIL ) {
          if(!(!next_prev3912.empty() && next_prev3912.front() == FAIL )) {
            next_prev3912.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3911];
        tmp = parse__();
        
        for(int i3911=0;i3911<(int)tmp.size();++i3911) {
          if( tmp[i3911] == FAIL ) {
            if(!( !next_prev3912.empty() && next_prev3912[0] == FAIL )) {
              next_prev3912.push_front(FAIL);
            }
          } else {
            next_prev3912.push_back(tmp[i3911]);
          }
        }
      }
      prev = next_prev3912;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3883=0;i3883<(int)prev.size();++i3883) {
    if( prev[i3883] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3883]);
    }
  }
  return memo[key(549,backtracking_ptr_for_packrat549)] = result;
}

inline deque<int> parse_not3885() { 
  if(memo.count(key(550,i))) {
    return memo[key(550,i)];
  }
  int backtracking_ptr_for_packrat550=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i3887=0;i3887<(int)prev.size();++i3887) {
    if( prev[i3887] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i3887]<m&&(I[prev[i3887]]=='=')) {
      tmp.push_back(prev[i3887]+1);
    } else {
      if(!( !tmp.empty() && tmp.front() == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i3886=0;i3886<(int)prev.size();++i3886) {
    if( prev[i3886] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3886]);
    }
  }
  return memo[key(550,backtracking_ptr_for_packrat550)] = result;
}

inline deque<int> parse_while3894() { 
  if(memo.count(key(551,i))) {
    return memo[key(551,i)];
  }
  int backtracking_ptr_for_packrat551=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3896=0;i3896<(int)prev.size();++i3896) {
        if( prev[i3896] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3896]<m&&I[prev[i3896]]==',') {
          tmp.push_back(prev[i3896]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3898;
      for(int i3897=0;i3897<(int)prev.size();++i3897) {
        if( prev[i3897] == FAIL ) {
          if(!(!next_prev3898.empty() && next_prev3898.front() == FAIL )) {
            next_prev3898.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3897];
        tmp = parse__();
        
        for(int i3897=0;i3897<(int)tmp.size();++i3897) {
          if( tmp[i3897] == FAIL ) {
            if(!( !next_prev3898.empty() && next_prev3898[0] == FAIL )) {
              next_prev3898.push_front(FAIL);
            }
          } else {
            next_prev3898.push_back(tmp[i3897]);
          }
        }
      }
      prev = next_prev3898;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (TypeParameter) */
    deque<int> next_prev3900;
    for(int i3899=0;i3899<(int)prev.size();++i3899) {
      if( prev[i3899] == FAIL ) {
        if(!(!next_prev3900.empty() && next_prev3900.front() == FAIL )) {
          next_prev3900.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3899];
      tmp = parse_TypeParameter();
      
      for(int i3899=0;i3899<(int)tmp.size();++i3899) {
        if( tmp[i3899] == FAIL ) {
          if(!( !next_prev3900.empty() && next_prev3900[0] == FAIL )) {
            next_prev3900.push_front(FAIL);
          }
        } else {
          next_prev3900.push_back(tmp[i3899]);
        }
      }
    }
    prev = next_prev3900;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3895=0;i3895<(int)prev.size();++i3895) {
    if( prev[i3895] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3895]);
    }
  }
  return memo[key(551,backtracking_ptr_for_packrat551)] = result;
}

inline deque<int> parse_not3906() { 
  if(memo.count(key(552,i))) {
    return memo[key(552,i)];
  }
  int backtracking_ptr_for_packrat552=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i3908=0;i3908<(int)prev.size();++i3908) {
    if( prev[i3908] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i3908]<m&&(I[prev[i3908]]=='=')) {
      tmp.push_back(prev[i3908]+1);
    } else {
      if(!( !tmp.empty() && tmp.front() == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i3907=0;i3907<(int)prev.size();++i3907) {
    if( prev[i3907] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3907]);
    }
  }
  return memo[key(552,backtracking_ptr_for_packrat552)] = result;
}

deque<int> parse_TypeArgument(){
  if(memo.count(key(553,i))) {
    return memo[key(553,i)];
  }
  int backtracking_ptr_for_packrat553=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev3915;
  deque<int> prioritized_choice_final_prev3916;
  next_prev3915.clear();
  for(int i3914=0;i3914<(int)prev.size();++i3914) {
    i = prev[i3914];
    tmp = parse_slash3917();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3915.push_back(prev[i3914]); }
    for(int i3921=0;i3921<(int)tmp.size();++i3921) {
      if( tmp[i3921] != FAIL ) {
        prioritized_choice_final_prev3916.push_back(tmp[i3921]);
      }
    }
  }
  prev = next_prev3915;
  next_prev3915.clear();
  for(int i3914=0;i3914<(int)prev.size();++i3914) {
    i = prev[i3914];
    tmp = parse_slash3922();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3915.push_back(prev[i3914]); }
    for(int i3986=0;i3986<(int)tmp.size();++i3986) {
      if( tmp[i3986] != FAIL ) {
        prioritized_choice_final_prev3916.push_back(tmp[i3986]);
      }
    }
  }
  prev = next_prev3915;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev3916.empty() && prioritized_choice_final_prev3916.front() == FAIL )) {
      prioritized_choice_final_prev3916.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev3916;
  for(int i3913=0;i3913<(int)prev.size();++i3913) {
    if( prev[i3913] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3913]);
    }
  }
  return memo[key(553,backtracking_ptr_for_packrat553)] = result;
}

inline deque<int> parse_slash3917() { 
  if(memo.count(key(554,i))) {
    return memo[key(554,i)];
  }
  int backtracking_ptr_for_packrat554=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ReferenceType) */
    deque<int> next_prev3920;
    for(int i3919=0;i3919<(int)prev.size();++i3919) {
      if( prev[i3919] == FAIL ) {
        if(!(!next_prev3920.empty() && next_prev3920.front() == FAIL )) {
          next_prev3920.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3919];
      tmp = parse_ReferenceType();
      
      for(int i3919=0;i3919<(int)tmp.size();++i3919) {
        if( tmp[i3919] == FAIL ) {
          if(!( !next_prev3920.empty() && next_prev3920[0] == FAIL )) {
            next_prev3920.push_front(FAIL);
          }
        } else {
          next_prev3920.push_back(tmp[i3919]);
        }
      }
    }
    prev = next_prev3920;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3918=0;i3918<(int)prev.size();++i3918) {
    if( prev[i3918] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3918]);
    }
  }
  return memo[key(554,backtracking_ptr_for_packrat554)] = result;
}

inline deque<int> parse_slash3922() { 
  if(memo.count(key(555,i))) {
    return memo[key(555,i)];
  }
  int backtracking_ptr_for_packrat555=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Prioritized Choice */
      deque<int> next_prev3925;
      deque<int> prioritized_choice_final_prev3926;
      next_prev3925.clear();
      for(int i3924=0;i3924<(int)prev.size();++i3924) {
        i = prev[i3924];
        tmp = parse_slash3927();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3925.push_back(prev[i3924]); }
        for(int i3931=0;i3931<(int)tmp.size();++i3931) {
          if( tmp[i3931] != FAIL ) {
            prioritized_choice_final_prev3926.push_back(tmp[i3931]);
          }
        }
      }
      prev = next_prev3925;
      next_prev3925.clear();
      for(int i3924=0;i3924<(int)prev.size();++i3924) {
        i = prev[i3924];
        tmp = parse_slash3932();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3925.push_back(prev[i3924]); }
        for(int i3934=0;i3934<(int)tmp.size();++i3934) {
          if( tmp[i3934] != FAIL ) {
            prioritized_choice_final_prev3926.push_back(tmp[i3934]);
          }
        }
      }
      prev = next_prev3925;
      if(!prev.empty()) {
        if(!(!prioritized_choice_final_prev3926.empty() && prioritized_choice_final_prev3926.front() == FAIL )) {
          prioritized_choice_final_prev3926.push_front(FAIL);
        }
      }
      prev = prioritized_choice_final_prev3926;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        tmp.clear();
        for(int i3935=0;i3935<(int)prev.size();++i3935) {
          if( prev[i3935] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i3935]<m&&I[prev[i3935]]=='?') {
            tmp.push_back(prev[i3935]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Nonterminal (_) */
        deque<int> next_prev3937;
        for(int i3936=0;i3936<(int)prev.size();++i3936) {
          if( prev[i3936] == FAIL ) {
            if(!(!next_prev3937.empty() && next_prev3937.front() == FAIL )) {
              next_prev3937.push_front(FAIL);
            }
            continue;
          }
          i = prev[i3936];
          tmp = parse__();
          
          for(int i3936=0;i3936<(int)tmp.size();++i3936) {
            if( tmp[i3936] == FAIL ) {
              if(!( !next_prev3937.empty() && next_prev3937[0] == FAIL )) {
                next_prev3937.push_front(FAIL);
              }
            } else {
              next_prev3937.push_back(tmp[i3936]);
            }
          }
        }
        prev = next_prev3937;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev3939;
    deque<int> prioritized_choice_final_prev3940;
    next_prev3939.clear();
    for(int i3938=0;i3938<(int)prev.size();++i3938) {
      i = prev[i3938];
      tmp = parse_slash3941();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3939.push_back(prev[i3938]); }
      for(int i3982=0;i3982<(int)tmp.size();++i3982) {
        if( tmp[i3982] != FAIL ) {
          prioritized_choice_final_prev3940.push_back(tmp[i3982]);
        }
      }
    }
    prev = next_prev3939;
    next_prev3939.clear();
    for(int i3938=0;i3938<(int)prev.size();++i3938) {
      i = prev[i3938];
      tmp = parse_slash3983();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3939.push_back(prev[i3938]); }
      for(int i3985=0;i3985<(int)tmp.size();++i3985) {
        if( tmp[i3985] != FAIL ) {
          prioritized_choice_final_prev3940.push_back(tmp[i3985]);
        }
      }
    }
    prev = next_prev3939;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev3940.empty() && prioritized_choice_final_prev3940.front() == FAIL )) {
        prioritized_choice_final_prev3940.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev3940;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3923=0;i3923<(int)prev.size();++i3923) {
    if( prev[i3923] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3923]);
    }
  }
  return memo[key(555,backtracking_ptr_for_packrat555)] = result;
}

inline deque<int> parse_slash3927() { 
  if(memo.count(key(556,i))) {
    return memo[key(556,i)];
  }
  int backtracking_ptr_for_packrat556=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotations) */
    deque<int> next_prev3930;
    for(int i3929=0;i3929<(int)prev.size();++i3929) {
      if( prev[i3929] == FAIL ) {
        if(!(!next_prev3930.empty() && next_prev3930.front() == FAIL )) {
          next_prev3930.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3929];
      tmp = parse_Annotations();
      
      for(int i3929=0;i3929<(int)tmp.size();++i3929) {
        if( tmp[i3929] == FAIL ) {
          if(!( !next_prev3930.empty() && next_prev3930[0] == FAIL )) {
            next_prev3930.push_front(FAIL);
          }
        } else {
          next_prev3930.push_back(tmp[i3929]);
        }
      }
    }
    prev = next_prev3930;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3928=0;i3928<(int)prev.size();++i3928) {
    if( prev[i3928] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3928]);
    }
  }
  return memo[key(556,backtracking_ptr_for_packrat556)] = result;
}

inline deque<int> parse_slash3932() { 
  if(memo.count(key(557,i))) {
    return memo[key(557,i)];
  }
  int backtracking_ptr_for_packrat557=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i3933=0;i3933<(int)prev.size();++i3933) {
    if( prev[i3933] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3933]);
    }
  }
  return memo[key(557,backtracking_ptr_for_packrat557)] = result;
}

inline deque<int> parse_slash3941() { 
  if(memo.count(key(558,i))) {
    return memo[key(558,i)];
  }
  int backtracking_ptr_for_packrat558=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev3944;
    deque<int> prioritized_choice_final_prev3945;
    next_prev3944.clear();
    for(int i3943=0;i3943<(int)prev.size();++i3943) {
      i = prev[i3943];
      tmp = parse_slash3946();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3944.push_back(prev[i3943]); }
      for(int i3963=0;i3963<(int)tmp.size();++i3963) {
        if( tmp[i3963] != FAIL ) {
          prioritized_choice_final_prev3945.push_back(tmp[i3963]);
        }
      }
    }
    prev = next_prev3944;
    next_prev3944.clear();
    for(int i3943=0;i3943<(int)prev.size();++i3943) {
      i = prev[i3943];
      tmp = parse_slash3964();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3944.push_back(prev[i3943]); }
      for(int i3979=0;i3979<(int)tmp.size();++i3979) {
        if( tmp[i3979] != FAIL ) {
          prioritized_choice_final_prev3945.push_back(tmp[i3979]);
        }
      }
    }
    prev = next_prev3944;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev3945.empty() && prioritized_choice_final_prev3945.front() == FAIL )) {
        prioritized_choice_final_prev3945.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev3945;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ReferenceType) */
    deque<int> next_prev3981;
    for(int i3980=0;i3980<(int)prev.size();++i3980) {
      if( prev[i3980] == FAIL ) {
        if(!(!next_prev3981.empty() && next_prev3981.front() == FAIL )) {
          next_prev3981.push_front(FAIL);
        }
        continue;
      }
      i = prev[i3980];
      tmp = parse_ReferenceType();
      
      for(int i3980=0;i3980<(int)tmp.size();++i3980) {
        if( tmp[i3980] == FAIL ) {
          if(!( !next_prev3981.empty() && next_prev3981[0] == FAIL )) {
            next_prev3981.push_front(FAIL);
          }
        } else {
          next_prev3981.push_back(tmp[i3980]);
        }
      }
    }
    prev = next_prev3981;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3942=0;i3942<(int)prev.size();++i3942) {
    if( prev[i3942] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3942]);
    }
  }
  return memo[key(558,backtracking_ptr_for_packrat558)] = result;
}

inline deque<int> parse_slash3946() { 
  if(memo.count(key(559,i))) {
    return memo[key(559,i)];
  }
  int backtracking_ptr_for_packrat559=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3948=0;i3948<(int)prev.size();++i3948) {
        if( prev[i3948] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3948]<m&&I[prev[i3948]]=='e') {
          tmp.push_back(prev[i3948]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3949=0;i3949<(int)prev.size();++i3949) {
        if( prev[i3949] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3949]<m&&I[prev[i3949]]=='x') {
          tmp.push_back(prev[i3949]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3950=0;i3950<(int)prev.size();++i3950) {
        if( prev[i3950] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3950]<m&&I[prev[i3950]]=='t') {
          tmp.push_back(prev[i3950]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3951=0;i3951<(int)prev.size();++i3951) {
        if( prev[i3951] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3951]<m&&I[prev[i3951]]=='e') {
          tmp.push_back(prev[i3951]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3952=0;i3952<(int)prev.size();++i3952) {
        if( prev[i3952] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3952]<m&&I[prev[i3952]]=='n') {
          tmp.push_back(prev[i3952]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3953=0;i3953<(int)prev.size();++i3953) {
        if( prev[i3953] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3953]<m&&I[prev[i3953]]=='d') {
          tmp.push_back(prev[i3953]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3954=0;i3954<(int)prev.size();++i3954) {
        if( prev[i3954] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3954]<m&&I[prev[i3954]]=='s') {
          tmp.push_back(prev[i3954]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev3960;
      for(int i3959=0;i3959<(int)prev.size();++i3959) {
        i = prev[i3959];
        tmp = parse_not3955();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev3960.push_back(prev[i3959]);
        } else {
          if(!(!next_prev3960.empty()&&next_prev3960.front()==FAIL)) {
            next_prev3960.push_front(FAIL);
          }
        }
      }
      prev = next_prev3960;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3962;
      for(int i3961=0;i3961<(int)prev.size();++i3961) {
        if( prev[i3961] == FAIL ) {
          if(!(!next_prev3962.empty() && next_prev3962.front() == FAIL )) {
            next_prev3962.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3961];
        tmp = parse__();
        
        for(int i3961=0;i3961<(int)tmp.size();++i3961) {
          if( tmp[i3961] == FAIL ) {
            if(!( !next_prev3962.empty() && next_prev3962[0] == FAIL )) {
              next_prev3962.push_front(FAIL);
            }
          } else {
            next_prev3962.push_back(tmp[i3961]);
          }
        }
      }
      prev = next_prev3962;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3947=0;i3947<(int)prev.size();++i3947) {
    if( prev[i3947] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3947]);
    }
  }
  return memo[key(559,backtracking_ptr_for_packrat559)] = result;
}

inline deque<int> parse_not3955() { 
  if(memo.count(key(560,i))) {
    return memo[key(560,i)];
  }
  int backtracking_ptr_for_packrat560=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev3958;
  for(int i3957=0;i3957<(int)prev.size();++i3957) {
    if( prev[i3957] == FAIL ) {
      if(!(!next_prev3958.empty() && next_prev3958.front() == FAIL )) {
        next_prev3958.push_front(FAIL);
      }
      continue;
    }
    i = prev[i3957];
    tmp = parse_W();
    
    for(int i3957=0;i3957<(int)tmp.size();++i3957) {
      if( tmp[i3957] == FAIL ) {
        if(!( !next_prev3958.empty() && next_prev3958[0] == FAIL )) {
          next_prev3958.push_front(FAIL);
        }
      } else {
        next_prev3958.push_back(tmp[i3957]);
      }
    }
  }
  prev = next_prev3958;
  for(int i3956=0;i3956<(int)prev.size();++i3956) {
    if( prev[i3956] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3956]);
    }
  }
  return memo[key(560,backtracking_ptr_for_packrat560)] = result;
}

inline deque<int> parse_slash3964() { 
  if(memo.count(key(561,i))) {
    return memo[key(561,i)];
  }
  int backtracking_ptr_for_packrat561=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i3966=0;i3966<(int)prev.size();++i3966) {
        if( prev[i3966] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3966]<m&&I[prev[i3966]]=='s') {
          tmp.push_back(prev[i3966]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3967=0;i3967<(int)prev.size();++i3967) {
        if( prev[i3967] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3967]<m&&I[prev[i3967]]=='u') {
          tmp.push_back(prev[i3967]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3968=0;i3968<(int)prev.size();++i3968) {
        if( prev[i3968] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3968]<m&&I[prev[i3968]]=='p') {
          tmp.push_back(prev[i3968]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3969=0;i3969<(int)prev.size();++i3969) {
        if( prev[i3969] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3969]<m&&I[prev[i3969]]=='e') {
          tmp.push_back(prev[i3969]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i3970=0;i3970<(int)prev.size();++i3970) {
        if( prev[i3970] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i3970]<m&&I[prev[i3970]]=='r') {
          tmp.push_back(prev[i3970]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev3976;
      for(int i3975=0;i3975<(int)prev.size();++i3975) {
        i = prev[i3975];
        tmp = parse_not3971();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev3976.push_back(prev[i3975]);
        } else {
          if(!(!next_prev3976.empty()&&next_prev3976.front()==FAIL)) {
            next_prev3976.push_front(FAIL);
          }
        }
      }
      prev = next_prev3976;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev3978;
      for(int i3977=0;i3977<(int)prev.size();++i3977) {
        if( prev[i3977] == FAIL ) {
          if(!(!next_prev3978.empty() && next_prev3978.front() == FAIL )) {
            next_prev3978.push_front(FAIL);
          }
          continue;
        }
        i = prev[i3977];
        tmp = parse__();
        
        for(int i3977=0;i3977<(int)tmp.size();++i3977) {
          if( tmp[i3977] == FAIL ) {
            if(!( !next_prev3978.empty() && next_prev3978[0] == FAIL )) {
              next_prev3978.push_front(FAIL);
            }
          } else {
            next_prev3978.push_back(tmp[i3977]);
          }
        }
      }
      prev = next_prev3978;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3965=0;i3965<(int)prev.size();++i3965) {
    if( prev[i3965] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3965]);
    }
  }
  return memo[key(561,backtracking_ptr_for_packrat561)] = result;
}

inline deque<int> parse_not3971() { 
  if(memo.count(key(562,i))) {
    return memo[key(562,i)];
  }
  int backtracking_ptr_for_packrat562=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev3974;
  for(int i3973=0;i3973<(int)prev.size();++i3973) {
    if( prev[i3973] == FAIL ) {
      if(!(!next_prev3974.empty() && next_prev3974.front() == FAIL )) {
        next_prev3974.push_front(FAIL);
      }
      continue;
    }
    i = prev[i3973];
    tmp = parse_W();
    
    for(int i3973=0;i3973<(int)tmp.size();++i3973) {
      if( tmp[i3973] == FAIL ) {
        if(!( !next_prev3974.empty() && next_prev3974[0] == FAIL )) {
          next_prev3974.push_front(FAIL);
        }
      } else {
        next_prev3974.push_back(tmp[i3973]);
      }
    }
  }
  prev = next_prev3974;
  for(int i3972=0;i3972<(int)prev.size();++i3972) {
    if( prev[i3972] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3972]);
    }
  }
  return memo[key(562,backtracking_ptr_for_packrat562)] = result;
}

inline deque<int> parse_slash3983() { 
  if(memo.count(key(563,i))) {
    return memo[key(563,i)];
  }
  int backtracking_ptr_for_packrat563=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i3984=0;i3984<(int)prev.size();++i3984) {
    if( prev[i3984] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3984]);
    }
  }
  return memo[key(563,backtracking_ptr_for_packrat563)] = result;
}

deque<int> parse_TypeArguments(){
  if(memo.count(key(564,i))) {
    return memo[key(564,i)];
  }
  int backtracking_ptr_for_packrat564=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        tmp.clear();
        for(int i3988=0;i3988<(int)prev.size();++i3988) {
          if( prev[i3988] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i3988]<m&&I[prev[i3988]]=='<') {
            tmp.push_back(prev[i3988]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Not */
        deque<int> next_prev3993;
        for(int i3992=0;i3992<(int)prev.size();++i3992) {
          i = prev[i3992];
          tmp = parse_not3989();
          if(!tmp.empty()&&tmp.front()==FAIL) {
            next_prev3993.push_back(prev[i3992]);
          } else {
            if(!(!next_prev3993.empty()&&next_prev3993.front()==FAIL)) {
              next_prev3993.push_front(FAIL);
            }
          }
        }
        prev = next_prev3993;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Nonterminal (_) */
        deque<int> next_prev3995;
        for(int i3994=0;i3994<(int)prev.size();++i3994) {
          if( prev[i3994] == FAIL ) {
            if(!(!next_prev3995.empty() && next_prev3995.front() == FAIL )) {
              next_prev3995.push_front(FAIL);
            }
            continue;
          }
          i = prev[i3994];
          tmp = parse__();
          
          for(int i3994=0;i3994<(int)tmp.size();++i3994) {
            if( tmp[i3994] == FAIL ) {
              if(!( !next_prev3995.empty() && next_prev3995[0] == FAIL )) {
                next_prev3995.push_front(FAIL);
              }
            } else {
              next_prev3995.push_back(tmp[i3994]);
            }
          }
        }
        prev = next_prev3995;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Prioritized Choice */
      deque<int> next_prev3997;
      deque<int> prioritized_choice_final_prev3998;
      next_prev3997.clear();
      for(int i3996=0;i3996<(int)prev.size();++i3996) {
        i = prev[i3996];
        tmp = parse_slash3999();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3997.push_back(prev[i3996]); }
        for(int i4014=0;i4014<(int)tmp.size();++i4014) {
          if( tmp[i4014] != FAIL ) {
            prioritized_choice_final_prev3998.push_back(tmp[i4014]);
          }
        }
      }
      prev = next_prev3997;
      next_prev3997.clear();
      for(int i3996=0;i3996<(int)prev.size();++i3996) {
        i = prev[i3996];
        tmp = parse_slash4015();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev3997.push_back(prev[i3996]); }
        for(int i4017=0;i4017<(int)tmp.size();++i4017) {
          if( tmp[i4017] != FAIL ) {
            prioritized_choice_final_prev3998.push_back(tmp[i4017]);
          }
        }
      }
      prev = next_prev3997;
      if(!prev.empty()) {
        if(!(!prioritized_choice_final_prev3998.empty() && prioritized_choice_final_prev3998.front() == FAIL )) {
          prioritized_choice_final_prev3998.push_front(FAIL);
        }
      }
      prev = prioritized_choice_final_prev3998;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        tmp.clear();
        for(int i4018=0;i4018<(int)prev.size();++i4018) {
          if( prev[i4018] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i4018]<m&&I[prev[i4018]]=='>') {
            tmp.push_back(prev[i4018]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Not */
        deque<int> next_prev4023;
        for(int i4022=0;i4022<(int)prev.size();++i4022) {
          i = prev[i4022];
          tmp = parse_not4019();
          if(!tmp.empty()&&tmp.front()==FAIL) {
            next_prev4023.push_back(prev[i4022]);
          } else {
            if(!(!next_prev4023.empty()&&next_prev4023.front()==FAIL)) {
              next_prev4023.push_front(FAIL);
            }
          }
        }
        prev = next_prev4023;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Nonterminal (_) */
        deque<int> next_prev4025;
        for(int i4024=0;i4024<(int)prev.size();++i4024) {
          if( prev[i4024] == FAIL ) {
            if(!(!next_prev4025.empty() && next_prev4025.front() == FAIL )) {
              next_prev4025.push_front(FAIL);
            }
            continue;
          }
          i = prev[i4024];
          tmp = parse__();
          
          for(int i4024=0;i4024<(int)tmp.size();++i4024) {
            if( tmp[i4024] == FAIL ) {
              if(!( !next_prev4025.empty() && next_prev4025[0] == FAIL )) {
                next_prev4025.push_front(FAIL);
              }
            } else {
              next_prev4025.push_back(tmp[i4024]);
            }
          }
        }
        prev = next_prev4025;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i3987=0;i3987<(int)prev.size();++i3987) {
    if( prev[i3987] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3987]);
    }
  }
  return memo[key(564,backtracking_ptr_for_packrat564)] = result;
}

inline deque<int> parse_not3989() { 
  if(memo.count(key(565,i))) {
    return memo[key(565,i)];
  }
  int backtracking_ptr_for_packrat565=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i3991=0;i3991<(int)prev.size();++i3991) {
    if( prev[i3991] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i3991]<m&&(I[prev[i3991]]=='=')) {
      tmp.push_back(prev[i3991]+1);
    } else {
      if(!( !tmp.empty() && tmp.front() == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i3990=0;i3990<(int)prev.size();++i3990) {
    if( prev[i3990] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i3990]);
    }
  }
  return memo[key(565,backtracking_ptr_for_packrat565)] = result;
}

inline deque<int> parse_slash3999() { 
  if(memo.count(key(566,i))) {
    return memo[key(566,i)];
  }
  int backtracking_ptr_for_packrat566=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (TypeArgument) */
    deque<int> next_prev4002;
    for(int i4001=0;i4001<(int)prev.size();++i4001) {
      if( prev[i4001] == FAIL ) {
        if(!(!next_prev4002.empty() && next_prev4002.front() == FAIL )) {
          next_prev4002.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4001];
      tmp = parse_TypeArgument();
      
      for(int i4001=0;i4001<(int)tmp.size();++i4001) {
        if( tmp[i4001] == FAIL ) {
          if(!( !next_prev4002.empty() && next_prev4002[0] == FAIL )) {
            next_prev4002.push_front(FAIL);
          }
        } else {
          next_prev4002.push_back(tmp[i4001]);
        }
      }
    }
    prev = next_prev4002;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev4010;
    deque<int> star_final_prev4011;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev4010.clear();
      for(int i4012=0;i4012<(int)prev.size();++i4012) {
        i = prev[i4012];
        tmp = parse_while4003();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev4011.push_back(prev[i4012]);
        }
        for(int i4013=0;i4013<(int)tmp.size();++i4013) {
          if(tmp[i4013]==FAIL) {
            if(!( !next_prev4010.empty() && next_prev4010.front() == FAIL )) {
              next_prev4010.push_front(FAIL);
            }
          } else {
            next_prev4010.push_back(tmp[i4013]);
          }
        }
      }
      prev = next_prev4010;
    }
    prev = star_final_prev4011;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4000=0;i4000<(int)prev.size();++i4000) {
    if( prev[i4000] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4000]);
    }
  }
  return memo[key(566,backtracking_ptr_for_packrat566)] = result;
}

inline deque<int> parse_while4003() { 
  if(memo.count(key(567,i))) {
    return memo[key(567,i)];
  }
  int backtracking_ptr_for_packrat567=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4005=0;i4005<(int)prev.size();++i4005) {
        if( prev[i4005] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4005]<m&&I[prev[i4005]]==',') {
          tmp.push_back(prev[i4005]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4007;
      for(int i4006=0;i4006<(int)prev.size();++i4006) {
        if( prev[i4006] == FAIL ) {
          if(!(!next_prev4007.empty() && next_prev4007.front() == FAIL )) {
            next_prev4007.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4006];
        tmp = parse__();
        
        for(int i4006=0;i4006<(int)tmp.size();++i4006) {
          if( tmp[i4006] == FAIL ) {
            if(!( !next_prev4007.empty() && next_prev4007[0] == FAIL )) {
              next_prev4007.push_front(FAIL);
            }
          } else {
            next_prev4007.push_back(tmp[i4006]);
          }
        }
      }
      prev = next_prev4007;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (TypeArgument) */
    deque<int> next_prev4009;
    for(int i4008=0;i4008<(int)prev.size();++i4008) {
      if( prev[i4008] == FAIL ) {
        if(!(!next_prev4009.empty() && next_prev4009.front() == FAIL )) {
          next_prev4009.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4008];
      tmp = parse_TypeArgument();
      
      for(int i4008=0;i4008<(int)tmp.size();++i4008) {
        if( tmp[i4008] == FAIL ) {
          if(!( !next_prev4009.empty() && next_prev4009[0] == FAIL )) {
            next_prev4009.push_front(FAIL);
          }
        } else {
          next_prev4009.push_back(tmp[i4008]);
        }
      }
    }
    prev = next_prev4009;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4004=0;i4004<(int)prev.size();++i4004) {
    if( prev[i4004] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4004]);
    }
  }
  return memo[key(567,backtracking_ptr_for_packrat567)] = result;
}

inline deque<int> parse_slash4015() { 
  if(memo.count(key(568,i))) {
    return memo[key(568,i)];
  }
  int backtracking_ptr_for_packrat568=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i4016=0;i4016<(int)prev.size();++i4016) {
    if( prev[i4016] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4016]);
    }
  }
  return memo[key(568,backtracking_ptr_for_packrat568)] = result;
}

inline deque<int> parse_not4019() { 
  if(memo.count(key(569,i))) {
    return memo[key(569,i)];
  }
  int backtracking_ptr_for_packrat569=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i4021=0;i4021<(int)prev.size();++i4021) {
    if( prev[i4021] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i4021]<m&&(I[prev[i4021]]=='=')) {
      tmp.push_back(prev[i4021]+1);
    } else {
      if(!( !tmp.empty() && tmp.front() == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i4020=0;i4020<(int)prev.size();++i4020) {
    if( prev[i4020] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4020]);
    }
  }
  return memo[key(569,backtracking_ptr_for_packrat569)] = result;
}

deque<int> parse_Void(){
  if(memo.count(key(570,i))) {
    return memo[key(570,i)];
  }
  int backtracking_ptr_for_packrat570=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4027=0;i4027<(int)prev.size();++i4027) {
        if( prev[i4027] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4027]<m&&I[prev[i4027]]=='v') {
          tmp.push_back(prev[i4027]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4028=0;i4028<(int)prev.size();++i4028) {
        if( prev[i4028] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4028]<m&&I[prev[i4028]]=='o') {
          tmp.push_back(prev[i4028]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4029=0;i4029<(int)prev.size();++i4029) {
        if( prev[i4029] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4029]<m&&I[prev[i4029]]=='i') {
          tmp.push_back(prev[i4029]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4030=0;i4030<(int)prev.size();++i4030) {
        if( prev[i4030] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4030]<m&&I[prev[i4030]]=='d') {
          tmp.push_back(prev[i4030]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4036;
      for(int i4035=0;i4035<(int)prev.size();++i4035) {
        i = prev[i4035];
        tmp = parse_not4031();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4036.push_back(prev[i4035]);
        } else {
          if(!(!next_prev4036.empty()&&next_prev4036.front()==FAIL)) {
            next_prev4036.push_front(FAIL);
          }
        }
      }
      prev = next_prev4036;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4038;
      for(int i4037=0;i4037<(int)prev.size();++i4037) {
        if( prev[i4037] == FAIL ) {
          if(!(!next_prev4038.empty() && next_prev4038.front() == FAIL )) {
            next_prev4038.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4037];
        tmp = parse__();
        
        for(int i4037=0;i4037<(int)tmp.size();++i4037) {
          if( tmp[i4037] == FAIL ) {
            if(!( !next_prev4038.empty() && next_prev4038[0] == FAIL )) {
              next_prev4038.push_front(FAIL);
            }
          } else {
            next_prev4038.push_back(tmp[i4037]);
          }
        }
      }
      prev = next_prev4038;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4026=0;i4026<(int)prev.size();++i4026) {
    if( prev[i4026] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4026]);
    }
  }
  return memo[key(570,backtracking_ptr_for_packrat570)] = result;
}

inline deque<int> parse_not4031() { 
  if(memo.count(key(571,i))) {
    return memo[key(571,i)];
  }
  int backtracking_ptr_for_packrat571=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev4034;
  for(int i4033=0;i4033<(int)prev.size();++i4033) {
    if( prev[i4033] == FAIL ) {
      if(!(!next_prev4034.empty() && next_prev4034.front() == FAIL )) {
        next_prev4034.push_front(FAIL);
      }
      continue;
    }
    i = prev[i4033];
    tmp = parse_W();
    
    for(int i4033=0;i4033<(int)tmp.size();++i4033) {
      if( tmp[i4033] == FAIL ) {
        if(!( !next_prev4034.empty() && next_prev4034[0] == FAIL )) {
          next_prev4034.push_front(FAIL);
        }
      } else {
        next_prev4034.push_back(tmp[i4033]);
      }
    }
  }
  prev = next_prev4034;
  for(int i4032=0;i4032<(int)prev.size();++i4032) {
    if( prev[i4032] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4032]);
    }
  }
  return memo[key(571,backtracking_ptr_for_packrat571)] = result;
}

deque<int> parse_TypeOrVoid(){
  if(memo.count(key(572,i))) {
    return memo[key(572,i)];
  }
  int backtracking_ptr_for_packrat572=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev4041;
  deque<int> prioritized_choice_final_prev4042;
  next_prev4041.clear();
  for(int i4040=0;i4040<(int)prev.size();++i4040) {
    i = prev[i4040];
    tmp = parse_slash4043();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4041.push_back(prev[i4040]); }
    for(int i4047=0;i4047<(int)tmp.size();++i4047) {
      if( tmp[i4047] != FAIL ) {
        prioritized_choice_final_prev4042.push_back(tmp[i4047]);
      }
    }
  }
  prev = next_prev4041;
  next_prev4041.clear();
  for(int i4040=0;i4040<(int)prev.size();++i4040) {
    i = prev[i4040];
    tmp = parse_slash4048();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4041.push_back(prev[i4040]); }
    for(int i4052=0;i4052<(int)tmp.size();++i4052) {
      if( tmp[i4052] != FAIL ) {
        prioritized_choice_final_prev4042.push_back(tmp[i4052]);
      }
    }
  }
  prev = next_prev4041;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev4042.empty() && prioritized_choice_final_prev4042.front() == FAIL )) {
      prioritized_choice_final_prev4042.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev4042;
  for(int i4039=0;i4039<(int)prev.size();++i4039) {
    if( prev[i4039] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4039]);
    }
  }
  return memo[key(572,backtracking_ptr_for_packrat572)] = result;
}

inline deque<int> parse_slash4043() { 
  if(memo.count(key(573,i))) {
    return memo[key(573,i)];
  }
  int backtracking_ptr_for_packrat573=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Type) */
    deque<int> next_prev4046;
    for(int i4045=0;i4045<(int)prev.size();++i4045) {
      if( prev[i4045] == FAIL ) {
        if(!(!next_prev4046.empty() && next_prev4046.front() == FAIL )) {
          next_prev4046.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4045];
      tmp = parse_Type();
      
      for(int i4045=0;i4045<(int)tmp.size();++i4045) {
        if( tmp[i4045] == FAIL ) {
          if(!( !next_prev4046.empty() && next_prev4046[0] == FAIL )) {
            next_prev4046.push_front(FAIL);
          }
        } else {
          next_prev4046.push_back(tmp[i4045]);
        }
      }
    }
    prev = next_prev4046;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4044=0;i4044<(int)prev.size();++i4044) {
    if( prev[i4044] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4044]);
    }
  }
  return memo[key(573,backtracking_ptr_for_packrat573)] = result;
}

inline deque<int> parse_slash4048() { 
  if(memo.count(key(574,i))) {
    return memo[key(574,i)];
  }
  int backtracking_ptr_for_packrat574=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Void) */
    deque<int> next_prev4051;
    for(int i4050=0;i4050<(int)prev.size();++i4050) {
      if( prev[i4050] == FAIL ) {
        if(!(!next_prev4051.empty() && next_prev4051.front() == FAIL )) {
          next_prev4051.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4050];
      tmp = parse_Void();
      
      for(int i4050=0;i4050<(int)tmp.size();++i4050) {
        if( tmp[i4050] == FAIL ) {
          if(!( !next_prev4051.empty() && next_prev4051[0] == FAIL )) {
            next_prev4051.push_front(FAIL);
          }
        } else {
          next_prev4051.push_back(tmp[i4050]);
        }
      }
    }
    prev = next_prev4051;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4049=0;i4049<(int)prev.size();++i4049) {
    if( prev[i4049] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4049]);
    }
  }
  return memo[key(574,backtracking_ptr_for_packrat574)] = result;
}

deque<int> parse_NonArrayType(){
  if(memo.count(key(575,i))) {
    return memo[key(575,i)];
  }
  int backtracking_ptr_for_packrat575=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev4055;
  deque<int> prioritized_choice_final_prev4056;
  next_prev4055.clear();
  for(int i4054=0;i4054<(int)prev.size();++i4054) {
    i = prev[i4054];
    tmp = parse_slash4057();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4055.push_back(prev[i4054]); }
    for(int i4061=0;i4061<(int)tmp.size();++i4061) {
      if( tmp[i4061] != FAIL ) {
        prioritized_choice_final_prev4056.push_back(tmp[i4061]);
      }
    }
  }
  prev = next_prev4055;
  next_prev4055.clear();
  for(int i4054=0;i4054<(int)prev.size();++i4054) {
    i = prev[i4054];
    tmp = parse_slash4062();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4055.push_back(prev[i4054]); }
    for(int i4066=0;i4066<(int)tmp.size();++i4066) {
      if( tmp[i4066] != FAIL ) {
        prioritized_choice_final_prev4056.push_back(tmp[i4066]);
      }
    }
  }
  prev = next_prev4055;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev4056.empty() && prioritized_choice_final_prev4056.front() == FAIL )) {
      prioritized_choice_final_prev4056.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev4056;
  for(int i4053=0;i4053<(int)prev.size();++i4053) {
    if( prev[i4053] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4053]);
    }
  }
  return memo[key(575,backtracking_ptr_for_packrat575)] = result;
}

inline deque<int> parse_slash4057() { 
  if(memo.count(key(576,i))) {
    return memo[key(576,i)];
  }
  int backtracking_ptr_for_packrat576=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassOrInterfaceType) */
    deque<int> next_prev4060;
    for(int i4059=0;i4059<(int)prev.size();++i4059) {
      if( prev[i4059] == FAIL ) {
        if(!(!next_prev4060.empty() && next_prev4060.front() == FAIL )) {
          next_prev4060.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4059];
      tmp = parse_ClassOrInterfaceType();
      
      for(int i4059=0;i4059<(int)tmp.size();++i4059) {
        if( tmp[i4059] == FAIL ) {
          if(!( !next_prev4060.empty() && next_prev4060[0] == FAIL )) {
            next_prev4060.push_front(FAIL);
          }
        } else {
          next_prev4060.push_back(tmp[i4059]);
        }
      }
    }
    prev = next_prev4060;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4058=0;i4058<(int)prev.size();++i4058) {
    if( prev[i4058] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4058]);
    }
  }
  return memo[key(576,backtracking_ptr_for_packrat576)] = result;
}

inline deque<int> parse_slash4062() { 
  if(memo.count(key(577,i))) {
    return memo[key(577,i)];
  }
  int backtracking_ptr_for_packrat577=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (PrimitiveType) */
    deque<int> next_prev4065;
    for(int i4064=0;i4064<(int)prev.size();++i4064) {
      if( prev[i4064] == FAIL ) {
        if(!(!next_prev4065.empty() && next_prev4065.front() == FAIL )) {
          next_prev4065.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4064];
      tmp = parse_PrimitiveType();
      
      for(int i4064=0;i4064<(int)tmp.size();++i4064) {
        if( tmp[i4064] == FAIL ) {
          if(!( !next_prev4065.empty() && next_prev4065[0] == FAIL )) {
            next_prev4065.push_front(FAIL);
          }
        } else {
          next_prev4065.push_back(tmp[i4064]);
        }
      }
    }
    prev = next_prev4065;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4063=0;i4063<(int)prev.size();++i4063) {
    if( prev[i4063] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4063]);
    }
  }
  return memo[key(577,backtracking_ptr_for_packrat577)] = result;
}

deque<int> parse_ClassOrInterfaceTypes(){
  if(memo.count(key(578,i))) {
    return memo[key(578,i)];
  }
  int backtracking_ptr_for_packrat578=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassOrInterfaceType) */
    deque<int> next_prev4069;
    for(int i4068=0;i4068<(int)prev.size();++i4068) {
      if( prev[i4068] == FAIL ) {
        if(!(!next_prev4069.empty() && next_prev4069.front() == FAIL )) {
          next_prev4069.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4068];
      tmp = parse_ClassOrInterfaceType();
      
      for(int i4068=0;i4068<(int)tmp.size();++i4068) {
        if( tmp[i4068] == FAIL ) {
          if(!( !next_prev4069.empty() && next_prev4069[0] == FAIL )) {
            next_prev4069.push_front(FAIL);
          }
        } else {
          next_prev4069.push_back(tmp[i4068]);
        }
      }
    }
    prev = next_prev4069;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev4077;
    deque<int> star_final_prev4078;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev4077.clear();
      for(int i4079=0;i4079<(int)prev.size();++i4079) {
        i = prev[i4079];
        tmp = parse_while4070();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev4078.push_back(prev[i4079]);
        }
        for(int i4080=0;i4080<(int)tmp.size();++i4080) {
          if(tmp[i4080]==FAIL) {
            if(!( !next_prev4077.empty() && next_prev4077.front() == FAIL )) {
              next_prev4077.push_front(FAIL);
            }
          } else {
            next_prev4077.push_back(tmp[i4080]);
          }
        }
      }
      prev = next_prev4077;
    }
    prev = star_final_prev4078;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4067=0;i4067<(int)prev.size();++i4067) {
    if( prev[i4067] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4067]);
    }
  }
  return memo[key(578,backtracking_ptr_for_packrat578)] = result;
}

inline deque<int> parse_while4070() { 
  if(memo.count(key(579,i))) {
    return memo[key(579,i)];
  }
  int backtracking_ptr_for_packrat579=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4072=0;i4072<(int)prev.size();++i4072) {
        if( prev[i4072] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4072]<m&&I[prev[i4072]]==',') {
          tmp.push_back(prev[i4072]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4074;
      for(int i4073=0;i4073<(int)prev.size();++i4073) {
        if( prev[i4073] == FAIL ) {
          if(!(!next_prev4074.empty() && next_prev4074.front() == FAIL )) {
            next_prev4074.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4073];
        tmp = parse__();
        
        for(int i4073=0;i4073<(int)tmp.size();++i4073) {
          if( tmp[i4073] == FAIL ) {
            if(!( !next_prev4074.empty() && next_prev4074[0] == FAIL )) {
              next_prev4074.push_front(FAIL);
            }
          } else {
            next_prev4074.push_back(tmp[i4073]);
          }
        }
      }
      prev = next_prev4074;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassOrInterfaceType) */
    deque<int> next_prev4076;
    for(int i4075=0;i4075<(int)prev.size();++i4075) {
      if( prev[i4075] == FAIL ) {
        if(!(!next_prev4076.empty() && next_prev4076.front() == FAIL )) {
          next_prev4076.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4075];
      tmp = parse_ClassOrInterfaceType();
      
      for(int i4075=0;i4075<(int)tmp.size();++i4075) {
        if( tmp[i4075] == FAIL ) {
          if(!( !next_prev4076.empty() && next_prev4076[0] == FAIL )) {
            next_prev4076.push_front(FAIL);
          }
        } else {
          next_prev4076.push_back(tmp[i4075]);
        }
      }
    }
    prev = next_prev4076;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4071=0;i4071<(int)prev.size();++i4071) {
    if( prev[i4071] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4071]);
    }
  }
  return memo[key(579,backtracking_ptr_for_packrat579)] = result;
}

deque<int> parse_Block(){
  if(memo.count(key(580,i))) {
    return memo[key(580,i)];
  }
  int backtracking_ptr_for_packrat580=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4082=0;i4082<(int)prev.size();++i4082) {
        if( prev[i4082] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4082]<m&&I[prev[i4082]]=='{') {
          tmp.push_back(prev[i4082]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4084;
      for(int i4083=0;i4083<(int)prev.size();++i4083) {
        if( prev[i4083] == FAIL ) {
          if(!(!next_prev4084.empty() && next_prev4084.front() == FAIL )) {
            next_prev4084.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4083];
        tmp = parse__();
        
        for(int i4083=0;i4083<(int)tmp.size();++i4083) {
          if( tmp[i4083] == FAIL ) {
            if(!( !next_prev4084.empty() && next_prev4084[0] == FAIL )) {
              next_prev4084.push_front(FAIL);
            }
          } else {
            next_prev4084.push_back(tmp[i4083]);
          }
        }
      }
      prev = next_prev4084;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev4100;
    deque<int> star_final_prev4101;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev4100.clear();
      for(int i4102=0;i4102<(int)prev.size();++i4102) {
        i = prev[i4102];
        tmp = parse_while4085();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev4101.push_back(prev[i4102]);
        }
        for(int i4103=0;i4103<(int)tmp.size();++i4103) {
          if(tmp[i4103]==FAIL) {
            if(!( !next_prev4100.empty() && next_prev4100.front() == FAIL )) {
              next_prev4100.push_front(FAIL);
            }
          } else {
            next_prev4100.push_back(tmp[i4103]);
          }
        }
      }
      prev = next_prev4100;
    }
    prev = star_final_prev4101;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4104=0;i4104<(int)prev.size();++i4104) {
        if( prev[i4104] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4104]<m&&I[prev[i4104]]=='}') {
          tmp.push_back(prev[i4104]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4106;
      for(int i4105=0;i4105<(int)prev.size();++i4105) {
        if( prev[i4105] == FAIL ) {
          if(!(!next_prev4106.empty() && next_prev4106.front() == FAIL )) {
            next_prev4106.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4105];
        tmp = parse__();
        
        for(int i4105=0;i4105<(int)tmp.size();++i4105) {
          if( tmp[i4105] == FAIL ) {
            if(!( !next_prev4106.empty() && next_prev4106[0] == FAIL )) {
              next_prev4106.push_front(FAIL);
            }
          } else {
            next_prev4106.push_back(tmp[i4105]);
          }
        }
      }
      prev = next_prev4106;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4081=0;i4081<(int)prev.size();++i4081) {
    if( prev[i4081] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4081]);
    }
  }
  return memo[key(580,backtracking_ptr_for_packrat580)] = result;
}

inline deque<int> parse_while4085() { 
  if(memo.count(key(581,i))) {
    return memo[key(581,i)];
  }
  int backtracking_ptr_for_packrat581=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev4088;
    deque<int> prioritized_choice_final_prev4089;
    next_prev4088.clear();
    for(int i4087=0;i4087<(int)prev.size();++i4087) {
      i = prev[i4087];
      tmp = parse_slash4090();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4088.push_back(prev[i4087]); }
      for(int i4094=0;i4094<(int)tmp.size();++i4094) {
        if( tmp[i4094] != FAIL ) {
          prioritized_choice_final_prev4089.push_back(tmp[i4094]);
        }
      }
    }
    prev = next_prev4088;
    next_prev4088.clear();
    for(int i4087=0;i4087<(int)prev.size();++i4087) {
      i = prev[i4087];
      tmp = parse_slash4095();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4088.push_back(prev[i4087]); }
      for(int i4099=0;i4099<(int)tmp.size();++i4099) {
        if( tmp[i4099] != FAIL ) {
          prioritized_choice_final_prev4089.push_back(tmp[i4099]);
        }
      }
    }
    prev = next_prev4088;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev4089.empty() && prioritized_choice_final_prev4089.front() == FAIL )) {
        prioritized_choice_final_prev4089.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev4089;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4086=0;i4086<(int)prev.size();++i4086) {
    if( prev[i4086] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4086]);
    }
  }
  return memo[key(581,backtracking_ptr_for_packrat581)] = result;
}

inline deque<int> parse_slash4090() { 
  if(memo.count(key(582,i))) {
    return memo[key(582,i)];
  }
  int backtracking_ptr_for_packrat582=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Statement) */
    deque<int> next_prev4093;
    for(int i4092=0;i4092<(int)prev.size();++i4092) {
      if( prev[i4092] == FAIL ) {
        if(!(!next_prev4093.empty() && next_prev4093.front() == FAIL )) {
          next_prev4093.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4092];
      tmp = parse_Statement();
      
      for(int i4092=0;i4092<(int)tmp.size();++i4092) {
        if( tmp[i4092] == FAIL ) {
          if(!( !next_prev4093.empty() && next_prev4093[0] == FAIL )) {
            next_prev4093.push_front(FAIL);
          }
        } else {
          next_prev4093.push_back(tmp[i4092]);
        }
      }
    }
    prev = next_prev4093;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4091=0;i4091<(int)prev.size();++i4091) {
    if( prev[i4091] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4091]);
    }
  }
  return memo[key(582,backtracking_ptr_for_packrat582)] = result;
}

inline deque<int> parse_slash4095() { 
  if(memo.count(key(583,i))) {
    return memo[key(583,i)];
  }
  int backtracking_ptr_for_packrat583=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (LocalDeclaration) */
    deque<int> next_prev4098;
    for(int i4097=0;i4097<(int)prev.size();++i4097) {
      if( prev[i4097] == FAIL ) {
        if(!(!next_prev4098.empty() && next_prev4098.front() == FAIL )) {
          next_prev4098.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4097];
      tmp = parse_LocalDeclaration();
      
      for(int i4097=0;i4097<(int)tmp.size();++i4097) {
        if( tmp[i4097] == FAIL ) {
          if(!( !next_prev4098.empty() && next_prev4098[0] == FAIL )) {
            next_prev4098.push_front(FAIL);
          }
        } else {
          next_prev4098.push_back(tmp[i4097]);
        }
      }
    }
    prev = next_prev4098;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4096=0;i4096<(int)prev.size();++i4096) {
    if( prev[i4096] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4096]);
    }
  }
  return memo[key(583,backtracking_ptr_for_packrat583)] = result;
}

deque<int> parse_LocalDeclaration(){
  if(memo.count(key(584,i))) {
    return memo[key(584,i)];
  }
  int backtracking_ptr_for_packrat584=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev4109;
  deque<int> prioritized_choice_final_prev4110;
  next_prev4109.clear();
  for(int i4108=0;i4108<(int)prev.size();++i4108) {
    i = prev[i4108];
    tmp = parse_slash4111();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4109.push_back(prev[i4108]); }
    for(int i4118=0;i4118<(int)tmp.size();++i4118) {
      if( tmp[i4118] != FAIL ) {
        prioritized_choice_final_prev4110.push_back(tmp[i4118]);
      }
    }
  }
  prev = next_prev4109;
  next_prev4109.clear();
  for(int i4108=0;i4108<(int)prev.size();++i4108) {
    i = prev[i4108];
    tmp = parse_slash4119();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4109.push_back(prev[i4108]); }
    for(int i4123=0;i4123<(int)tmp.size();++i4123) {
      if( tmp[i4123] != FAIL ) {
        prioritized_choice_final_prev4110.push_back(tmp[i4123]);
      }
    }
  }
  prev = next_prev4109;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev4110.empty() && prioritized_choice_final_prev4110.front() == FAIL )) {
      prioritized_choice_final_prev4110.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev4110;
  for(int i4107=0;i4107<(int)prev.size();++i4107) {
    if( prev[i4107] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4107]);
    }
  }
  return memo[key(584,backtracking_ptr_for_packrat584)] = result;
}

inline deque<int> parse_slash4111() { 
  if(memo.count(key(585,i))) {
    return memo[key(585,i)];
  }
  int backtracking_ptr_for_packrat585=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (VariableDeclaration) */
    deque<int> next_prev4114;
    for(int i4113=0;i4113<(int)prev.size();++i4113) {
      if( prev[i4113] == FAIL ) {
        if(!(!next_prev4114.empty() && next_prev4114.front() == FAIL )) {
          next_prev4114.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4113];
      tmp = parse_VariableDeclaration();
      
      for(int i4113=0;i4113<(int)tmp.size();++i4113) {
        if( tmp[i4113] == FAIL ) {
          if(!( !next_prev4114.empty() && next_prev4114[0] == FAIL )) {
            next_prev4114.push_front(FAIL);
          }
        } else {
          next_prev4114.push_back(tmp[i4113]);
        }
      }
    }
    prev = next_prev4114;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4115=0;i4115<(int)prev.size();++i4115) {
        if( prev[i4115] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4115]<m&&I[prev[i4115]]==';') {
          tmp.push_back(prev[i4115]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4117;
      for(int i4116=0;i4116<(int)prev.size();++i4116) {
        if( prev[i4116] == FAIL ) {
          if(!(!next_prev4117.empty() && next_prev4117.front() == FAIL )) {
            next_prev4117.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4116];
        tmp = parse__();
        
        for(int i4116=0;i4116<(int)tmp.size();++i4116) {
          if( tmp[i4116] == FAIL ) {
            if(!( !next_prev4117.empty() && next_prev4117[0] == FAIL )) {
              next_prev4117.push_front(FAIL);
            }
          } else {
            next_prev4117.push_back(tmp[i4116]);
          }
        }
      }
      prev = next_prev4117;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4112=0;i4112<(int)prev.size();++i4112) {
    if( prev[i4112] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4112]);
    }
  }
  return memo[key(585,backtracking_ptr_for_packrat585)] = result;
}

inline deque<int> parse_slash4119() { 
  if(memo.count(key(586,i))) {
    return memo[key(586,i)];
  }
  int backtracking_ptr_for_packrat586=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassDeclaration) */
    deque<int> next_prev4122;
    for(int i4121=0;i4121<(int)prev.size();++i4121) {
      if( prev[i4121] == FAIL ) {
        if(!(!next_prev4122.empty() && next_prev4122.front() == FAIL )) {
          next_prev4122.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4121];
      tmp = parse_ClassDeclaration();
      
      for(int i4121=0;i4121<(int)tmp.size();++i4121) {
        if( tmp[i4121] == FAIL ) {
          if(!( !next_prev4122.empty() && next_prev4122[0] == FAIL )) {
            next_prev4122.push_front(FAIL);
          }
        } else {
          next_prev4122.push_back(tmp[i4121]);
        }
      }
    }
    prev = next_prev4122;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4120=0;i4120<(int)prev.size();++i4120) {
    if( prev[i4120] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4120]);
    }
  }
  return memo[key(586,backtracking_ptr_for_packrat586)] = result;
}

deque<int> parse_Statement(){
  if(memo.count(key(587,i))) {
    return memo[key(587,i)];
  }
  int backtracking_ptr_for_packrat587=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev4126;
  deque<int> prioritized_choice_final_prev4127;
  next_prev4126.clear();
  for(int i4125=0;i4125<(int)prev.size();++i4125) {
    i = prev[i4125];
    tmp = parse_slash4128();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4126.push_back(prev[i4125]); }
    for(int i4132=0;i4132<(int)tmp.size();++i4132) {
      if( tmp[i4132] != FAIL ) {
        prioritized_choice_final_prev4127.push_back(tmp[i4132]);
      }
    }
  }
  prev = next_prev4126;
  next_prev4126.clear();
  for(int i4125=0;i4125<(int)prev.size();++i4125) {
    i = prev[i4125];
    tmp = parse_slash4133();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4126.push_back(prev[i4125]); }
    for(int i4173=0;i4173<(int)tmp.size();++i4173) {
      if( tmp[i4173] != FAIL ) {
        prioritized_choice_final_prev4127.push_back(tmp[i4173]);
      }
    }
  }
  prev = next_prev4126;
  next_prev4126.clear();
  for(int i4125=0;i4125<(int)prev.size();++i4125) {
    i = prev[i4125];
    tmp = parse_slash4174();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4126.push_back(prev[i4125]); }
    for(int i4219=0;i4219<(int)tmp.size();++i4219) {
      if( tmp[i4219] != FAIL ) {
        prioritized_choice_final_prev4127.push_back(tmp[i4219]);
      }
    }
  }
  prev = next_prev4126;
  next_prev4126.clear();
  for(int i4125=0;i4125<(int)prev.size();++i4125) {
    i = prev[i4125];
    tmp = parse_slash4220();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4126.push_back(prev[i4125]); }
    for(int i4246=0;i4246<(int)tmp.size();++i4246) {
      if( tmp[i4246] != FAIL ) {
        prioritized_choice_final_prev4127.push_back(tmp[i4246]);
      }
    }
  }
  prev = next_prev4126;
  next_prev4126.clear();
  for(int i4125=0;i4125<(int)prev.size();++i4125) {
    i = prev[i4125];
    tmp = parse_slash4247();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4126.push_back(prev[i4125]); }
    for(int i4272=0;i4272<(int)tmp.size();++i4272) {
      if( tmp[i4272] != FAIL ) {
        prioritized_choice_final_prev4127.push_back(tmp[i4272]);
      }
    }
  }
  prev = next_prev4126;
  next_prev4126.clear();
  for(int i4125=0;i4125<(int)prev.size();++i4125) {
    i = prev[i4125];
    tmp = parse_slash4273();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4126.push_back(prev[i4125]); }
    for(int i4311=0;i4311<(int)tmp.size();++i4311) {
      if( tmp[i4311] != FAIL ) {
        prioritized_choice_final_prev4127.push_back(tmp[i4311]);
      }
    }
  }
  prev = next_prev4126;
  next_prev4126.clear();
  for(int i4125=0;i4125<(int)prev.size();++i4125) {
    i = prev[i4125];
    tmp = parse_slash4312();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4126.push_back(prev[i4125]); }
    for(int i4372=0;i4372<(int)tmp.size();++i4372) {
      if( tmp[i4372] != FAIL ) {
        prioritized_choice_final_prev4127.push_back(tmp[i4372]);
      }
    }
  }
  prev = next_prev4126;
  next_prev4126.clear();
  for(int i4125=0;i4125<(int)prev.size();++i4125) {
    i = prev[i4125];
    tmp = parse_slash4373();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4126.push_back(prev[i4125]); }
    for(int i4424=0;i4424<(int)tmp.size();++i4424) {
      if( tmp[i4424] != FAIL ) {
        prioritized_choice_final_prev4127.push_back(tmp[i4424]);
      }
    }
  }
  prev = next_prev4126;
  next_prev4126.clear();
  for(int i4125=0;i4125<(int)prev.size();++i4125) {
    i = prev[i4125];
    tmp = parse_slash4425();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4126.push_back(prev[i4125]); }
    for(int i4471=0;i4471<(int)tmp.size();++i4471) {
      if( tmp[i4471] != FAIL ) {
        prioritized_choice_final_prev4127.push_back(tmp[i4471]);
      }
    }
  }
  prev = next_prev4126;
  next_prev4126.clear();
  for(int i4125=0;i4125<(int)prev.size();++i4125) {
    i = prev[i4125];
    tmp = parse_slash4472();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4126.push_back(prev[i4125]); }
    for(int i4491=0;i4491<(int)tmp.size();++i4491) {
      if( tmp[i4491] != FAIL ) {
        prioritized_choice_final_prev4127.push_back(tmp[i4491]);
      }
    }
  }
  prev = next_prev4126;
  next_prev4126.clear();
  for(int i4125=0;i4125<(int)prev.size();++i4125) {
    i = prev[i4125];
    tmp = parse_slash4492();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4126.push_back(prev[i4125]); }
    for(int i4524=0;i4524<(int)tmp.size();++i4524) {
      if( tmp[i4524] != FAIL ) {
        prioritized_choice_final_prev4127.push_back(tmp[i4524]);
      }
    }
  }
  prev = next_prev4126;
  next_prev4126.clear();
  for(int i4125=0;i4125<(int)prev.size();++i4125) {
    i = prev[i4125];
    tmp = parse_slash4525();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4126.push_back(prev[i4125]); }
    for(int i4554=0;i4554<(int)tmp.size();++i4554) {
      if( tmp[i4554] != FAIL ) {
        prioritized_choice_final_prev4127.push_back(tmp[i4554]);
      }
    }
  }
  prev = next_prev4126;
  next_prev4126.clear();
  for(int i4125=0;i4125<(int)prev.size();++i4125) {
    i = prev[i4125];
    tmp = parse_slash4555();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4126.push_back(prev[i4125]); }
    for(int i4585=0;i4585<(int)tmp.size();++i4585) {
      if( tmp[i4585] != FAIL ) {
        prioritized_choice_final_prev4127.push_back(tmp[i4585]);
      }
    }
  }
  prev = next_prev4126;
  next_prev4126.clear();
  for(int i4125=0;i4125<(int)prev.size();++i4125) {
    i = prev[i4125];
    tmp = parse_slash4586();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4126.push_back(prev[i4125]); }
    for(int i4637=0;i4637<(int)tmp.size();++i4637) {
      if( tmp[i4637] != FAIL ) {
        prioritized_choice_final_prev4127.push_back(tmp[i4637]);
      }
    }
  }
  prev = next_prev4126;
  next_prev4126.clear();
  for(int i4125=0;i4125<(int)prev.size();++i4125) {
    i = prev[i4125];
    tmp = parse_slash4638();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4126.push_back(prev[i4125]); }
    for(int i4678=0;i4678<(int)tmp.size();++i4678) {
      if( tmp[i4678] != FAIL ) {
        prioritized_choice_final_prev4127.push_back(tmp[i4678]);
      }
    }
  }
  prev = next_prev4126;
  next_prev4126.clear();
  for(int i4125=0;i4125<(int)prev.size();++i4125) {
    i = prev[i4125];
    tmp = parse_slash4679();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4126.push_back(prev[i4125]); }
    for(int i4704=0;i4704<(int)tmp.size();++i4704) {
      if( tmp[i4704] != FAIL ) {
        prioritized_choice_final_prev4127.push_back(tmp[i4704]);
      }
    }
  }
  prev = next_prev4126;
  next_prev4126.clear();
  for(int i4125=0;i4125<(int)prev.size();++i4125) {
    i = prev[i4125];
    tmp = parse_slash4705();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4126.push_back(prev[i4125]); }
    for(int i4725=0;i4725<(int)tmp.size();++i4725) {
      if( tmp[i4725] != FAIL ) {
        prioritized_choice_final_prev4127.push_back(tmp[i4725]);
      }
    }
  }
  prev = next_prev4126;
  next_prev4126.clear();
  for(int i4125=0;i4125<(int)prev.size();++i4125) {
    i = prev[i4125];
    tmp = parse_slash4726();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4126.push_back(prev[i4125]); }
    for(int i4758=0;i4758<(int)tmp.size();++i4758) {
      if( tmp[i4758] != FAIL ) {
        prioritized_choice_final_prev4127.push_back(tmp[i4758]);
      }
    }
  }
  prev = next_prev4126;
  next_prev4126.clear();
  for(int i4125=0;i4125<(int)prev.size();++i4125) {
    i = prev[i4125];
    tmp = parse_slash4759();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4126.push_back(prev[i4125]); }
    for(int i4826=0;i4826<(int)tmp.size();++i4826) {
      if( tmp[i4826] != FAIL ) {
        prioritized_choice_final_prev4127.push_back(tmp[i4826]);
      }
    }
  }
  prev = next_prev4126;
  next_prev4126.clear();
  for(int i4125=0;i4125<(int)prev.size();++i4125) {
    i = prev[i4125];
    tmp = parse_slash4827();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4126.push_back(prev[i4125]); }
    for(int i4876=0;i4876<(int)tmp.size();++i4876) {
      if( tmp[i4876] != FAIL ) {
        prioritized_choice_final_prev4127.push_back(tmp[i4876]);
      }
    }
  }
  prev = next_prev4126;
  next_prev4126.clear();
  for(int i4125=0;i4125<(int)prev.size();++i4125) {
    i = prev[i4125];
    tmp = parse_slash4877();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4126.push_back(prev[i4125]); }
    for(int i4889=0;i4889<(int)tmp.size();++i4889) {
      if( tmp[i4889] != FAIL ) {
        prioritized_choice_final_prev4127.push_back(tmp[i4889]);
      }
    }
  }
  prev = next_prev4126;
  next_prev4126.clear();
  for(int i4125=0;i4125<(int)prev.size();++i4125) {
    i = prev[i4125];
    tmp = parse_slash4890();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4126.push_back(prev[i4125]); }
    for(int i4897=0;i4897<(int)tmp.size();++i4897) {
      if( tmp[i4897] != FAIL ) {
        prioritized_choice_final_prev4127.push_back(tmp[i4897]);
      }
    }
  }
  prev = next_prev4126;
  next_prev4126.clear();
  for(int i4125=0;i4125<(int)prev.size();++i4125) {
    i = prev[i4125];
    tmp = parse_slash4898();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4126.push_back(prev[i4125]); }
    for(int i4903=0;i4903<(int)tmp.size();++i4903) {
      if( tmp[i4903] != FAIL ) {
        prioritized_choice_final_prev4127.push_back(tmp[i4903]);
      }
    }
  }
  prev = next_prev4126;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev4127.empty() && prioritized_choice_final_prev4127.front() == FAIL )) {
      prioritized_choice_final_prev4127.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev4127;
  for(int i4124=0;i4124<(int)prev.size();++i4124) {
    if( prev[i4124] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4124]);
    }
  }
  return memo[key(587,backtracking_ptr_for_packrat587)] = result;
}

inline deque<int> parse_slash4128() { 
  if(memo.count(key(588,i))) {
    return memo[key(588,i)];
  }
  int backtracking_ptr_for_packrat588=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Block) */
    deque<int> next_prev4131;
    for(int i4130=0;i4130<(int)prev.size();++i4130) {
      if( prev[i4130] == FAIL ) {
        if(!(!next_prev4131.empty() && next_prev4131.front() == FAIL )) {
          next_prev4131.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4130];
      tmp = parse_Block();
      
      for(int i4130=0;i4130<(int)tmp.size();++i4130) {
        if( tmp[i4130] == FAIL ) {
          if(!( !next_prev4131.empty() && next_prev4131[0] == FAIL )) {
            next_prev4131.push_front(FAIL);
          }
        } else {
          next_prev4131.push_back(tmp[i4130]);
        }
      }
    }
    prev = next_prev4131;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4129=0;i4129<(int)prev.size();++i4129) {
    if( prev[i4129] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4129]);
    }
  }
  return memo[key(588,backtracking_ptr_for_packrat588)] = result;
}

inline deque<int> parse_slash4133() { 
  if(memo.count(key(589,i))) {
    return memo[key(589,i)];
  }
  int backtracking_ptr_for_packrat589=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4135=0;i4135<(int)prev.size();++i4135) {
        if( prev[i4135] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4135]<m&&I[prev[i4135]]=='a') {
          tmp.push_back(prev[i4135]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4136=0;i4136<(int)prev.size();++i4136) {
        if( prev[i4136] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4136]<m&&I[prev[i4136]]=='s') {
          tmp.push_back(prev[i4136]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4137=0;i4137<(int)prev.size();++i4137) {
        if( prev[i4137] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4137]<m&&I[prev[i4137]]=='s') {
          tmp.push_back(prev[i4137]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4138=0;i4138<(int)prev.size();++i4138) {
        if( prev[i4138] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4138]<m&&I[prev[i4138]]=='e') {
          tmp.push_back(prev[i4138]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4139=0;i4139<(int)prev.size();++i4139) {
        if( prev[i4139] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4139]<m&&I[prev[i4139]]=='r') {
          tmp.push_back(prev[i4139]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4140=0;i4140<(int)prev.size();++i4140) {
        if( prev[i4140] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4140]<m&&I[prev[i4140]]=='t') {
          tmp.push_back(prev[i4140]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4146;
      for(int i4145=0;i4145<(int)prev.size();++i4145) {
        i = prev[i4145];
        tmp = parse_not4141();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4146.push_back(prev[i4145]);
        } else {
          if(!(!next_prev4146.empty()&&next_prev4146.front()==FAIL)) {
            next_prev4146.push_front(FAIL);
          }
        }
      }
      prev = next_prev4146;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4148;
      for(int i4147=0;i4147<(int)prev.size();++i4147) {
        if( prev[i4147] == FAIL ) {
          if(!(!next_prev4148.empty() && next_prev4148.front() == FAIL )) {
            next_prev4148.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4147];
        tmp = parse__();
        
        for(int i4147=0;i4147<(int)tmp.size();++i4147) {
          if( tmp[i4147] == FAIL ) {
            if(!( !next_prev4148.empty() && next_prev4148[0] == FAIL )) {
              next_prev4148.push_front(FAIL);
            }
          } else {
            next_prev4148.push_back(tmp[i4147]);
          }
        }
      }
      prev = next_prev4148;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Expression) */
    deque<int> next_prev4150;
    for(int i4149=0;i4149<(int)prev.size();++i4149) {
      if( prev[i4149] == FAIL ) {
        if(!(!next_prev4150.empty() && next_prev4150.front() == FAIL )) {
          next_prev4150.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4149];
      tmp = parse_Expression();
      
      for(int i4149=0;i4149<(int)tmp.size();++i4149) {
        if( tmp[i4149] == FAIL ) {
          if(!( !next_prev4150.empty() && next_prev4150[0] == FAIL )) {
            next_prev4150.push_front(FAIL);
          }
        } else {
          next_prev4150.push_back(tmp[i4149]);
        }
      }
    }
    prev = next_prev4150;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev4152;
    deque<int> prioritized_choice_final_prev4153;
    next_prev4152.clear();
    for(int i4151=0;i4151<(int)prev.size();++i4151) {
      i = prev[i4151];
      tmp = parse_slash4154();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4152.push_back(prev[i4151]); }
      for(int i4166=0;i4166<(int)tmp.size();++i4166) {
        if( tmp[i4166] != FAIL ) {
          prioritized_choice_final_prev4153.push_back(tmp[i4166]);
        }
      }
    }
    prev = next_prev4152;
    next_prev4152.clear();
    for(int i4151=0;i4151<(int)prev.size();++i4151) {
      i = prev[i4151];
      tmp = parse_slash4167();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4152.push_back(prev[i4151]); }
      for(int i4169=0;i4169<(int)tmp.size();++i4169) {
        if( tmp[i4169] != FAIL ) {
          prioritized_choice_final_prev4153.push_back(tmp[i4169]);
        }
      }
    }
    prev = next_prev4152;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev4153.empty() && prioritized_choice_final_prev4153.front() == FAIL )) {
        prioritized_choice_final_prev4153.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev4153;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4170=0;i4170<(int)prev.size();++i4170) {
        if( prev[i4170] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4170]<m&&I[prev[i4170]]==';') {
          tmp.push_back(prev[i4170]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4172;
      for(int i4171=0;i4171<(int)prev.size();++i4171) {
        if( prev[i4171] == FAIL ) {
          if(!(!next_prev4172.empty() && next_prev4172.front() == FAIL )) {
            next_prev4172.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4171];
        tmp = parse__();
        
        for(int i4171=0;i4171<(int)tmp.size();++i4171) {
          if( tmp[i4171] == FAIL ) {
            if(!( !next_prev4172.empty() && next_prev4172[0] == FAIL )) {
              next_prev4172.push_front(FAIL);
            }
          } else {
            next_prev4172.push_back(tmp[i4171]);
          }
        }
      }
      prev = next_prev4172;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4134=0;i4134<(int)prev.size();++i4134) {
    if( prev[i4134] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4134]);
    }
  }
  return memo[key(589,backtracking_ptr_for_packrat589)] = result;
}

inline deque<int> parse_not4141() { 
  if(memo.count(key(590,i))) {
    return memo[key(590,i)];
  }
  int backtracking_ptr_for_packrat590=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev4144;
  for(int i4143=0;i4143<(int)prev.size();++i4143) {
    if( prev[i4143] == FAIL ) {
      if(!(!next_prev4144.empty() && next_prev4144.front() == FAIL )) {
        next_prev4144.push_front(FAIL);
      }
      continue;
    }
    i = prev[i4143];
    tmp = parse_W();
    
    for(int i4143=0;i4143<(int)tmp.size();++i4143) {
      if( tmp[i4143] == FAIL ) {
        if(!( !next_prev4144.empty() && next_prev4144[0] == FAIL )) {
          next_prev4144.push_front(FAIL);
        }
      } else {
        next_prev4144.push_back(tmp[i4143]);
      }
    }
  }
  prev = next_prev4144;
  for(int i4142=0;i4142<(int)prev.size();++i4142) {
    if( prev[i4142] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4142]);
    }
  }
  return memo[key(590,backtracking_ptr_for_packrat590)] = result;
}

inline deque<int> parse_slash4154() { 
  if(memo.count(key(591,i))) {
    return memo[key(591,i)];
  }
  int backtracking_ptr_for_packrat591=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4156=0;i4156<(int)prev.size();++i4156) {
        if( prev[i4156] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4156]<m&&I[prev[i4156]]==':') {
          tmp.push_back(prev[i4156]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4161;
      for(int i4160=0;i4160<(int)prev.size();++i4160) {
        i = prev[i4160];
        tmp = parse_not4157();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4161.push_back(prev[i4160]);
        } else {
          if(!(!next_prev4161.empty()&&next_prev4161.front()==FAIL)) {
            next_prev4161.push_front(FAIL);
          }
        }
      }
      prev = next_prev4161;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4163;
      for(int i4162=0;i4162<(int)prev.size();++i4162) {
        if( prev[i4162] == FAIL ) {
          if(!(!next_prev4163.empty() && next_prev4163.front() == FAIL )) {
            next_prev4163.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4162];
        tmp = parse__();
        
        for(int i4162=0;i4162<(int)tmp.size();++i4162) {
          if( tmp[i4162] == FAIL ) {
            if(!( !next_prev4163.empty() && next_prev4163[0] == FAIL )) {
              next_prev4163.push_front(FAIL);
            }
          } else {
            next_prev4163.push_back(tmp[i4162]);
          }
        }
      }
      prev = next_prev4163;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Expression) */
    deque<int> next_prev4165;
    for(int i4164=0;i4164<(int)prev.size();++i4164) {
      if( prev[i4164] == FAIL ) {
        if(!(!next_prev4165.empty() && next_prev4165.front() == FAIL )) {
          next_prev4165.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4164];
      tmp = parse_Expression();
      
      for(int i4164=0;i4164<(int)tmp.size();++i4164) {
        if( tmp[i4164] == FAIL ) {
          if(!( !next_prev4165.empty() && next_prev4165[0] == FAIL )) {
            next_prev4165.push_front(FAIL);
          }
        } else {
          next_prev4165.push_back(tmp[i4164]);
        }
      }
    }
    prev = next_prev4165;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4155=0;i4155<(int)prev.size();++i4155) {
    if( prev[i4155] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4155]);
    }
  }
  return memo[key(591,backtracking_ptr_for_packrat591)] = result;
}

inline deque<int> parse_not4157() { 
  if(memo.count(key(592,i))) {
    return memo[key(592,i)];
  }
  int backtracking_ptr_for_packrat592=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i4159=0;i4159<(int)prev.size();++i4159) {
    if( prev[i4159] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i4159]<m&&(I[prev[i4159]]=='>'||I[prev[i4159]]==':')) {
      tmp.push_back(prev[i4159]+1);
    } else {
      if(!( !tmp.empty() && tmp.front() == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i4158=0;i4158<(int)prev.size();++i4158) {
    if( prev[i4158] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4158]);
    }
  }
  return memo[key(592,backtracking_ptr_for_packrat592)] = result;
}

inline deque<int> parse_slash4167() { 
  if(memo.count(key(593,i))) {
    return memo[key(593,i)];
  }
  int backtracking_ptr_for_packrat593=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i4168=0;i4168<(int)prev.size();++i4168) {
    if( prev[i4168] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4168]);
    }
  }
  return memo[key(593,backtracking_ptr_for_packrat593)] = result;
}

inline deque<int> parse_slash4174() { 
  if(memo.count(key(594,i))) {
    return memo[key(594,i)];
  }
  int backtracking_ptr_for_packrat594=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4176=0;i4176<(int)prev.size();++i4176) {
        if( prev[i4176] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4176]<m&&I[prev[i4176]]=='i') {
          tmp.push_back(prev[i4176]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4177=0;i4177<(int)prev.size();++i4177) {
        if( prev[i4177] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4177]<m&&I[prev[i4177]]=='f') {
          tmp.push_back(prev[i4177]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4183;
      for(int i4182=0;i4182<(int)prev.size();++i4182) {
        i = prev[i4182];
        tmp = parse_not4178();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4183.push_back(prev[i4182]);
        } else {
          if(!(!next_prev4183.empty()&&next_prev4183.front()==FAIL)) {
            next_prev4183.push_front(FAIL);
          }
        }
      }
      prev = next_prev4183;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4185;
      for(int i4184=0;i4184<(int)prev.size();++i4184) {
        if( prev[i4184] == FAIL ) {
          if(!(!next_prev4185.empty() && next_prev4185.front() == FAIL )) {
            next_prev4185.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4184];
        tmp = parse__();
        
        for(int i4184=0;i4184<(int)tmp.size();++i4184) {
          if( tmp[i4184] == FAIL ) {
            if(!( !next_prev4185.empty() && next_prev4185[0] == FAIL )) {
              next_prev4185.push_front(FAIL);
            }
          } else {
            next_prev4185.push_back(tmp[i4184]);
          }
        }
      }
      prev = next_prev4185;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4186=0;i4186<(int)prev.size();++i4186) {
        if( prev[i4186] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4186]<m&&I[prev[i4186]]=='(') {
          tmp.push_back(prev[i4186]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4188;
      for(int i4187=0;i4187<(int)prev.size();++i4187) {
        if( prev[i4187] == FAIL ) {
          if(!(!next_prev4188.empty() && next_prev4188.front() == FAIL )) {
            next_prev4188.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4187];
        tmp = parse__();
        
        for(int i4187=0;i4187<(int)tmp.size();++i4187) {
          if( tmp[i4187] == FAIL ) {
            if(!( !next_prev4188.empty() && next_prev4188[0] == FAIL )) {
              next_prev4188.push_front(FAIL);
            }
          } else {
            next_prev4188.push_back(tmp[i4187]);
          }
        }
      }
      prev = next_prev4188;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Expression) */
    deque<int> next_prev4190;
    for(int i4189=0;i4189<(int)prev.size();++i4189) {
      if( prev[i4189] == FAIL ) {
        if(!(!next_prev4190.empty() && next_prev4190.front() == FAIL )) {
          next_prev4190.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4189];
      tmp = parse_Expression();
      
      for(int i4189=0;i4189<(int)tmp.size();++i4189) {
        if( tmp[i4189] == FAIL ) {
          if(!( !next_prev4190.empty() && next_prev4190[0] == FAIL )) {
            next_prev4190.push_front(FAIL);
          }
        } else {
          next_prev4190.push_back(tmp[i4189]);
        }
      }
    }
    prev = next_prev4190;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4191=0;i4191<(int)prev.size();++i4191) {
        if( prev[i4191] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4191]<m&&I[prev[i4191]]==')') {
          tmp.push_back(prev[i4191]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4193;
      for(int i4192=0;i4192<(int)prev.size();++i4192) {
        if( prev[i4192] == FAIL ) {
          if(!(!next_prev4193.empty() && next_prev4193.front() == FAIL )) {
            next_prev4193.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4192];
        tmp = parse__();
        
        for(int i4192=0;i4192<(int)tmp.size();++i4192) {
          if( tmp[i4192] == FAIL ) {
            if(!( !next_prev4193.empty() && next_prev4193[0] == FAIL )) {
              next_prev4193.push_front(FAIL);
            }
          } else {
            next_prev4193.push_back(tmp[i4192]);
          }
        }
      }
      prev = next_prev4193;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Statement) */
    deque<int> next_prev4195;
    for(int i4194=0;i4194<(int)prev.size();++i4194) {
      if( prev[i4194] == FAIL ) {
        if(!(!next_prev4195.empty() && next_prev4195.front() == FAIL )) {
          next_prev4195.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4194];
      tmp = parse_Statement();
      
      for(int i4194=0;i4194<(int)tmp.size();++i4194) {
        if( tmp[i4194] == FAIL ) {
          if(!( !next_prev4195.empty() && next_prev4195[0] == FAIL )) {
            next_prev4195.push_front(FAIL);
          }
        } else {
          next_prev4195.push_back(tmp[i4194]);
        }
      }
    }
    prev = next_prev4195;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev4197;
    deque<int> prioritized_choice_final_prev4198;
    next_prev4197.clear();
    for(int i4196=0;i4196<(int)prev.size();++i4196) {
      i = prev[i4196];
      tmp = parse_slash4199();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4197.push_back(prev[i4196]); }
      for(int i4215=0;i4215<(int)tmp.size();++i4215) {
        if( tmp[i4215] != FAIL ) {
          prioritized_choice_final_prev4198.push_back(tmp[i4215]);
        }
      }
    }
    prev = next_prev4197;
    next_prev4197.clear();
    for(int i4196=0;i4196<(int)prev.size();++i4196) {
      i = prev[i4196];
      tmp = parse_slash4216();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4197.push_back(prev[i4196]); }
      for(int i4218=0;i4218<(int)tmp.size();++i4218) {
        if( tmp[i4218] != FAIL ) {
          prioritized_choice_final_prev4198.push_back(tmp[i4218]);
        }
      }
    }
    prev = next_prev4197;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev4198.empty() && prioritized_choice_final_prev4198.front() == FAIL )) {
        prioritized_choice_final_prev4198.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev4198;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4175=0;i4175<(int)prev.size();++i4175) {
    if( prev[i4175] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4175]);
    }
  }
  return memo[key(594,backtracking_ptr_for_packrat594)] = result;
}

inline deque<int> parse_not4178() { 
  if(memo.count(key(595,i))) {
    return memo[key(595,i)];
  }
  int backtracking_ptr_for_packrat595=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev4181;
  for(int i4180=0;i4180<(int)prev.size();++i4180) {
    if( prev[i4180] == FAIL ) {
      if(!(!next_prev4181.empty() && next_prev4181.front() == FAIL )) {
        next_prev4181.push_front(FAIL);
      }
      continue;
    }
    i = prev[i4180];
    tmp = parse_W();
    
    for(int i4180=0;i4180<(int)tmp.size();++i4180) {
      if( tmp[i4180] == FAIL ) {
        if(!( !next_prev4181.empty() && next_prev4181[0] == FAIL )) {
          next_prev4181.push_front(FAIL);
        }
      } else {
        next_prev4181.push_back(tmp[i4180]);
      }
    }
  }
  prev = next_prev4181;
  for(int i4179=0;i4179<(int)prev.size();++i4179) {
    if( prev[i4179] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4179]);
    }
  }
  return memo[key(595,backtracking_ptr_for_packrat595)] = result;
}

inline deque<int> parse_slash4199() { 
  if(memo.count(key(596,i))) {
    return memo[key(596,i)];
  }
  int backtracking_ptr_for_packrat596=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4201=0;i4201<(int)prev.size();++i4201) {
        if( prev[i4201] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4201]<m&&I[prev[i4201]]=='e') {
          tmp.push_back(prev[i4201]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4202=0;i4202<(int)prev.size();++i4202) {
        if( prev[i4202] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4202]<m&&I[prev[i4202]]=='l') {
          tmp.push_back(prev[i4202]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4203=0;i4203<(int)prev.size();++i4203) {
        if( prev[i4203] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4203]<m&&I[prev[i4203]]=='s') {
          tmp.push_back(prev[i4203]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4204=0;i4204<(int)prev.size();++i4204) {
        if( prev[i4204] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4204]<m&&I[prev[i4204]]=='e') {
          tmp.push_back(prev[i4204]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4210;
      for(int i4209=0;i4209<(int)prev.size();++i4209) {
        i = prev[i4209];
        tmp = parse_not4205();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4210.push_back(prev[i4209]);
        } else {
          if(!(!next_prev4210.empty()&&next_prev4210.front()==FAIL)) {
            next_prev4210.push_front(FAIL);
          }
        }
      }
      prev = next_prev4210;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4212;
      for(int i4211=0;i4211<(int)prev.size();++i4211) {
        if( prev[i4211] == FAIL ) {
          if(!(!next_prev4212.empty() && next_prev4212.front() == FAIL )) {
            next_prev4212.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4211];
        tmp = parse__();
        
        for(int i4211=0;i4211<(int)tmp.size();++i4211) {
          if( tmp[i4211] == FAIL ) {
            if(!( !next_prev4212.empty() && next_prev4212[0] == FAIL )) {
              next_prev4212.push_front(FAIL);
            }
          } else {
            next_prev4212.push_back(tmp[i4211]);
          }
        }
      }
      prev = next_prev4212;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Statement) */
    deque<int> next_prev4214;
    for(int i4213=0;i4213<(int)prev.size();++i4213) {
      if( prev[i4213] == FAIL ) {
        if(!(!next_prev4214.empty() && next_prev4214.front() == FAIL )) {
          next_prev4214.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4213];
      tmp = parse_Statement();
      
      for(int i4213=0;i4213<(int)tmp.size();++i4213) {
        if( tmp[i4213] == FAIL ) {
          if(!( !next_prev4214.empty() && next_prev4214[0] == FAIL )) {
            next_prev4214.push_front(FAIL);
          }
        } else {
          next_prev4214.push_back(tmp[i4213]);
        }
      }
    }
    prev = next_prev4214;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4200=0;i4200<(int)prev.size();++i4200) {
    if( prev[i4200] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4200]);
    }
  }
  return memo[key(596,backtracking_ptr_for_packrat596)] = result;
}

inline deque<int> parse_not4205() { 
  if(memo.count(key(597,i))) {
    return memo[key(597,i)];
  }
  int backtracking_ptr_for_packrat597=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev4208;
  for(int i4207=0;i4207<(int)prev.size();++i4207) {
    if( prev[i4207] == FAIL ) {
      if(!(!next_prev4208.empty() && next_prev4208.front() == FAIL )) {
        next_prev4208.push_front(FAIL);
      }
      continue;
    }
    i = prev[i4207];
    tmp = parse_W();
    
    for(int i4207=0;i4207<(int)tmp.size();++i4207) {
      if( tmp[i4207] == FAIL ) {
        if(!( !next_prev4208.empty() && next_prev4208[0] == FAIL )) {
          next_prev4208.push_front(FAIL);
        }
      } else {
        next_prev4208.push_back(tmp[i4207]);
      }
    }
  }
  prev = next_prev4208;
  for(int i4206=0;i4206<(int)prev.size();++i4206) {
    if( prev[i4206] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4206]);
    }
  }
  return memo[key(597,backtracking_ptr_for_packrat597)] = result;
}

inline deque<int> parse_slash4216() { 
  if(memo.count(key(598,i))) {
    return memo[key(598,i)];
  }
  int backtracking_ptr_for_packrat598=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i4217=0;i4217<(int)prev.size();++i4217) {
    if( prev[i4217] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4217]);
    }
  }
  return memo[key(598,backtracking_ptr_for_packrat598)] = result;
}

inline deque<int> parse_slash4220() { 
  if(memo.count(key(599,i))) {
    return memo[key(599,i)];
  }
  int backtracking_ptr_for_packrat599=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4222=0;i4222<(int)prev.size();++i4222) {
        if( prev[i4222] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4222]<m&&I[prev[i4222]]=='s') {
          tmp.push_back(prev[i4222]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4223=0;i4223<(int)prev.size();++i4223) {
        if( prev[i4223] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4223]<m&&I[prev[i4223]]=='w') {
          tmp.push_back(prev[i4223]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4224=0;i4224<(int)prev.size();++i4224) {
        if( prev[i4224] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4224]<m&&I[prev[i4224]]=='i') {
          tmp.push_back(prev[i4224]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4225=0;i4225<(int)prev.size();++i4225) {
        if( prev[i4225] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4225]<m&&I[prev[i4225]]=='t') {
          tmp.push_back(prev[i4225]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4226=0;i4226<(int)prev.size();++i4226) {
        if( prev[i4226] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4226]<m&&I[prev[i4226]]=='c') {
          tmp.push_back(prev[i4226]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4227=0;i4227<(int)prev.size();++i4227) {
        if( prev[i4227] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4227]<m&&I[prev[i4227]]=='h') {
          tmp.push_back(prev[i4227]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4233;
      for(int i4232=0;i4232<(int)prev.size();++i4232) {
        i = prev[i4232];
        tmp = parse_not4228();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4233.push_back(prev[i4232]);
        } else {
          if(!(!next_prev4233.empty()&&next_prev4233.front()==FAIL)) {
            next_prev4233.push_front(FAIL);
          }
        }
      }
      prev = next_prev4233;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4235;
      for(int i4234=0;i4234<(int)prev.size();++i4234) {
        if( prev[i4234] == FAIL ) {
          if(!(!next_prev4235.empty() && next_prev4235.front() == FAIL )) {
            next_prev4235.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4234];
        tmp = parse__();
        
        for(int i4234=0;i4234<(int)tmp.size();++i4234) {
          if( tmp[i4234] == FAIL ) {
            if(!( !next_prev4235.empty() && next_prev4235[0] == FAIL )) {
              next_prev4235.push_front(FAIL);
            }
          } else {
            next_prev4235.push_back(tmp[i4234]);
          }
        }
      }
      prev = next_prev4235;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4236=0;i4236<(int)prev.size();++i4236) {
        if( prev[i4236] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4236]<m&&I[prev[i4236]]=='(') {
          tmp.push_back(prev[i4236]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4238;
      for(int i4237=0;i4237<(int)prev.size();++i4237) {
        if( prev[i4237] == FAIL ) {
          if(!(!next_prev4238.empty() && next_prev4238.front() == FAIL )) {
            next_prev4238.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4237];
        tmp = parse__();
        
        for(int i4237=0;i4237<(int)tmp.size();++i4237) {
          if( tmp[i4237] == FAIL ) {
            if(!( !next_prev4238.empty() && next_prev4238[0] == FAIL )) {
              next_prev4238.push_front(FAIL);
            }
          } else {
            next_prev4238.push_back(tmp[i4237]);
          }
        }
      }
      prev = next_prev4238;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Expression) */
    deque<int> next_prev4240;
    for(int i4239=0;i4239<(int)prev.size();++i4239) {
      if( prev[i4239] == FAIL ) {
        if(!(!next_prev4240.empty() && next_prev4240.front() == FAIL )) {
          next_prev4240.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4239];
      tmp = parse_Expression();
      
      for(int i4239=0;i4239<(int)tmp.size();++i4239) {
        if( tmp[i4239] == FAIL ) {
          if(!( !next_prev4240.empty() && next_prev4240[0] == FAIL )) {
            next_prev4240.push_front(FAIL);
          }
        } else {
          next_prev4240.push_back(tmp[i4239]);
        }
      }
    }
    prev = next_prev4240;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4241=0;i4241<(int)prev.size();++i4241) {
        if( prev[i4241] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4241]<m&&I[prev[i4241]]==')') {
          tmp.push_back(prev[i4241]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4243;
      for(int i4242=0;i4242<(int)prev.size();++i4242) {
        if( prev[i4242] == FAIL ) {
          if(!(!next_prev4243.empty() && next_prev4243.front() == FAIL )) {
            next_prev4243.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4242];
        tmp = parse__();
        
        for(int i4242=0;i4242<(int)tmp.size();++i4242) {
          if( tmp[i4242] == FAIL ) {
            if(!( !next_prev4243.empty() && next_prev4243[0] == FAIL )) {
              next_prev4243.push_front(FAIL);
            }
          } else {
            next_prev4243.push_back(tmp[i4242]);
          }
        }
      }
      prev = next_prev4243;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Statement) */
    deque<int> next_prev4245;
    for(int i4244=0;i4244<(int)prev.size();++i4244) {
      if( prev[i4244] == FAIL ) {
        if(!(!next_prev4245.empty() && next_prev4245.front() == FAIL )) {
          next_prev4245.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4244];
      tmp = parse_Statement();
      
      for(int i4244=0;i4244<(int)tmp.size();++i4244) {
        if( tmp[i4244] == FAIL ) {
          if(!( !next_prev4245.empty() && next_prev4245[0] == FAIL )) {
            next_prev4245.push_front(FAIL);
          }
        } else {
          next_prev4245.push_back(tmp[i4244]);
        }
      }
    }
    prev = next_prev4245;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4221=0;i4221<(int)prev.size();++i4221) {
    if( prev[i4221] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4221]);
    }
  }
  return memo[key(599,backtracking_ptr_for_packrat599)] = result;
}

inline deque<int> parse_not4228() { 
  if(memo.count(key(600,i))) {
    return memo[key(600,i)];
  }
  int backtracking_ptr_for_packrat600=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev4231;
  for(int i4230=0;i4230<(int)prev.size();++i4230) {
    if( prev[i4230] == FAIL ) {
      if(!(!next_prev4231.empty() && next_prev4231.front() == FAIL )) {
        next_prev4231.push_front(FAIL);
      }
      continue;
    }
    i = prev[i4230];
    tmp = parse_W();
    
    for(int i4230=0;i4230<(int)tmp.size();++i4230) {
      if( tmp[i4230] == FAIL ) {
        if(!( !next_prev4231.empty() && next_prev4231[0] == FAIL )) {
          next_prev4231.push_front(FAIL);
        }
      } else {
        next_prev4231.push_back(tmp[i4230]);
      }
    }
  }
  prev = next_prev4231;
  for(int i4229=0;i4229<(int)prev.size();++i4229) {
    if( prev[i4229] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4229]);
    }
  }
  return memo[key(600,backtracking_ptr_for_packrat600)] = result;
}

inline deque<int> parse_slash4247() { 
  if(memo.count(key(601,i))) {
    return memo[key(601,i)];
  }
  int backtracking_ptr_for_packrat601=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4249=0;i4249<(int)prev.size();++i4249) {
        if( prev[i4249] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4249]<m&&I[prev[i4249]]=='w') {
          tmp.push_back(prev[i4249]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4250=0;i4250<(int)prev.size();++i4250) {
        if( prev[i4250] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4250]<m&&I[prev[i4250]]=='h') {
          tmp.push_back(prev[i4250]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4251=0;i4251<(int)prev.size();++i4251) {
        if( prev[i4251] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4251]<m&&I[prev[i4251]]=='i') {
          tmp.push_back(prev[i4251]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4252=0;i4252<(int)prev.size();++i4252) {
        if( prev[i4252] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4252]<m&&I[prev[i4252]]=='l') {
          tmp.push_back(prev[i4252]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4253=0;i4253<(int)prev.size();++i4253) {
        if( prev[i4253] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4253]<m&&I[prev[i4253]]=='e') {
          tmp.push_back(prev[i4253]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4259;
      for(int i4258=0;i4258<(int)prev.size();++i4258) {
        i = prev[i4258];
        tmp = parse_not4254();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4259.push_back(prev[i4258]);
        } else {
          if(!(!next_prev4259.empty()&&next_prev4259.front()==FAIL)) {
            next_prev4259.push_front(FAIL);
          }
        }
      }
      prev = next_prev4259;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4261;
      for(int i4260=0;i4260<(int)prev.size();++i4260) {
        if( prev[i4260] == FAIL ) {
          if(!(!next_prev4261.empty() && next_prev4261.front() == FAIL )) {
            next_prev4261.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4260];
        tmp = parse__();
        
        for(int i4260=0;i4260<(int)tmp.size();++i4260) {
          if( tmp[i4260] == FAIL ) {
            if(!( !next_prev4261.empty() && next_prev4261[0] == FAIL )) {
              next_prev4261.push_front(FAIL);
            }
          } else {
            next_prev4261.push_back(tmp[i4260]);
          }
        }
      }
      prev = next_prev4261;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4262=0;i4262<(int)prev.size();++i4262) {
        if( prev[i4262] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4262]<m&&I[prev[i4262]]=='(') {
          tmp.push_back(prev[i4262]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4264;
      for(int i4263=0;i4263<(int)prev.size();++i4263) {
        if( prev[i4263] == FAIL ) {
          if(!(!next_prev4264.empty() && next_prev4264.front() == FAIL )) {
            next_prev4264.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4263];
        tmp = parse__();
        
        for(int i4263=0;i4263<(int)tmp.size();++i4263) {
          if( tmp[i4263] == FAIL ) {
            if(!( !next_prev4264.empty() && next_prev4264[0] == FAIL )) {
              next_prev4264.push_front(FAIL);
            }
          } else {
            next_prev4264.push_back(tmp[i4263]);
          }
        }
      }
      prev = next_prev4264;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Expression) */
    deque<int> next_prev4266;
    for(int i4265=0;i4265<(int)prev.size();++i4265) {
      if( prev[i4265] == FAIL ) {
        if(!(!next_prev4266.empty() && next_prev4266.front() == FAIL )) {
          next_prev4266.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4265];
      tmp = parse_Expression();
      
      for(int i4265=0;i4265<(int)tmp.size();++i4265) {
        if( tmp[i4265] == FAIL ) {
          if(!( !next_prev4266.empty() && next_prev4266[0] == FAIL )) {
            next_prev4266.push_front(FAIL);
          }
        } else {
          next_prev4266.push_back(tmp[i4265]);
        }
      }
    }
    prev = next_prev4266;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4267=0;i4267<(int)prev.size();++i4267) {
        if( prev[i4267] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4267]<m&&I[prev[i4267]]==')') {
          tmp.push_back(prev[i4267]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4269;
      for(int i4268=0;i4268<(int)prev.size();++i4268) {
        if( prev[i4268] == FAIL ) {
          if(!(!next_prev4269.empty() && next_prev4269.front() == FAIL )) {
            next_prev4269.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4268];
        tmp = parse__();
        
        for(int i4268=0;i4268<(int)tmp.size();++i4268) {
          if( tmp[i4268] == FAIL ) {
            if(!( !next_prev4269.empty() && next_prev4269[0] == FAIL )) {
              next_prev4269.push_front(FAIL);
            }
          } else {
            next_prev4269.push_back(tmp[i4268]);
          }
        }
      }
      prev = next_prev4269;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Statement) */
    deque<int> next_prev4271;
    for(int i4270=0;i4270<(int)prev.size();++i4270) {
      if( prev[i4270] == FAIL ) {
        if(!(!next_prev4271.empty() && next_prev4271.front() == FAIL )) {
          next_prev4271.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4270];
      tmp = parse_Statement();
      
      for(int i4270=0;i4270<(int)tmp.size();++i4270) {
        if( tmp[i4270] == FAIL ) {
          if(!( !next_prev4271.empty() && next_prev4271[0] == FAIL )) {
            next_prev4271.push_front(FAIL);
          }
        } else {
          next_prev4271.push_back(tmp[i4270]);
        }
      }
    }
    prev = next_prev4271;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4248=0;i4248<(int)prev.size();++i4248) {
    if( prev[i4248] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4248]);
    }
  }
  return memo[key(601,backtracking_ptr_for_packrat601)] = result;
}

inline deque<int> parse_not4254() { 
  if(memo.count(key(602,i))) {
    return memo[key(602,i)];
  }
  int backtracking_ptr_for_packrat602=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev4257;
  for(int i4256=0;i4256<(int)prev.size();++i4256) {
    if( prev[i4256] == FAIL ) {
      if(!(!next_prev4257.empty() && next_prev4257.front() == FAIL )) {
        next_prev4257.push_front(FAIL);
      }
      continue;
    }
    i = prev[i4256];
    tmp = parse_W();
    
    for(int i4256=0;i4256<(int)tmp.size();++i4256) {
      if( tmp[i4256] == FAIL ) {
        if(!( !next_prev4257.empty() && next_prev4257[0] == FAIL )) {
          next_prev4257.push_front(FAIL);
        }
      } else {
        next_prev4257.push_back(tmp[i4256]);
      }
    }
  }
  prev = next_prev4257;
  for(int i4255=0;i4255<(int)prev.size();++i4255) {
    if( prev[i4255] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4255]);
    }
  }
  return memo[key(602,backtracking_ptr_for_packrat602)] = result;
}

inline deque<int> parse_slash4273() { 
  if(memo.count(key(603,i))) {
    return memo[key(603,i)];
  }
  int backtracking_ptr_for_packrat603=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4275=0;i4275<(int)prev.size();++i4275) {
        if( prev[i4275] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4275]<m&&I[prev[i4275]]=='d') {
          tmp.push_back(prev[i4275]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4276=0;i4276<(int)prev.size();++i4276) {
        if( prev[i4276] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4276]<m&&I[prev[i4276]]=='o') {
          tmp.push_back(prev[i4276]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4282;
      for(int i4281=0;i4281<(int)prev.size();++i4281) {
        i = prev[i4281];
        tmp = parse_not4277();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4282.push_back(prev[i4281]);
        } else {
          if(!(!next_prev4282.empty()&&next_prev4282.front()==FAIL)) {
            next_prev4282.push_front(FAIL);
          }
        }
      }
      prev = next_prev4282;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4284;
      for(int i4283=0;i4283<(int)prev.size();++i4283) {
        if( prev[i4283] == FAIL ) {
          if(!(!next_prev4284.empty() && next_prev4284.front() == FAIL )) {
            next_prev4284.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4283];
        tmp = parse__();
        
        for(int i4283=0;i4283<(int)tmp.size();++i4283) {
          if( tmp[i4283] == FAIL ) {
            if(!( !next_prev4284.empty() && next_prev4284[0] == FAIL )) {
              next_prev4284.push_front(FAIL);
            }
          } else {
            next_prev4284.push_back(tmp[i4283]);
          }
        }
      }
      prev = next_prev4284;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Statement) */
    deque<int> next_prev4286;
    for(int i4285=0;i4285<(int)prev.size();++i4285) {
      if( prev[i4285] == FAIL ) {
        if(!(!next_prev4286.empty() && next_prev4286.front() == FAIL )) {
          next_prev4286.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4285];
      tmp = parse_Statement();
      
      for(int i4285=0;i4285<(int)tmp.size();++i4285) {
        if( tmp[i4285] == FAIL ) {
          if(!( !next_prev4286.empty() && next_prev4286[0] == FAIL )) {
            next_prev4286.push_front(FAIL);
          }
        } else {
          next_prev4286.push_back(tmp[i4285]);
        }
      }
    }
    prev = next_prev4286;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4287=0;i4287<(int)prev.size();++i4287) {
        if( prev[i4287] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4287]<m&&I[prev[i4287]]=='w') {
          tmp.push_back(prev[i4287]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4288=0;i4288<(int)prev.size();++i4288) {
        if( prev[i4288] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4288]<m&&I[prev[i4288]]=='h') {
          tmp.push_back(prev[i4288]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4289=0;i4289<(int)prev.size();++i4289) {
        if( prev[i4289] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4289]<m&&I[prev[i4289]]=='i') {
          tmp.push_back(prev[i4289]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4290=0;i4290<(int)prev.size();++i4290) {
        if( prev[i4290] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4290]<m&&I[prev[i4290]]=='l') {
          tmp.push_back(prev[i4290]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4291=0;i4291<(int)prev.size();++i4291) {
        if( prev[i4291] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4291]<m&&I[prev[i4291]]=='e') {
          tmp.push_back(prev[i4291]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4297;
      for(int i4296=0;i4296<(int)prev.size();++i4296) {
        i = prev[i4296];
        tmp = parse_not4292();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4297.push_back(prev[i4296]);
        } else {
          if(!(!next_prev4297.empty()&&next_prev4297.front()==FAIL)) {
            next_prev4297.push_front(FAIL);
          }
        }
      }
      prev = next_prev4297;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4299;
      for(int i4298=0;i4298<(int)prev.size();++i4298) {
        if( prev[i4298] == FAIL ) {
          if(!(!next_prev4299.empty() && next_prev4299.front() == FAIL )) {
            next_prev4299.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4298];
        tmp = parse__();
        
        for(int i4298=0;i4298<(int)tmp.size();++i4298) {
          if( tmp[i4298] == FAIL ) {
            if(!( !next_prev4299.empty() && next_prev4299[0] == FAIL )) {
              next_prev4299.push_front(FAIL);
            }
          } else {
            next_prev4299.push_back(tmp[i4298]);
          }
        }
      }
      prev = next_prev4299;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4300=0;i4300<(int)prev.size();++i4300) {
        if( prev[i4300] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4300]<m&&I[prev[i4300]]=='(') {
          tmp.push_back(prev[i4300]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4302;
      for(int i4301=0;i4301<(int)prev.size();++i4301) {
        if( prev[i4301] == FAIL ) {
          if(!(!next_prev4302.empty() && next_prev4302.front() == FAIL )) {
            next_prev4302.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4301];
        tmp = parse__();
        
        for(int i4301=0;i4301<(int)tmp.size();++i4301) {
          if( tmp[i4301] == FAIL ) {
            if(!( !next_prev4302.empty() && next_prev4302[0] == FAIL )) {
              next_prev4302.push_front(FAIL);
            }
          } else {
            next_prev4302.push_back(tmp[i4301]);
          }
        }
      }
      prev = next_prev4302;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Expression) */
    deque<int> next_prev4304;
    for(int i4303=0;i4303<(int)prev.size();++i4303) {
      if( prev[i4303] == FAIL ) {
        if(!(!next_prev4304.empty() && next_prev4304.front() == FAIL )) {
          next_prev4304.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4303];
      tmp = parse_Expression();
      
      for(int i4303=0;i4303<(int)tmp.size();++i4303) {
        if( tmp[i4303] == FAIL ) {
          if(!( !next_prev4304.empty() && next_prev4304[0] == FAIL )) {
            next_prev4304.push_front(FAIL);
          }
        } else {
          next_prev4304.push_back(tmp[i4303]);
        }
      }
    }
    prev = next_prev4304;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4305=0;i4305<(int)prev.size();++i4305) {
        if( prev[i4305] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4305]<m&&I[prev[i4305]]==')') {
          tmp.push_back(prev[i4305]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4307;
      for(int i4306=0;i4306<(int)prev.size();++i4306) {
        if( prev[i4306] == FAIL ) {
          if(!(!next_prev4307.empty() && next_prev4307.front() == FAIL )) {
            next_prev4307.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4306];
        tmp = parse__();
        
        for(int i4306=0;i4306<(int)tmp.size();++i4306) {
          if( tmp[i4306] == FAIL ) {
            if(!( !next_prev4307.empty() && next_prev4307[0] == FAIL )) {
              next_prev4307.push_front(FAIL);
            }
          } else {
            next_prev4307.push_back(tmp[i4306]);
          }
        }
      }
      prev = next_prev4307;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4308=0;i4308<(int)prev.size();++i4308) {
        if( prev[i4308] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4308]<m&&I[prev[i4308]]==';') {
          tmp.push_back(prev[i4308]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4310;
      for(int i4309=0;i4309<(int)prev.size();++i4309) {
        if( prev[i4309] == FAIL ) {
          if(!(!next_prev4310.empty() && next_prev4310.front() == FAIL )) {
            next_prev4310.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4309];
        tmp = parse__();
        
        for(int i4309=0;i4309<(int)tmp.size();++i4309) {
          if( tmp[i4309] == FAIL ) {
            if(!( !next_prev4310.empty() && next_prev4310[0] == FAIL )) {
              next_prev4310.push_front(FAIL);
            }
          } else {
            next_prev4310.push_back(tmp[i4309]);
          }
        }
      }
      prev = next_prev4310;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4274=0;i4274<(int)prev.size();++i4274) {
    if( prev[i4274] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4274]);
    }
  }
  return memo[key(603,backtracking_ptr_for_packrat603)] = result;
}

inline deque<int> parse_not4277() { 
  if(memo.count(key(604,i))) {
    return memo[key(604,i)];
  }
  int backtracking_ptr_for_packrat604=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev4280;
  for(int i4279=0;i4279<(int)prev.size();++i4279) {
    if( prev[i4279] == FAIL ) {
      if(!(!next_prev4280.empty() && next_prev4280.front() == FAIL )) {
        next_prev4280.push_front(FAIL);
      }
      continue;
    }
    i = prev[i4279];
    tmp = parse_W();
    
    for(int i4279=0;i4279<(int)tmp.size();++i4279) {
      if( tmp[i4279] == FAIL ) {
        if(!( !next_prev4280.empty() && next_prev4280[0] == FAIL )) {
          next_prev4280.push_front(FAIL);
        }
      } else {
        next_prev4280.push_back(tmp[i4279]);
      }
    }
  }
  prev = next_prev4280;
  for(int i4278=0;i4278<(int)prev.size();++i4278) {
    if( prev[i4278] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4278]);
    }
  }
  return memo[key(604,backtracking_ptr_for_packrat604)] = result;
}

inline deque<int> parse_not4292() { 
  if(memo.count(key(605,i))) {
    return memo[key(605,i)];
  }
  int backtracking_ptr_for_packrat605=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev4295;
  for(int i4294=0;i4294<(int)prev.size();++i4294) {
    if( prev[i4294] == FAIL ) {
      if(!(!next_prev4295.empty() && next_prev4295.front() == FAIL )) {
        next_prev4295.push_front(FAIL);
      }
      continue;
    }
    i = prev[i4294];
    tmp = parse_W();
    
    for(int i4294=0;i4294<(int)tmp.size();++i4294) {
      if( tmp[i4294] == FAIL ) {
        if(!( !next_prev4295.empty() && next_prev4295[0] == FAIL )) {
          next_prev4295.push_front(FAIL);
        }
      } else {
        next_prev4295.push_back(tmp[i4294]);
      }
    }
  }
  prev = next_prev4295;
  for(int i4293=0;i4293<(int)prev.size();++i4293) {
    if( prev[i4293] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4293]);
    }
  }
  return memo[key(605,backtracking_ptr_for_packrat605)] = result;
}

inline deque<int> parse_slash4312() { 
  if(memo.count(key(606,i))) {
    return memo[key(606,i)];
  }
  int backtracking_ptr_for_packrat606=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4314=0;i4314<(int)prev.size();++i4314) {
        if( prev[i4314] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4314]<m&&I[prev[i4314]]=='f') {
          tmp.push_back(prev[i4314]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4315=0;i4315<(int)prev.size();++i4315) {
        if( prev[i4315] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4315]<m&&I[prev[i4315]]=='o') {
          tmp.push_back(prev[i4315]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4316=0;i4316<(int)prev.size();++i4316) {
        if( prev[i4316] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4316]<m&&I[prev[i4316]]=='r') {
          tmp.push_back(prev[i4316]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4322;
      for(int i4321=0;i4321<(int)prev.size();++i4321) {
        i = prev[i4321];
        tmp = parse_not4317();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4322.push_back(prev[i4321]);
        } else {
          if(!(!next_prev4322.empty()&&next_prev4322.front()==FAIL)) {
            next_prev4322.push_front(FAIL);
          }
        }
      }
      prev = next_prev4322;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4324;
      for(int i4323=0;i4323<(int)prev.size();++i4323) {
        if( prev[i4323] == FAIL ) {
          if(!(!next_prev4324.empty() && next_prev4324.front() == FAIL )) {
            next_prev4324.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4323];
        tmp = parse__();
        
        for(int i4323=0;i4323<(int)tmp.size();++i4323) {
          if( tmp[i4323] == FAIL ) {
            if(!( !next_prev4324.empty() && next_prev4324[0] == FAIL )) {
              next_prev4324.push_front(FAIL);
            }
          } else {
            next_prev4324.push_back(tmp[i4323]);
          }
        }
      }
      prev = next_prev4324;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4325=0;i4325<(int)prev.size();++i4325) {
        if( prev[i4325] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4325]<m&&I[prev[i4325]]=='(') {
          tmp.push_back(prev[i4325]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4327;
      for(int i4326=0;i4326<(int)prev.size();++i4326) {
        if( prev[i4326] == FAIL ) {
          if(!(!next_prev4327.empty() && next_prev4327.front() == FAIL )) {
            next_prev4327.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4326];
        tmp = parse__();
        
        for(int i4326=0;i4326<(int)tmp.size();++i4326) {
          if( tmp[i4326] == FAIL ) {
            if(!( !next_prev4327.empty() && next_prev4327[0] == FAIL )) {
              next_prev4327.push_front(FAIL);
            }
          } else {
            next_prev4327.push_back(tmp[i4326]);
          }
        }
      }
      prev = next_prev4327;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev4329;
    deque<int> prioritized_choice_final_prev4330;
    next_prev4329.clear();
    for(int i4328=0;i4328<(int)prev.size();++i4328) {
      i = prev[i4328];
      tmp = parse_slash4331();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4329.push_back(prev[i4328]); }
      for(int i4335=0;i4335<(int)tmp.size();++i4335) {
        if( tmp[i4335] != FAIL ) {
          prioritized_choice_final_prev4330.push_back(tmp[i4335]);
        }
      }
    }
    prev = next_prev4329;
    next_prev4329.clear();
    for(int i4328=0;i4328<(int)prev.size();++i4328) {
      i = prev[i4328];
      tmp = parse_slash4336();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4329.push_back(prev[i4328]); }
      for(int i4338=0;i4338<(int)tmp.size();++i4338) {
        if( tmp[i4338] != FAIL ) {
          prioritized_choice_final_prev4330.push_back(tmp[i4338]);
        }
      }
    }
    prev = next_prev4329;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev4330.empty() && prioritized_choice_final_prev4330.front() == FAIL )) {
        prioritized_choice_final_prev4330.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev4330;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4339=0;i4339<(int)prev.size();++i4339) {
        if( prev[i4339] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4339]<m&&I[prev[i4339]]==';') {
          tmp.push_back(prev[i4339]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4341;
      for(int i4340=0;i4340<(int)prev.size();++i4340) {
        if( prev[i4340] == FAIL ) {
          if(!(!next_prev4341.empty() && next_prev4341.front() == FAIL )) {
            next_prev4341.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4340];
        tmp = parse__();
        
        for(int i4340=0;i4340<(int)tmp.size();++i4340) {
          if( tmp[i4340] == FAIL ) {
            if(!( !next_prev4341.empty() && next_prev4341[0] == FAIL )) {
              next_prev4341.push_front(FAIL);
            }
          } else {
            next_prev4341.push_back(tmp[i4340]);
          }
        }
      }
      prev = next_prev4341;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev4343;
    deque<int> prioritized_choice_final_prev4344;
    next_prev4343.clear();
    for(int i4342=0;i4342<(int)prev.size();++i4342) {
      i = prev[i4342];
      tmp = parse_slash4345();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4343.push_back(prev[i4342]); }
      for(int i4349=0;i4349<(int)tmp.size();++i4349) {
        if( tmp[i4349] != FAIL ) {
          prioritized_choice_final_prev4344.push_back(tmp[i4349]);
        }
      }
    }
    prev = next_prev4343;
    next_prev4343.clear();
    for(int i4342=0;i4342<(int)prev.size();++i4342) {
      i = prev[i4342];
      tmp = parse_slash4350();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4343.push_back(prev[i4342]); }
      for(int i4352=0;i4352<(int)tmp.size();++i4352) {
        if( tmp[i4352] != FAIL ) {
          prioritized_choice_final_prev4344.push_back(tmp[i4352]);
        }
      }
    }
    prev = next_prev4343;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev4344.empty() && prioritized_choice_final_prev4344.front() == FAIL )) {
        prioritized_choice_final_prev4344.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev4344;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4353=0;i4353<(int)prev.size();++i4353) {
        if( prev[i4353] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4353]<m&&I[prev[i4353]]==';') {
          tmp.push_back(prev[i4353]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4355;
      for(int i4354=0;i4354<(int)prev.size();++i4354) {
        if( prev[i4354] == FAIL ) {
          if(!(!next_prev4355.empty() && next_prev4355.front() == FAIL )) {
            next_prev4355.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4354];
        tmp = parse__();
        
        for(int i4354=0;i4354<(int)tmp.size();++i4354) {
          if( tmp[i4354] == FAIL ) {
            if(!( !next_prev4355.empty() && next_prev4355[0] == FAIL )) {
              next_prev4355.push_front(FAIL);
            }
          } else {
            next_prev4355.push_back(tmp[i4354]);
          }
        }
      }
      prev = next_prev4355;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev4357;
    deque<int> prioritized_choice_final_prev4358;
    next_prev4357.clear();
    for(int i4356=0;i4356<(int)prev.size();++i4356) {
      i = prev[i4356];
      tmp = parse_slash4359();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4357.push_back(prev[i4356]); }
      for(int i4363=0;i4363<(int)tmp.size();++i4363) {
        if( tmp[i4363] != FAIL ) {
          prioritized_choice_final_prev4358.push_back(tmp[i4363]);
        }
      }
    }
    prev = next_prev4357;
    next_prev4357.clear();
    for(int i4356=0;i4356<(int)prev.size();++i4356) {
      i = prev[i4356];
      tmp = parse_slash4364();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4357.push_back(prev[i4356]); }
      for(int i4366=0;i4366<(int)tmp.size();++i4366) {
        if( tmp[i4366] != FAIL ) {
          prioritized_choice_final_prev4358.push_back(tmp[i4366]);
        }
      }
    }
    prev = next_prev4357;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev4358.empty() && prioritized_choice_final_prev4358.front() == FAIL )) {
        prioritized_choice_final_prev4358.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev4358;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4367=0;i4367<(int)prev.size();++i4367) {
        if( prev[i4367] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4367]<m&&I[prev[i4367]]==')') {
          tmp.push_back(prev[i4367]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4369;
      for(int i4368=0;i4368<(int)prev.size();++i4368) {
        if( prev[i4368] == FAIL ) {
          if(!(!next_prev4369.empty() && next_prev4369.front() == FAIL )) {
            next_prev4369.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4368];
        tmp = parse__();
        
        for(int i4368=0;i4368<(int)tmp.size();++i4368) {
          if( tmp[i4368] == FAIL ) {
            if(!( !next_prev4369.empty() && next_prev4369[0] == FAIL )) {
              next_prev4369.push_front(FAIL);
            }
          } else {
            next_prev4369.push_back(tmp[i4368]);
          }
        }
      }
      prev = next_prev4369;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Statement) */
    deque<int> next_prev4371;
    for(int i4370=0;i4370<(int)prev.size();++i4370) {
      if( prev[i4370] == FAIL ) {
        if(!(!next_prev4371.empty() && next_prev4371.front() == FAIL )) {
          next_prev4371.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4370];
      tmp = parse_Statement();
      
      for(int i4370=0;i4370<(int)tmp.size();++i4370) {
        if( tmp[i4370] == FAIL ) {
          if(!( !next_prev4371.empty() && next_prev4371[0] == FAIL )) {
            next_prev4371.push_front(FAIL);
          }
        } else {
          next_prev4371.push_back(tmp[i4370]);
        }
      }
    }
    prev = next_prev4371;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4313=0;i4313<(int)prev.size();++i4313) {
    if( prev[i4313] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4313]);
    }
  }
  return memo[key(606,backtracking_ptr_for_packrat606)] = result;
}

inline deque<int> parse_not4317() { 
  if(memo.count(key(607,i))) {
    return memo[key(607,i)];
  }
  int backtracking_ptr_for_packrat607=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev4320;
  for(int i4319=0;i4319<(int)prev.size();++i4319) {
    if( prev[i4319] == FAIL ) {
      if(!(!next_prev4320.empty() && next_prev4320.front() == FAIL )) {
        next_prev4320.push_front(FAIL);
      }
      continue;
    }
    i = prev[i4319];
    tmp = parse_W();
    
    for(int i4319=0;i4319<(int)tmp.size();++i4319) {
      if( tmp[i4319] == FAIL ) {
        if(!( !next_prev4320.empty() && next_prev4320[0] == FAIL )) {
          next_prev4320.push_front(FAIL);
        }
      } else {
        next_prev4320.push_back(tmp[i4319]);
      }
    }
  }
  prev = next_prev4320;
  for(int i4318=0;i4318<(int)prev.size();++i4318) {
    if( prev[i4318] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4318]);
    }
  }
  return memo[key(607,backtracking_ptr_for_packrat607)] = result;
}

inline deque<int> parse_slash4331() { 
  if(memo.count(key(608,i))) {
    return memo[key(608,i)];
  }
  int backtracking_ptr_for_packrat608=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Expressions) */
    deque<int> next_prev4334;
    for(int i4333=0;i4333<(int)prev.size();++i4333) {
      if( prev[i4333] == FAIL ) {
        if(!(!next_prev4334.empty() && next_prev4334.front() == FAIL )) {
          next_prev4334.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4333];
      tmp = parse_Expressions();
      
      for(int i4333=0;i4333<(int)tmp.size();++i4333) {
        if( tmp[i4333] == FAIL ) {
          if(!( !next_prev4334.empty() && next_prev4334[0] == FAIL )) {
            next_prev4334.push_front(FAIL);
          }
        } else {
          next_prev4334.push_back(tmp[i4333]);
        }
      }
    }
    prev = next_prev4334;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4332=0;i4332<(int)prev.size();++i4332) {
    if( prev[i4332] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4332]);
    }
  }
  return memo[key(608,backtracking_ptr_for_packrat608)] = result;
}

inline deque<int> parse_slash4336() { 
  if(memo.count(key(609,i))) {
    return memo[key(609,i)];
  }
  int backtracking_ptr_for_packrat609=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i4337=0;i4337<(int)prev.size();++i4337) {
    if( prev[i4337] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4337]);
    }
  }
  return memo[key(609,backtracking_ptr_for_packrat609)] = result;
}

inline deque<int> parse_slash4345() { 
  if(memo.count(key(610,i))) {
    return memo[key(610,i)];
  }
  int backtracking_ptr_for_packrat610=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Expression) */
    deque<int> next_prev4348;
    for(int i4347=0;i4347<(int)prev.size();++i4347) {
      if( prev[i4347] == FAIL ) {
        if(!(!next_prev4348.empty() && next_prev4348.front() == FAIL )) {
          next_prev4348.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4347];
      tmp = parse_Expression();
      
      for(int i4347=0;i4347<(int)tmp.size();++i4347) {
        if( tmp[i4347] == FAIL ) {
          if(!( !next_prev4348.empty() && next_prev4348[0] == FAIL )) {
            next_prev4348.push_front(FAIL);
          }
        } else {
          next_prev4348.push_back(tmp[i4347]);
        }
      }
    }
    prev = next_prev4348;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4346=0;i4346<(int)prev.size();++i4346) {
    if( prev[i4346] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4346]);
    }
  }
  return memo[key(610,backtracking_ptr_for_packrat610)] = result;
}

inline deque<int> parse_slash4350() { 
  if(memo.count(key(611,i))) {
    return memo[key(611,i)];
  }
  int backtracking_ptr_for_packrat611=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i4351=0;i4351<(int)prev.size();++i4351) {
    if( prev[i4351] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4351]);
    }
  }
  return memo[key(611,backtracking_ptr_for_packrat611)] = result;
}

inline deque<int> parse_slash4359() { 
  if(memo.count(key(612,i))) {
    return memo[key(612,i)];
  }
  int backtracking_ptr_for_packrat612=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Expressions) */
    deque<int> next_prev4362;
    for(int i4361=0;i4361<(int)prev.size();++i4361) {
      if( prev[i4361] == FAIL ) {
        if(!(!next_prev4362.empty() && next_prev4362.front() == FAIL )) {
          next_prev4362.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4361];
      tmp = parse_Expressions();
      
      for(int i4361=0;i4361<(int)tmp.size();++i4361) {
        if( tmp[i4361] == FAIL ) {
          if(!( !next_prev4362.empty() && next_prev4362[0] == FAIL )) {
            next_prev4362.push_front(FAIL);
          }
        } else {
          next_prev4362.push_back(tmp[i4361]);
        }
      }
    }
    prev = next_prev4362;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4360=0;i4360<(int)prev.size();++i4360) {
    if( prev[i4360] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4360]);
    }
  }
  return memo[key(612,backtracking_ptr_for_packrat612)] = result;
}

inline deque<int> parse_slash4364() { 
  if(memo.count(key(613,i))) {
    return memo[key(613,i)];
  }
  int backtracking_ptr_for_packrat613=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i4365=0;i4365<(int)prev.size();++i4365) {
    if( prev[i4365] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4365]);
    }
  }
  return memo[key(613,backtracking_ptr_for_packrat613)] = result;
}

inline deque<int> parse_slash4373() { 
  if(memo.count(key(614,i))) {
    return memo[key(614,i)];
  }
  int backtracking_ptr_for_packrat614=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4375=0;i4375<(int)prev.size();++i4375) {
        if( prev[i4375] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4375]<m&&I[prev[i4375]]=='f') {
          tmp.push_back(prev[i4375]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4376=0;i4376<(int)prev.size();++i4376) {
        if( prev[i4376] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4376]<m&&I[prev[i4376]]=='o') {
          tmp.push_back(prev[i4376]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4377=0;i4377<(int)prev.size();++i4377) {
        if( prev[i4377] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4377]<m&&I[prev[i4377]]=='r') {
          tmp.push_back(prev[i4377]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4383;
      for(int i4382=0;i4382<(int)prev.size();++i4382) {
        i = prev[i4382];
        tmp = parse_not4378();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4383.push_back(prev[i4382]);
        } else {
          if(!(!next_prev4383.empty()&&next_prev4383.front()==FAIL)) {
            next_prev4383.push_front(FAIL);
          }
        }
      }
      prev = next_prev4383;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4385;
      for(int i4384=0;i4384<(int)prev.size();++i4384) {
        if( prev[i4384] == FAIL ) {
          if(!(!next_prev4385.empty() && next_prev4385.front() == FAIL )) {
            next_prev4385.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4384];
        tmp = parse__();
        
        for(int i4384=0;i4384<(int)tmp.size();++i4384) {
          if( tmp[i4384] == FAIL ) {
            if(!( !next_prev4385.empty() && next_prev4385[0] == FAIL )) {
              next_prev4385.push_front(FAIL);
            }
          } else {
            next_prev4385.push_back(tmp[i4384]);
          }
        }
      }
      prev = next_prev4385;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4386=0;i4386<(int)prev.size();++i4386) {
        if( prev[i4386] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4386]<m&&I[prev[i4386]]=='(') {
          tmp.push_back(prev[i4386]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4388;
      for(int i4387=0;i4387<(int)prev.size();++i4387) {
        if( prev[i4387] == FAIL ) {
          if(!(!next_prev4388.empty() && next_prev4388.front() == FAIL )) {
            next_prev4388.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4387];
        tmp = parse__();
        
        for(int i4387=0;i4387<(int)tmp.size();++i4387) {
          if( tmp[i4387] == FAIL ) {
            if(!( !next_prev4388.empty() && next_prev4388[0] == FAIL )) {
              next_prev4388.push_front(FAIL);
            }
          } else {
            next_prev4388.push_back(tmp[i4387]);
          }
        }
      }
      prev = next_prev4388;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (VariableDeclaration) */
    deque<int> next_prev4390;
    for(int i4389=0;i4389<(int)prev.size();++i4389) {
      if( prev[i4389] == FAIL ) {
        if(!(!next_prev4390.empty() && next_prev4390.front() == FAIL )) {
          next_prev4390.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4389];
      tmp = parse_VariableDeclaration();
      
      for(int i4389=0;i4389<(int)tmp.size();++i4389) {
        if( tmp[i4389] == FAIL ) {
          if(!( !next_prev4390.empty() && next_prev4390[0] == FAIL )) {
            next_prev4390.push_front(FAIL);
          }
        } else {
          next_prev4390.push_back(tmp[i4389]);
        }
      }
    }
    prev = next_prev4390;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4391=0;i4391<(int)prev.size();++i4391) {
        if( prev[i4391] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4391]<m&&I[prev[i4391]]==';') {
          tmp.push_back(prev[i4391]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4393;
      for(int i4392=0;i4392<(int)prev.size();++i4392) {
        if( prev[i4392] == FAIL ) {
          if(!(!next_prev4393.empty() && next_prev4393.front() == FAIL )) {
            next_prev4393.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4392];
        tmp = parse__();
        
        for(int i4392=0;i4392<(int)tmp.size();++i4392) {
          if( tmp[i4392] == FAIL ) {
            if(!( !next_prev4393.empty() && next_prev4393[0] == FAIL )) {
              next_prev4393.push_front(FAIL);
            }
          } else {
            next_prev4393.push_back(tmp[i4392]);
          }
        }
      }
      prev = next_prev4393;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev4395;
    deque<int> prioritized_choice_final_prev4396;
    next_prev4395.clear();
    for(int i4394=0;i4394<(int)prev.size();++i4394) {
      i = prev[i4394];
      tmp = parse_slash4397();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4395.push_back(prev[i4394]); }
      for(int i4401=0;i4401<(int)tmp.size();++i4401) {
        if( tmp[i4401] != FAIL ) {
          prioritized_choice_final_prev4396.push_back(tmp[i4401]);
        }
      }
    }
    prev = next_prev4395;
    next_prev4395.clear();
    for(int i4394=0;i4394<(int)prev.size();++i4394) {
      i = prev[i4394];
      tmp = parse_slash4402();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4395.push_back(prev[i4394]); }
      for(int i4404=0;i4404<(int)tmp.size();++i4404) {
        if( tmp[i4404] != FAIL ) {
          prioritized_choice_final_prev4396.push_back(tmp[i4404]);
        }
      }
    }
    prev = next_prev4395;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev4396.empty() && prioritized_choice_final_prev4396.front() == FAIL )) {
        prioritized_choice_final_prev4396.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev4396;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4405=0;i4405<(int)prev.size();++i4405) {
        if( prev[i4405] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4405]<m&&I[prev[i4405]]==';') {
          tmp.push_back(prev[i4405]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4407;
      for(int i4406=0;i4406<(int)prev.size();++i4406) {
        if( prev[i4406] == FAIL ) {
          if(!(!next_prev4407.empty() && next_prev4407.front() == FAIL )) {
            next_prev4407.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4406];
        tmp = parse__();
        
        for(int i4406=0;i4406<(int)tmp.size();++i4406) {
          if( tmp[i4406] == FAIL ) {
            if(!( !next_prev4407.empty() && next_prev4407[0] == FAIL )) {
              next_prev4407.push_front(FAIL);
            }
          } else {
            next_prev4407.push_back(tmp[i4406]);
          }
        }
      }
      prev = next_prev4407;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev4409;
    deque<int> prioritized_choice_final_prev4410;
    next_prev4409.clear();
    for(int i4408=0;i4408<(int)prev.size();++i4408) {
      i = prev[i4408];
      tmp = parse_slash4411();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4409.push_back(prev[i4408]); }
      for(int i4415=0;i4415<(int)tmp.size();++i4415) {
        if( tmp[i4415] != FAIL ) {
          prioritized_choice_final_prev4410.push_back(tmp[i4415]);
        }
      }
    }
    prev = next_prev4409;
    next_prev4409.clear();
    for(int i4408=0;i4408<(int)prev.size();++i4408) {
      i = prev[i4408];
      tmp = parse_slash4416();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4409.push_back(prev[i4408]); }
      for(int i4418=0;i4418<(int)tmp.size();++i4418) {
        if( tmp[i4418] != FAIL ) {
          prioritized_choice_final_prev4410.push_back(tmp[i4418]);
        }
      }
    }
    prev = next_prev4409;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev4410.empty() && prioritized_choice_final_prev4410.front() == FAIL )) {
        prioritized_choice_final_prev4410.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev4410;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4419=0;i4419<(int)prev.size();++i4419) {
        if( prev[i4419] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4419]<m&&I[prev[i4419]]==')') {
          tmp.push_back(prev[i4419]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4421;
      for(int i4420=0;i4420<(int)prev.size();++i4420) {
        if( prev[i4420] == FAIL ) {
          if(!(!next_prev4421.empty() && next_prev4421.front() == FAIL )) {
            next_prev4421.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4420];
        tmp = parse__();
        
        for(int i4420=0;i4420<(int)tmp.size();++i4420) {
          if( tmp[i4420] == FAIL ) {
            if(!( !next_prev4421.empty() && next_prev4421[0] == FAIL )) {
              next_prev4421.push_front(FAIL);
            }
          } else {
            next_prev4421.push_back(tmp[i4420]);
          }
        }
      }
      prev = next_prev4421;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Statement) */
    deque<int> next_prev4423;
    for(int i4422=0;i4422<(int)prev.size();++i4422) {
      if( prev[i4422] == FAIL ) {
        if(!(!next_prev4423.empty() && next_prev4423.front() == FAIL )) {
          next_prev4423.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4422];
      tmp = parse_Statement();
      
      for(int i4422=0;i4422<(int)tmp.size();++i4422) {
        if( tmp[i4422] == FAIL ) {
          if(!( !next_prev4423.empty() && next_prev4423[0] == FAIL )) {
            next_prev4423.push_front(FAIL);
          }
        } else {
          next_prev4423.push_back(tmp[i4422]);
        }
      }
    }
    prev = next_prev4423;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4374=0;i4374<(int)prev.size();++i4374) {
    if( prev[i4374] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4374]);
    }
  }
  return memo[key(614,backtracking_ptr_for_packrat614)] = result;
}

inline deque<int> parse_not4378() { 
  if(memo.count(key(615,i))) {
    return memo[key(615,i)];
  }
  int backtracking_ptr_for_packrat615=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev4381;
  for(int i4380=0;i4380<(int)prev.size();++i4380) {
    if( prev[i4380] == FAIL ) {
      if(!(!next_prev4381.empty() && next_prev4381.front() == FAIL )) {
        next_prev4381.push_front(FAIL);
      }
      continue;
    }
    i = prev[i4380];
    tmp = parse_W();
    
    for(int i4380=0;i4380<(int)tmp.size();++i4380) {
      if( tmp[i4380] == FAIL ) {
        if(!( !next_prev4381.empty() && next_prev4381[0] == FAIL )) {
          next_prev4381.push_front(FAIL);
        }
      } else {
        next_prev4381.push_back(tmp[i4380]);
      }
    }
  }
  prev = next_prev4381;
  for(int i4379=0;i4379<(int)prev.size();++i4379) {
    if( prev[i4379] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4379]);
    }
  }
  return memo[key(615,backtracking_ptr_for_packrat615)] = result;
}

inline deque<int> parse_slash4397() { 
  if(memo.count(key(616,i))) {
    return memo[key(616,i)];
  }
  int backtracking_ptr_for_packrat616=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Expression) */
    deque<int> next_prev4400;
    for(int i4399=0;i4399<(int)prev.size();++i4399) {
      if( prev[i4399] == FAIL ) {
        if(!(!next_prev4400.empty() && next_prev4400.front() == FAIL )) {
          next_prev4400.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4399];
      tmp = parse_Expression();
      
      for(int i4399=0;i4399<(int)tmp.size();++i4399) {
        if( tmp[i4399] == FAIL ) {
          if(!( !next_prev4400.empty() && next_prev4400[0] == FAIL )) {
            next_prev4400.push_front(FAIL);
          }
        } else {
          next_prev4400.push_back(tmp[i4399]);
        }
      }
    }
    prev = next_prev4400;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4398=0;i4398<(int)prev.size();++i4398) {
    if( prev[i4398] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4398]);
    }
  }
  return memo[key(616,backtracking_ptr_for_packrat616)] = result;
}

inline deque<int> parse_slash4402() { 
  if(memo.count(key(617,i))) {
    return memo[key(617,i)];
  }
  int backtracking_ptr_for_packrat617=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i4403=0;i4403<(int)prev.size();++i4403) {
    if( prev[i4403] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4403]);
    }
  }
  return memo[key(617,backtracking_ptr_for_packrat617)] = result;
}

inline deque<int> parse_slash4411() { 
  if(memo.count(key(618,i))) {
    return memo[key(618,i)];
  }
  int backtracking_ptr_for_packrat618=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Expressions) */
    deque<int> next_prev4414;
    for(int i4413=0;i4413<(int)prev.size();++i4413) {
      if( prev[i4413] == FAIL ) {
        if(!(!next_prev4414.empty() && next_prev4414.front() == FAIL )) {
          next_prev4414.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4413];
      tmp = parse_Expressions();
      
      for(int i4413=0;i4413<(int)tmp.size();++i4413) {
        if( tmp[i4413] == FAIL ) {
          if(!( !next_prev4414.empty() && next_prev4414[0] == FAIL )) {
            next_prev4414.push_front(FAIL);
          }
        } else {
          next_prev4414.push_back(tmp[i4413]);
        }
      }
    }
    prev = next_prev4414;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4412=0;i4412<(int)prev.size();++i4412) {
    if( prev[i4412] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4412]);
    }
  }
  return memo[key(618,backtracking_ptr_for_packrat618)] = result;
}

inline deque<int> parse_slash4416() { 
  if(memo.count(key(619,i))) {
    return memo[key(619,i)];
  }
  int backtracking_ptr_for_packrat619=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i4417=0;i4417<(int)prev.size();++i4417) {
    if( prev[i4417] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4417]);
    }
  }
  return memo[key(619,backtracking_ptr_for_packrat619)] = result;
}

inline deque<int> parse_slash4425() { 
  if(memo.count(key(620,i))) {
    return memo[key(620,i)];
  }
  int backtracking_ptr_for_packrat620=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4427=0;i4427<(int)prev.size();++i4427) {
        if( prev[i4427] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4427]<m&&I[prev[i4427]]=='f') {
          tmp.push_back(prev[i4427]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4428=0;i4428<(int)prev.size();++i4428) {
        if( prev[i4428] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4428]<m&&I[prev[i4428]]=='o') {
          tmp.push_back(prev[i4428]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4429=0;i4429<(int)prev.size();++i4429) {
        if( prev[i4429] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4429]<m&&I[prev[i4429]]=='r') {
          tmp.push_back(prev[i4429]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4435;
      for(int i4434=0;i4434<(int)prev.size();++i4434) {
        i = prev[i4434];
        tmp = parse_not4430();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4435.push_back(prev[i4434]);
        } else {
          if(!(!next_prev4435.empty()&&next_prev4435.front()==FAIL)) {
            next_prev4435.push_front(FAIL);
          }
        }
      }
      prev = next_prev4435;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4437;
      for(int i4436=0;i4436<(int)prev.size();++i4436) {
        if( prev[i4436] == FAIL ) {
          if(!(!next_prev4437.empty() && next_prev4437.front() == FAIL )) {
            next_prev4437.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4436];
        tmp = parse__();
        
        for(int i4436=0;i4436<(int)tmp.size();++i4436) {
          if( tmp[i4436] == FAIL ) {
            if(!( !next_prev4437.empty() && next_prev4437[0] == FAIL )) {
              next_prev4437.push_front(FAIL);
            }
          } else {
            next_prev4437.push_back(tmp[i4436]);
          }
        }
      }
      prev = next_prev4437;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4438=0;i4438<(int)prev.size();++i4438) {
        if( prev[i4438] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4438]<m&&I[prev[i4438]]=='(') {
          tmp.push_back(prev[i4438]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4440;
      for(int i4439=0;i4439<(int)prev.size();++i4439) {
        if( prev[i4439] == FAIL ) {
          if(!(!next_prev4440.empty() && next_prev4440.front() == FAIL )) {
            next_prev4440.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4439];
        tmp = parse__();
        
        for(int i4439=0;i4439<(int)tmp.size();++i4439) {
          if( tmp[i4439] == FAIL ) {
            if(!( !next_prev4440.empty() && next_prev4440[0] == FAIL )) {
              next_prev4440.push_front(FAIL);
            }
          } else {
            next_prev4440.push_back(tmp[i4439]);
          }
        }
      }
      prev = next_prev4440;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev4442;
    deque<int> prioritized_choice_final_prev4443;
    next_prev4442.clear();
    for(int i4441=0;i4441<(int)prev.size();++i4441) {
      i = prev[i4441];
      tmp = parse_slash4444();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4442.push_back(prev[i4441]); }
      for(int i4448=0;i4448<(int)tmp.size();++i4448) {
        if( tmp[i4448] != FAIL ) {
          prioritized_choice_final_prev4443.push_back(tmp[i4448]);
        }
      }
    }
    prev = next_prev4442;
    next_prev4442.clear();
    for(int i4441=0;i4441<(int)prev.size();++i4441) {
      i = prev[i4441];
      tmp = parse_slash4449();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4442.push_back(prev[i4441]); }
      for(int i4451=0;i4451<(int)tmp.size();++i4451) {
        if( tmp[i4451] != FAIL ) {
          prioritized_choice_final_prev4443.push_back(tmp[i4451]);
        }
      }
    }
    prev = next_prev4442;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev4443.empty() && prioritized_choice_final_prev4443.front() == FAIL )) {
        prioritized_choice_final_prev4443.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev4443;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Type) */
    deque<int> next_prev4453;
    for(int i4452=0;i4452<(int)prev.size();++i4452) {
      if( prev[i4452] == FAIL ) {
        if(!(!next_prev4453.empty() && next_prev4453.front() == FAIL )) {
          next_prev4453.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4452];
      tmp = parse_Type();
      
      for(int i4452=0;i4452<(int)tmp.size();++i4452) {
        if( tmp[i4452] == FAIL ) {
          if(!( !next_prev4453.empty() && next_prev4453[0] == FAIL )) {
            next_prev4453.push_front(FAIL);
          }
        } else {
          next_prev4453.push_back(tmp[i4452]);
        }
      }
    }
    prev = next_prev4453;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev4455;
    for(int i4454=0;i4454<(int)prev.size();++i4454) {
      if( prev[i4454] == FAIL ) {
        if(!(!next_prev4455.empty() && next_prev4455.front() == FAIL )) {
          next_prev4455.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4454];
      tmp = parse_Identifier();
      
      for(int i4454=0;i4454<(int)tmp.size();++i4454) {
        if( tmp[i4454] == FAIL ) {
          if(!( !next_prev4455.empty() && next_prev4455[0] == FAIL )) {
            next_prev4455.push_front(FAIL);
          }
        } else {
          next_prev4455.push_back(tmp[i4454]);
        }
      }
    }
    prev = next_prev4455;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4456=0;i4456<(int)prev.size();++i4456) {
        if( prev[i4456] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4456]<m&&I[prev[i4456]]==':') {
          tmp.push_back(prev[i4456]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4461;
      for(int i4460=0;i4460<(int)prev.size();++i4460) {
        i = prev[i4460];
        tmp = parse_not4457();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4461.push_back(prev[i4460]);
        } else {
          if(!(!next_prev4461.empty()&&next_prev4461.front()==FAIL)) {
            next_prev4461.push_front(FAIL);
          }
        }
      }
      prev = next_prev4461;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4463;
      for(int i4462=0;i4462<(int)prev.size();++i4462) {
        if( prev[i4462] == FAIL ) {
          if(!(!next_prev4463.empty() && next_prev4463.front() == FAIL )) {
            next_prev4463.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4462];
        tmp = parse__();
        
        for(int i4462=0;i4462<(int)tmp.size();++i4462) {
          if( tmp[i4462] == FAIL ) {
            if(!( !next_prev4463.empty() && next_prev4463[0] == FAIL )) {
              next_prev4463.push_front(FAIL);
            }
          } else {
            next_prev4463.push_back(tmp[i4462]);
          }
        }
      }
      prev = next_prev4463;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Expression) */
    deque<int> next_prev4465;
    for(int i4464=0;i4464<(int)prev.size();++i4464) {
      if( prev[i4464] == FAIL ) {
        if(!(!next_prev4465.empty() && next_prev4465.front() == FAIL )) {
          next_prev4465.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4464];
      tmp = parse_Expression();
      
      for(int i4464=0;i4464<(int)tmp.size();++i4464) {
        if( tmp[i4464] == FAIL ) {
          if(!( !next_prev4465.empty() && next_prev4465[0] == FAIL )) {
            next_prev4465.push_front(FAIL);
          }
        } else {
          next_prev4465.push_back(tmp[i4464]);
        }
      }
    }
    prev = next_prev4465;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4466=0;i4466<(int)prev.size();++i4466) {
        if( prev[i4466] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4466]<m&&I[prev[i4466]]==')') {
          tmp.push_back(prev[i4466]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4468;
      for(int i4467=0;i4467<(int)prev.size();++i4467) {
        if( prev[i4467] == FAIL ) {
          if(!(!next_prev4468.empty() && next_prev4468.front() == FAIL )) {
            next_prev4468.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4467];
        tmp = parse__();
        
        for(int i4467=0;i4467<(int)tmp.size();++i4467) {
          if( tmp[i4467] == FAIL ) {
            if(!( !next_prev4468.empty() && next_prev4468[0] == FAIL )) {
              next_prev4468.push_front(FAIL);
            }
          } else {
            next_prev4468.push_back(tmp[i4467]);
          }
        }
      }
      prev = next_prev4468;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Statement) */
    deque<int> next_prev4470;
    for(int i4469=0;i4469<(int)prev.size();++i4469) {
      if( prev[i4469] == FAIL ) {
        if(!(!next_prev4470.empty() && next_prev4470.front() == FAIL )) {
          next_prev4470.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4469];
      tmp = parse_Statement();
      
      for(int i4469=0;i4469<(int)tmp.size();++i4469) {
        if( tmp[i4469] == FAIL ) {
          if(!( !next_prev4470.empty() && next_prev4470[0] == FAIL )) {
            next_prev4470.push_front(FAIL);
          }
        } else {
          next_prev4470.push_back(tmp[i4469]);
        }
      }
    }
    prev = next_prev4470;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4426=0;i4426<(int)prev.size();++i4426) {
    if( prev[i4426] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4426]);
    }
  }
  return memo[key(620,backtracking_ptr_for_packrat620)] = result;
}

inline deque<int> parse_not4430() { 
  if(memo.count(key(621,i))) {
    return memo[key(621,i)];
  }
  int backtracking_ptr_for_packrat621=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev4433;
  for(int i4432=0;i4432<(int)prev.size();++i4432) {
    if( prev[i4432] == FAIL ) {
      if(!(!next_prev4433.empty() && next_prev4433.front() == FAIL )) {
        next_prev4433.push_front(FAIL);
      }
      continue;
    }
    i = prev[i4432];
    tmp = parse_W();
    
    for(int i4432=0;i4432<(int)tmp.size();++i4432) {
      if( tmp[i4432] == FAIL ) {
        if(!( !next_prev4433.empty() && next_prev4433[0] == FAIL )) {
          next_prev4433.push_front(FAIL);
        }
      } else {
        next_prev4433.push_back(tmp[i4432]);
      }
    }
  }
  prev = next_prev4433;
  for(int i4431=0;i4431<(int)prev.size();++i4431) {
    if( prev[i4431] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4431]);
    }
  }
  return memo[key(621,backtracking_ptr_for_packrat621)] = result;
}

inline deque<int> parse_slash4444() { 
  if(memo.count(key(622,i))) {
    return memo[key(622,i)];
  }
  int backtracking_ptr_for_packrat622=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (VariableModifiers) */
    deque<int> next_prev4447;
    for(int i4446=0;i4446<(int)prev.size();++i4446) {
      if( prev[i4446] == FAIL ) {
        if(!(!next_prev4447.empty() && next_prev4447.front() == FAIL )) {
          next_prev4447.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4446];
      tmp = parse_VariableModifiers();
      
      for(int i4446=0;i4446<(int)tmp.size();++i4446) {
        if( tmp[i4446] == FAIL ) {
          if(!( !next_prev4447.empty() && next_prev4447[0] == FAIL )) {
            next_prev4447.push_front(FAIL);
          }
        } else {
          next_prev4447.push_back(tmp[i4446]);
        }
      }
    }
    prev = next_prev4447;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4445=0;i4445<(int)prev.size();++i4445) {
    if( prev[i4445] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4445]);
    }
  }
  return memo[key(622,backtracking_ptr_for_packrat622)] = result;
}

inline deque<int> parse_slash4449() { 
  if(memo.count(key(623,i))) {
    return memo[key(623,i)];
  }
  int backtracking_ptr_for_packrat623=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i4450=0;i4450<(int)prev.size();++i4450) {
    if( prev[i4450] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4450]);
    }
  }
  return memo[key(623,backtracking_ptr_for_packrat623)] = result;
}

inline deque<int> parse_not4457() { 
  if(memo.count(key(624,i))) {
    return memo[key(624,i)];
  }
  int backtracking_ptr_for_packrat624=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i4459=0;i4459<(int)prev.size();++i4459) {
    if( prev[i4459] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i4459]<m&&(I[prev[i4459]]=='>'||I[prev[i4459]]==':')) {
      tmp.push_back(prev[i4459]+1);
    } else {
      if(!( !tmp.empty() && tmp.front() == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i4458=0;i4458<(int)prev.size();++i4458) {
    if( prev[i4458] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4458]);
    }
  }
  return memo[key(624,backtracking_ptr_for_packrat624)] = result;
}

inline deque<int> parse_slash4472() { 
  if(memo.count(key(625,i))) {
    return memo[key(625,i)];
  }
  int backtracking_ptr_for_packrat625=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4474=0;i4474<(int)prev.size();++i4474) {
        if( prev[i4474] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4474]<m&&I[prev[i4474]]=='g') {
          tmp.push_back(prev[i4474]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4475=0;i4475<(int)prev.size();++i4475) {
        if( prev[i4475] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4475]<m&&I[prev[i4475]]=='o') {
          tmp.push_back(prev[i4475]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4476=0;i4476<(int)prev.size();++i4476) {
        if( prev[i4476] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4476]<m&&I[prev[i4476]]=='t') {
          tmp.push_back(prev[i4476]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4477=0;i4477<(int)prev.size();++i4477) {
        if( prev[i4477] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4477]<m&&I[prev[i4477]]=='o') {
          tmp.push_back(prev[i4477]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4483;
      for(int i4482=0;i4482<(int)prev.size();++i4482) {
        i = prev[i4482];
        tmp = parse_not4478();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4483.push_back(prev[i4482]);
        } else {
          if(!(!next_prev4483.empty()&&next_prev4483.front()==FAIL)) {
            next_prev4483.push_front(FAIL);
          }
        }
      }
      prev = next_prev4483;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4485;
      for(int i4484=0;i4484<(int)prev.size();++i4484) {
        if( prev[i4484] == FAIL ) {
          if(!(!next_prev4485.empty() && next_prev4485.front() == FAIL )) {
            next_prev4485.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4484];
        tmp = parse__();
        
        for(int i4484=0;i4484<(int)tmp.size();++i4484) {
          if( tmp[i4484] == FAIL ) {
            if(!( !next_prev4485.empty() && next_prev4485[0] == FAIL )) {
              next_prev4485.push_front(FAIL);
            }
          } else {
            next_prev4485.push_back(tmp[i4484]);
          }
        }
      }
      prev = next_prev4485;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev4487;
    for(int i4486=0;i4486<(int)prev.size();++i4486) {
      if( prev[i4486] == FAIL ) {
        if(!(!next_prev4487.empty() && next_prev4487.front() == FAIL )) {
          next_prev4487.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4486];
      tmp = parse_Identifier();
      
      for(int i4486=0;i4486<(int)tmp.size();++i4486) {
        if( tmp[i4486] == FAIL ) {
          if(!( !next_prev4487.empty() && next_prev4487[0] == FAIL )) {
            next_prev4487.push_front(FAIL);
          }
        } else {
          next_prev4487.push_back(tmp[i4486]);
        }
      }
    }
    prev = next_prev4487;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4488=0;i4488<(int)prev.size();++i4488) {
        if( prev[i4488] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4488]<m&&I[prev[i4488]]==';') {
          tmp.push_back(prev[i4488]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4490;
      for(int i4489=0;i4489<(int)prev.size();++i4489) {
        if( prev[i4489] == FAIL ) {
          if(!(!next_prev4490.empty() && next_prev4490.front() == FAIL )) {
            next_prev4490.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4489];
        tmp = parse__();
        
        for(int i4489=0;i4489<(int)tmp.size();++i4489) {
          if( tmp[i4489] == FAIL ) {
            if(!( !next_prev4490.empty() && next_prev4490[0] == FAIL )) {
              next_prev4490.push_front(FAIL);
            }
          } else {
            next_prev4490.push_back(tmp[i4489]);
          }
        }
      }
      prev = next_prev4490;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4473=0;i4473<(int)prev.size();++i4473) {
    if( prev[i4473] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4473]);
    }
  }
  return memo[key(625,backtracking_ptr_for_packrat625)] = result;
}

inline deque<int> parse_not4478() { 
  if(memo.count(key(626,i))) {
    return memo[key(626,i)];
  }
  int backtracking_ptr_for_packrat626=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev4481;
  for(int i4480=0;i4480<(int)prev.size();++i4480) {
    if( prev[i4480] == FAIL ) {
      if(!(!next_prev4481.empty() && next_prev4481.front() == FAIL )) {
        next_prev4481.push_front(FAIL);
      }
      continue;
    }
    i = prev[i4480];
    tmp = parse_W();
    
    for(int i4480=0;i4480<(int)tmp.size();++i4480) {
      if( tmp[i4480] == FAIL ) {
        if(!( !next_prev4481.empty() && next_prev4481[0] == FAIL )) {
          next_prev4481.push_front(FAIL);
        }
      } else {
        next_prev4481.push_back(tmp[i4480]);
      }
    }
  }
  prev = next_prev4481;
  for(int i4479=0;i4479<(int)prev.size();++i4479) {
    if( prev[i4479] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4479]);
    }
  }
  return memo[key(626,backtracking_ptr_for_packrat626)] = result;
}

inline deque<int> parse_slash4492() { 
  if(memo.count(key(627,i))) {
    return memo[key(627,i)];
  }
  int backtracking_ptr_for_packrat627=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4494=0;i4494<(int)prev.size();++i4494) {
        if( prev[i4494] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4494]<m&&I[prev[i4494]]=='c') {
          tmp.push_back(prev[i4494]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4495=0;i4495<(int)prev.size();++i4495) {
        if( prev[i4495] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4495]<m&&I[prev[i4495]]=='o') {
          tmp.push_back(prev[i4495]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4496=0;i4496<(int)prev.size();++i4496) {
        if( prev[i4496] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4496]<m&&I[prev[i4496]]=='n') {
          tmp.push_back(prev[i4496]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4497=0;i4497<(int)prev.size();++i4497) {
        if( prev[i4497] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4497]<m&&I[prev[i4497]]=='t') {
          tmp.push_back(prev[i4497]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4498=0;i4498<(int)prev.size();++i4498) {
        if( prev[i4498] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4498]<m&&I[prev[i4498]]=='i') {
          tmp.push_back(prev[i4498]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4499=0;i4499<(int)prev.size();++i4499) {
        if( prev[i4499] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4499]<m&&I[prev[i4499]]=='n') {
          tmp.push_back(prev[i4499]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4500=0;i4500<(int)prev.size();++i4500) {
        if( prev[i4500] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4500]<m&&I[prev[i4500]]=='u') {
          tmp.push_back(prev[i4500]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4501=0;i4501<(int)prev.size();++i4501) {
        if( prev[i4501] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4501]<m&&I[prev[i4501]]=='e') {
          tmp.push_back(prev[i4501]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4507;
      for(int i4506=0;i4506<(int)prev.size();++i4506) {
        i = prev[i4506];
        tmp = parse_not4502();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4507.push_back(prev[i4506]);
        } else {
          if(!(!next_prev4507.empty()&&next_prev4507.front()==FAIL)) {
            next_prev4507.push_front(FAIL);
          }
        }
      }
      prev = next_prev4507;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4509;
      for(int i4508=0;i4508<(int)prev.size();++i4508) {
        if( prev[i4508] == FAIL ) {
          if(!(!next_prev4509.empty() && next_prev4509.front() == FAIL )) {
            next_prev4509.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4508];
        tmp = parse__();
        
        for(int i4508=0;i4508<(int)tmp.size();++i4508) {
          if( tmp[i4508] == FAIL ) {
            if(!( !next_prev4509.empty() && next_prev4509[0] == FAIL )) {
              next_prev4509.push_front(FAIL);
            }
          } else {
            next_prev4509.push_back(tmp[i4508]);
          }
        }
      }
      prev = next_prev4509;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev4511;
    deque<int> prioritized_choice_final_prev4512;
    next_prev4511.clear();
    for(int i4510=0;i4510<(int)prev.size();++i4510) {
      i = prev[i4510];
      tmp = parse_slash4513();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4511.push_back(prev[i4510]); }
      for(int i4517=0;i4517<(int)tmp.size();++i4517) {
        if( tmp[i4517] != FAIL ) {
          prioritized_choice_final_prev4512.push_back(tmp[i4517]);
        }
      }
    }
    prev = next_prev4511;
    next_prev4511.clear();
    for(int i4510=0;i4510<(int)prev.size();++i4510) {
      i = prev[i4510];
      tmp = parse_slash4518();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4511.push_back(prev[i4510]); }
      for(int i4520=0;i4520<(int)tmp.size();++i4520) {
        if( tmp[i4520] != FAIL ) {
          prioritized_choice_final_prev4512.push_back(tmp[i4520]);
        }
      }
    }
    prev = next_prev4511;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev4512.empty() && prioritized_choice_final_prev4512.front() == FAIL )) {
        prioritized_choice_final_prev4512.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev4512;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4521=0;i4521<(int)prev.size();++i4521) {
        if( prev[i4521] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4521]<m&&I[prev[i4521]]==';') {
          tmp.push_back(prev[i4521]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4523;
      for(int i4522=0;i4522<(int)prev.size();++i4522) {
        if( prev[i4522] == FAIL ) {
          if(!(!next_prev4523.empty() && next_prev4523.front() == FAIL )) {
            next_prev4523.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4522];
        tmp = parse__();
        
        for(int i4522=0;i4522<(int)tmp.size();++i4522) {
          if( tmp[i4522] == FAIL ) {
            if(!( !next_prev4523.empty() && next_prev4523[0] == FAIL )) {
              next_prev4523.push_front(FAIL);
            }
          } else {
            next_prev4523.push_back(tmp[i4522]);
          }
        }
      }
      prev = next_prev4523;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4493=0;i4493<(int)prev.size();++i4493) {
    if( prev[i4493] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4493]);
    }
  }
  return memo[key(627,backtracking_ptr_for_packrat627)] = result;
}

inline deque<int> parse_not4502() { 
  if(memo.count(key(628,i))) {
    return memo[key(628,i)];
  }
  int backtracking_ptr_for_packrat628=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev4505;
  for(int i4504=0;i4504<(int)prev.size();++i4504) {
    if( prev[i4504] == FAIL ) {
      if(!(!next_prev4505.empty() && next_prev4505.front() == FAIL )) {
        next_prev4505.push_front(FAIL);
      }
      continue;
    }
    i = prev[i4504];
    tmp = parse_W();
    
    for(int i4504=0;i4504<(int)tmp.size();++i4504) {
      if( tmp[i4504] == FAIL ) {
        if(!( !next_prev4505.empty() && next_prev4505[0] == FAIL )) {
          next_prev4505.push_front(FAIL);
        }
      } else {
        next_prev4505.push_back(tmp[i4504]);
      }
    }
  }
  prev = next_prev4505;
  for(int i4503=0;i4503<(int)prev.size();++i4503) {
    if( prev[i4503] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4503]);
    }
  }
  return memo[key(628,backtracking_ptr_for_packrat628)] = result;
}

inline deque<int> parse_slash4513() { 
  if(memo.count(key(629,i))) {
    return memo[key(629,i)];
  }
  int backtracking_ptr_for_packrat629=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev4516;
    for(int i4515=0;i4515<(int)prev.size();++i4515) {
      if( prev[i4515] == FAIL ) {
        if(!(!next_prev4516.empty() && next_prev4516.front() == FAIL )) {
          next_prev4516.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4515];
      tmp = parse_Identifier();
      
      for(int i4515=0;i4515<(int)tmp.size();++i4515) {
        if( tmp[i4515] == FAIL ) {
          if(!( !next_prev4516.empty() && next_prev4516[0] == FAIL )) {
            next_prev4516.push_front(FAIL);
          }
        } else {
          next_prev4516.push_back(tmp[i4515]);
        }
      }
    }
    prev = next_prev4516;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4514=0;i4514<(int)prev.size();++i4514) {
    if( prev[i4514] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4514]);
    }
  }
  return memo[key(629,backtracking_ptr_for_packrat629)] = result;
}

inline deque<int> parse_slash4518() { 
  if(memo.count(key(630,i))) {
    return memo[key(630,i)];
  }
  int backtracking_ptr_for_packrat630=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i4519=0;i4519<(int)prev.size();++i4519) {
    if( prev[i4519] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4519]);
    }
  }
  return memo[key(630,backtracking_ptr_for_packrat630)] = result;
}

inline deque<int> parse_slash4525() { 
  if(memo.count(key(631,i))) {
    return memo[key(631,i)];
  }
  int backtracking_ptr_for_packrat631=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4527=0;i4527<(int)prev.size();++i4527) {
        if( prev[i4527] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4527]<m&&I[prev[i4527]]=='b') {
          tmp.push_back(prev[i4527]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4528=0;i4528<(int)prev.size();++i4528) {
        if( prev[i4528] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4528]<m&&I[prev[i4528]]=='r') {
          tmp.push_back(prev[i4528]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4529=0;i4529<(int)prev.size();++i4529) {
        if( prev[i4529] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4529]<m&&I[prev[i4529]]=='e') {
          tmp.push_back(prev[i4529]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4530=0;i4530<(int)prev.size();++i4530) {
        if( prev[i4530] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4530]<m&&I[prev[i4530]]=='a') {
          tmp.push_back(prev[i4530]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4531=0;i4531<(int)prev.size();++i4531) {
        if( prev[i4531] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4531]<m&&I[prev[i4531]]=='k') {
          tmp.push_back(prev[i4531]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4537;
      for(int i4536=0;i4536<(int)prev.size();++i4536) {
        i = prev[i4536];
        tmp = parse_not4532();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4537.push_back(prev[i4536]);
        } else {
          if(!(!next_prev4537.empty()&&next_prev4537.front()==FAIL)) {
            next_prev4537.push_front(FAIL);
          }
        }
      }
      prev = next_prev4537;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4539;
      for(int i4538=0;i4538<(int)prev.size();++i4538) {
        if( prev[i4538] == FAIL ) {
          if(!(!next_prev4539.empty() && next_prev4539.front() == FAIL )) {
            next_prev4539.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4538];
        tmp = parse__();
        
        for(int i4538=0;i4538<(int)tmp.size();++i4538) {
          if( tmp[i4538] == FAIL ) {
            if(!( !next_prev4539.empty() && next_prev4539[0] == FAIL )) {
              next_prev4539.push_front(FAIL);
            }
          } else {
            next_prev4539.push_back(tmp[i4538]);
          }
        }
      }
      prev = next_prev4539;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev4541;
    deque<int> prioritized_choice_final_prev4542;
    next_prev4541.clear();
    for(int i4540=0;i4540<(int)prev.size();++i4540) {
      i = prev[i4540];
      tmp = parse_slash4543();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4541.push_back(prev[i4540]); }
      for(int i4547=0;i4547<(int)tmp.size();++i4547) {
        if( tmp[i4547] != FAIL ) {
          prioritized_choice_final_prev4542.push_back(tmp[i4547]);
        }
      }
    }
    prev = next_prev4541;
    next_prev4541.clear();
    for(int i4540=0;i4540<(int)prev.size();++i4540) {
      i = prev[i4540];
      tmp = parse_slash4548();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4541.push_back(prev[i4540]); }
      for(int i4550=0;i4550<(int)tmp.size();++i4550) {
        if( tmp[i4550] != FAIL ) {
          prioritized_choice_final_prev4542.push_back(tmp[i4550]);
        }
      }
    }
    prev = next_prev4541;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev4542.empty() && prioritized_choice_final_prev4542.front() == FAIL )) {
        prioritized_choice_final_prev4542.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev4542;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4551=0;i4551<(int)prev.size();++i4551) {
        if( prev[i4551] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4551]<m&&I[prev[i4551]]==';') {
          tmp.push_back(prev[i4551]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4553;
      for(int i4552=0;i4552<(int)prev.size();++i4552) {
        if( prev[i4552] == FAIL ) {
          if(!(!next_prev4553.empty() && next_prev4553.front() == FAIL )) {
            next_prev4553.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4552];
        tmp = parse__();
        
        for(int i4552=0;i4552<(int)tmp.size();++i4552) {
          if( tmp[i4552] == FAIL ) {
            if(!( !next_prev4553.empty() && next_prev4553[0] == FAIL )) {
              next_prev4553.push_front(FAIL);
            }
          } else {
            next_prev4553.push_back(tmp[i4552]);
          }
        }
      }
      prev = next_prev4553;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4526=0;i4526<(int)prev.size();++i4526) {
    if( prev[i4526] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4526]);
    }
  }
  return memo[key(631,backtracking_ptr_for_packrat631)] = result;
}

inline deque<int> parse_not4532() { 
  if(memo.count(key(632,i))) {
    return memo[key(632,i)];
  }
  int backtracking_ptr_for_packrat632=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev4535;
  for(int i4534=0;i4534<(int)prev.size();++i4534) {
    if( prev[i4534] == FAIL ) {
      if(!(!next_prev4535.empty() && next_prev4535.front() == FAIL )) {
        next_prev4535.push_front(FAIL);
      }
      continue;
    }
    i = prev[i4534];
    tmp = parse_W();
    
    for(int i4534=0;i4534<(int)tmp.size();++i4534) {
      if( tmp[i4534] == FAIL ) {
        if(!( !next_prev4535.empty() && next_prev4535[0] == FAIL )) {
          next_prev4535.push_front(FAIL);
        }
      } else {
        next_prev4535.push_back(tmp[i4534]);
      }
    }
  }
  prev = next_prev4535;
  for(int i4533=0;i4533<(int)prev.size();++i4533) {
    if( prev[i4533] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4533]);
    }
  }
  return memo[key(632,backtracking_ptr_for_packrat632)] = result;
}

inline deque<int> parse_slash4543() { 
  if(memo.count(key(633,i))) {
    return memo[key(633,i)];
  }
  int backtracking_ptr_for_packrat633=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev4546;
    for(int i4545=0;i4545<(int)prev.size();++i4545) {
      if( prev[i4545] == FAIL ) {
        if(!(!next_prev4546.empty() && next_prev4546.front() == FAIL )) {
          next_prev4546.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4545];
      tmp = parse_Identifier();
      
      for(int i4545=0;i4545<(int)tmp.size();++i4545) {
        if( tmp[i4545] == FAIL ) {
          if(!( !next_prev4546.empty() && next_prev4546[0] == FAIL )) {
            next_prev4546.push_front(FAIL);
          }
        } else {
          next_prev4546.push_back(tmp[i4545]);
        }
      }
    }
    prev = next_prev4546;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4544=0;i4544<(int)prev.size();++i4544) {
    if( prev[i4544] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4544]);
    }
  }
  return memo[key(633,backtracking_ptr_for_packrat633)] = result;
}

inline deque<int> parse_slash4548() { 
  if(memo.count(key(634,i))) {
    return memo[key(634,i)];
  }
  int backtracking_ptr_for_packrat634=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i4549=0;i4549<(int)prev.size();++i4549) {
    if( prev[i4549] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4549]);
    }
  }
  return memo[key(634,backtracking_ptr_for_packrat634)] = result;
}

inline deque<int> parse_slash4555() { 
  if(memo.count(key(635,i))) {
    return memo[key(635,i)];
  }
  int backtracking_ptr_for_packrat635=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4557=0;i4557<(int)prev.size();++i4557) {
        if( prev[i4557] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4557]<m&&I[prev[i4557]]=='r') {
          tmp.push_back(prev[i4557]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4558=0;i4558<(int)prev.size();++i4558) {
        if( prev[i4558] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4558]<m&&I[prev[i4558]]=='e') {
          tmp.push_back(prev[i4558]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4559=0;i4559<(int)prev.size();++i4559) {
        if( prev[i4559] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4559]<m&&I[prev[i4559]]=='t') {
          tmp.push_back(prev[i4559]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4560=0;i4560<(int)prev.size();++i4560) {
        if( prev[i4560] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4560]<m&&I[prev[i4560]]=='u') {
          tmp.push_back(prev[i4560]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4561=0;i4561<(int)prev.size();++i4561) {
        if( prev[i4561] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4561]<m&&I[prev[i4561]]=='r') {
          tmp.push_back(prev[i4561]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4562=0;i4562<(int)prev.size();++i4562) {
        if( prev[i4562] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4562]<m&&I[prev[i4562]]=='n') {
          tmp.push_back(prev[i4562]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4568;
      for(int i4567=0;i4567<(int)prev.size();++i4567) {
        i = prev[i4567];
        tmp = parse_not4563();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4568.push_back(prev[i4567]);
        } else {
          if(!(!next_prev4568.empty()&&next_prev4568.front()==FAIL)) {
            next_prev4568.push_front(FAIL);
          }
        }
      }
      prev = next_prev4568;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4570;
      for(int i4569=0;i4569<(int)prev.size();++i4569) {
        if( prev[i4569] == FAIL ) {
          if(!(!next_prev4570.empty() && next_prev4570.front() == FAIL )) {
            next_prev4570.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4569];
        tmp = parse__();
        
        for(int i4569=0;i4569<(int)tmp.size();++i4569) {
          if( tmp[i4569] == FAIL ) {
            if(!( !next_prev4570.empty() && next_prev4570[0] == FAIL )) {
              next_prev4570.push_front(FAIL);
            }
          } else {
            next_prev4570.push_back(tmp[i4569]);
          }
        }
      }
      prev = next_prev4570;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev4572;
    deque<int> prioritized_choice_final_prev4573;
    next_prev4572.clear();
    for(int i4571=0;i4571<(int)prev.size();++i4571) {
      i = prev[i4571];
      tmp = parse_slash4574();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4572.push_back(prev[i4571]); }
      for(int i4578=0;i4578<(int)tmp.size();++i4578) {
        if( tmp[i4578] != FAIL ) {
          prioritized_choice_final_prev4573.push_back(tmp[i4578]);
        }
      }
    }
    prev = next_prev4572;
    next_prev4572.clear();
    for(int i4571=0;i4571<(int)prev.size();++i4571) {
      i = prev[i4571];
      tmp = parse_slash4579();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4572.push_back(prev[i4571]); }
      for(int i4581=0;i4581<(int)tmp.size();++i4581) {
        if( tmp[i4581] != FAIL ) {
          prioritized_choice_final_prev4573.push_back(tmp[i4581]);
        }
      }
    }
    prev = next_prev4572;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev4573.empty() && prioritized_choice_final_prev4573.front() == FAIL )) {
        prioritized_choice_final_prev4573.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev4573;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4582=0;i4582<(int)prev.size();++i4582) {
        if( prev[i4582] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4582]<m&&I[prev[i4582]]==';') {
          tmp.push_back(prev[i4582]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4584;
      for(int i4583=0;i4583<(int)prev.size();++i4583) {
        if( prev[i4583] == FAIL ) {
          if(!(!next_prev4584.empty() && next_prev4584.front() == FAIL )) {
            next_prev4584.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4583];
        tmp = parse__();
        
        for(int i4583=0;i4583<(int)tmp.size();++i4583) {
          if( tmp[i4583] == FAIL ) {
            if(!( !next_prev4584.empty() && next_prev4584[0] == FAIL )) {
              next_prev4584.push_front(FAIL);
            }
          } else {
            next_prev4584.push_back(tmp[i4583]);
          }
        }
      }
      prev = next_prev4584;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4556=0;i4556<(int)prev.size();++i4556) {
    if( prev[i4556] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4556]);
    }
  }
  return memo[key(635,backtracking_ptr_for_packrat635)] = result;
}

inline deque<int> parse_not4563() { 
  if(memo.count(key(636,i))) {
    return memo[key(636,i)];
  }
  int backtracking_ptr_for_packrat636=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev4566;
  for(int i4565=0;i4565<(int)prev.size();++i4565) {
    if( prev[i4565] == FAIL ) {
      if(!(!next_prev4566.empty() && next_prev4566.front() == FAIL )) {
        next_prev4566.push_front(FAIL);
      }
      continue;
    }
    i = prev[i4565];
    tmp = parse_W();
    
    for(int i4565=0;i4565<(int)tmp.size();++i4565) {
      if( tmp[i4565] == FAIL ) {
        if(!( !next_prev4566.empty() && next_prev4566[0] == FAIL )) {
          next_prev4566.push_front(FAIL);
        }
      } else {
        next_prev4566.push_back(tmp[i4565]);
      }
    }
  }
  prev = next_prev4566;
  for(int i4564=0;i4564<(int)prev.size();++i4564) {
    if( prev[i4564] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4564]);
    }
  }
  return memo[key(636,backtracking_ptr_for_packrat636)] = result;
}

inline deque<int> parse_slash4574() { 
  if(memo.count(key(637,i))) {
    return memo[key(637,i)];
  }
  int backtracking_ptr_for_packrat637=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Expression) */
    deque<int> next_prev4577;
    for(int i4576=0;i4576<(int)prev.size();++i4576) {
      if( prev[i4576] == FAIL ) {
        if(!(!next_prev4577.empty() && next_prev4577.front() == FAIL )) {
          next_prev4577.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4576];
      tmp = parse_Expression();
      
      for(int i4576=0;i4576<(int)tmp.size();++i4576) {
        if( tmp[i4576] == FAIL ) {
          if(!( !next_prev4577.empty() && next_prev4577[0] == FAIL )) {
            next_prev4577.push_front(FAIL);
          }
        } else {
          next_prev4577.push_back(tmp[i4576]);
        }
      }
    }
    prev = next_prev4577;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4575=0;i4575<(int)prev.size();++i4575) {
    if( prev[i4575] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4575]);
    }
  }
  return memo[key(637,backtracking_ptr_for_packrat637)] = result;
}

inline deque<int> parse_slash4579() { 
  if(memo.count(key(638,i))) {
    return memo[key(638,i)];
  }
  int backtracking_ptr_for_packrat638=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i4580=0;i4580<(int)prev.size();++i4580) {
    if( prev[i4580] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4580]);
    }
  }
  return memo[key(638,backtracking_ptr_for_packrat638)] = result;
}

inline deque<int> parse_slash4586() { 
  if(memo.count(key(639,i))) {
    return memo[key(639,i)];
  }
  int backtracking_ptr_for_packrat639=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4588=0;i4588<(int)prev.size();++i4588) {
        if( prev[i4588] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4588]<m&&I[prev[i4588]]=='t') {
          tmp.push_back(prev[i4588]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4589=0;i4589<(int)prev.size();++i4589) {
        if( prev[i4589] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4589]<m&&I[prev[i4589]]=='r') {
          tmp.push_back(prev[i4589]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4590=0;i4590<(int)prev.size();++i4590) {
        if( prev[i4590] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4590]<m&&I[prev[i4590]]=='y') {
          tmp.push_back(prev[i4590]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4596;
      for(int i4595=0;i4595<(int)prev.size();++i4595) {
        i = prev[i4595];
        tmp = parse_not4591();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4596.push_back(prev[i4595]);
        } else {
          if(!(!next_prev4596.empty()&&next_prev4596.front()==FAIL)) {
            next_prev4596.push_front(FAIL);
          }
        }
      }
      prev = next_prev4596;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4598;
      for(int i4597=0;i4597<(int)prev.size();++i4597) {
        if( prev[i4597] == FAIL ) {
          if(!(!next_prev4598.empty() && next_prev4598.front() == FAIL )) {
            next_prev4598.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4597];
        tmp = parse__();
        
        for(int i4597=0;i4597<(int)tmp.size();++i4597) {
          if( tmp[i4597] == FAIL ) {
            if(!( !next_prev4598.empty() && next_prev4598[0] == FAIL )) {
              next_prev4598.push_front(FAIL);
            }
          } else {
            next_prev4598.push_back(tmp[i4597]);
          }
        }
      }
      prev = next_prev4598;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ResourceStatement) */
    deque<int> next_prev4600;
    for(int i4599=0;i4599<(int)prev.size();++i4599) {
      if( prev[i4599] == FAIL ) {
        if(!(!next_prev4600.empty() && next_prev4600.front() == FAIL )) {
          next_prev4600.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4599];
      tmp = parse_ResourceStatement();
      
      for(int i4599=0;i4599<(int)tmp.size();++i4599) {
        if( tmp[i4599] == FAIL ) {
          if(!( !next_prev4600.empty() && next_prev4600[0] == FAIL )) {
            next_prev4600.push_front(FAIL);
          }
        } else {
          next_prev4600.push_back(tmp[i4599]);
        }
      }
    }
    prev = next_prev4600;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Block) */
    deque<int> next_prev4602;
    for(int i4601=0;i4601<(int)prev.size();++i4601) {
      if( prev[i4601] == FAIL ) {
        if(!(!next_prev4602.empty() && next_prev4602.front() == FAIL )) {
          next_prev4602.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4601];
      tmp = parse_Block();
      
      for(int i4601=0;i4601<(int)tmp.size();++i4601) {
        if( tmp[i4601] == FAIL ) {
          if(!( !next_prev4602.empty() && next_prev4602[0] == FAIL )) {
            next_prev4602.push_front(FAIL);
          }
        } else {
          next_prev4602.push_back(tmp[i4601]);
        }
      }
    }
    prev = next_prev4602;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev4607;
    deque<int> star_final_prev4608;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev4607.clear();
      for(int i4609=0;i4609<(int)prev.size();++i4609) {
        i = prev[i4609];
        tmp = parse_while4603();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev4608.push_back(prev[i4609]);
        }
        for(int i4610=0;i4610<(int)tmp.size();++i4610) {
          if(tmp[i4610]==FAIL) {
            if(!( !next_prev4607.empty() && next_prev4607.front() == FAIL )) {
              next_prev4607.push_front(FAIL);
            }
          } else {
            next_prev4607.push_back(tmp[i4610]);
          }
        }
      }
      prev = next_prev4607;
    }
    prev = star_final_prev4608;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev4612;
    deque<int> prioritized_choice_final_prev4613;
    next_prev4612.clear();
    for(int i4611=0;i4611<(int)prev.size();++i4611) {
      i = prev[i4611];
      tmp = parse_slash4614();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4612.push_back(prev[i4611]); }
      for(int i4633=0;i4633<(int)tmp.size();++i4633) {
        if( tmp[i4633] != FAIL ) {
          prioritized_choice_final_prev4613.push_back(tmp[i4633]);
        }
      }
    }
    prev = next_prev4612;
    next_prev4612.clear();
    for(int i4611=0;i4611<(int)prev.size();++i4611) {
      i = prev[i4611];
      tmp = parse_slash4634();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4612.push_back(prev[i4611]); }
      for(int i4636=0;i4636<(int)tmp.size();++i4636) {
        if( tmp[i4636] != FAIL ) {
          prioritized_choice_final_prev4613.push_back(tmp[i4636]);
        }
      }
    }
    prev = next_prev4612;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev4613.empty() && prioritized_choice_final_prev4613.front() == FAIL )) {
        prioritized_choice_final_prev4613.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev4613;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4587=0;i4587<(int)prev.size();++i4587) {
    if( prev[i4587] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4587]);
    }
  }
  return memo[key(639,backtracking_ptr_for_packrat639)] = result;
}

inline deque<int> parse_not4591() { 
  if(memo.count(key(640,i))) {
    return memo[key(640,i)];
  }
  int backtracking_ptr_for_packrat640=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev4594;
  for(int i4593=0;i4593<(int)prev.size();++i4593) {
    if( prev[i4593] == FAIL ) {
      if(!(!next_prev4594.empty() && next_prev4594.front() == FAIL )) {
        next_prev4594.push_front(FAIL);
      }
      continue;
    }
    i = prev[i4593];
    tmp = parse_W();
    
    for(int i4593=0;i4593<(int)tmp.size();++i4593) {
      if( tmp[i4593] == FAIL ) {
        if(!( !next_prev4594.empty() && next_prev4594[0] == FAIL )) {
          next_prev4594.push_front(FAIL);
        }
      } else {
        next_prev4594.push_back(tmp[i4593]);
      }
    }
  }
  prev = next_prev4594;
  for(int i4592=0;i4592<(int)prev.size();++i4592) {
    if( prev[i4592] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4592]);
    }
  }
  return memo[key(640,backtracking_ptr_for_packrat640)] = result;
}

inline deque<int> parse_while4603() { 
  if(memo.count(key(641,i))) {
    return memo[key(641,i)];
  }
  int backtracking_ptr_for_packrat641=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (CatchBlock) */
    deque<int> next_prev4606;
    for(int i4605=0;i4605<(int)prev.size();++i4605) {
      if( prev[i4605] == FAIL ) {
        if(!(!next_prev4606.empty() && next_prev4606.front() == FAIL )) {
          next_prev4606.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4605];
      tmp = parse_CatchBlock();
      
      for(int i4605=0;i4605<(int)tmp.size();++i4605) {
        if( tmp[i4605] == FAIL ) {
          if(!( !next_prev4606.empty() && next_prev4606[0] == FAIL )) {
            next_prev4606.push_front(FAIL);
          }
        } else {
          next_prev4606.push_back(tmp[i4605]);
        }
      }
    }
    prev = next_prev4606;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4604=0;i4604<(int)prev.size();++i4604) {
    if( prev[i4604] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4604]);
    }
  }
  return memo[key(641,backtracking_ptr_for_packrat641)] = result;
}

inline deque<int> parse_slash4614() { 
  if(memo.count(key(642,i))) {
    return memo[key(642,i)];
  }
  int backtracking_ptr_for_packrat642=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        tmp.clear();
        for(int i4616=0;i4616<(int)prev.size();++i4616) {
          if( prev[i4616] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i4616]<m&&I[prev[i4616]]=='f') {
            tmp.push_back(prev[i4616]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        tmp.clear();
        for(int i4617=0;i4617<(int)prev.size();++i4617) {
          if( prev[i4617] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i4617]<m&&I[prev[i4617]]=='i') {
            tmp.push_back(prev[i4617]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        tmp.clear();
        for(int i4618=0;i4618<(int)prev.size();++i4618) {
          if( prev[i4618] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i4618]<m&&I[prev[i4618]]=='n') {
            tmp.push_back(prev[i4618]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        tmp.clear();
        for(int i4619=0;i4619<(int)prev.size();++i4619) {
          if( prev[i4619] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i4619]<m&&I[prev[i4619]]=='a') {
            tmp.push_back(prev[i4619]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        tmp.clear();
        for(int i4620=0;i4620<(int)prev.size();++i4620) {
          if( prev[i4620] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i4620]<m&&I[prev[i4620]]=='l') {
            tmp.push_back(prev[i4620]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        tmp.clear();
        for(int i4621=0;i4621<(int)prev.size();++i4621) {
          if( prev[i4621] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i4621]<m&&I[prev[i4621]]=='l') {
            tmp.push_back(prev[i4621]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        tmp.clear();
        for(int i4622=0;i4622<(int)prev.size();++i4622) {
          if( prev[i4622] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i4622]<m&&I[prev[i4622]]=='y') {
            tmp.push_back(prev[i4622]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Not */
        deque<int> next_prev4628;
        for(int i4627=0;i4627<(int)prev.size();++i4627) {
          i = prev[i4627];
          tmp = parse_not4623();
          if(!tmp.empty()&&tmp.front()==FAIL) {
            next_prev4628.push_back(prev[i4627]);
          } else {
            if(!(!next_prev4628.empty()&&next_prev4628.front()==FAIL)) {
              next_prev4628.push_front(FAIL);
            }
          }
        }
        prev = next_prev4628;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Nonterminal (_) */
        deque<int> next_prev4630;
        for(int i4629=0;i4629<(int)prev.size();++i4629) {
          if( prev[i4629] == FAIL ) {
            if(!(!next_prev4630.empty() && next_prev4630.front() == FAIL )) {
              next_prev4630.push_front(FAIL);
            }
            continue;
          }
          i = prev[i4629];
          tmp = parse__();
          
          for(int i4629=0;i4629<(int)tmp.size();++i4629) {
            if( tmp[i4629] == FAIL ) {
              if(!( !next_prev4630.empty() && next_prev4630[0] == FAIL )) {
                next_prev4630.push_front(FAIL);
              }
            } else {
              next_prev4630.push_back(tmp[i4629]);
            }
          }
        }
        prev = next_prev4630;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (Block) */
      deque<int> next_prev4632;
      for(int i4631=0;i4631<(int)prev.size();++i4631) {
        if( prev[i4631] == FAIL ) {
          if(!(!next_prev4632.empty() && next_prev4632.front() == FAIL )) {
            next_prev4632.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4631];
        tmp = parse_Block();
        
        for(int i4631=0;i4631<(int)tmp.size();++i4631) {
          if( tmp[i4631] == FAIL ) {
            if(!( !next_prev4632.empty() && next_prev4632[0] == FAIL )) {
              next_prev4632.push_front(FAIL);
            }
          } else {
            next_prev4632.push_back(tmp[i4631]);
          }
        }
      }
      prev = next_prev4632;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4615=0;i4615<(int)prev.size();++i4615) {
    if( prev[i4615] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4615]);
    }
  }
  return memo[key(642,backtracking_ptr_for_packrat642)] = result;
}

inline deque<int> parse_not4623() { 
  if(memo.count(key(643,i))) {
    return memo[key(643,i)];
  }
  int backtracking_ptr_for_packrat643=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev4626;
  for(int i4625=0;i4625<(int)prev.size();++i4625) {
    if( prev[i4625] == FAIL ) {
      if(!(!next_prev4626.empty() && next_prev4626.front() == FAIL )) {
        next_prev4626.push_front(FAIL);
      }
      continue;
    }
    i = prev[i4625];
    tmp = parse_W();
    
    for(int i4625=0;i4625<(int)tmp.size();++i4625) {
      if( tmp[i4625] == FAIL ) {
        if(!( !next_prev4626.empty() && next_prev4626[0] == FAIL )) {
          next_prev4626.push_front(FAIL);
        }
      } else {
        next_prev4626.push_back(tmp[i4625]);
      }
    }
  }
  prev = next_prev4626;
  for(int i4624=0;i4624<(int)prev.size();++i4624) {
    if( prev[i4624] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4624]);
    }
  }
  return memo[key(643,backtracking_ptr_for_packrat643)] = result;
}

inline deque<int> parse_slash4634() { 
  if(memo.count(key(644,i))) {
    return memo[key(644,i)];
  }
  int backtracking_ptr_for_packrat644=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i4635=0;i4635<(int)prev.size();++i4635) {
    if( prev[i4635] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4635]);
    }
  }
  return memo[key(644,backtracking_ptr_for_packrat644)] = result;
}

inline deque<int> parse_slash4638() { 
  if(memo.count(key(645,i))) {
    return memo[key(645,i)];
  }
  int backtracking_ptr_for_packrat645=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4640=0;i4640<(int)prev.size();++i4640) {
        if( prev[i4640] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4640]<m&&I[prev[i4640]]=='t') {
          tmp.push_back(prev[i4640]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4641=0;i4641<(int)prev.size();++i4641) {
        if( prev[i4641] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4641]<m&&I[prev[i4641]]=='r') {
          tmp.push_back(prev[i4641]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4642=0;i4642<(int)prev.size();++i4642) {
        if( prev[i4642] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4642]<m&&I[prev[i4642]]=='y') {
          tmp.push_back(prev[i4642]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4648;
      for(int i4647=0;i4647<(int)prev.size();++i4647) {
        i = prev[i4647];
        tmp = parse_not4643();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4648.push_back(prev[i4647]);
        } else {
          if(!(!next_prev4648.empty()&&next_prev4648.front()==FAIL)) {
            next_prev4648.push_front(FAIL);
          }
        }
      }
      prev = next_prev4648;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4650;
      for(int i4649=0;i4649<(int)prev.size();++i4649) {
        if( prev[i4649] == FAIL ) {
          if(!(!next_prev4650.empty() && next_prev4650.front() == FAIL )) {
            next_prev4650.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4649];
        tmp = parse__();
        
        for(int i4649=0;i4649<(int)tmp.size();++i4649) {
          if( tmp[i4649] == FAIL ) {
            if(!( !next_prev4650.empty() && next_prev4650[0] == FAIL )) {
              next_prev4650.push_front(FAIL);
            }
          } else {
            next_prev4650.push_back(tmp[i4649]);
          }
        }
      }
      prev = next_prev4650;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Block) */
    deque<int> next_prev4652;
    for(int i4651=0;i4651<(int)prev.size();++i4651) {
      if( prev[i4651] == FAIL ) {
        if(!(!next_prev4652.empty() && next_prev4652.front() == FAIL )) {
          next_prev4652.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4651];
      tmp = parse_Block();
      
      for(int i4651=0;i4651<(int)tmp.size();++i4651) {
        if( tmp[i4651] == FAIL ) {
          if(!( !next_prev4652.empty() && next_prev4652[0] == FAIL )) {
            next_prev4652.push_front(FAIL);
          }
        } else {
          next_prev4652.push_back(tmp[i4651]);
        }
      }
    }
    prev = next_prev4652;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev4657;
    deque<int> star_final_prev4658;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev4657.clear();
      for(int i4659=0;i4659<(int)prev.size();++i4659) {
        i = prev[i4659];
        tmp = parse_while4653();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev4658.push_back(prev[i4659]);
        }
        for(int i4660=0;i4660<(int)tmp.size();++i4660) {
          if(tmp[i4660]==FAIL) {
            if(!( !next_prev4657.empty() && next_prev4657.front() == FAIL )) {
              next_prev4657.push_front(FAIL);
            }
          } else {
            next_prev4657.push_back(tmp[i4660]);
          }
        }
      }
      prev = next_prev4657;
    }
    prev = star_final_prev4658;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4661=0;i4661<(int)prev.size();++i4661) {
        if( prev[i4661] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4661]<m&&I[prev[i4661]]=='f') {
          tmp.push_back(prev[i4661]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4662=0;i4662<(int)prev.size();++i4662) {
        if( prev[i4662] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4662]<m&&I[prev[i4662]]=='i') {
          tmp.push_back(prev[i4662]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4663=0;i4663<(int)prev.size();++i4663) {
        if( prev[i4663] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4663]<m&&I[prev[i4663]]=='n') {
          tmp.push_back(prev[i4663]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4664=0;i4664<(int)prev.size();++i4664) {
        if( prev[i4664] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4664]<m&&I[prev[i4664]]=='a') {
          tmp.push_back(prev[i4664]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4665=0;i4665<(int)prev.size();++i4665) {
        if( prev[i4665] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4665]<m&&I[prev[i4665]]=='l') {
          tmp.push_back(prev[i4665]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4666=0;i4666<(int)prev.size();++i4666) {
        if( prev[i4666] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4666]<m&&I[prev[i4666]]=='l') {
          tmp.push_back(prev[i4666]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4667=0;i4667<(int)prev.size();++i4667) {
        if( prev[i4667] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4667]<m&&I[prev[i4667]]=='y') {
          tmp.push_back(prev[i4667]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4673;
      for(int i4672=0;i4672<(int)prev.size();++i4672) {
        i = prev[i4672];
        tmp = parse_not4668();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4673.push_back(prev[i4672]);
        } else {
          if(!(!next_prev4673.empty()&&next_prev4673.front()==FAIL)) {
            next_prev4673.push_front(FAIL);
          }
        }
      }
      prev = next_prev4673;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4675;
      for(int i4674=0;i4674<(int)prev.size();++i4674) {
        if( prev[i4674] == FAIL ) {
          if(!(!next_prev4675.empty() && next_prev4675.front() == FAIL )) {
            next_prev4675.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4674];
        tmp = parse__();
        
        for(int i4674=0;i4674<(int)tmp.size();++i4674) {
          if( tmp[i4674] == FAIL ) {
            if(!( !next_prev4675.empty() && next_prev4675[0] == FAIL )) {
              next_prev4675.push_front(FAIL);
            }
          } else {
            next_prev4675.push_back(tmp[i4674]);
          }
        }
      }
      prev = next_prev4675;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Block) */
    deque<int> next_prev4677;
    for(int i4676=0;i4676<(int)prev.size();++i4676) {
      if( prev[i4676] == FAIL ) {
        if(!(!next_prev4677.empty() && next_prev4677.front() == FAIL )) {
          next_prev4677.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4676];
      tmp = parse_Block();
      
      for(int i4676=0;i4676<(int)tmp.size();++i4676) {
        if( tmp[i4676] == FAIL ) {
          if(!( !next_prev4677.empty() && next_prev4677[0] == FAIL )) {
            next_prev4677.push_front(FAIL);
          }
        } else {
          next_prev4677.push_back(tmp[i4676]);
        }
      }
    }
    prev = next_prev4677;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4639=0;i4639<(int)prev.size();++i4639) {
    if( prev[i4639] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4639]);
    }
  }
  return memo[key(645,backtracking_ptr_for_packrat645)] = result;
}

inline deque<int> parse_not4643() { 
  if(memo.count(key(646,i))) {
    return memo[key(646,i)];
  }
  int backtracking_ptr_for_packrat646=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev4646;
  for(int i4645=0;i4645<(int)prev.size();++i4645) {
    if( prev[i4645] == FAIL ) {
      if(!(!next_prev4646.empty() && next_prev4646.front() == FAIL )) {
        next_prev4646.push_front(FAIL);
      }
      continue;
    }
    i = prev[i4645];
    tmp = parse_W();
    
    for(int i4645=0;i4645<(int)tmp.size();++i4645) {
      if( tmp[i4645] == FAIL ) {
        if(!( !next_prev4646.empty() && next_prev4646[0] == FAIL )) {
          next_prev4646.push_front(FAIL);
        }
      } else {
        next_prev4646.push_back(tmp[i4645]);
      }
    }
  }
  prev = next_prev4646;
  for(int i4644=0;i4644<(int)prev.size();++i4644) {
    if( prev[i4644] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4644]);
    }
  }
  return memo[key(646,backtracking_ptr_for_packrat646)] = result;
}

inline deque<int> parse_while4653() { 
  if(memo.count(key(647,i))) {
    return memo[key(647,i)];
  }
  int backtracking_ptr_for_packrat647=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (CatchBlock) */
    deque<int> next_prev4656;
    for(int i4655=0;i4655<(int)prev.size();++i4655) {
      if( prev[i4655] == FAIL ) {
        if(!(!next_prev4656.empty() && next_prev4656.front() == FAIL )) {
          next_prev4656.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4655];
      tmp = parse_CatchBlock();
      
      for(int i4655=0;i4655<(int)tmp.size();++i4655) {
        if( tmp[i4655] == FAIL ) {
          if(!( !next_prev4656.empty() && next_prev4656[0] == FAIL )) {
            next_prev4656.push_front(FAIL);
          }
        } else {
          next_prev4656.push_back(tmp[i4655]);
        }
      }
    }
    prev = next_prev4656;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4654=0;i4654<(int)prev.size();++i4654) {
    if( prev[i4654] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4654]);
    }
  }
  return memo[key(647,backtracking_ptr_for_packrat647)] = result;
}

inline deque<int> parse_not4668() { 
  if(memo.count(key(648,i))) {
    return memo[key(648,i)];
  }
  int backtracking_ptr_for_packrat648=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev4671;
  for(int i4670=0;i4670<(int)prev.size();++i4670) {
    if( prev[i4670] == FAIL ) {
      if(!(!next_prev4671.empty() && next_prev4671.front() == FAIL )) {
        next_prev4671.push_front(FAIL);
      }
      continue;
    }
    i = prev[i4670];
    tmp = parse_W();
    
    for(int i4670=0;i4670<(int)tmp.size();++i4670) {
      if( tmp[i4670] == FAIL ) {
        if(!( !next_prev4671.empty() && next_prev4671[0] == FAIL )) {
          next_prev4671.push_front(FAIL);
        }
      } else {
        next_prev4671.push_back(tmp[i4670]);
      }
    }
  }
  prev = next_prev4671;
  for(int i4669=0;i4669<(int)prev.size();++i4669) {
    if( prev[i4669] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4669]);
    }
  }
  return memo[key(648,backtracking_ptr_for_packrat648)] = result;
}

inline deque<int> parse_slash4679() { 
  if(memo.count(key(649,i))) {
    return memo[key(649,i)];
  }
  int backtracking_ptr_for_packrat649=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4681=0;i4681<(int)prev.size();++i4681) {
        if( prev[i4681] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4681]<m&&I[prev[i4681]]=='t') {
          tmp.push_back(prev[i4681]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4682=0;i4682<(int)prev.size();++i4682) {
        if( prev[i4682] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4682]<m&&I[prev[i4682]]=='r') {
          tmp.push_back(prev[i4682]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4683=0;i4683<(int)prev.size();++i4683) {
        if( prev[i4683] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4683]<m&&I[prev[i4683]]=='y') {
          tmp.push_back(prev[i4683]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4689;
      for(int i4688=0;i4688<(int)prev.size();++i4688) {
        i = prev[i4688];
        tmp = parse_not4684();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4689.push_back(prev[i4688]);
        } else {
          if(!(!next_prev4689.empty()&&next_prev4689.front()==FAIL)) {
            next_prev4689.push_front(FAIL);
          }
        }
      }
      prev = next_prev4689;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4691;
      for(int i4690=0;i4690<(int)prev.size();++i4690) {
        if( prev[i4690] == FAIL ) {
          if(!(!next_prev4691.empty() && next_prev4691.front() == FAIL )) {
            next_prev4691.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4690];
        tmp = parse__();
        
        for(int i4690=0;i4690<(int)tmp.size();++i4690) {
          if( tmp[i4690] == FAIL ) {
            if(!( !next_prev4691.empty() && next_prev4691[0] == FAIL )) {
              next_prev4691.push_front(FAIL);
            }
          } else {
            next_prev4691.push_back(tmp[i4690]);
          }
        }
      }
      prev = next_prev4691;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Block) */
    deque<int> next_prev4693;
    for(int i4692=0;i4692<(int)prev.size();++i4692) {
      if( prev[i4692] == FAIL ) {
        if(!(!next_prev4693.empty() && next_prev4693.front() == FAIL )) {
          next_prev4693.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4692];
      tmp = parse_Block();
      
      for(int i4692=0;i4692<(int)tmp.size();++i4692) {
        if( tmp[i4692] == FAIL ) {
          if(!( !next_prev4693.empty() && next_prev4693[0] == FAIL )) {
            next_prev4693.push_front(FAIL);
          }
        } else {
          next_prev4693.push_back(tmp[i4692]);
        }
      }
    }
    prev = next_prev4693;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Nonterminal (CatchBlock) */
        deque<int> next_prev4695;
        for(int i4694=0;i4694<(int)prev.size();++i4694) {
          if( prev[i4694] == FAIL ) {
            if(!(!next_prev4695.empty() && next_prev4695.front() == FAIL )) {
              next_prev4695.push_front(FAIL);
            }
            continue;
          }
          i = prev[i4694];
          tmp = parse_CatchBlock();
          
          for(int i4694=0;i4694<(int)tmp.size();++i4694) {
            if( tmp[i4694] == FAIL ) {
              if(!( !next_prev4695.empty() && next_prev4695[0] == FAIL )) {
                next_prev4695.push_front(FAIL);
              }
            } else {
              next_prev4695.push_back(tmp[i4694]);
            }
          }
        }
        prev = next_prev4695;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Star */
      deque<int> next_prev4700;
      deque<int> star_final_prev4701;
      while(!((int)prev.size()==1&&prev.front()==FAIL)) {
        next_prev4700.clear();
        for(int i4702=0;i4702<(int)prev.size();++i4702) {
          i = prev[i4702];
          tmp = parse_while4696();
          if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
            star_final_prev4701.push_back(prev[i4702]);
          }
          for(int i4703=0;i4703<(int)tmp.size();++i4703) {
            if(tmp[i4703]==FAIL) {
              if(!( !next_prev4700.empty() && next_prev4700.front() == FAIL )) {
                next_prev4700.push_front(FAIL);
              }
            } else {
              next_prev4700.push_back(tmp[i4703]);
            }
          }
        }
        prev = next_prev4700;
      }
      prev = star_final_prev4701;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4680=0;i4680<(int)prev.size();++i4680) {
    if( prev[i4680] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4680]);
    }
  }
  return memo[key(649,backtracking_ptr_for_packrat649)] = result;
}

inline deque<int> parse_not4684() { 
  if(memo.count(key(650,i))) {
    return memo[key(650,i)];
  }
  int backtracking_ptr_for_packrat650=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev4687;
  for(int i4686=0;i4686<(int)prev.size();++i4686) {
    if( prev[i4686] == FAIL ) {
      if(!(!next_prev4687.empty() && next_prev4687.front() == FAIL )) {
        next_prev4687.push_front(FAIL);
      }
      continue;
    }
    i = prev[i4686];
    tmp = parse_W();
    
    for(int i4686=0;i4686<(int)tmp.size();++i4686) {
      if( tmp[i4686] == FAIL ) {
        if(!( !next_prev4687.empty() && next_prev4687[0] == FAIL )) {
          next_prev4687.push_front(FAIL);
        }
      } else {
        next_prev4687.push_back(tmp[i4686]);
      }
    }
  }
  prev = next_prev4687;
  for(int i4685=0;i4685<(int)prev.size();++i4685) {
    if( prev[i4685] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4685]);
    }
  }
  return memo[key(650,backtracking_ptr_for_packrat650)] = result;
}

inline deque<int> parse_while4696() { 
  if(memo.count(key(651,i))) {
    return memo[key(651,i)];
  }
  int backtracking_ptr_for_packrat651=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (CatchBlock) */
    deque<int> next_prev4699;
    for(int i4698=0;i4698<(int)prev.size();++i4698) {
      if( prev[i4698] == FAIL ) {
        if(!(!next_prev4699.empty() && next_prev4699.front() == FAIL )) {
          next_prev4699.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4698];
      tmp = parse_CatchBlock();
      
      for(int i4698=0;i4698<(int)tmp.size();++i4698) {
        if( tmp[i4698] == FAIL ) {
          if(!( !next_prev4699.empty() && next_prev4699[0] == FAIL )) {
            next_prev4699.push_front(FAIL);
          }
        } else {
          next_prev4699.push_back(tmp[i4698]);
        }
      }
    }
    prev = next_prev4699;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4697=0;i4697<(int)prev.size();++i4697) {
    if( prev[i4697] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4697]);
    }
  }
  return memo[key(651,backtracking_ptr_for_packrat651)] = result;
}

inline deque<int> parse_slash4705() { 
  if(memo.count(key(652,i))) {
    return memo[key(652,i)];
  }
  int backtracking_ptr_for_packrat652=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4707=0;i4707<(int)prev.size();++i4707) {
        if( prev[i4707] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4707]<m&&I[prev[i4707]]=='t') {
          tmp.push_back(prev[i4707]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4708=0;i4708<(int)prev.size();++i4708) {
        if( prev[i4708] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4708]<m&&I[prev[i4708]]=='h') {
          tmp.push_back(prev[i4708]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4709=0;i4709<(int)prev.size();++i4709) {
        if( prev[i4709] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4709]<m&&I[prev[i4709]]=='r') {
          tmp.push_back(prev[i4709]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4710=0;i4710<(int)prev.size();++i4710) {
        if( prev[i4710] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4710]<m&&I[prev[i4710]]=='o') {
          tmp.push_back(prev[i4710]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4711=0;i4711<(int)prev.size();++i4711) {
        if( prev[i4711] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4711]<m&&I[prev[i4711]]=='w') {
          tmp.push_back(prev[i4711]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4717;
      for(int i4716=0;i4716<(int)prev.size();++i4716) {
        i = prev[i4716];
        tmp = parse_not4712();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4717.push_back(prev[i4716]);
        } else {
          if(!(!next_prev4717.empty()&&next_prev4717.front()==FAIL)) {
            next_prev4717.push_front(FAIL);
          }
        }
      }
      prev = next_prev4717;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4719;
      for(int i4718=0;i4718<(int)prev.size();++i4718) {
        if( prev[i4718] == FAIL ) {
          if(!(!next_prev4719.empty() && next_prev4719.front() == FAIL )) {
            next_prev4719.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4718];
        tmp = parse__();
        
        for(int i4718=0;i4718<(int)tmp.size();++i4718) {
          if( tmp[i4718] == FAIL ) {
            if(!( !next_prev4719.empty() && next_prev4719[0] == FAIL )) {
              next_prev4719.push_front(FAIL);
            }
          } else {
            next_prev4719.push_back(tmp[i4718]);
          }
        }
      }
      prev = next_prev4719;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Expression) */
    deque<int> next_prev4721;
    for(int i4720=0;i4720<(int)prev.size();++i4720) {
      if( prev[i4720] == FAIL ) {
        if(!(!next_prev4721.empty() && next_prev4721.front() == FAIL )) {
          next_prev4721.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4720];
      tmp = parse_Expression();
      
      for(int i4720=0;i4720<(int)tmp.size();++i4720) {
        if( tmp[i4720] == FAIL ) {
          if(!( !next_prev4721.empty() && next_prev4721[0] == FAIL )) {
            next_prev4721.push_front(FAIL);
          }
        } else {
          next_prev4721.push_back(tmp[i4720]);
        }
      }
    }
    prev = next_prev4721;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4722=0;i4722<(int)prev.size();++i4722) {
        if( prev[i4722] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4722]<m&&I[prev[i4722]]==';') {
          tmp.push_back(prev[i4722]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4724;
      for(int i4723=0;i4723<(int)prev.size();++i4723) {
        if( prev[i4723] == FAIL ) {
          if(!(!next_prev4724.empty() && next_prev4724.front() == FAIL )) {
            next_prev4724.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4723];
        tmp = parse__();
        
        for(int i4723=0;i4723<(int)tmp.size();++i4723) {
          if( tmp[i4723] == FAIL ) {
            if(!( !next_prev4724.empty() && next_prev4724[0] == FAIL )) {
              next_prev4724.push_front(FAIL);
            }
          } else {
            next_prev4724.push_back(tmp[i4723]);
          }
        }
      }
      prev = next_prev4724;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4706=0;i4706<(int)prev.size();++i4706) {
    if( prev[i4706] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4706]);
    }
  }
  return memo[key(652,backtracking_ptr_for_packrat652)] = result;
}

inline deque<int> parse_not4712() { 
  if(memo.count(key(653,i))) {
    return memo[key(653,i)];
  }
  int backtracking_ptr_for_packrat653=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev4715;
  for(int i4714=0;i4714<(int)prev.size();++i4714) {
    if( prev[i4714] == FAIL ) {
      if(!(!next_prev4715.empty() && next_prev4715.front() == FAIL )) {
        next_prev4715.push_front(FAIL);
      }
      continue;
    }
    i = prev[i4714];
    tmp = parse_W();
    
    for(int i4714=0;i4714<(int)tmp.size();++i4714) {
      if( tmp[i4714] == FAIL ) {
        if(!( !next_prev4715.empty() && next_prev4715[0] == FAIL )) {
          next_prev4715.push_front(FAIL);
        }
      } else {
        next_prev4715.push_back(tmp[i4714]);
      }
    }
  }
  prev = next_prev4715;
  for(int i4713=0;i4713<(int)prev.size();++i4713) {
    if( prev[i4713] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4713]);
    }
  }
  return memo[key(653,backtracking_ptr_for_packrat653)] = result;
}

inline deque<int> parse_slash4726() { 
  if(memo.count(key(654,i))) {
    return memo[key(654,i)];
  }
  int backtracking_ptr_for_packrat654=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4728=0;i4728<(int)prev.size();++i4728) {
        if( prev[i4728] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4728]<m&&I[prev[i4728]]=='s') {
          tmp.push_back(prev[i4728]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4729=0;i4729<(int)prev.size();++i4729) {
        if( prev[i4729] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4729]<m&&I[prev[i4729]]=='y') {
          tmp.push_back(prev[i4729]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4730=0;i4730<(int)prev.size();++i4730) {
        if( prev[i4730] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4730]<m&&I[prev[i4730]]=='n') {
          tmp.push_back(prev[i4730]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4731=0;i4731<(int)prev.size();++i4731) {
        if( prev[i4731] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4731]<m&&I[prev[i4731]]=='c') {
          tmp.push_back(prev[i4731]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4732=0;i4732<(int)prev.size();++i4732) {
        if( prev[i4732] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4732]<m&&I[prev[i4732]]=='h') {
          tmp.push_back(prev[i4732]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4733=0;i4733<(int)prev.size();++i4733) {
        if( prev[i4733] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4733]<m&&I[prev[i4733]]=='r') {
          tmp.push_back(prev[i4733]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4734=0;i4734<(int)prev.size();++i4734) {
        if( prev[i4734] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4734]<m&&I[prev[i4734]]=='o') {
          tmp.push_back(prev[i4734]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4735=0;i4735<(int)prev.size();++i4735) {
        if( prev[i4735] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4735]<m&&I[prev[i4735]]=='n') {
          tmp.push_back(prev[i4735]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4736=0;i4736<(int)prev.size();++i4736) {
        if( prev[i4736] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4736]<m&&I[prev[i4736]]=='i') {
          tmp.push_back(prev[i4736]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4737=0;i4737<(int)prev.size();++i4737) {
        if( prev[i4737] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4737]<m&&I[prev[i4737]]=='z') {
          tmp.push_back(prev[i4737]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4738=0;i4738<(int)prev.size();++i4738) {
        if( prev[i4738] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4738]<m&&I[prev[i4738]]=='e') {
          tmp.push_back(prev[i4738]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4739=0;i4739<(int)prev.size();++i4739) {
        if( prev[i4739] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4739]<m&&I[prev[i4739]]=='d') {
          tmp.push_back(prev[i4739]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4745;
      for(int i4744=0;i4744<(int)prev.size();++i4744) {
        i = prev[i4744];
        tmp = parse_not4740();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4745.push_back(prev[i4744]);
        } else {
          if(!(!next_prev4745.empty()&&next_prev4745.front()==FAIL)) {
            next_prev4745.push_front(FAIL);
          }
        }
      }
      prev = next_prev4745;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4747;
      for(int i4746=0;i4746<(int)prev.size();++i4746) {
        if( prev[i4746] == FAIL ) {
          if(!(!next_prev4747.empty() && next_prev4747.front() == FAIL )) {
            next_prev4747.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4746];
        tmp = parse__();
        
        for(int i4746=0;i4746<(int)tmp.size();++i4746) {
          if( tmp[i4746] == FAIL ) {
            if(!( !next_prev4747.empty() && next_prev4747[0] == FAIL )) {
              next_prev4747.push_front(FAIL);
            }
          } else {
            next_prev4747.push_back(tmp[i4746]);
          }
        }
      }
      prev = next_prev4747;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4748=0;i4748<(int)prev.size();++i4748) {
        if( prev[i4748] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4748]<m&&I[prev[i4748]]=='(') {
          tmp.push_back(prev[i4748]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4750;
      for(int i4749=0;i4749<(int)prev.size();++i4749) {
        if( prev[i4749] == FAIL ) {
          if(!(!next_prev4750.empty() && next_prev4750.front() == FAIL )) {
            next_prev4750.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4749];
        tmp = parse__();
        
        for(int i4749=0;i4749<(int)tmp.size();++i4749) {
          if( tmp[i4749] == FAIL ) {
            if(!( !next_prev4750.empty() && next_prev4750[0] == FAIL )) {
              next_prev4750.push_front(FAIL);
            }
          } else {
            next_prev4750.push_back(tmp[i4749]);
          }
        }
      }
      prev = next_prev4750;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Expression) */
    deque<int> next_prev4752;
    for(int i4751=0;i4751<(int)prev.size();++i4751) {
      if( prev[i4751] == FAIL ) {
        if(!(!next_prev4752.empty() && next_prev4752.front() == FAIL )) {
          next_prev4752.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4751];
      tmp = parse_Expression();
      
      for(int i4751=0;i4751<(int)tmp.size();++i4751) {
        if( tmp[i4751] == FAIL ) {
          if(!( !next_prev4752.empty() && next_prev4752[0] == FAIL )) {
            next_prev4752.push_front(FAIL);
          }
        } else {
          next_prev4752.push_back(tmp[i4751]);
        }
      }
    }
    prev = next_prev4752;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4753=0;i4753<(int)prev.size();++i4753) {
        if( prev[i4753] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4753]<m&&I[prev[i4753]]==')') {
          tmp.push_back(prev[i4753]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4755;
      for(int i4754=0;i4754<(int)prev.size();++i4754) {
        if( prev[i4754] == FAIL ) {
          if(!(!next_prev4755.empty() && next_prev4755.front() == FAIL )) {
            next_prev4755.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4754];
        tmp = parse__();
        
        for(int i4754=0;i4754<(int)tmp.size();++i4754) {
          if( tmp[i4754] == FAIL ) {
            if(!( !next_prev4755.empty() && next_prev4755[0] == FAIL )) {
              next_prev4755.push_front(FAIL);
            }
          } else {
            next_prev4755.push_back(tmp[i4754]);
          }
        }
      }
      prev = next_prev4755;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Block) */
    deque<int> next_prev4757;
    for(int i4756=0;i4756<(int)prev.size();++i4756) {
      if( prev[i4756] == FAIL ) {
        if(!(!next_prev4757.empty() && next_prev4757.front() == FAIL )) {
          next_prev4757.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4756];
      tmp = parse_Block();
      
      for(int i4756=0;i4756<(int)tmp.size();++i4756) {
        if( tmp[i4756] == FAIL ) {
          if(!( !next_prev4757.empty() && next_prev4757[0] == FAIL )) {
            next_prev4757.push_front(FAIL);
          }
        } else {
          next_prev4757.push_back(tmp[i4756]);
        }
      }
    }
    prev = next_prev4757;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4727=0;i4727<(int)prev.size();++i4727) {
    if( prev[i4727] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4727]);
    }
  }
  return memo[key(654,backtracking_ptr_for_packrat654)] = result;
}

inline deque<int> parse_not4740() { 
  if(memo.count(key(655,i))) {
    return memo[key(655,i)];
  }
  int backtracking_ptr_for_packrat655=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev4743;
  for(int i4742=0;i4742<(int)prev.size();++i4742) {
    if( prev[i4742] == FAIL ) {
      if(!(!next_prev4743.empty() && next_prev4743.front() == FAIL )) {
        next_prev4743.push_front(FAIL);
      }
      continue;
    }
    i = prev[i4742];
    tmp = parse_W();
    
    for(int i4742=0;i4742<(int)tmp.size();++i4742) {
      if( tmp[i4742] == FAIL ) {
        if(!( !next_prev4743.empty() && next_prev4743[0] == FAIL )) {
          next_prev4743.push_front(FAIL);
        }
      } else {
        next_prev4743.push_back(tmp[i4742]);
      }
    }
  }
  prev = next_prev4743;
  for(int i4741=0;i4741<(int)prev.size();++i4741) {
    if( prev[i4741] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4741]);
    }
  }
  return memo[key(655,backtracking_ptr_for_packrat655)] = result;
}

inline deque<int> parse_slash4759() { 
  if(memo.count(key(656,i))) {
    return memo[key(656,i)];
  }
  int backtracking_ptr_for_packrat656=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4761=0;i4761<(int)prev.size();++i4761) {
        if( prev[i4761] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4761]<m&&I[prev[i4761]]=='c') {
          tmp.push_back(prev[i4761]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4762=0;i4762<(int)prev.size();++i4762) {
        if( prev[i4762] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4762]<m&&I[prev[i4762]]=='a') {
          tmp.push_back(prev[i4762]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4763=0;i4763<(int)prev.size();++i4763) {
        if( prev[i4763] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4763]<m&&I[prev[i4763]]=='s') {
          tmp.push_back(prev[i4763]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4764=0;i4764<(int)prev.size();++i4764) {
        if( prev[i4764] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4764]<m&&I[prev[i4764]]=='e') {
          tmp.push_back(prev[i4764]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4770;
      for(int i4769=0;i4769<(int)prev.size();++i4769) {
        i = prev[i4769];
        tmp = parse_not4765();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4770.push_back(prev[i4769]);
        } else {
          if(!(!next_prev4770.empty()&&next_prev4770.front()==FAIL)) {
            next_prev4770.push_front(FAIL);
          }
        }
      }
      prev = next_prev4770;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4772;
      for(int i4771=0;i4771<(int)prev.size();++i4771) {
        if( prev[i4771] == FAIL ) {
          if(!(!next_prev4772.empty() && next_prev4772.front() == FAIL )) {
            next_prev4772.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4771];
        tmp = parse__();
        
        for(int i4771=0;i4771<(int)tmp.size();++i4771) {
          if( tmp[i4771] == FAIL ) {
            if(!( !next_prev4772.empty() && next_prev4772[0] == FAIL )) {
              next_prev4772.push_front(FAIL);
            }
          } else {
            next_prev4772.push_back(tmp[i4771]);
          }
        }
      }
      prev = next_prev4772;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ConstantExpression) */
    deque<int> next_prev4774;
    for(int i4773=0;i4773<(int)prev.size();++i4773) {
      if( prev[i4773] == FAIL ) {
        if(!(!next_prev4774.empty() && next_prev4774.front() == FAIL )) {
          next_prev4774.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4773];
      tmp = parse_ConstantExpression();
      
      for(int i4773=0;i4773<(int)tmp.size();++i4773) {
        if( tmp[i4773] == FAIL ) {
          if(!( !next_prev4774.empty() && next_prev4774[0] == FAIL )) {
            next_prev4774.push_front(FAIL);
          }
        } else {
          next_prev4774.push_back(tmp[i4773]);
        }
      }
    }
    prev = next_prev4774;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4775=0;i4775<(int)prev.size();++i4775) {
        if( prev[i4775] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4775]<m&&I[prev[i4775]]==':') {
          tmp.push_back(prev[i4775]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4780;
      for(int i4779=0;i4779<(int)prev.size();++i4779) {
        i = prev[i4779];
        tmp = parse_not4776();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4780.push_back(prev[i4779]);
        } else {
          if(!(!next_prev4780.empty()&&next_prev4780.front()==FAIL)) {
            next_prev4780.push_front(FAIL);
          }
        }
      }
      prev = next_prev4780;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4782;
      for(int i4781=0;i4781<(int)prev.size();++i4781) {
        if( prev[i4781] == FAIL ) {
          if(!(!next_prev4782.empty() && next_prev4782.front() == FAIL )) {
            next_prev4782.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4781];
        tmp = parse__();
        
        for(int i4781=0;i4781<(int)tmp.size();++i4781) {
          if( tmp[i4781] == FAIL ) {
            if(!( !next_prev4782.empty() && next_prev4782[0] == FAIL )) {
              next_prev4782.push_front(FAIL);
            }
          } else {
            next_prev4782.push_back(tmp[i4781]);
          }
        }
      }
      prev = next_prev4782;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev4822;
    deque<int> star_final_prev4823;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev4822.clear();
      for(int i4824=0;i4824<(int)prev.size();++i4824) {
        i = prev[i4824];
        tmp = parse_while4783();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev4823.push_back(prev[i4824]);
        }
        for(int i4825=0;i4825<(int)tmp.size();++i4825) {
          if(tmp[i4825]==FAIL) {
            if(!( !next_prev4822.empty() && next_prev4822.front() == FAIL )) {
              next_prev4822.push_front(FAIL);
            }
          } else {
            next_prev4822.push_back(tmp[i4825]);
          }
        }
      }
      prev = next_prev4822;
    }
    prev = star_final_prev4823;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4760=0;i4760<(int)prev.size();++i4760) {
    if( prev[i4760] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4760]);
    }
  }
  return memo[key(656,backtracking_ptr_for_packrat656)] = result;
}

inline deque<int> parse_not4765() { 
  if(memo.count(key(657,i))) {
    return memo[key(657,i)];
  }
  int backtracking_ptr_for_packrat657=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev4768;
  for(int i4767=0;i4767<(int)prev.size();++i4767) {
    if( prev[i4767] == FAIL ) {
      if(!(!next_prev4768.empty() && next_prev4768.front() == FAIL )) {
        next_prev4768.push_front(FAIL);
      }
      continue;
    }
    i = prev[i4767];
    tmp = parse_W();
    
    for(int i4767=0;i4767<(int)tmp.size();++i4767) {
      if( tmp[i4767] == FAIL ) {
        if(!( !next_prev4768.empty() && next_prev4768[0] == FAIL )) {
          next_prev4768.push_front(FAIL);
        }
      } else {
        next_prev4768.push_back(tmp[i4767]);
      }
    }
  }
  prev = next_prev4768;
  for(int i4766=0;i4766<(int)prev.size();++i4766) {
    if( prev[i4766] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4766]);
    }
  }
  return memo[key(657,backtracking_ptr_for_packrat657)] = result;
}

inline deque<int> parse_not4776() { 
  if(memo.count(key(658,i))) {
    return memo[key(658,i)];
  }
  int backtracking_ptr_for_packrat658=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i4778=0;i4778<(int)prev.size();++i4778) {
    if( prev[i4778] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i4778]<m&&(I[prev[i4778]]=='>'||I[prev[i4778]]==':')) {
      tmp.push_back(prev[i4778]+1);
    } else {
      if(!( !tmp.empty() && tmp.front() == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i4777=0;i4777<(int)prev.size();++i4777) {
    if( prev[i4777] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4777]);
    }
  }
  return memo[key(658,backtracking_ptr_for_packrat658)] = result;
}

inline deque<int> parse_while4783() { 
  if(memo.count(key(659,i))) {
    return memo[key(659,i)];
  }
  int backtracking_ptr_for_packrat659=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Not */
    deque<int> next_prev4800;
    for(int i4799=0;i4799<(int)prev.size();++i4799) {
      i = prev[i4799];
      tmp = parse_not4785();
      if(!tmp.empty()&&tmp.front()==FAIL) {
        next_prev4800.push_back(prev[i4799]);
      } else {
        if(!(!next_prev4800.empty()&&next_prev4800.front()==FAIL)) {
          next_prev4800.push_front(FAIL);
        }
      }
    }
    prev = next_prev4800;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Not */
    deque<int> next_prev4819;
    for(int i4818=0;i4818<(int)prev.size();++i4818) {
      i = prev[i4818];
      tmp = parse_not4801();
      if(!tmp.empty()&&tmp.front()==FAIL) {
        next_prev4819.push_back(prev[i4818]);
      } else {
        if(!(!next_prev4819.empty()&&next_prev4819.front()==FAIL)) {
          next_prev4819.push_front(FAIL);
        }
      }
    }
    prev = next_prev4819;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Statement) */
    deque<int> next_prev4821;
    for(int i4820=0;i4820<(int)prev.size();++i4820) {
      if( prev[i4820] == FAIL ) {
        if(!(!next_prev4821.empty() && next_prev4821.front() == FAIL )) {
          next_prev4821.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4820];
      tmp = parse_Statement();
      
      for(int i4820=0;i4820<(int)tmp.size();++i4820) {
        if( tmp[i4820] == FAIL ) {
          if(!( !next_prev4821.empty() && next_prev4821[0] == FAIL )) {
            next_prev4821.push_front(FAIL);
          }
        } else {
          next_prev4821.push_back(tmp[i4820]);
        }
      }
    }
    prev = next_prev4821;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4784=0;i4784<(int)prev.size();++i4784) {
    if( prev[i4784] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4784]);
    }
  }
  return memo[key(659,backtracking_ptr_for_packrat659)] = result;
}

inline deque<int> parse_not4785() { 
  if(memo.count(key(660,i))) {
    return memo[key(660,i)];
  }
  int backtracking_ptr_for_packrat660=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i4787=0;i4787<(int)prev.size();++i4787) {
      if( prev[i4787] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i4787]<m&&I[prev[i4787]]=='c') {
        tmp.push_back(prev[i4787]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    tmp.clear();
    for(int i4788=0;i4788<(int)prev.size();++i4788) {
      if( prev[i4788] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i4788]<m&&I[prev[i4788]]=='a') {
        tmp.push_back(prev[i4788]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    tmp.clear();
    for(int i4789=0;i4789<(int)prev.size();++i4789) {
      if( prev[i4789] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i4789]<m&&I[prev[i4789]]=='s') {
        tmp.push_back(prev[i4789]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    tmp.clear();
    for(int i4790=0;i4790<(int)prev.size();++i4790) {
      if( prev[i4790] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i4790]<m&&I[prev[i4790]]=='e') {
        tmp.push_back(prev[i4790]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Not */
    deque<int> next_prev4796;
    for(int i4795=0;i4795<(int)prev.size();++i4795) {
      i = prev[i4795];
      tmp = parse_not4791();
      if(!tmp.empty()&&tmp.front()==FAIL) {
        next_prev4796.push_back(prev[i4795]);
      } else {
        if(!(!next_prev4796.empty()&&next_prev4796.front()==FAIL)) {
          next_prev4796.push_front(FAIL);
        }
      }
    }
    prev = next_prev4796;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (_) */
    deque<int> next_prev4798;
    for(int i4797=0;i4797<(int)prev.size();++i4797) {
      if( prev[i4797] == FAIL ) {
        if(!(!next_prev4798.empty() && next_prev4798.front() == FAIL )) {
          next_prev4798.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4797];
      tmp = parse__();
      
      for(int i4797=0;i4797<(int)tmp.size();++i4797) {
        if( tmp[i4797] == FAIL ) {
          if(!( !next_prev4798.empty() && next_prev4798[0] == FAIL )) {
            next_prev4798.push_front(FAIL);
          }
        } else {
          next_prev4798.push_back(tmp[i4797]);
        }
      }
    }
    prev = next_prev4798;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4786=0;i4786<(int)prev.size();++i4786) {
    if( prev[i4786] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4786]);
    }
  }
  return memo[key(660,backtracking_ptr_for_packrat660)] = result;
}

inline deque<int> parse_not4791() { 
  if(memo.count(key(661,i))) {
    return memo[key(661,i)];
  }
  int backtracking_ptr_for_packrat661=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev4794;
  for(int i4793=0;i4793<(int)prev.size();++i4793) {
    if( prev[i4793] == FAIL ) {
      if(!(!next_prev4794.empty() && next_prev4794.front() == FAIL )) {
        next_prev4794.push_front(FAIL);
      }
      continue;
    }
    i = prev[i4793];
    tmp = parse_W();
    
    for(int i4793=0;i4793<(int)tmp.size();++i4793) {
      if( tmp[i4793] == FAIL ) {
        if(!( !next_prev4794.empty() && next_prev4794[0] == FAIL )) {
          next_prev4794.push_front(FAIL);
        }
      } else {
        next_prev4794.push_back(tmp[i4793]);
      }
    }
  }
  prev = next_prev4794;
  for(int i4792=0;i4792<(int)prev.size();++i4792) {
    if( prev[i4792] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4792]);
    }
  }
  return memo[key(661,backtracking_ptr_for_packrat661)] = result;
}

inline deque<int> parse_not4801() { 
  if(memo.count(key(662,i))) {
    return memo[key(662,i)];
  }
  int backtracking_ptr_for_packrat662=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i4803=0;i4803<(int)prev.size();++i4803) {
      if( prev[i4803] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i4803]<m&&I[prev[i4803]]=='d') {
        tmp.push_back(prev[i4803]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    tmp.clear();
    for(int i4804=0;i4804<(int)prev.size();++i4804) {
      if( prev[i4804] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i4804]<m&&I[prev[i4804]]=='e') {
        tmp.push_back(prev[i4804]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    tmp.clear();
    for(int i4805=0;i4805<(int)prev.size();++i4805) {
      if( prev[i4805] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i4805]<m&&I[prev[i4805]]=='f') {
        tmp.push_back(prev[i4805]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    tmp.clear();
    for(int i4806=0;i4806<(int)prev.size();++i4806) {
      if( prev[i4806] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i4806]<m&&I[prev[i4806]]=='a') {
        tmp.push_back(prev[i4806]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    tmp.clear();
    for(int i4807=0;i4807<(int)prev.size();++i4807) {
      if( prev[i4807] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i4807]<m&&I[prev[i4807]]=='u') {
        tmp.push_back(prev[i4807]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    tmp.clear();
    for(int i4808=0;i4808<(int)prev.size();++i4808) {
      if( prev[i4808] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i4808]<m&&I[prev[i4808]]=='l') {
        tmp.push_back(prev[i4808]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    tmp.clear();
    for(int i4809=0;i4809<(int)prev.size();++i4809) {
      if( prev[i4809] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i4809]<m&&I[prev[i4809]]=='t') {
        tmp.push_back(prev[i4809]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Not */
    deque<int> next_prev4815;
    for(int i4814=0;i4814<(int)prev.size();++i4814) {
      i = prev[i4814];
      tmp = parse_not4810();
      if(!tmp.empty()&&tmp.front()==FAIL) {
        next_prev4815.push_back(prev[i4814]);
      } else {
        if(!(!next_prev4815.empty()&&next_prev4815.front()==FAIL)) {
          next_prev4815.push_front(FAIL);
        }
      }
    }
    prev = next_prev4815;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (_) */
    deque<int> next_prev4817;
    for(int i4816=0;i4816<(int)prev.size();++i4816) {
      if( prev[i4816] == FAIL ) {
        if(!(!next_prev4817.empty() && next_prev4817.front() == FAIL )) {
          next_prev4817.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4816];
      tmp = parse__();
      
      for(int i4816=0;i4816<(int)tmp.size();++i4816) {
        if( tmp[i4816] == FAIL ) {
          if(!( !next_prev4817.empty() && next_prev4817[0] == FAIL )) {
            next_prev4817.push_front(FAIL);
          }
        } else {
          next_prev4817.push_back(tmp[i4816]);
        }
      }
    }
    prev = next_prev4817;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4802=0;i4802<(int)prev.size();++i4802) {
    if( prev[i4802] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4802]);
    }
  }
  return memo[key(662,backtracking_ptr_for_packrat662)] = result;
}

inline deque<int> parse_not4810() { 
  if(memo.count(key(663,i))) {
    return memo[key(663,i)];
  }
  int backtracking_ptr_for_packrat663=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev4813;
  for(int i4812=0;i4812<(int)prev.size();++i4812) {
    if( prev[i4812] == FAIL ) {
      if(!(!next_prev4813.empty() && next_prev4813.front() == FAIL )) {
        next_prev4813.push_front(FAIL);
      }
      continue;
    }
    i = prev[i4812];
    tmp = parse_W();
    
    for(int i4812=0;i4812<(int)tmp.size();++i4812) {
      if( tmp[i4812] == FAIL ) {
        if(!( !next_prev4813.empty() && next_prev4813[0] == FAIL )) {
          next_prev4813.push_front(FAIL);
        }
      } else {
        next_prev4813.push_back(tmp[i4812]);
      }
    }
  }
  prev = next_prev4813;
  for(int i4811=0;i4811<(int)prev.size();++i4811) {
    if( prev[i4811] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4811]);
    }
  }
  return memo[key(663,backtracking_ptr_for_packrat663)] = result;
}

inline deque<int> parse_slash4827() { 
  if(memo.count(key(664,i))) {
    return memo[key(664,i)];
  }
  int backtracking_ptr_for_packrat664=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4829=0;i4829<(int)prev.size();++i4829) {
        if( prev[i4829] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4829]<m&&I[prev[i4829]]=='d') {
          tmp.push_back(prev[i4829]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4830=0;i4830<(int)prev.size();++i4830) {
        if( prev[i4830] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4830]<m&&I[prev[i4830]]=='e') {
          tmp.push_back(prev[i4830]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4831=0;i4831<(int)prev.size();++i4831) {
        if( prev[i4831] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4831]<m&&I[prev[i4831]]=='f') {
          tmp.push_back(prev[i4831]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4832=0;i4832<(int)prev.size();++i4832) {
        if( prev[i4832] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4832]<m&&I[prev[i4832]]=='a') {
          tmp.push_back(prev[i4832]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4833=0;i4833<(int)prev.size();++i4833) {
        if( prev[i4833] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4833]<m&&I[prev[i4833]]=='u') {
          tmp.push_back(prev[i4833]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4834=0;i4834<(int)prev.size();++i4834) {
        if( prev[i4834] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4834]<m&&I[prev[i4834]]=='l') {
          tmp.push_back(prev[i4834]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4835=0;i4835<(int)prev.size();++i4835) {
        if( prev[i4835] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4835]<m&&I[prev[i4835]]=='t') {
          tmp.push_back(prev[i4835]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4841;
      for(int i4840=0;i4840<(int)prev.size();++i4840) {
        i = prev[i4840];
        tmp = parse_not4836();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4841.push_back(prev[i4840]);
        } else {
          if(!(!next_prev4841.empty()&&next_prev4841.front()==FAIL)) {
            next_prev4841.push_front(FAIL);
          }
        }
      }
      prev = next_prev4841;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4843;
      for(int i4842=0;i4842<(int)prev.size();++i4842) {
        if( prev[i4842] == FAIL ) {
          if(!(!next_prev4843.empty() && next_prev4843.front() == FAIL )) {
            next_prev4843.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4842];
        tmp = parse__();
        
        for(int i4842=0;i4842<(int)tmp.size();++i4842) {
          if( tmp[i4842] == FAIL ) {
            if(!( !next_prev4843.empty() && next_prev4843[0] == FAIL )) {
              next_prev4843.push_front(FAIL);
            }
          } else {
            next_prev4843.push_back(tmp[i4842]);
          }
        }
      }
      prev = next_prev4843;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4844=0;i4844<(int)prev.size();++i4844) {
        if( prev[i4844] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4844]<m&&I[prev[i4844]]==':') {
          tmp.push_back(prev[i4844]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4849;
      for(int i4848=0;i4848<(int)prev.size();++i4848) {
        i = prev[i4848];
        tmp = parse_not4845();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4849.push_back(prev[i4848]);
        } else {
          if(!(!next_prev4849.empty()&&next_prev4849.front()==FAIL)) {
            next_prev4849.push_front(FAIL);
          }
        }
      }
      prev = next_prev4849;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4851;
      for(int i4850=0;i4850<(int)prev.size();++i4850) {
        if( prev[i4850] == FAIL ) {
          if(!(!next_prev4851.empty() && next_prev4851.front() == FAIL )) {
            next_prev4851.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4850];
        tmp = parse__();
        
        for(int i4850=0;i4850<(int)tmp.size();++i4850) {
          if( tmp[i4850] == FAIL ) {
            if(!( !next_prev4851.empty() && next_prev4851[0] == FAIL )) {
              next_prev4851.push_front(FAIL);
            }
          } else {
            next_prev4851.push_back(tmp[i4850]);
          }
        }
      }
      prev = next_prev4851;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev4872;
    deque<int> star_final_prev4873;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev4872.clear();
      for(int i4874=0;i4874<(int)prev.size();++i4874) {
        i = prev[i4874];
        tmp = parse_while4852();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev4873.push_back(prev[i4874]);
        }
        for(int i4875=0;i4875<(int)tmp.size();++i4875) {
          if(tmp[i4875]==FAIL) {
            if(!( !next_prev4872.empty() && next_prev4872.front() == FAIL )) {
              next_prev4872.push_front(FAIL);
            }
          } else {
            next_prev4872.push_back(tmp[i4875]);
          }
        }
      }
      prev = next_prev4872;
    }
    prev = star_final_prev4873;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4828=0;i4828<(int)prev.size();++i4828) {
    if( prev[i4828] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4828]);
    }
  }
  return memo[key(664,backtracking_ptr_for_packrat664)] = result;
}

inline deque<int> parse_not4836() { 
  if(memo.count(key(665,i))) {
    return memo[key(665,i)];
  }
  int backtracking_ptr_for_packrat665=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev4839;
  for(int i4838=0;i4838<(int)prev.size();++i4838) {
    if( prev[i4838] == FAIL ) {
      if(!(!next_prev4839.empty() && next_prev4839.front() == FAIL )) {
        next_prev4839.push_front(FAIL);
      }
      continue;
    }
    i = prev[i4838];
    tmp = parse_W();
    
    for(int i4838=0;i4838<(int)tmp.size();++i4838) {
      if( tmp[i4838] == FAIL ) {
        if(!( !next_prev4839.empty() && next_prev4839[0] == FAIL )) {
          next_prev4839.push_front(FAIL);
        }
      } else {
        next_prev4839.push_back(tmp[i4838]);
      }
    }
  }
  prev = next_prev4839;
  for(int i4837=0;i4837<(int)prev.size();++i4837) {
    if( prev[i4837] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4837]);
    }
  }
  return memo[key(665,backtracking_ptr_for_packrat665)] = result;
}

inline deque<int> parse_not4845() { 
  if(memo.count(key(666,i))) {
    return memo[key(666,i)];
  }
  int backtracking_ptr_for_packrat666=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i4847=0;i4847<(int)prev.size();++i4847) {
    if( prev[i4847] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i4847]<m&&(I[prev[i4847]]=='>'||I[prev[i4847]]==':')) {
      tmp.push_back(prev[i4847]+1);
    } else {
      if(!( !tmp.empty() && tmp.front() == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i4846=0;i4846<(int)prev.size();++i4846) {
    if( prev[i4846] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4846]);
    }
  }
  return memo[key(666,backtracking_ptr_for_packrat666)] = result;
}

inline deque<int> parse_while4852() { 
  if(memo.count(key(667,i))) {
    return memo[key(667,i)];
  }
  int backtracking_ptr_for_packrat667=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Not */
    deque<int> next_prev4869;
    for(int i4868=0;i4868<(int)prev.size();++i4868) {
      i = prev[i4868];
      tmp = parse_not4854();
      if(!tmp.empty()&&tmp.front()==FAIL) {
        next_prev4869.push_back(prev[i4868]);
      } else {
        if(!(!next_prev4869.empty()&&next_prev4869.front()==FAIL)) {
          next_prev4869.push_front(FAIL);
        }
      }
    }
    prev = next_prev4869;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Statement) */
    deque<int> next_prev4871;
    for(int i4870=0;i4870<(int)prev.size();++i4870) {
      if( prev[i4870] == FAIL ) {
        if(!(!next_prev4871.empty() && next_prev4871.front() == FAIL )) {
          next_prev4871.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4870];
      tmp = parse_Statement();
      
      for(int i4870=0;i4870<(int)tmp.size();++i4870) {
        if( tmp[i4870] == FAIL ) {
          if(!( !next_prev4871.empty() && next_prev4871[0] == FAIL )) {
            next_prev4871.push_front(FAIL);
          }
        } else {
          next_prev4871.push_back(tmp[i4870]);
        }
      }
    }
    prev = next_prev4871;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4853=0;i4853<(int)prev.size();++i4853) {
    if( prev[i4853] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4853]);
    }
  }
  return memo[key(667,backtracking_ptr_for_packrat667)] = result;
}

inline deque<int> parse_not4854() { 
  if(memo.count(key(668,i))) {
    return memo[key(668,i)];
  }
  int backtracking_ptr_for_packrat668=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i4856=0;i4856<(int)prev.size();++i4856) {
      if( prev[i4856] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i4856]<m&&I[prev[i4856]]=='c') {
        tmp.push_back(prev[i4856]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    tmp.clear();
    for(int i4857=0;i4857<(int)prev.size();++i4857) {
      if( prev[i4857] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i4857]<m&&I[prev[i4857]]=='a') {
        tmp.push_back(prev[i4857]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    tmp.clear();
    for(int i4858=0;i4858<(int)prev.size();++i4858) {
      if( prev[i4858] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i4858]<m&&I[prev[i4858]]=='s') {
        tmp.push_back(prev[i4858]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    tmp.clear();
    for(int i4859=0;i4859<(int)prev.size();++i4859) {
      if( prev[i4859] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i4859]<m&&I[prev[i4859]]=='e') {
        tmp.push_back(prev[i4859]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Not */
    deque<int> next_prev4865;
    for(int i4864=0;i4864<(int)prev.size();++i4864) {
      i = prev[i4864];
      tmp = parse_not4860();
      if(!tmp.empty()&&tmp.front()==FAIL) {
        next_prev4865.push_back(prev[i4864]);
      } else {
        if(!(!next_prev4865.empty()&&next_prev4865.front()==FAIL)) {
          next_prev4865.push_front(FAIL);
        }
      }
    }
    prev = next_prev4865;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (_) */
    deque<int> next_prev4867;
    for(int i4866=0;i4866<(int)prev.size();++i4866) {
      if( prev[i4866] == FAIL ) {
        if(!(!next_prev4867.empty() && next_prev4867.front() == FAIL )) {
          next_prev4867.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4866];
      tmp = parse__();
      
      for(int i4866=0;i4866<(int)tmp.size();++i4866) {
        if( tmp[i4866] == FAIL ) {
          if(!( !next_prev4867.empty() && next_prev4867[0] == FAIL )) {
            next_prev4867.push_front(FAIL);
          }
        } else {
          next_prev4867.push_back(tmp[i4866]);
        }
      }
    }
    prev = next_prev4867;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4855=0;i4855<(int)prev.size();++i4855) {
    if( prev[i4855] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4855]);
    }
  }
  return memo[key(668,backtracking_ptr_for_packrat668)] = result;
}

inline deque<int> parse_not4860() { 
  if(memo.count(key(669,i))) {
    return memo[key(669,i)];
  }
  int backtracking_ptr_for_packrat669=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev4863;
  for(int i4862=0;i4862<(int)prev.size();++i4862) {
    if( prev[i4862] == FAIL ) {
      if(!(!next_prev4863.empty() && next_prev4863.front() == FAIL )) {
        next_prev4863.push_front(FAIL);
      }
      continue;
    }
    i = prev[i4862];
    tmp = parse_W();
    
    for(int i4862=0;i4862<(int)tmp.size();++i4862) {
      if( tmp[i4862] == FAIL ) {
        if(!( !next_prev4863.empty() && next_prev4863[0] == FAIL )) {
          next_prev4863.push_front(FAIL);
        }
      } else {
        next_prev4863.push_back(tmp[i4862]);
      }
    }
  }
  prev = next_prev4863;
  for(int i4861=0;i4861<(int)prev.size();++i4861) {
    if( prev[i4861] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4861]);
    }
  }
  return memo[key(669,backtracking_ptr_for_packrat669)] = result;
}

inline deque<int> parse_slash4877() { 
  if(memo.count(key(670,i))) {
    return memo[key(670,i)];
  }
  int backtracking_ptr_for_packrat670=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev4880;
    for(int i4879=0;i4879<(int)prev.size();++i4879) {
      if( prev[i4879] == FAIL ) {
        if(!(!next_prev4880.empty() && next_prev4880.front() == FAIL )) {
          next_prev4880.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4879];
      tmp = parse_Identifier();
      
      for(int i4879=0;i4879<(int)tmp.size();++i4879) {
        if( tmp[i4879] == FAIL ) {
          if(!( !next_prev4880.empty() && next_prev4880[0] == FAIL )) {
            next_prev4880.push_front(FAIL);
          }
        } else {
          next_prev4880.push_back(tmp[i4879]);
        }
      }
    }
    prev = next_prev4880;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4881=0;i4881<(int)prev.size();++i4881) {
        if( prev[i4881] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4881]<m&&I[prev[i4881]]==':') {
          tmp.push_back(prev[i4881]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4886;
      for(int i4885=0;i4885<(int)prev.size();++i4885) {
        i = prev[i4885];
        tmp = parse_not4882();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4886.push_back(prev[i4885]);
        } else {
          if(!(!next_prev4886.empty()&&next_prev4886.front()==FAIL)) {
            next_prev4886.push_front(FAIL);
          }
        }
      }
      prev = next_prev4886;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4888;
      for(int i4887=0;i4887<(int)prev.size();++i4887) {
        if( prev[i4887] == FAIL ) {
          if(!(!next_prev4888.empty() && next_prev4888.front() == FAIL )) {
            next_prev4888.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4887];
        tmp = parse__();
        
        for(int i4887=0;i4887<(int)tmp.size();++i4887) {
          if( tmp[i4887] == FAIL ) {
            if(!( !next_prev4888.empty() && next_prev4888[0] == FAIL )) {
              next_prev4888.push_front(FAIL);
            }
          } else {
            next_prev4888.push_back(tmp[i4887]);
          }
        }
      }
      prev = next_prev4888;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4878=0;i4878<(int)prev.size();++i4878) {
    if( prev[i4878] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4878]);
    }
  }
  return memo[key(670,backtracking_ptr_for_packrat670)] = result;
}

inline deque<int> parse_not4882() { 
  if(memo.count(key(671,i))) {
    return memo[key(671,i)];
  }
  int backtracking_ptr_for_packrat671=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i4884=0;i4884<(int)prev.size();++i4884) {
    if( prev[i4884] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i4884]<m&&(I[prev[i4884]]=='>'||I[prev[i4884]]==':')) {
      tmp.push_back(prev[i4884]+1);
    } else {
      if(!( !tmp.empty() && tmp.front() == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i4883=0;i4883<(int)prev.size();++i4883) {
    if( prev[i4883] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4883]);
    }
  }
  return memo[key(671,backtracking_ptr_for_packrat671)] = result;
}

inline deque<int> parse_slash4890() { 
  if(memo.count(key(672,i))) {
    return memo[key(672,i)];
  }
  int backtracking_ptr_for_packrat672=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Expression) */
    deque<int> next_prev4893;
    for(int i4892=0;i4892<(int)prev.size();++i4892) {
      if( prev[i4892] == FAIL ) {
        if(!(!next_prev4893.empty() && next_prev4893.front() == FAIL )) {
          next_prev4893.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4892];
      tmp = parse_Expression();
      
      for(int i4892=0;i4892<(int)tmp.size();++i4892) {
        if( tmp[i4892] == FAIL ) {
          if(!( !next_prev4893.empty() && next_prev4893[0] == FAIL )) {
            next_prev4893.push_front(FAIL);
          }
        } else {
          next_prev4893.push_back(tmp[i4892]);
        }
      }
    }
    prev = next_prev4893;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4894=0;i4894<(int)prev.size();++i4894) {
        if( prev[i4894] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4894]<m&&I[prev[i4894]]==';') {
          tmp.push_back(prev[i4894]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4896;
      for(int i4895=0;i4895<(int)prev.size();++i4895) {
        if( prev[i4895] == FAIL ) {
          if(!(!next_prev4896.empty() && next_prev4896.front() == FAIL )) {
            next_prev4896.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4895];
        tmp = parse__();
        
        for(int i4895=0;i4895<(int)tmp.size();++i4895) {
          if( tmp[i4895] == FAIL ) {
            if(!( !next_prev4896.empty() && next_prev4896[0] == FAIL )) {
              next_prev4896.push_front(FAIL);
            }
          } else {
            next_prev4896.push_back(tmp[i4895]);
          }
        }
      }
      prev = next_prev4896;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4891=0;i4891<(int)prev.size();++i4891) {
    if( prev[i4891] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4891]);
    }
  }
  return memo[key(672,backtracking_ptr_for_packrat672)] = result;
}

inline deque<int> parse_slash4898() { 
  if(memo.count(key(673,i))) {
    return memo[key(673,i)];
  }
  int backtracking_ptr_for_packrat673=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4900=0;i4900<(int)prev.size();++i4900) {
        if( prev[i4900] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4900]<m&&I[prev[i4900]]==';') {
          tmp.push_back(prev[i4900]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4902;
      for(int i4901=0;i4901<(int)prev.size();++i4901) {
        if( prev[i4901] == FAIL ) {
          if(!(!next_prev4902.empty() && next_prev4902.front() == FAIL )) {
            next_prev4902.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4901];
        tmp = parse__();
        
        for(int i4901=0;i4901<(int)tmp.size();++i4901) {
          if( tmp[i4901] == FAIL ) {
            if(!( !next_prev4902.empty() && next_prev4902[0] == FAIL )) {
              next_prev4902.push_front(FAIL);
            }
          } else {
            next_prev4902.push_back(tmp[i4901]);
          }
        }
      }
      prev = next_prev4902;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4899=0;i4899<(int)prev.size();++i4899) {
    if( prev[i4899] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4899]);
    }
  }
  return memo[key(673,backtracking_ptr_for_packrat673)] = result;
}

deque<int> parse_ResourceStatement(){
  if(memo.count(key(674,i))) {
    return memo[key(674,i)];
  }
  int backtracking_ptr_for_packrat674=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4905=0;i4905<(int)prev.size();++i4905) {
        if( prev[i4905] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4905]<m&&I[prev[i4905]]=='(') {
          tmp.push_back(prev[i4905]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4907;
      for(int i4906=0;i4906<(int)prev.size();++i4906) {
        if( prev[i4906] == FAIL ) {
          if(!(!next_prev4907.empty() && next_prev4907.front() == FAIL )) {
            next_prev4907.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4906];
        tmp = parse__();
        
        for(int i4906=0;i4906<(int)tmp.size();++i4906) {
          if( tmp[i4906] == FAIL ) {
            if(!( !next_prev4907.empty() && next_prev4907[0] == FAIL )) {
              next_prev4907.push_front(FAIL);
            }
          } else {
            next_prev4907.push_back(tmp[i4906]);
          }
        }
      }
      prev = next_prev4907;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Resource) */
    deque<int> next_prev4909;
    for(int i4908=0;i4908<(int)prev.size();++i4908) {
      if( prev[i4908] == FAIL ) {
        if(!(!next_prev4909.empty() && next_prev4909.front() == FAIL )) {
          next_prev4909.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4908];
      tmp = parse_Resource();
      
      for(int i4908=0;i4908<(int)tmp.size();++i4908) {
        if( tmp[i4908] == FAIL ) {
          if(!( !next_prev4909.empty() && next_prev4909[0] == FAIL )) {
            next_prev4909.push_front(FAIL);
          }
        } else {
          next_prev4909.push_back(tmp[i4908]);
        }
      }
    }
    prev = next_prev4909;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev4917;
    deque<int> star_final_prev4918;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev4917.clear();
      for(int i4919=0;i4919<(int)prev.size();++i4919) {
        i = prev[i4919];
        tmp = parse_while4910();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev4918.push_back(prev[i4919]);
        }
        for(int i4920=0;i4920<(int)tmp.size();++i4920) {
          if(tmp[i4920]==FAIL) {
            if(!( !next_prev4917.empty() && next_prev4917.front() == FAIL )) {
              next_prev4917.push_front(FAIL);
            }
          } else {
            next_prev4917.push_back(tmp[i4920]);
          }
        }
      }
      prev = next_prev4917;
    }
    prev = star_final_prev4918;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev4922;
    deque<int> prioritized_choice_final_prev4923;
    next_prev4922.clear();
    for(int i4921=0;i4921<(int)prev.size();++i4921) {
      i = prev[i4921];
      tmp = parse_slash4924();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4922.push_back(prev[i4921]); }
      for(int i4929=0;i4929<(int)tmp.size();++i4929) {
        if( tmp[i4929] != FAIL ) {
          prioritized_choice_final_prev4923.push_back(tmp[i4929]);
        }
      }
    }
    prev = next_prev4922;
    next_prev4922.clear();
    for(int i4921=0;i4921<(int)prev.size();++i4921) {
      i = prev[i4921];
      tmp = parse_slash4930();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4922.push_back(prev[i4921]); }
      for(int i4932=0;i4932<(int)tmp.size();++i4932) {
        if( tmp[i4932] != FAIL ) {
          prioritized_choice_final_prev4923.push_back(tmp[i4932]);
        }
      }
    }
    prev = next_prev4922;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev4923.empty() && prioritized_choice_final_prev4923.front() == FAIL )) {
        prioritized_choice_final_prev4923.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev4923;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4933=0;i4933<(int)prev.size();++i4933) {
        if( prev[i4933] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4933]<m&&I[prev[i4933]]==')') {
          tmp.push_back(prev[i4933]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4935;
      for(int i4934=0;i4934<(int)prev.size();++i4934) {
        if( prev[i4934] == FAIL ) {
          if(!(!next_prev4935.empty() && next_prev4935.front() == FAIL )) {
            next_prev4935.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4934];
        tmp = parse__();
        
        for(int i4934=0;i4934<(int)tmp.size();++i4934) {
          if( tmp[i4934] == FAIL ) {
            if(!( !next_prev4935.empty() && next_prev4935[0] == FAIL )) {
              next_prev4935.push_front(FAIL);
            }
          } else {
            next_prev4935.push_back(tmp[i4934]);
          }
        }
      }
      prev = next_prev4935;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4904=0;i4904<(int)prev.size();++i4904) {
    if( prev[i4904] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4904]);
    }
  }
  return memo[key(674,backtracking_ptr_for_packrat674)] = result;
}

inline deque<int> parse_while4910() { 
  if(memo.count(key(675,i))) {
    return memo[key(675,i)];
  }
  int backtracking_ptr_for_packrat675=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4912=0;i4912<(int)prev.size();++i4912) {
        if( prev[i4912] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4912]<m&&I[prev[i4912]]==';') {
          tmp.push_back(prev[i4912]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4914;
      for(int i4913=0;i4913<(int)prev.size();++i4913) {
        if( prev[i4913] == FAIL ) {
          if(!(!next_prev4914.empty() && next_prev4914.front() == FAIL )) {
            next_prev4914.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4913];
        tmp = parse__();
        
        for(int i4913=0;i4913<(int)tmp.size();++i4913) {
          if( tmp[i4913] == FAIL ) {
            if(!( !next_prev4914.empty() && next_prev4914[0] == FAIL )) {
              next_prev4914.push_front(FAIL);
            }
          } else {
            next_prev4914.push_back(tmp[i4913]);
          }
        }
      }
      prev = next_prev4914;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Resource) */
    deque<int> next_prev4916;
    for(int i4915=0;i4915<(int)prev.size();++i4915) {
      if( prev[i4915] == FAIL ) {
        if(!(!next_prev4916.empty() && next_prev4916.front() == FAIL )) {
          next_prev4916.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4915];
      tmp = parse_Resource();
      
      for(int i4915=0;i4915<(int)tmp.size();++i4915) {
        if( tmp[i4915] == FAIL ) {
          if(!( !next_prev4916.empty() && next_prev4916[0] == FAIL )) {
            next_prev4916.push_front(FAIL);
          }
        } else {
          next_prev4916.push_back(tmp[i4915]);
        }
      }
    }
    prev = next_prev4916;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4911=0;i4911<(int)prev.size();++i4911) {
    if( prev[i4911] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4911]);
    }
  }
  return memo[key(675,backtracking_ptr_for_packrat675)] = result;
}

inline deque<int> parse_slash4924() { 
  if(memo.count(key(676,i))) {
    return memo[key(676,i)];
  }
  int backtracking_ptr_for_packrat676=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i4926=0;i4926<(int)prev.size();++i4926) {
      if( prev[i4926] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i4926]<m&&I[prev[i4926]]==';') {
        tmp.push_back(prev[i4926]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (_) */
    deque<int> next_prev4928;
    for(int i4927=0;i4927<(int)prev.size();++i4927) {
      if( prev[i4927] == FAIL ) {
        if(!(!next_prev4928.empty() && next_prev4928.front() == FAIL )) {
          next_prev4928.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4927];
      tmp = parse__();
      
      for(int i4927=0;i4927<(int)tmp.size();++i4927) {
        if( tmp[i4927] == FAIL ) {
          if(!( !next_prev4928.empty() && next_prev4928[0] == FAIL )) {
            next_prev4928.push_front(FAIL);
          }
        } else {
          next_prev4928.push_back(tmp[i4927]);
        }
      }
    }
    prev = next_prev4928;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4925=0;i4925<(int)prev.size();++i4925) {
    if( prev[i4925] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4925]);
    }
  }
  return memo[key(676,backtracking_ptr_for_packrat676)] = result;
}

inline deque<int> parse_slash4930() { 
  if(memo.count(key(677,i))) {
    return memo[key(677,i)];
  }
  int backtracking_ptr_for_packrat677=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i4931=0;i4931<(int)prev.size();++i4931) {
    if( prev[i4931] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4931]);
    }
  }
  return memo[key(677,backtracking_ptr_for_packrat677)] = result;
}

deque<int> parse_Resource(){
  if(memo.count(key(678,i))) {
    return memo[key(678,i)];
  }
  int backtracking_ptr_for_packrat678=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev4938;
    deque<int> prioritized_choice_final_prev4939;
    next_prev4938.clear();
    for(int i4937=0;i4937<(int)prev.size();++i4937) {
      i = prev[i4937];
      tmp = parse_slash4940();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4938.push_back(prev[i4937]); }
      for(int i4944=0;i4944<(int)tmp.size();++i4944) {
        if( tmp[i4944] != FAIL ) {
          prioritized_choice_final_prev4939.push_back(tmp[i4944]);
        }
      }
    }
    prev = next_prev4938;
    next_prev4938.clear();
    for(int i4937=0;i4937<(int)prev.size();++i4937) {
      i = prev[i4937];
      tmp = parse_slash4945();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4938.push_back(prev[i4937]); }
      for(int i4947=0;i4947<(int)tmp.size();++i4947) {
        if( tmp[i4947] != FAIL ) {
          prioritized_choice_final_prev4939.push_back(tmp[i4947]);
        }
      }
    }
    prev = next_prev4938;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev4939.empty() && prioritized_choice_final_prev4939.front() == FAIL )) {
        prioritized_choice_final_prev4939.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev4939;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Type) */
    deque<int> next_prev4949;
    for(int i4948=0;i4948<(int)prev.size();++i4948) {
      if( prev[i4948] == FAIL ) {
        if(!(!next_prev4949.empty() && next_prev4949.front() == FAIL )) {
          next_prev4949.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4948];
      tmp = parse_Type();
      
      for(int i4948=0;i4948<(int)tmp.size();++i4948) {
        if( tmp[i4948] == FAIL ) {
          if(!( !next_prev4949.empty() && next_prev4949[0] == FAIL )) {
            next_prev4949.push_front(FAIL);
          }
        } else {
          next_prev4949.push_back(tmp[i4948]);
        }
      }
    }
    prev = next_prev4949;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev4951;
    for(int i4950=0;i4950<(int)prev.size();++i4950) {
      if( prev[i4950] == FAIL ) {
        if(!(!next_prev4951.empty() && next_prev4951.front() == FAIL )) {
          next_prev4951.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4950];
      tmp = parse_Identifier();
      
      for(int i4950=0;i4950<(int)tmp.size();++i4950) {
        if( tmp[i4950] == FAIL ) {
          if(!( !next_prev4951.empty() && next_prev4951[0] == FAIL )) {
            next_prev4951.push_front(FAIL);
          }
        } else {
          next_prev4951.push_back(tmp[i4950]);
        }
      }
    }
    prev = next_prev4951;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4952=0;i4952<(int)prev.size();++i4952) {
        if( prev[i4952] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4952]<m&&I[prev[i4952]]=='=') {
          tmp.push_back(prev[i4952]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4957;
      for(int i4956=0;i4956<(int)prev.size();++i4956) {
        i = prev[i4956];
        tmp = parse_not4953();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4957.push_back(prev[i4956]);
        } else {
          if(!(!next_prev4957.empty()&&next_prev4957.front()==FAIL)) {
            next_prev4957.push_front(FAIL);
          }
        }
      }
      prev = next_prev4957;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4959;
      for(int i4958=0;i4958<(int)prev.size();++i4958) {
        if( prev[i4958] == FAIL ) {
          if(!(!next_prev4959.empty() && next_prev4959.front() == FAIL )) {
            next_prev4959.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4958];
        tmp = parse__();
        
        for(int i4958=0;i4958<(int)tmp.size();++i4958) {
          if( tmp[i4958] == FAIL ) {
            if(!( !next_prev4959.empty() && next_prev4959[0] == FAIL )) {
              next_prev4959.push_front(FAIL);
            }
          } else {
            next_prev4959.push_back(tmp[i4958]);
          }
        }
      }
      prev = next_prev4959;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Expression) */
    deque<int> next_prev4961;
    for(int i4960=0;i4960<(int)prev.size();++i4960) {
      if( prev[i4960] == FAIL ) {
        if(!(!next_prev4961.empty() && next_prev4961.front() == FAIL )) {
          next_prev4961.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4960];
      tmp = parse_Expression();
      
      for(int i4960=0;i4960<(int)tmp.size();++i4960) {
        if( tmp[i4960] == FAIL ) {
          if(!( !next_prev4961.empty() && next_prev4961[0] == FAIL )) {
            next_prev4961.push_front(FAIL);
          }
        } else {
          next_prev4961.push_back(tmp[i4960]);
        }
      }
    }
    prev = next_prev4961;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4936=0;i4936<(int)prev.size();++i4936) {
    if( prev[i4936] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4936]);
    }
  }
  return memo[key(678,backtracking_ptr_for_packrat678)] = result;
}

inline deque<int> parse_slash4940() { 
  if(memo.count(key(679,i))) {
    return memo[key(679,i)];
  }
  int backtracking_ptr_for_packrat679=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (VariableModifiers) */
    deque<int> next_prev4943;
    for(int i4942=0;i4942<(int)prev.size();++i4942) {
      if( prev[i4942] == FAIL ) {
        if(!(!next_prev4943.empty() && next_prev4943.front() == FAIL )) {
          next_prev4943.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4942];
      tmp = parse_VariableModifiers();
      
      for(int i4942=0;i4942<(int)tmp.size();++i4942) {
        if( tmp[i4942] == FAIL ) {
          if(!( !next_prev4943.empty() && next_prev4943[0] == FAIL )) {
            next_prev4943.push_front(FAIL);
          }
        } else {
          next_prev4943.push_back(tmp[i4942]);
        }
      }
    }
    prev = next_prev4943;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4941=0;i4941<(int)prev.size();++i4941) {
    if( prev[i4941] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4941]);
    }
  }
  return memo[key(679,backtracking_ptr_for_packrat679)] = result;
}

inline deque<int> parse_slash4945() { 
  if(memo.count(key(680,i))) {
    return memo[key(680,i)];
  }
  int backtracking_ptr_for_packrat680=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i4946=0;i4946<(int)prev.size();++i4946) {
    if( prev[i4946] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4946]);
    }
  }
  return memo[key(680,backtracking_ptr_for_packrat680)] = result;
}

inline deque<int> parse_not4953() { 
  if(memo.count(key(681,i))) {
    return memo[key(681,i)];
  }
  int backtracking_ptr_for_packrat681=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i4955=0;i4955<(int)prev.size();++i4955) {
    if( prev[i4955] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i4955]<m&&I[prev[i4955]]=='=') {
      tmp.push_back(prev[i4955]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i4954=0;i4954<(int)prev.size();++i4954) {
    if( prev[i4954] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4954]);
    }
  }
  return memo[key(681,backtracking_ptr_for_packrat681)] = result;
}

deque<int> parse_CatchBlock(){
  if(memo.count(key(682,i))) {
    return memo[key(682,i)];
  }
  int backtracking_ptr_for_packrat682=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4963=0;i4963<(int)prev.size();++i4963) {
        if( prev[i4963] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4963]<m&&I[prev[i4963]]=='c') {
          tmp.push_back(prev[i4963]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4964=0;i4964<(int)prev.size();++i4964) {
        if( prev[i4964] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4964]<m&&I[prev[i4964]]=='a') {
          tmp.push_back(prev[i4964]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4965=0;i4965<(int)prev.size();++i4965) {
        if( prev[i4965] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4965]<m&&I[prev[i4965]]=='t') {
          tmp.push_back(prev[i4965]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4966=0;i4966<(int)prev.size();++i4966) {
        if( prev[i4966] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4966]<m&&I[prev[i4966]]=='c') {
          tmp.push_back(prev[i4966]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i4967=0;i4967<(int)prev.size();++i4967) {
        if( prev[i4967] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4967]<m&&I[prev[i4967]]=='h') {
          tmp.push_back(prev[i4967]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev4973;
      for(int i4972=0;i4972<(int)prev.size();++i4972) {
        i = prev[i4972];
        tmp = parse_not4968();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev4973.push_back(prev[i4972]);
        } else {
          if(!(!next_prev4973.empty()&&next_prev4973.front()==FAIL)) {
            next_prev4973.push_front(FAIL);
          }
        }
      }
      prev = next_prev4973;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4975;
      for(int i4974=0;i4974<(int)prev.size();++i4974) {
        if( prev[i4974] == FAIL ) {
          if(!(!next_prev4975.empty() && next_prev4975.front() == FAIL )) {
            next_prev4975.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4974];
        tmp = parse__();
        
        for(int i4974=0;i4974<(int)tmp.size();++i4974) {
          if( tmp[i4974] == FAIL ) {
            if(!( !next_prev4975.empty() && next_prev4975[0] == FAIL )) {
              next_prev4975.push_front(FAIL);
            }
          } else {
            next_prev4975.push_back(tmp[i4974]);
          }
        }
      }
      prev = next_prev4975;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4976=0;i4976<(int)prev.size();++i4976) {
        if( prev[i4976] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4976]<m&&I[prev[i4976]]=='(') {
          tmp.push_back(prev[i4976]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4978;
      for(int i4977=0;i4977<(int)prev.size();++i4977) {
        if( prev[i4977] == FAIL ) {
          if(!(!next_prev4978.empty() && next_prev4978.front() == FAIL )) {
            next_prev4978.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4977];
        tmp = parse__();
        
        for(int i4977=0;i4977<(int)tmp.size();++i4977) {
          if( tmp[i4977] == FAIL ) {
            if(!( !next_prev4978.empty() && next_prev4978[0] == FAIL )) {
              next_prev4978.push_front(FAIL);
            }
          } else {
            next_prev4978.push_back(tmp[i4977]);
          }
        }
      }
      prev = next_prev4978;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (CatchParameter) */
    deque<int> next_prev4980;
    for(int i4979=0;i4979<(int)prev.size();++i4979) {
      if( prev[i4979] == FAIL ) {
        if(!(!next_prev4980.empty() && next_prev4980.front() == FAIL )) {
          next_prev4980.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4979];
      tmp = parse_CatchParameter();
      
      for(int i4979=0;i4979<(int)tmp.size();++i4979) {
        if( tmp[i4979] == FAIL ) {
          if(!( !next_prev4980.empty() && next_prev4980[0] == FAIL )) {
            next_prev4980.push_front(FAIL);
          }
        } else {
          next_prev4980.push_back(tmp[i4979]);
        }
      }
    }
    prev = next_prev4980;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i4981=0;i4981<(int)prev.size();++i4981) {
        if( prev[i4981] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i4981]<m&&I[prev[i4981]]==')') {
          tmp.push_back(prev[i4981]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev4983;
      for(int i4982=0;i4982<(int)prev.size();++i4982) {
        if( prev[i4982] == FAIL ) {
          if(!(!next_prev4983.empty() && next_prev4983.front() == FAIL )) {
            next_prev4983.push_front(FAIL);
          }
          continue;
        }
        i = prev[i4982];
        tmp = parse__();
        
        for(int i4982=0;i4982<(int)tmp.size();++i4982) {
          if( tmp[i4982] == FAIL ) {
            if(!( !next_prev4983.empty() && next_prev4983[0] == FAIL )) {
              next_prev4983.push_front(FAIL);
            }
          } else {
            next_prev4983.push_back(tmp[i4982]);
          }
        }
      }
      prev = next_prev4983;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Block) */
    deque<int> next_prev4985;
    for(int i4984=0;i4984<(int)prev.size();++i4984) {
      if( prev[i4984] == FAIL ) {
        if(!(!next_prev4985.empty() && next_prev4985.front() == FAIL )) {
          next_prev4985.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4984];
      tmp = parse_Block();
      
      for(int i4984=0;i4984<(int)tmp.size();++i4984) {
        if( tmp[i4984] == FAIL ) {
          if(!( !next_prev4985.empty() && next_prev4985[0] == FAIL )) {
            next_prev4985.push_front(FAIL);
          }
        } else {
          next_prev4985.push_back(tmp[i4984]);
        }
      }
    }
    prev = next_prev4985;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4962=0;i4962<(int)prev.size();++i4962) {
    if( prev[i4962] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4962]);
    }
  }
  return memo[key(682,backtracking_ptr_for_packrat682)] = result;
}

inline deque<int> parse_not4968() { 
  if(memo.count(key(683,i))) {
    return memo[key(683,i)];
  }
  int backtracking_ptr_for_packrat683=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev4971;
  for(int i4970=0;i4970<(int)prev.size();++i4970) {
    if( prev[i4970] == FAIL ) {
      if(!(!next_prev4971.empty() && next_prev4971.front() == FAIL )) {
        next_prev4971.push_front(FAIL);
      }
      continue;
    }
    i = prev[i4970];
    tmp = parse_W();
    
    for(int i4970=0;i4970<(int)tmp.size();++i4970) {
      if( tmp[i4970] == FAIL ) {
        if(!( !next_prev4971.empty() && next_prev4971[0] == FAIL )) {
          next_prev4971.push_front(FAIL);
        }
      } else {
        next_prev4971.push_back(tmp[i4970]);
      }
    }
  }
  prev = next_prev4971;
  for(int i4969=0;i4969<(int)prev.size();++i4969) {
    if( prev[i4969] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4969]);
    }
  }
  return memo[key(683,backtracking_ptr_for_packrat683)] = result;
}

deque<int> parse_CatchParameter(){
  if(memo.count(key(684,i))) {
    return memo[key(684,i)];
  }
  int backtracking_ptr_for_packrat684=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev4988;
    deque<int> prioritized_choice_final_prev4989;
    next_prev4988.clear();
    for(int i4987=0;i4987<(int)prev.size();++i4987) {
      i = prev[i4987];
      tmp = parse_slash4990();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4988.push_back(prev[i4987]); }
      for(int i4994=0;i4994<(int)tmp.size();++i4994) {
        if( tmp[i4994] != FAIL ) {
          prioritized_choice_final_prev4989.push_back(tmp[i4994]);
        }
      }
    }
    prev = next_prev4988;
    next_prev4988.clear();
    for(int i4987=0;i4987<(int)prev.size();++i4987) {
      i = prev[i4987];
      tmp = parse_slash4995();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev4988.push_back(prev[i4987]); }
      for(int i4997=0;i4997<(int)tmp.size();++i4997) {
        if( tmp[i4997] != FAIL ) {
          prioritized_choice_final_prev4989.push_back(tmp[i4997]);
        }
      }
    }
    prev = next_prev4988;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev4989.empty() && prioritized_choice_final_prev4989.front() == FAIL )) {
        prioritized_choice_final_prev4989.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev4989;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassOrInterfaceType) */
    deque<int> next_prev4999;
    for(int i4998=0;i4998<(int)prev.size();++i4998) {
      if( prev[i4998] == FAIL ) {
        if(!(!next_prev4999.empty() && next_prev4999.front() == FAIL )) {
          next_prev4999.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4998];
      tmp = parse_ClassOrInterfaceType();
      
      for(int i4998=0;i4998<(int)tmp.size();++i4998) {
        if( tmp[i4998] == FAIL ) {
          if(!( !next_prev4999.empty() && next_prev4999[0] == FAIL )) {
            next_prev4999.push_front(FAIL);
          }
        } else {
          next_prev4999.push_back(tmp[i4998]);
        }
      }
    }
    prev = next_prev4999;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev5001;
    for(int i5000=0;i5000<(int)prev.size();++i5000) {
      if( prev[i5000] == FAIL ) {
        if(!(!next_prev5001.empty() && next_prev5001.front() == FAIL )) {
          next_prev5001.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5000];
      tmp = parse_Identifier();
      
      for(int i5000=0;i5000<(int)tmp.size();++i5000) {
        if( tmp[i5000] == FAIL ) {
          if(!( !next_prev5001.empty() && next_prev5001[0] == FAIL )) {
            next_prev5001.push_front(FAIL);
          }
        } else {
          next_prev5001.push_back(tmp[i5000]);
        }
      }
    }
    prev = next_prev5001;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev5014;
    deque<int> star_final_prev5015;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev5014.clear();
      for(int i5016=0;i5016<(int)prev.size();++i5016) {
        i = prev[i5016];
        tmp = parse_while5002();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev5015.push_back(prev[i5016]);
        }
        for(int i5017=0;i5017<(int)tmp.size();++i5017) {
          if(tmp[i5017]==FAIL) {
            if(!( !next_prev5014.empty() && next_prev5014.front() == FAIL )) {
              next_prev5014.push_front(FAIL);
            }
          } else {
            next_prev5014.push_back(tmp[i5017]);
          }
        }
      }
      prev = next_prev5014;
    }
    prev = star_final_prev5015;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4986=0;i4986<(int)prev.size();++i4986) {
    if( prev[i4986] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4986]);
    }
  }
  return memo[key(684,backtracking_ptr_for_packrat684)] = result;
}

inline deque<int> parse_slash4990() { 
  if(memo.count(key(685,i))) {
    return memo[key(685,i)];
  }
  int backtracking_ptr_for_packrat685=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (VariableModifiers) */
    deque<int> next_prev4993;
    for(int i4992=0;i4992<(int)prev.size();++i4992) {
      if( prev[i4992] == FAIL ) {
        if(!(!next_prev4993.empty() && next_prev4993.front() == FAIL )) {
          next_prev4993.push_front(FAIL);
        }
        continue;
      }
      i = prev[i4992];
      tmp = parse_VariableModifiers();
      
      for(int i4992=0;i4992<(int)tmp.size();++i4992) {
        if( tmp[i4992] == FAIL ) {
          if(!( !next_prev4993.empty() && next_prev4993[0] == FAIL )) {
            next_prev4993.push_front(FAIL);
          }
        } else {
          next_prev4993.push_back(tmp[i4992]);
        }
      }
    }
    prev = next_prev4993;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i4991=0;i4991<(int)prev.size();++i4991) {
    if( prev[i4991] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4991]);
    }
  }
  return memo[key(685,backtracking_ptr_for_packrat685)] = result;
}

inline deque<int> parse_slash4995() { 
  if(memo.count(key(686,i))) {
    return memo[key(686,i)];
  }
  int backtracking_ptr_for_packrat686=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i4996=0;i4996<(int)prev.size();++i4996) {
    if( prev[i4996] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i4996]);
    }
  }
  return memo[key(686,backtracking_ptr_for_packrat686)] = result;
}

inline deque<int> parse_while5002() { 
  if(memo.count(key(687,i))) {
    return memo[key(687,i)];
  }
  int backtracking_ptr_for_packrat687=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5004=0;i5004<(int)prev.size();++i5004) {
        if( prev[i5004] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5004]<m&&I[prev[i5004]]=='|') {
          tmp.push_back(prev[i5004]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5009;
      for(int i5008=0;i5008<(int)prev.size();++i5008) {
        i = prev[i5008];
        tmp = parse_not5005();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5009.push_back(prev[i5008]);
        } else {
          if(!(!next_prev5009.empty()&&next_prev5009.front()==FAIL)) {
            next_prev5009.push_front(FAIL);
          }
        }
      }
      prev = next_prev5009;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5011;
      for(int i5010=0;i5010<(int)prev.size();++i5010) {
        if( prev[i5010] == FAIL ) {
          if(!(!next_prev5011.empty() && next_prev5011.front() == FAIL )) {
            next_prev5011.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5010];
        tmp = parse__();
        
        for(int i5010=0;i5010<(int)tmp.size();++i5010) {
          if( tmp[i5010] == FAIL ) {
            if(!( !next_prev5011.empty() && next_prev5011[0] == FAIL )) {
              next_prev5011.push_front(FAIL);
            }
          } else {
            next_prev5011.push_back(tmp[i5010]);
          }
        }
      }
      prev = next_prev5011;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev5013;
    for(int i5012=0;i5012<(int)prev.size();++i5012) {
      if( prev[i5012] == FAIL ) {
        if(!(!next_prev5013.empty() && next_prev5013.front() == FAIL )) {
          next_prev5013.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5012];
      tmp = parse_Identifier();
      
      for(int i5012=0;i5012<(int)tmp.size();++i5012) {
        if( tmp[i5012] == FAIL ) {
          if(!( !next_prev5013.empty() && next_prev5013[0] == FAIL )) {
            next_prev5013.push_front(FAIL);
          }
        } else {
          next_prev5013.push_back(tmp[i5012]);
        }
      }
    }
    prev = next_prev5013;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5003=0;i5003<(int)prev.size();++i5003) {
    if( prev[i5003] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5003]);
    }
  }
  return memo[key(687,backtracking_ptr_for_packrat687)] = result;
}

inline deque<int> parse_not5005() { 
  if(memo.count(key(688,i))) {
    return memo[key(688,i)];
  }
  int backtracking_ptr_for_packrat688=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i5007=0;i5007<(int)prev.size();++i5007) {
    if( prev[i5007] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i5007]<m&&(I[prev[i5007]]=='|'||I[prev[i5007]]=='=')) {
      tmp.push_back(prev[i5007]+1);
    } else {
      if(!( !tmp.empty() && tmp.front() == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i5006=0;i5006<(int)prev.size();++i5006) {
    if( prev[i5006] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5006]);
    }
  }
  return memo[key(688,backtracking_ptr_for_packrat688)] = result;
}

deque<int> parse_Expression(){
  if(memo.count(key(689,i))) {
    return memo[key(689,i)];
  }
  int backtracking_ptr_for_packrat689=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev5020;
  deque<int> prioritized_choice_final_prev5021;
  next_prev5020.clear();
  for(int i5019=0;i5019<(int)prev.size();++i5019) {
    i = prev[i5019];
    tmp = parse_slash5022();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5020.push_back(prev[i5019]); }
    for(int i5026=0;i5026<(int)tmp.size();++i5026) {
      if( tmp[i5026] != FAIL ) {
        prioritized_choice_final_prev5021.push_back(tmp[i5026]);
      }
    }
  }
  prev = next_prev5020;
  next_prev5020.clear();
  for(int i5019=0;i5019<(int)prev.size();++i5019) {
    i = prev[i5019];
    tmp = parse_slash5027();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5020.push_back(prev[i5019]); }
    for(int i5031=0;i5031<(int)tmp.size();++i5031) {
      if( tmp[i5031] != FAIL ) {
        prioritized_choice_final_prev5021.push_back(tmp[i5031]);
      }
    }
  }
  prev = next_prev5020;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev5021.empty() && prioritized_choice_final_prev5021.front() == FAIL )) {
      prioritized_choice_final_prev5021.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev5021;
  for(int i5018=0;i5018<(int)prev.size();++i5018) {
    if( prev[i5018] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5018]);
    }
  }
  return memo[key(689,backtracking_ptr_for_packrat689)] = result;
}

inline deque<int> parse_slash5022() { 
  if(memo.count(key(690,i))) {
    return memo[key(690,i)];
  }
  int backtracking_ptr_for_packrat690=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (LambdaExpression) */
    deque<int> next_prev5025;
    for(int i5024=0;i5024<(int)prev.size();++i5024) {
      if( prev[i5024] == FAIL ) {
        if(!(!next_prev5025.empty() && next_prev5025.front() == FAIL )) {
          next_prev5025.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5024];
      tmp = parse_LambdaExpression();
      
      for(int i5024=0;i5024<(int)tmp.size();++i5024) {
        if( tmp[i5024] == FAIL ) {
          if(!( !next_prev5025.empty() && next_prev5025[0] == FAIL )) {
            next_prev5025.push_front(FAIL);
          }
        } else {
          next_prev5025.push_back(tmp[i5024]);
        }
      }
    }
    prev = next_prev5025;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5023=0;i5023<(int)prev.size();++i5023) {
    if( prev[i5023] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5023]);
    }
  }
  return memo[key(690,backtracking_ptr_for_packrat690)] = result;
}

inline deque<int> parse_slash5027() { 
  if(memo.count(key(691,i))) {
    return memo[key(691,i)];
  }
  int backtracking_ptr_for_packrat691=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (AssignmentExpression) */
    deque<int> next_prev5030;
    for(int i5029=0;i5029<(int)prev.size();++i5029) {
      if( prev[i5029] == FAIL ) {
        if(!(!next_prev5030.empty() && next_prev5030.front() == FAIL )) {
          next_prev5030.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5029];
      tmp = parse_AssignmentExpression();
      
      for(int i5029=0;i5029<(int)tmp.size();++i5029) {
        if( tmp[i5029] == FAIL ) {
          if(!( !next_prev5030.empty() && next_prev5030[0] == FAIL )) {
            next_prev5030.push_front(FAIL);
          }
        } else {
          next_prev5030.push_back(tmp[i5029]);
        }
      }
    }
    prev = next_prev5030;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5028=0;i5028<(int)prev.size();++i5028) {
    if( prev[i5028] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5028]);
    }
  }
  return memo[key(691,backtracking_ptr_for_packrat691)] = result;
}

deque<int> parse_Expressions(){
  if(memo.count(key(692,i))) {
    return memo[key(692,i)];
  }
  int backtracking_ptr_for_packrat692=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Expression) */
    deque<int> next_prev5034;
    for(int i5033=0;i5033<(int)prev.size();++i5033) {
      if( prev[i5033] == FAIL ) {
        if(!(!next_prev5034.empty() && next_prev5034.front() == FAIL )) {
          next_prev5034.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5033];
      tmp = parse_Expression();
      
      for(int i5033=0;i5033<(int)tmp.size();++i5033) {
        if( tmp[i5033] == FAIL ) {
          if(!( !next_prev5034.empty() && next_prev5034[0] == FAIL )) {
            next_prev5034.push_front(FAIL);
          }
        } else {
          next_prev5034.push_back(tmp[i5033]);
        }
      }
    }
    prev = next_prev5034;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev5042;
    deque<int> star_final_prev5043;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev5042.clear();
      for(int i5044=0;i5044<(int)prev.size();++i5044) {
        i = prev[i5044];
        tmp = parse_while5035();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev5043.push_back(prev[i5044]);
        }
        for(int i5045=0;i5045<(int)tmp.size();++i5045) {
          if(tmp[i5045]==FAIL) {
            if(!( !next_prev5042.empty() && next_prev5042.front() == FAIL )) {
              next_prev5042.push_front(FAIL);
            }
          } else {
            next_prev5042.push_back(tmp[i5045]);
          }
        }
      }
      prev = next_prev5042;
    }
    prev = star_final_prev5043;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5032=0;i5032<(int)prev.size();++i5032) {
    if( prev[i5032] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5032]);
    }
  }
  return memo[key(692,backtracking_ptr_for_packrat692)] = result;
}

inline deque<int> parse_while5035() { 
  if(memo.count(key(693,i))) {
    return memo[key(693,i)];
  }
  int backtracking_ptr_for_packrat693=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5037=0;i5037<(int)prev.size();++i5037) {
        if( prev[i5037] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5037]<m&&I[prev[i5037]]==',') {
          tmp.push_back(prev[i5037]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5039;
      for(int i5038=0;i5038<(int)prev.size();++i5038) {
        if( prev[i5038] == FAIL ) {
          if(!(!next_prev5039.empty() && next_prev5039.front() == FAIL )) {
            next_prev5039.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5038];
        tmp = parse__();
        
        for(int i5038=0;i5038<(int)tmp.size();++i5038) {
          if( tmp[i5038] == FAIL ) {
            if(!( !next_prev5039.empty() && next_prev5039[0] == FAIL )) {
              next_prev5039.push_front(FAIL);
            }
          } else {
            next_prev5039.push_back(tmp[i5038]);
          }
        }
      }
      prev = next_prev5039;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Expression) */
    deque<int> next_prev5041;
    for(int i5040=0;i5040<(int)prev.size();++i5040) {
      if( prev[i5040] == FAIL ) {
        if(!(!next_prev5041.empty() && next_prev5041.front() == FAIL )) {
          next_prev5041.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5040];
      tmp = parse_Expression();
      
      for(int i5040=0;i5040<(int)tmp.size();++i5040) {
        if( tmp[i5040] == FAIL ) {
          if(!( !next_prev5041.empty() && next_prev5041[0] == FAIL )) {
            next_prev5041.push_front(FAIL);
          }
        } else {
          next_prev5041.push_back(tmp[i5040]);
        }
      }
    }
    prev = next_prev5041;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5036=0;i5036<(int)prev.size();++i5036) {
    if( prev[i5036] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5036]);
    }
  }
  return memo[key(693,backtracking_ptr_for_packrat693)] = result;
}

deque<int> parse_AssignmentExpression(){
  if(memo.count(key(694,i))) {
    return memo[key(694,i)];
  }
  int backtracking_ptr_for_packrat694=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev5048;
  deque<int> prioritized_choice_final_prev5049;
  next_prev5048.clear();
  for(int i5047=0;i5047<(int)prev.size();++i5047) {
    i = prev[i5047];
    tmp = parse_slash5050();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5048.push_back(prev[i5047]); }
    for(int i5058=0;i5058<(int)tmp.size();++i5058) {
      if( tmp[i5058] != FAIL ) {
        prioritized_choice_final_prev5049.push_back(tmp[i5058]);
      }
    }
  }
  prev = next_prev5048;
  next_prev5048.clear();
  for(int i5047=0;i5047<(int)prev.size();++i5047) {
    i = prev[i5047];
    tmp = parse_slash5059();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5048.push_back(prev[i5047]); }
    for(int i5063=0;i5063<(int)tmp.size();++i5063) {
      if( tmp[i5063] != FAIL ) {
        prioritized_choice_final_prev5049.push_back(tmp[i5063]);
      }
    }
  }
  prev = next_prev5048;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev5049.empty() && prioritized_choice_final_prev5049.front() == FAIL )) {
      prioritized_choice_final_prev5049.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev5049;
  for(int i5046=0;i5046<(int)prev.size();++i5046) {
    if( prev[i5046] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5046]);
    }
  }
  return memo[key(694,backtracking_ptr_for_packrat694)] = result;
}

inline deque<int> parse_slash5050() { 
  if(memo.count(key(695,i))) {
    return memo[key(695,i)];
  }
  int backtracking_ptr_for_packrat695=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (UnaryExpression) */
    deque<int> next_prev5053;
    for(int i5052=0;i5052<(int)prev.size();++i5052) {
      if( prev[i5052] == FAIL ) {
        if(!(!next_prev5053.empty() && next_prev5053.front() == FAIL )) {
          next_prev5053.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5052];
      tmp = parse_UnaryExpression();
      
      for(int i5052=0;i5052<(int)tmp.size();++i5052) {
        if( tmp[i5052] == FAIL ) {
          if(!( !next_prev5053.empty() && next_prev5053[0] == FAIL )) {
            next_prev5053.push_front(FAIL);
          }
        } else {
          next_prev5053.push_back(tmp[i5052]);
        }
      }
    }
    prev = next_prev5053;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (addAssignmentOperator) */
    deque<int> next_prev5055;
    for(int i5054=0;i5054<(int)prev.size();++i5054) {
      if( prev[i5054] == FAIL ) {
        if(!(!next_prev5055.empty() && next_prev5055.front() == FAIL )) {
          next_prev5055.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5054];
      tmp = parse_addAssignmentOperator();
      
      for(int i5054=0;i5054<(int)tmp.size();++i5054) {
        if( tmp[i5054] == FAIL ) {
          if(!( !next_prev5055.empty() && next_prev5055[0] == FAIL )) {
            next_prev5055.push_front(FAIL);
          }
        } else {
          next_prev5055.push_back(tmp[i5054]);
        }
      }
    }
    prev = next_prev5055;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Expression) */
    deque<int> next_prev5057;
    for(int i5056=0;i5056<(int)prev.size();++i5056) {
      if( prev[i5056] == FAIL ) {
        if(!(!next_prev5057.empty() && next_prev5057.front() == FAIL )) {
          next_prev5057.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5056];
      tmp = parse_Expression();
      
      for(int i5056=0;i5056<(int)tmp.size();++i5056) {
        if( tmp[i5056] == FAIL ) {
          if(!( !next_prev5057.empty() && next_prev5057[0] == FAIL )) {
            next_prev5057.push_front(FAIL);
          }
        } else {
          next_prev5057.push_back(tmp[i5056]);
        }
      }
    }
    prev = next_prev5057;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5051=0;i5051<(int)prev.size();++i5051) {
    if( prev[i5051] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5051]);
    }
  }
  return memo[key(695,backtracking_ptr_for_packrat695)] = result;
}

inline deque<int> parse_slash5059() { 
  if(memo.count(key(696,i))) {
    return memo[key(696,i)];
  }
  int backtracking_ptr_for_packrat696=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ConditionalExpression) */
    deque<int> next_prev5062;
    for(int i5061=0;i5061<(int)prev.size();++i5061) {
      if( prev[i5061] == FAIL ) {
        if(!(!next_prev5062.empty() && next_prev5062.front() == FAIL )) {
          next_prev5062.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5061];
      tmp = parse_ConditionalExpression();
      
      for(int i5061=0;i5061<(int)tmp.size();++i5061) {
        if( tmp[i5061] == FAIL ) {
          if(!( !next_prev5062.empty() && next_prev5062[0] == FAIL )) {
            next_prev5062.push_front(FAIL);
          }
        } else {
          next_prev5062.push_back(tmp[i5061]);
        }
      }
    }
    prev = next_prev5062;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5060=0;i5060<(int)prev.size();++i5060) {
    if( prev[i5060] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5060]);
    }
  }
  return memo[key(696,backtracking_ptr_for_packrat696)] = result;
}

deque<int> parse_addAssignmentOperator(){
  if(memo.count(key(697,i))) {
    return memo[key(697,i)];
  }
  int backtracking_ptr_for_packrat697=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev5066;
  deque<int> prioritized_choice_final_prev5067;
  next_prev5066.clear();
  for(int i5065=0;i5065<(int)prev.size();++i5065) {
    i = prev[i5065];
    tmp = parse_slash5068();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5066.push_back(prev[i5065]); }
    for(int i5078=0;i5078<(int)tmp.size();++i5078) {
      if( tmp[i5078] != FAIL ) {
        prioritized_choice_final_prev5067.push_back(tmp[i5078]);
      }
    }
  }
  prev = next_prev5066;
  next_prev5066.clear();
  for(int i5065=0;i5065<(int)prev.size();++i5065) {
    i = prev[i5065];
    tmp = parse_slash5079();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5066.push_back(prev[i5065]); }
    for(int i5085=0;i5085<(int)tmp.size();++i5085) {
      if( tmp[i5085] != FAIL ) {
        prioritized_choice_final_prev5067.push_back(tmp[i5085]);
      }
    }
  }
  prev = next_prev5066;
  next_prev5066.clear();
  for(int i5065=0;i5065<(int)prev.size();++i5065) {
    i = prev[i5065];
    tmp = parse_slash5086();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5066.push_back(prev[i5065]); }
    for(int i5092=0;i5092<(int)tmp.size();++i5092) {
      if( tmp[i5092] != FAIL ) {
        prioritized_choice_final_prev5067.push_back(tmp[i5092]);
      }
    }
  }
  prev = next_prev5066;
  next_prev5066.clear();
  for(int i5065=0;i5065<(int)prev.size();++i5065) {
    i = prev[i5065];
    tmp = parse_slash5093();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5066.push_back(prev[i5065]); }
    for(int i5099=0;i5099<(int)tmp.size();++i5099) {
      if( tmp[i5099] != FAIL ) {
        prioritized_choice_final_prev5067.push_back(tmp[i5099]);
      }
    }
  }
  prev = next_prev5066;
  next_prev5066.clear();
  for(int i5065=0;i5065<(int)prev.size();++i5065) {
    i = prev[i5065];
    tmp = parse_slash5100();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5066.push_back(prev[i5065]); }
    for(int i5106=0;i5106<(int)tmp.size();++i5106) {
      if( tmp[i5106] != FAIL ) {
        prioritized_choice_final_prev5067.push_back(tmp[i5106]);
      }
    }
  }
  prev = next_prev5066;
  next_prev5066.clear();
  for(int i5065=0;i5065<(int)prev.size();++i5065) {
    i = prev[i5065];
    tmp = parse_slash5107();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5066.push_back(prev[i5065]); }
    for(int i5113=0;i5113<(int)tmp.size();++i5113) {
      if( tmp[i5113] != FAIL ) {
        prioritized_choice_final_prev5067.push_back(tmp[i5113]);
      }
    }
  }
  prev = next_prev5066;
  next_prev5066.clear();
  for(int i5065=0;i5065<(int)prev.size();++i5065) {
    i = prev[i5065];
    tmp = parse_slash5114();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5066.push_back(prev[i5065]); }
    for(int i5121=0;i5121<(int)tmp.size();++i5121) {
      if( tmp[i5121] != FAIL ) {
        prioritized_choice_final_prev5067.push_back(tmp[i5121]);
      }
    }
  }
  prev = next_prev5066;
  next_prev5066.clear();
  for(int i5065=0;i5065<(int)prev.size();++i5065) {
    i = prev[i5065];
    tmp = parse_slash5122();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5066.push_back(prev[i5065]); }
    for(int i5129=0;i5129<(int)tmp.size();++i5129) {
      if( tmp[i5129] != FAIL ) {
        prioritized_choice_final_prev5067.push_back(tmp[i5129]);
      }
    }
  }
  prev = next_prev5066;
  next_prev5066.clear();
  for(int i5065=0;i5065<(int)prev.size();++i5065) {
    i = prev[i5065];
    tmp = parse_slash5130();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5066.push_back(prev[i5065]); }
    for(int i5138=0;i5138<(int)tmp.size();++i5138) {
      if( tmp[i5138] != FAIL ) {
        prioritized_choice_final_prev5067.push_back(tmp[i5138]);
      }
    }
  }
  prev = next_prev5066;
  next_prev5066.clear();
  for(int i5065=0;i5065<(int)prev.size();++i5065) {
    i = prev[i5065];
    tmp = parse_slash5139();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5066.push_back(prev[i5065]); }
    for(int i5145=0;i5145<(int)tmp.size();++i5145) {
      if( tmp[i5145] != FAIL ) {
        prioritized_choice_final_prev5067.push_back(tmp[i5145]);
      }
    }
  }
  prev = next_prev5066;
  next_prev5066.clear();
  for(int i5065=0;i5065<(int)prev.size();++i5065) {
    i = prev[i5065];
    tmp = parse_slash5146();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5066.push_back(prev[i5065]); }
    for(int i5152=0;i5152<(int)tmp.size();++i5152) {
      if( tmp[i5152] != FAIL ) {
        prioritized_choice_final_prev5067.push_back(tmp[i5152]);
      }
    }
  }
  prev = next_prev5066;
  next_prev5066.clear();
  for(int i5065=0;i5065<(int)prev.size();++i5065) {
    i = prev[i5065];
    tmp = parse_slash5153();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5066.push_back(prev[i5065]); }
    for(int i5159=0;i5159<(int)tmp.size();++i5159) {
      if( tmp[i5159] != FAIL ) {
        prioritized_choice_final_prev5067.push_back(tmp[i5159]);
      }
    }
  }
  prev = next_prev5066;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev5067.empty() && prioritized_choice_final_prev5067.front() == FAIL )) {
      prioritized_choice_final_prev5067.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev5067;
  for(int i5064=0;i5064<(int)prev.size();++i5064) {
    if( prev[i5064] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5064]);
    }
  }
  return memo[key(697,backtracking_ptr_for_packrat697)] = result;
}

inline deque<int> parse_slash5068() { 
  if(memo.count(key(698,i))) {
    return memo[key(698,i)];
  }
  int backtracking_ptr_for_packrat698=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5070=0;i5070<(int)prev.size();++i5070) {
        if( prev[i5070] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5070]<m&&I[prev[i5070]]=='=') {
          tmp.push_back(prev[i5070]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5075;
      for(int i5074=0;i5074<(int)prev.size();++i5074) {
        i = prev[i5074];
        tmp = parse_not5071();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5075.push_back(prev[i5074]);
        } else {
          if(!(!next_prev5075.empty()&&next_prev5075.front()==FAIL)) {
            next_prev5075.push_front(FAIL);
          }
        }
      }
      prev = next_prev5075;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5077;
      for(int i5076=0;i5076<(int)prev.size();++i5076) {
        if( prev[i5076] == FAIL ) {
          if(!(!next_prev5077.empty() && next_prev5077.front() == FAIL )) {
            next_prev5077.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5076];
        tmp = parse__();
        
        for(int i5076=0;i5076<(int)tmp.size();++i5076) {
          if( tmp[i5076] == FAIL ) {
            if(!( !next_prev5077.empty() && next_prev5077[0] == FAIL )) {
              next_prev5077.push_front(FAIL);
            }
          } else {
            next_prev5077.push_back(tmp[i5076]);
          }
        }
      }
      prev = next_prev5077;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5069=0;i5069<(int)prev.size();++i5069) {
    if( prev[i5069] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5069]);
    }
  }
  return memo[key(698,backtracking_ptr_for_packrat698)] = result;
}

inline deque<int> parse_not5071() { 
  if(memo.count(key(699,i))) {
    return memo[key(699,i)];
  }
  int backtracking_ptr_for_packrat699=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i5073=0;i5073<(int)prev.size();++i5073) {
    if( prev[i5073] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i5073]<m&&I[prev[i5073]]=='=') {
      tmp.push_back(prev[i5073]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i5072=0;i5072<(int)prev.size();++i5072) {
    if( prev[i5072] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5072]);
    }
  }
  return memo[key(699,backtracking_ptr_for_packrat699)] = result;
}

inline deque<int> parse_slash5079() { 
  if(memo.count(key(700,i))) {
    return memo[key(700,i)];
  }
  int backtracking_ptr_for_packrat700=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5081=0;i5081<(int)prev.size();++i5081) {
        if( prev[i5081] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5081]<m&&I[prev[i5081]]=='*') {
          tmp.push_back(prev[i5081]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5082=0;i5082<(int)prev.size();++i5082) {
        if( prev[i5082] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5082]<m&&I[prev[i5082]]=='=') {
          tmp.push_back(prev[i5082]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5084;
      for(int i5083=0;i5083<(int)prev.size();++i5083) {
        if( prev[i5083] == FAIL ) {
          if(!(!next_prev5084.empty() && next_prev5084.front() == FAIL )) {
            next_prev5084.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5083];
        tmp = parse__();
        
        for(int i5083=0;i5083<(int)tmp.size();++i5083) {
          if( tmp[i5083] == FAIL ) {
            if(!( !next_prev5084.empty() && next_prev5084[0] == FAIL )) {
              next_prev5084.push_front(FAIL);
            }
          } else {
            next_prev5084.push_back(tmp[i5083]);
          }
        }
      }
      prev = next_prev5084;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5080=0;i5080<(int)prev.size();++i5080) {
    if( prev[i5080] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5080]);
    }
  }
  return memo[key(700,backtracking_ptr_for_packrat700)] = result;
}

inline deque<int> parse_slash5086() { 
  if(memo.count(key(701,i))) {
    return memo[key(701,i)];
  }
  int backtracking_ptr_for_packrat701=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5088=0;i5088<(int)prev.size();++i5088) {
        if( prev[i5088] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5088]<m&&I[prev[i5088]]=='/') {
          tmp.push_back(prev[i5088]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5089=0;i5089<(int)prev.size();++i5089) {
        if( prev[i5089] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5089]<m&&I[prev[i5089]]=='=') {
          tmp.push_back(prev[i5089]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5091;
      for(int i5090=0;i5090<(int)prev.size();++i5090) {
        if( prev[i5090] == FAIL ) {
          if(!(!next_prev5091.empty() && next_prev5091.front() == FAIL )) {
            next_prev5091.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5090];
        tmp = parse__();
        
        for(int i5090=0;i5090<(int)tmp.size();++i5090) {
          if( tmp[i5090] == FAIL ) {
            if(!( !next_prev5091.empty() && next_prev5091[0] == FAIL )) {
              next_prev5091.push_front(FAIL);
            }
          } else {
            next_prev5091.push_back(tmp[i5090]);
          }
        }
      }
      prev = next_prev5091;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5087=0;i5087<(int)prev.size();++i5087) {
    if( prev[i5087] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5087]);
    }
  }
  return memo[key(701,backtracking_ptr_for_packrat701)] = result;
}

inline deque<int> parse_slash5093() { 
  if(memo.count(key(702,i))) {
    return memo[key(702,i)];
  }
  int backtracking_ptr_for_packrat702=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5095=0;i5095<(int)prev.size();++i5095) {
        if( prev[i5095] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5095]<m&&I[prev[i5095]]=='%') {
          tmp.push_back(prev[i5095]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5096=0;i5096<(int)prev.size();++i5096) {
        if( prev[i5096] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5096]<m&&I[prev[i5096]]=='=') {
          tmp.push_back(prev[i5096]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5098;
      for(int i5097=0;i5097<(int)prev.size();++i5097) {
        if( prev[i5097] == FAIL ) {
          if(!(!next_prev5098.empty() && next_prev5098.front() == FAIL )) {
            next_prev5098.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5097];
        tmp = parse__();
        
        for(int i5097=0;i5097<(int)tmp.size();++i5097) {
          if( tmp[i5097] == FAIL ) {
            if(!( !next_prev5098.empty() && next_prev5098[0] == FAIL )) {
              next_prev5098.push_front(FAIL);
            }
          } else {
            next_prev5098.push_back(tmp[i5097]);
          }
        }
      }
      prev = next_prev5098;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5094=0;i5094<(int)prev.size();++i5094) {
    if( prev[i5094] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5094]);
    }
  }
  return memo[key(702,backtracking_ptr_for_packrat702)] = result;
}

inline deque<int> parse_slash5100() { 
  if(memo.count(key(703,i))) {
    return memo[key(703,i)];
  }
  int backtracking_ptr_for_packrat703=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5102=0;i5102<(int)prev.size();++i5102) {
        if( prev[i5102] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5102]<m&&I[prev[i5102]]=='+') {
          tmp.push_back(prev[i5102]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5103=0;i5103<(int)prev.size();++i5103) {
        if( prev[i5103] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5103]<m&&I[prev[i5103]]=='=') {
          tmp.push_back(prev[i5103]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5105;
      for(int i5104=0;i5104<(int)prev.size();++i5104) {
        if( prev[i5104] == FAIL ) {
          if(!(!next_prev5105.empty() && next_prev5105.front() == FAIL )) {
            next_prev5105.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5104];
        tmp = parse__();
        
        for(int i5104=0;i5104<(int)tmp.size();++i5104) {
          if( tmp[i5104] == FAIL ) {
            if(!( !next_prev5105.empty() && next_prev5105[0] == FAIL )) {
              next_prev5105.push_front(FAIL);
            }
          } else {
            next_prev5105.push_back(tmp[i5104]);
          }
        }
      }
      prev = next_prev5105;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5101=0;i5101<(int)prev.size();++i5101) {
    if( prev[i5101] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5101]);
    }
  }
  return memo[key(703,backtracking_ptr_for_packrat703)] = result;
}

inline deque<int> parse_slash5107() { 
  if(memo.count(key(704,i))) {
    return memo[key(704,i)];
  }
  int backtracking_ptr_for_packrat704=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5109=0;i5109<(int)prev.size();++i5109) {
        if( prev[i5109] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5109]<m&&I[prev[i5109]]=='-') {
          tmp.push_back(prev[i5109]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5110=0;i5110<(int)prev.size();++i5110) {
        if( prev[i5110] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5110]<m&&I[prev[i5110]]=='=') {
          tmp.push_back(prev[i5110]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5112;
      for(int i5111=0;i5111<(int)prev.size();++i5111) {
        if( prev[i5111] == FAIL ) {
          if(!(!next_prev5112.empty() && next_prev5112.front() == FAIL )) {
            next_prev5112.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5111];
        tmp = parse__();
        
        for(int i5111=0;i5111<(int)tmp.size();++i5111) {
          if( tmp[i5111] == FAIL ) {
            if(!( !next_prev5112.empty() && next_prev5112[0] == FAIL )) {
              next_prev5112.push_front(FAIL);
            }
          } else {
            next_prev5112.push_back(tmp[i5111]);
          }
        }
      }
      prev = next_prev5112;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5108=0;i5108<(int)prev.size();++i5108) {
    if( prev[i5108] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5108]);
    }
  }
  return memo[key(704,backtracking_ptr_for_packrat704)] = result;
}

inline deque<int> parse_slash5114() { 
  if(memo.count(key(705,i))) {
    return memo[key(705,i)];
  }
  int backtracking_ptr_for_packrat705=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5116=0;i5116<(int)prev.size();++i5116) {
        if( prev[i5116] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5116]<m&&I[prev[i5116]]=='<') {
          tmp.push_back(prev[i5116]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5117=0;i5117<(int)prev.size();++i5117) {
        if( prev[i5117] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5117]<m&&I[prev[i5117]]=='<') {
          tmp.push_back(prev[i5117]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5118=0;i5118<(int)prev.size();++i5118) {
        if( prev[i5118] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5118]<m&&I[prev[i5118]]=='=') {
          tmp.push_back(prev[i5118]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5120;
      for(int i5119=0;i5119<(int)prev.size();++i5119) {
        if( prev[i5119] == FAIL ) {
          if(!(!next_prev5120.empty() && next_prev5120.front() == FAIL )) {
            next_prev5120.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5119];
        tmp = parse__();
        
        for(int i5119=0;i5119<(int)tmp.size();++i5119) {
          if( tmp[i5119] == FAIL ) {
            if(!( !next_prev5120.empty() && next_prev5120[0] == FAIL )) {
              next_prev5120.push_front(FAIL);
            }
          } else {
            next_prev5120.push_back(tmp[i5119]);
          }
        }
      }
      prev = next_prev5120;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5115=0;i5115<(int)prev.size();++i5115) {
    if( prev[i5115] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5115]);
    }
  }
  return memo[key(705,backtracking_ptr_for_packrat705)] = result;
}

inline deque<int> parse_slash5122() { 
  if(memo.count(key(706,i))) {
    return memo[key(706,i)];
  }
  int backtracking_ptr_for_packrat706=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5124=0;i5124<(int)prev.size();++i5124) {
        if( prev[i5124] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5124]<m&&I[prev[i5124]]=='>') {
          tmp.push_back(prev[i5124]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5125=0;i5125<(int)prev.size();++i5125) {
        if( prev[i5125] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5125]<m&&I[prev[i5125]]=='>') {
          tmp.push_back(prev[i5125]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5126=0;i5126<(int)prev.size();++i5126) {
        if( prev[i5126] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5126]<m&&I[prev[i5126]]=='=') {
          tmp.push_back(prev[i5126]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5128;
      for(int i5127=0;i5127<(int)prev.size();++i5127) {
        if( prev[i5127] == FAIL ) {
          if(!(!next_prev5128.empty() && next_prev5128.front() == FAIL )) {
            next_prev5128.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5127];
        tmp = parse__();
        
        for(int i5127=0;i5127<(int)tmp.size();++i5127) {
          if( tmp[i5127] == FAIL ) {
            if(!( !next_prev5128.empty() && next_prev5128[0] == FAIL )) {
              next_prev5128.push_front(FAIL);
            }
          } else {
            next_prev5128.push_back(tmp[i5127]);
          }
        }
      }
      prev = next_prev5128;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5123=0;i5123<(int)prev.size();++i5123) {
    if( prev[i5123] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5123]);
    }
  }
  return memo[key(706,backtracking_ptr_for_packrat706)] = result;
}

inline deque<int> parse_slash5130() { 
  if(memo.count(key(707,i))) {
    return memo[key(707,i)];
  }
  int backtracking_ptr_for_packrat707=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5132=0;i5132<(int)prev.size();++i5132) {
        if( prev[i5132] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5132]<m&&I[prev[i5132]]=='>') {
          tmp.push_back(prev[i5132]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5133=0;i5133<(int)prev.size();++i5133) {
        if( prev[i5133] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5133]<m&&I[prev[i5133]]=='>') {
          tmp.push_back(prev[i5133]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5134=0;i5134<(int)prev.size();++i5134) {
        if( prev[i5134] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5134]<m&&I[prev[i5134]]=='>') {
          tmp.push_back(prev[i5134]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5135=0;i5135<(int)prev.size();++i5135) {
        if( prev[i5135] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5135]<m&&I[prev[i5135]]=='=') {
          tmp.push_back(prev[i5135]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5137;
      for(int i5136=0;i5136<(int)prev.size();++i5136) {
        if( prev[i5136] == FAIL ) {
          if(!(!next_prev5137.empty() && next_prev5137.front() == FAIL )) {
            next_prev5137.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5136];
        tmp = parse__();
        
        for(int i5136=0;i5136<(int)tmp.size();++i5136) {
          if( tmp[i5136] == FAIL ) {
            if(!( !next_prev5137.empty() && next_prev5137[0] == FAIL )) {
              next_prev5137.push_front(FAIL);
            }
          } else {
            next_prev5137.push_back(tmp[i5136]);
          }
        }
      }
      prev = next_prev5137;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5131=0;i5131<(int)prev.size();++i5131) {
    if( prev[i5131] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5131]);
    }
  }
  return memo[key(707,backtracking_ptr_for_packrat707)] = result;
}

inline deque<int> parse_slash5139() { 
  if(memo.count(key(708,i))) {
    return memo[key(708,i)];
  }
  int backtracking_ptr_for_packrat708=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5141=0;i5141<(int)prev.size();++i5141) {
        if( prev[i5141] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5141]<m&&I[prev[i5141]]=='&') {
          tmp.push_back(prev[i5141]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5142=0;i5142<(int)prev.size();++i5142) {
        if( prev[i5142] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5142]<m&&I[prev[i5142]]=='=') {
          tmp.push_back(prev[i5142]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5144;
      for(int i5143=0;i5143<(int)prev.size();++i5143) {
        if( prev[i5143] == FAIL ) {
          if(!(!next_prev5144.empty() && next_prev5144.front() == FAIL )) {
            next_prev5144.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5143];
        tmp = parse__();
        
        for(int i5143=0;i5143<(int)tmp.size();++i5143) {
          if( tmp[i5143] == FAIL ) {
            if(!( !next_prev5144.empty() && next_prev5144[0] == FAIL )) {
              next_prev5144.push_front(FAIL);
            }
          } else {
            next_prev5144.push_back(tmp[i5143]);
          }
        }
      }
      prev = next_prev5144;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5140=0;i5140<(int)prev.size();++i5140) {
    if( prev[i5140] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5140]);
    }
  }
  return memo[key(708,backtracking_ptr_for_packrat708)] = result;
}

inline deque<int> parse_slash5146() { 
  if(memo.count(key(709,i))) {
    return memo[key(709,i)];
  }
  int backtracking_ptr_for_packrat709=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5148=0;i5148<(int)prev.size();++i5148) {
        if( prev[i5148] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5148]<m&&I[prev[i5148]]=='^') {
          tmp.push_back(prev[i5148]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5149=0;i5149<(int)prev.size();++i5149) {
        if( prev[i5149] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5149]<m&&I[prev[i5149]]=='=') {
          tmp.push_back(prev[i5149]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5151;
      for(int i5150=0;i5150<(int)prev.size();++i5150) {
        if( prev[i5150] == FAIL ) {
          if(!(!next_prev5151.empty() && next_prev5151.front() == FAIL )) {
            next_prev5151.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5150];
        tmp = parse__();
        
        for(int i5150=0;i5150<(int)tmp.size();++i5150) {
          if( tmp[i5150] == FAIL ) {
            if(!( !next_prev5151.empty() && next_prev5151[0] == FAIL )) {
              next_prev5151.push_front(FAIL);
            }
          } else {
            next_prev5151.push_back(tmp[i5150]);
          }
        }
      }
      prev = next_prev5151;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5147=0;i5147<(int)prev.size();++i5147) {
    if( prev[i5147] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5147]);
    }
  }
  return memo[key(709,backtracking_ptr_for_packrat709)] = result;
}

inline deque<int> parse_slash5153() { 
  if(memo.count(key(710,i))) {
    return memo[key(710,i)];
  }
  int backtracking_ptr_for_packrat710=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5155=0;i5155<(int)prev.size();++i5155) {
        if( prev[i5155] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5155]<m&&I[prev[i5155]]=='|') {
          tmp.push_back(prev[i5155]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5156=0;i5156<(int)prev.size();++i5156) {
        if( prev[i5156] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5156]<m&&I[prev[i5156]]=='=') {
          tmp.push_back(prev[i5156]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5158;
      for(int i5157=0;i5157<(int)prev.size();++i5157) {
        if( prev[i5157] == FAIL ) {
          if(!(!next_prev5158.empty() && next_prev5158.front() == FAIL )) {
            next_prev5158.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5157];
        tmp = parse__();
        
        for(int i5157=0;i5157<(int)tmp.size();++i5157) {
          if( tmp[i5157] == FAIL ) {
            if(!( !next_prev5158.empty() && next_prev5158[0] == FAIL )) {
              next_prev5158.push_front(FAIL);
            }
          } else {
            next_prev5158.push_back(tmp[i5157]);
          }
        }
      }
      prev = next_prev5158;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5154=0;i5154<(int)prev.size();++i5154) {
    if( prev[i5154] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5154]);
    }
  }
  return memo[key(710,backtracking_ptr_for_packrat710)] = result;
}

deque<int> parse_ConstantExpression(){
  if(memo.count(key(711,i))) {
    return memo[key(711,i)];
  }
  int backtracking_ptr_for_packrat711=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ConditionalExpression) */
    deque<int> next_prev5162;
    for(int i5161=0;i5161<(int)prev.size();++i5161) {
      if( prev[i5161] == FAIL ) {
        if(!(!next_prev5162.empty() && next_prev5162.front() == FAIL )) {
          next_prev5162.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5161];
      tmp = parse_ConditionalExpression();
      
      for(int i5161=0;i5161<(int)tmp.size();++i5161) {
        if( tmp[i5161] == FAIL ) {
          if(!( !next_prev5162.empty() && next_prev5162[0] == FAIL )) {
            next_prev5162.push_front(FAIL);
          }
        } else {
          next_prev5162.push_back(tmp[i5161]);
        }
      }
    }
    prev = next_prev5162;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5160=0;i5160<(int)prev.size();++i5160) {
    if( prev[i5160] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5160]);
    }
  }
  return memo[key(711,backtracking_ptr_for_packrat711)] = result;
}

deque<int> parse_ConditionalExpression(){
  if(memo.count(key(712,i))) {
    return memo[key(712,i)];
  }
  int backtracking_ptr_for_packrat712=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (LogicalOrExpression) */
    deque<int> next_prev5165;
    for(int i5164=0;i5164<(int)prev.size();++i5164) {
      if( prev[i5164] == FAIL ) {
        if(!(!next_prev5165.empty() && next_prev5165.front() == FAIL )) {
          next_prev5165.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5164];
      tmp = parse_LogicalOrExpression();
      
      for(int i5164=0;i5164<(int)tmp.size();++i5164) {
        if( tmp[i5164] == FAIL ) {
          if(!( !next_prev5165.empty() && next_prev5165[0] == FAIL )) {
            next_prev5165.push_front(FAIL);
          }
        } else {
          next_prev5165.push_back(tmp[i5164]);
        }
      }
    }
    prev = next_prev5165;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev5183;
    deque<int> star_final_prev5184;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev5183.clear();
      for(int i5185=0;i5185<(int)prev.size();++i5185) {
        i = prev[i5185];
        tmp = parse_while5166();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev5184.push_back(prev[i5185]);
        }
        for(int i5186=0;i5186<(int)tmp.size();++i5186) {
          if(tmp[i5186]==FAIL) {
            if(!( !next_prev5183.empty() && next_prev5183.front() == FAIL )) {
              next_prev5183.push_front(FAIL);
            }
          } else {
            next_prev5183.push_back(tmp[i5186]);
          }
        }
      }
      prev = next_prev5183;
    }
    prev = star_final_prev5184;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5163=0;i5163<(int)prev.size();++i5163) {
    if( prev[i5163] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5163]);
    }
  }
  return memo[key(712,backtracking_ptr_for_packrat712)] = result;
}

inline deque<int> parse_while5166() { 
  if(memo.count(key(713,i))) {
    return memo[key(713,i)];
  }
  int backtracking_ptr_for_packrat713=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5168=0;i5168<(int)prev.size();++i5168) {
        if( prev[i5168] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5168]<m&&I[prev[i5168]]=='?') {
          tmp.push_back(prev[i5168]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5170;
      for(int i5169=0;i5169<(int)prev.size();++i5169) {
        if( prev[i5169] == FAIL ) {
          if(!(!next_prev5170.empty() && next_prev5170.front() == FAIL )) {
            next_prev5170.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5169];
        tmp = parse__();
        
        for(int i5169=0;i5169<(int)tmp.size();++i5169) {
          if( tmp[i5169] == FAIL ) {
            if(!( !next_prev5170.empty() && next_prev5170[0] == FAIL )) {
              next_prev5170.push_front(FAIL);
            }
          } else {
            next_prev5170.push_back(tmp[i5169]);
          }
        }
      }
      prev = next_prev5170;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Expression) */
    deque<int> next_prev5172;
    for(int i5171=0;i5171<(int)prev.size();++i5171) {
      if( prev[i5171] == FAIL ) {
        if(!(!next_prev5172.empty() && next_prev5172.front() == FAIL )) {
          next_prev5172.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5171];
      tmp = parse_Expression();
      
      for(int i5171=0;i5171<(int)tmp.size();++i5171) {
        if( tmp[i5171] == FAIL ) {
          if(!( !next_prev5172.empty() && next_prev5172[0] == FAIL )) {
            next_prev5172.push_front(FAIL);
          }
        } else {
          next_prev5172.push_back(tmp[i5171]);
        }
      }
    }
    prev = next_prev5172;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5173=0;i5173<(int)prev.size();++i5173) {
        if( prev[i5173] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5173]<m&&I[prev[i5173]]==':') {
          tmp.push_back(prev[i5173]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5178;
      for(int i5177=0;i5177<(int)prev.size();++i5177) {
        i = prev[i5177];
        tmp = parse_not5174();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5178.push_back(prev[i5177]);
        } else {
          if(!(!next_prev5178.empty()&&next_prev5178.front()==FAIL)) {
            next_prev5178.push_front(FAIL);
          }
        }
      }
      prev = next_prev5178;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5180;
      for(int i5179=0;i5179<(int)prev.size();++i5179) {
        if( prev[i5179] == FAIL ) {
          if(!(!next_prev5180.empty() && next_prev5180.front() == FAIL )) {
            next_prev5180.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5179];
        tmp = parse__();
        
        for(int i5179=0;i5179<(int)tmp.size();++i5179) {
          if( tmp[i5179] == FAIL ) {
            if(!( !next_prev5180.empty() && next_prev5180[0] == FAIL )) {
              next_prev5180.push_front(FAIL);
            }
          } else {
            next_prev5180.push_back(tmp[i5179]);
          }
        }
      }
      prev = next_prev5180;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (LogicalOrExpression) */
    deque<int> next_prev5182;
    for(int i5181=0;i5181<(int)prev.size();++i5181) {
      if( prev[i5181] == FAIL ) {
        if(!(!next_prev5182.empty() && next_prev5182.front() == FAIL )) {
          next_prev5182.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5181];
      tmp = parse_LogicalOrExpression();
      
      for(int i5181=0;i5181<(int)tmp.size();++i5181) {
        if( tmp[i5181] == FAIL ) {
          if(!( !next_prev5182.empty() && next_prev5182[0] == FAIL )) {
            next_prev5182.push_front(FAIL);
          }
        } else {
          next_prev5182.push_back(tmp[i5181]);
        }
      }
    }
    prev = next_prev5182;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5167=0;i5167<(int)prev.size();++i5167) {
    if( prev[i5167] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5167]);
    }
  }
  return memo[key(713,backtracking_ptr_for_packrat713)] = result;
}

inline deque<int> parse_not5174() { 
  if(memo.count(key(714,i))) {
    return memo[key(714,i)];
  }
  int backtracking_ptr_for_packrat714=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i5176=0;i5176<(int)prev.size();++i5176) {
    if( prev[i5176] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i5176]<m&&(I[prev[i5176]]=='>'||I[prev[i5176]]==':')) {
      tmp.push_back(prev[i5176]+1);
    } else {
      if(!( !tmp.empty() && tmp.front() == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i5175=0;i5175<(int)prev.size();++i5175) {
    if( prev[i5175] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5175]);
    }
  }
  return memo[key(714,backtracking_ptr_for_packrat714)] = result;
}

deque<int> parse_LogicalOrExpression(){
  if(memo.count(key(715,i))) {
    return memo[key(715,i)];
  }
  int backtracking_ptr_for_packrat715=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (LogicalAndExpression) */
    deque<int> next_prev5189;
    for(int i5188=0;i5188<(int)prev.size();++i5188) {
      if( prev[i5188] == FAIL ) {
        if(!(!next_prev5189.empty() && next_prev5189.front() == FAIL )) {
          next_prev5189.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5188];
      tmp = parse_LogicalAndExpression();
      
      for(int i5188=0;i5188<(int)tmp.size();++i5188) {
        if( tmp[i5188] == FAIL ) {
          if(!( !next_prev5189.empty() && next_prev5189[0] == FAIL )) {
            next_prev5189.push_front(FAIL);
          }
        } else {
          next_prev5189.push_back(tmp[i5188]);
        }
      }
    }
    prev = next_prev5189;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev5198;
    deque<int> star_final_prev5199;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev5198.clear();
      for(int i5200=0;i5200<(int)prev.size();++i5200) {
        i = prev[i5200];
        tmp = parse_while5190();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev5199.push_back(prev[i5200]);
        }
        for(int i5201=0;i5201<(int)tmp.size();++i5201) {
          if(tmp[i5201]==FAIL) {
            if(!( !next_prev5198.empty() && next_prev5198.front() == FAIL )) {
              next_prev5198.push_front(FAIL);
            }
          } else {
            next_prev5198.push_back(tmp[i5201]);
          }
        }
      }
      prev = next_prev5198;
    }
    prev = star_final_prev5199;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5187=0;i5187<(int)prev.size();++i5187) {
    if( prev[i5187] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5187]);
    }
  }
  return memo[key(715,backtracking_ptr_for_packrat715)] = result;
}

inline deque<int> parse_while5190() { 
  if(memo.count(key(716,i))) {
    return memo[key(716,i)];
  }
  int backtracking_ptr_for_packrat716=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5192=0;i5192<(int)prev.size();++i5192) {
        if( prev[i5192] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5192]<m&&I[prev[i5192]]=='|') {
          tmp.push_back(prev[i5192]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5193=0;i5193<(int)prev.size();++i5193) {
        if( prev[i5193] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5193]<m&&I[prev[i5193]]=='|') {
          tmp.push_back(prev[i5193]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5195;
      for(int i5194=0;i5194<(int)prev.size();++i5194) {
        if( prev[i5194] == FAIL ) {
          if(!(!next_prev5195.empty() && next_prev5195.front() == FAIL )) {
            next_prev5195.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5194];
        tmp = parse__();
        
        for(int i5194=0;i5194<(int)tmp.size();++i5194) {
          if( tmp[i5194] == FAIL ) {
            if(!( !next_prev5195.empty() && next_prev5195[0] == FAIL )) {
              next_prev5195.push_front(FAIL);
            }
          } else {
            next_prev5195.push_back(tmp[i5194]);
          }
        }
      }
      prev = next_prev5195;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (LogicalAndExpression) */
    deque<int> next_prev5197;
    for(int i5196=0;i5196<(int)prev.size();++i5196) {
      if( prev[i5196] == FAIL ) {
        if(!(!next_prev5197.empty() && next_prev5197.front() == FAIL )) {
          next_prev5197.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5196];
      tmp = parse_LogicalAndExpression();
      
      for(int i5196=0;i5196<(int)tmp.size();++i5196) {
        if( tmp[i5196] == FAIL ) {
          if(!( !next_prev5197.empty() && next_prev5197[0] == FAIL )) {
            next_prev5197.push_front(FAIL);
          }
        } else {
          next_prev5197.push_back(tmp[i5196]);
        }
      }
    }
    prev = next_prev5197;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5191=0;i5191<(int)prev.size();++i5191) {
    if( prev[i5191] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5191]);
    }
  }
  return memo[key(716,backtracking_ptr_for_packrat716)] = result;
}

deque<int> parse_LogicalAndExpression(){
  if(memo.count(key(717,i))) {
    return memo[key(717,i)];
  }
  int backtracking_ptr_for_packrat717=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (InclusiveOrExpression) */
    deque<int> next_prev5204;
    for(int i5203=0;i5203<(int)prev.size();++i5203) {
      if( prev[i5203] == FAIL ) {
        if(!(!next_prev5204.empty() && next_prev5204.front() == FAIL )) {
          next_prev5204.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5203];
      tmp = parse_InclusiveOrExpression();
      
      for(int i5203=0;i5203<(int)tmp.size();++i5203) {
        if( tmp[i5203] == FAIL ) {
          if(!( !next_prev5204.empty() && next_prev5204[0] == FAIL )) {
            next_prev5204.push_front(FAIL);
          }
        } else {
          next_prev5204.push_back(tmp[i5203]);
        }
      }
    }
    prev = next_prev5204;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev5213;
    deque<int> star_final_prev5214;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev5213.clear();
      for(int i5215=0;i5215<(int)prev.size();++i5215) {
        i = prev[i5215];
        tmp = parse_while5205();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev5214.push_back(prev[i5215]);
        }
        for(int i5216=0;i5216<(int)tmp.size();++i5216) {
          if(tmp[i5216]==FAIL) {
            if(!( !next_prev5213.empty() && next_prev5213.front() == FAIL )) {
              next_prev5213.push_front(FAIL);
            }
          } else {
            next_prev5213.push_back(tmp[i5216]);
          }
        }
      }
      prev = next_prev5213;
    }
    prev = star_final_prev5214;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5202=0;i5202<(int)prev.size();++i5202) {
    if( prev[i5202] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5202]);
    }
  }
  return memo[key(717,backtracking_ptr_for_packrat717)] = result;
}

inline deque<int> parse_while5205() { 
  if(memo.count(key(718,i))) {
    return memo[key(718,i)];
  }
  int backtracking_ptr_for_packrat718=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5207=0;i5207<(int)prev.size();++i5207) {
        if( prev[i5207] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5207]<m&&I[prev[i5207]]=='&') {
          tmp.push_back(prev[i5207]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5208=0;i5208<(int)prev.size();++i5208) {
        if( prev[i5208] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5208]<m&&I[prev[i5208]]=='&') {
          tmp.push_back(prev[i5208]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5210;
      for(int i5209=0;i5209<(int)prev.size();++i5209) {
        if( prev[i5209] == FAIL ) {
          if(!(!next_prev5210.empty() && next_prev5210.front() == FAIL )) {
            next_prev5210.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5209];
        tmp = parse__();
        
        for(int i5209=0;i5209<(int)tmp.size();++i5209) {
          if( tmp[i5209] == FAIL ) {
            if(!( !next_prev5210.empty() && next_prev5210[0] == FAIL )) {
              next_prev5210.push_front(FAIL);
            }
          } else {
            next_prev5210.push_back(tmp[i5209]);
          }
        }
      }
      prev = next_prev5210;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (InclusiveOrExpression) */
    deque<int> next_prev5212;
    for(int i5211=0;i5211<(int)prev.size();++i5211) {
      if( prev[i5211] == FAIL ) {
        if(!(!next_prev5212.empty() && next_prev5212.front() == FAIL )) {
          next_prev5212.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5211];
      tmp = parse_InclusiveOrExpression();
      
      for(int i5211=0;i5211<(int)tmp.size();++i5211) {
        if( tmp[i5211] == FAIL ) {
          if(!( !next_prev5212.empty() && next_prev5212[0] == FAIL )) {
            next_prev5212.push_front(FAIL);
          }
        } else {
          next_prev5212.push_back(tmp[i5211]);
        }
      }
    }
    prev = next_prev5212;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5206=0;i5206<(int)prev.size();++i5206) {
    if( prev[i5206] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5206]);
    }
  }
  return memo[key(718,backtracking_ptr_for_packrat718)] = result;
}

deque<int> parse_InclusiveOrExpression(){
  if(memo.count(key(719,i))) {
    return memo[key(719,i)];
  }
  int backtracking_ptr_for_packrat719=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ExclusiveOrExpression) */
    deque<int> next_prev5219;
    for(int i5218=0;i5218<(int)prev.size();++i5218) {
      if( prev[i5218] == FAIL ) {
        if(!(!next_prev5219.empty() && next_prev5219.front() == FAIL )) {
          next_prev5219.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5218];
      tmp = parse_ExclusiveOrExpression();
      
      for(int i5218=0;i5218<(int)tmp.size();++i5218) {
        if( tmp[i5218] == FAIL ) {
          if(!( !next_prev5219.empty() && next_prev5219[0] == FAIL )) {
            next_prev5219.push_front(FAIL);
          }
        } else {
          next_prev5219.push_back(tmp[i5218]);
        }
      }
    }
    prev = next_prev5219;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev5232;
    deque<int> star_final_prev5233;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev5232.clear();
      for(int i5234=0;i5234<(int)prev.size();++i5234) {
        i = prev[i5234];
        tmp = parse_while5220();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev5233.push_back(prev[i5234]);
        }
        for(int i5235=0;i5235<(int)tmp.size();++i5235) {
          if(tmp[i5235]==FAIL) {
            if(!( !next_prev5232.empty() && next_prev5232.front() == FAIL )) {
              next_prev5232.push_front(FAIL);
            }
          } else {
            next_prev5232.push_back(tmp[i5235]);
          }
        }
      }
      prev = next_prev5232;
    }
    prev = star_final_prev5233;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5217=0;i5217<(int)prev.size();++i5217) {
    if( prev[i5217] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5217]);
    }
  }
  return memo[key(719,backtracking_ptr_for_packrat719)] = result;
}

inline deque<int> parse_while5220() { 
  if(memo.count(key(720,i))) {
    return memo[key(720,i)];
  }
  int backtracking_ptr_for_packrat720=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5222=0;i5222<(int)prev.size();++i5222) {
        if( prev[i5222] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5222]<m&&I[prev[i5222]]=='|') {
          tmp.push_back(prev[i5222]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5227;
      for(int i5226=0;i5226<(int)prev.size();++i5226) {
        i = prev[i5226];
        tmp = parse_not5223();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5227.push_back(prev[i5226]);
        } else {
          if(!(!next_prev5227.empty()&&next_prev5227.front()==FAIL)) {
            next_prev5227.push_front(FAIL);
          }
        }
      }
      prev = next_prev5227;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5229;
      for(int i5228=0;i5228<(int)prev.size();++i5228) {
        if( prev[i5228] == FAIL ) {
          if(!(!next_prev5229.empty() && next_prev5229.front() == FAIL )) {
            next_prev5229.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5228];
        tmp = parse__();
        
        for(int i5228=0;i5228<(int)tmp.size();++i5228) {
          if( tmp[i5228] == FAIL ) {
            if(!( !next_prev5229.empty() && next_prev5229[0] == FAIL )) {
              next_prev5229.push_front(FAIL);
            }
          } else {
            next_prev5229.push_back(tmp[i5228]);
          }
        }
      }
      prev = next_prev5229;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ExclusiveOrExpression) */
    deque<int> next_prev5231;
    for(int i5230=0;i5230<(int)prev.size();++i5230) {
      if( prev[i5230] == FAIL ) {
        if(!(!next_prev5231.empty() && next_prev5231.front() == FAIL )) {
          next_prev5231.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5230];
      tmp = parse_ExclusiveOrExpression();
      
      for(int i5230=0;i5230<(int)tmp.size();++i5230) {
        if( tmp[i5230] == FAIL ) {
          if(!( !next_prev5231.empty() && next_prev5231[0] == FAIL )) {
            next_prev5231.push_front(FAIL);
          }
        } else {
          next_prev5231.push_back(tmp[i5230]);
        }
      }
    }
    prev = next_prev5231;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5221=0;i5221<(int)prev.size();++i5221) {
    if( prev[i5221] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5221]);
    }
  }
  return memo[key(720,backtracking_ptr_for_packrat720)] = result;
}

inline deque<int> parse_not5223() { 
  if(memo.count(key(721,i))) {
    return memo[key(721,i)];
  }
  int backtracking_ptr_for_packrat721=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i5225=0;i5225<(int)prev.size();++i5225) {
    if( prev[i5225] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i5225]<m&&(I[prev[i5225]]=='|'||I[prev[i5225]]=='=')) {
      tmp.push_back(prev[i5225]+1);
    } else {
      if(!( !tmp.empty() && tmp.front() == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i5224=0;i5224<(int)prev.size();++i5224) {
    if( prev[i5224] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5224]);
    }
  }
  return memo[key(721,backtracking_ptr_for_packrat721)] = result;
}

deque<int> parse_ExclusiveOrExpression(){
  if(memo.count(key(722,i))) {
    return memo[key(722,i)];
  }
  int backtracking_ptr_for_packrat722=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (AndExpression) */
    deque<int> next_prev5238;
    for(int i5237=0;i5237<(int)prev.size();++i5237) {
      if( prev[i5237] == FAIL ) {
        if(!(!next_prev5238.empty() && next_prev5238.front() == FAIL )) {
          next_prev5238.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5237];
      tmp = parse_AndExpression();
      
      for(int i5237=0;i5237<(int)tmp.size();++i5237) {
        if( tmp[i5237] == FAIL ) {
          if(!( !next_prev5238.empty() && next_prev5238[0] == FAIL )) {
            next_prev5238.push_front(FAIL);
          }
        } else {
          next_prev5238.push_back(tmp[i5237]);
        }
      }
    }
    prev = next_prev5238;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev5251;
    deque<int> star_final_prev5252;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev5251.clear();
      for(int i5253=0;i5253<(int)prev.size();++i5253) {
        i = prev[i5253];
        tmp = parse_while5239();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev5252.push_back(prev[i5253]);
        }
        for(int i5254=0;i5254<(int)tmp.size();++i5254) {
          if(tmp[i5254]==FAIL) {
            if(!( !next_prev5251.empty() && next_prev5251.front() == FAIL )) {
              next_prev5251.push_front(FAIL);
            }
          } else {
            next_prev5251.push_back(tmp[i5254]);
          }
        }
      }
      prev = next_prev5251;
    }
    prev = star_final_prev5252;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5236=0;i5236<(int)prev.size();++i5236) {
    if( prev[i5236] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5236]);
    }
  }
  return memo[key(722,backtracking_ptr_for_packrat722)] = result;
}

inline deque<int> parse_while5239() { 
  if(memo.count(key(723,i))) {
    return memo[key(723,i)];
  }
  int backtracking_ptr_for_packrat723=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5241=0;i5241<(int)prev.size();++i5241) {
        if( prev[i5241] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5241]<m&&I[prev[i5241]]=='^') {
          tmp.push_back(prev[i5241]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5246;
      for(int i5245=0;i5245<(int)prev.size();++i5245) {
        i = prev[i5245];
        tmp = parse_not5242();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5246.push_back(prev[i5245]);
        } else {
          if(!(!next_prev5246.empty()&&next_prev5246.front()==FAIL)) {
            next_prev5246.push_front(FAIL);
          }
        }
      }
      prev = next_prev5246;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5248;
      for(int i5247=0;i5247<(int)prev.size();++i5247) {
        if( prev[i5247] == FAIL ) {
          if(!(!next_prev5248.empty() && next_prev5248.front() == FAIL )) {
            next_prev5248.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5247];
        tmp = parse__();
        
        for(int i5247=0;i5247<(int)tmp.size();++i5247) {
          if( tmp[i5247] == FAIL ) {
            if(!( !next_prev5248.empty() && next_prev5248[0] == FAIL )) {
              next_prev5248.push_front(FAIL);
            }
          } else {
            next_prev5248.push_back(tmp[i5247]);
          }
        }
      }
      prev = next_prev5248;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (AndExpression) */
    deque<int> next_prev5250;
    for(int i5249=0;i5249<(int)prev.size();++i5249) {
      if( prev[i5249] == FAIL ) {
        if(!(!next_prev5250.empty() && next_prev5250.front() == FAIL )) {
          next_prev5250.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5249];
      tmp = parse_AndExpression();
      
      for(int i5249=0;i5249<(int)tmp.size();++i5249) {
        if( tmp[i5249] == FAIL ) {
          if(!( !next_prev5250.empty() && next_prev5250[0] == FAIL )) {
            next_prev5250.push_front(FAIL);
          }
        } else {
          next_prev5250.push_back(tmp[i5249]);
        }
      }
    }
    prev = next_prev5250;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5240=0;i5240<(int)prev.size();++i5240) {
    if( prev[i5240] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5240]);
    }
  }
  return memo[key(723,backtracking_ptr_for_packrat723)] = result;
}

inline deque<int> parse_not5242() { 
  if(memo.count(key(724,i))) {
    return memo[key(724,i)];
  }
  int backtracking_ptr_for_packrat724=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i5244=0;i5244<(int)prev.size();++i5244) {
    if( prev[i5244] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i5244]<m&&(I[prev[i5244]]=='=')) {
      tmp.push_back(prev[i5244]+1);
    } else {
      if(!( !tmp.empty() && tmp.front() == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i5243=0;i5243<(int)prev.size();++i5243) {
    if( prev[i5243] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5243]);
    }
  }
  return memo[key(724,backtracking_ptr_for_packrat724)] = result;
}

deque<int> parse_AndExpression(){
  if(memo.count(key(725,i))) {
    return memo[key(725,i)];
  }
  int backtracking_ptr_for_packrat725=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (EqualityExpression) */
    deque<int> next_prev5257;
    for(int i5256=0;i5256<(int)prev.size();++i5256) {
      if( prev[i5256] == FAIL ) {
        if(!(!next_prev5257.empty() && next_prev5257.front() == FAIL )) {
          next_prev5257.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5256];
      tmp = parse_EqualityExpression();
      
      for(int i5256=0;i5256<(int)tmp.size();++i5256) {
        if( tmp[i5256] == FAIL ) {
          if(!( !next_prev5257.empty() && next_prev5257[0] == FAIL )) {
            next_prev5257.push_front(FAIL);
          }
        } else {
          next_prev5257.push_back(tmp[i5256]);
        }
      }
    }
    prev = next_prev5257;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev5270;
    deque<int> star_final_prev5271;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev5270.clear();
      for(int i5272=0;i5272<(int)prev.size();++i5272) {
        i = prev[i5272];
        tmp = parse_while5258();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev5271.push_back(prev[i5272]);
        }
        for(int i5273=0;i5273<(int)tmp.size();++i5273) {
          if(tmp[i5273]==FAIL) {
            if(!( !next_prev5270.empty() && next_prev5270.front() == FAIL )) {
              next_prev5270.push_front(FAIL);
            }
          } else {
            next_prev5270.push_back(tmp[i5273]);
          }
        }
      }
      prev = next_prev5270;
    }
    prev = star_final_prev5271;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5255=0;i5255<(int)prev.size();++i5255) {
    if( prev[i5255] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5255]);
    }
  }
  return memo[key(725,backtracking_ptr_for_packrat725)] = result;
}

inline deque<int> parse_while5258() { 
  if(memo.count(key(726,i))) {
    return memo[key(726,i)];
  }
  int backtracking_ptr_for_packrat726=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5260=0;i5260<(int)prev.size();++i5260) {
        if( prev[i5260] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5260]<m&&I[prev[i5260]]=='&') {
          tmp.push_back(prev[i5260]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5265;
      for(int i5264=0;i5264<(int)prev.size();++i5264) {
        i = prev[i5264];
        tmp = parse_not5261();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5265.push_back(prev[i5264]);
        } else {
          if(!(!next_prev5265.empty()&&next_prev5265.front()==FAIL)) {
            next_prev5265.push_front(FAIL);
          }
        }
      }
      prev = next_prev5265;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5267;
      for(int i5266=0;i5266<(int)prev.size();++i5266) {
        if( prev[i5266] == FAIL ) {
          if(!(!next_prev5267.empty() && next_prev5267.front() == FAIL )) {
            next_prev5267.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5266];
        tmp = parse__();
        
        for(int i5266=0;i5266<(int)tmp.size();++i5266) {
          if( tmp[i5266] == FAIL ) {
            if(!( !next_prev5267.empty() && next_prev5267[0] == FAIL )) {
              next_prev5267.push_front(FAIL);
            }
          } else {
            next_prev5267.push_back(tmp[i5266]);
          }
        }
      }
      prev = next_prev5267;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (EqualityExpression) */
    deque<int> next_prev5269;
    for(int i5268=0;i5268<(int)prev.size();++i5268) {
      if( prev[i5268] == FAIL ) {
        if(!(!next_prev5269.empty() && next_prev5269.front() == FAIL )) {
          next_prev5269.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5268];
      tmp = parse_EqualityExpression();
      
      for(int i5268=0;i5268<(int)tmp.size();++i5268) {
        if( tmp[i5268] == FAIL ) {
          if(!( !next_prev5269.empty() && next_prev5269[0] == FAIL )) {
            next_prev5269.push_front(FAIL);
          }
        } else {
          next_prev5269.push_back(tmp[i5268]);
        }
      }
    }
    prev = next_prev5269;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5259=0;i5259<(int)prev.size();++i5259) {
    if( prev[i5259] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5259]);
    }
  }
  return memo[key(726,backtracking_ptr_for_packrat726)] = result;
}

inline deque<int> parse_not5261() { 
  if(memo.count(key(727,i))) {
    return memo[key(727,i)];
  }
  int backtracking_ptr_for_packrat727=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i5263=0;i5263<(int)prev.size();++i5263) {
    if( prev[i5263] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i5263]<m&&(I[prev[i5263]]=='&'||I[prev[i5263]]=='=')) {
      tmp.push_back(prev[i5263]+1);
    } else {
      if(!( !tmp.empty() && tmp.front() == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i5262=0;i5262<(int)prev.size();++i5262) {
    if( prev[i5262] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5262]);
    }
  }
  return memo[key(727,backtracking_ptr_for_packrat727)] = result;
}

deque<int> parse_EqualityExpression(){
  if(memo.count(key(728,i))) {
    return memo[key(728,i)];
  }
  int backtracking_ptr_for_packrat728=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (RelationalExpression) */
    deque<int> next_prev5276;
    for(int i5275=0;i5275<(int)prev.size();++i5275) {
      if( prev[i5275] == FAIL ) {
        if(!(!next_prev5276.empty() && next_prev5276.front() == FAIL )) {
          next_prev5276.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5275];
      tmp = parse_RelationalExpression();
      
      for(int i5275=0;i5275<(int)tmp.size();++i5275) {
        if( tmp[i5275] == FAIL ) {
          if(!( !next_prev5276.empty() && next_prev5276[0] == FAIL )) {
            next_prev5276.push_front(FAIL);
          }
        } else {
          next_prev5276.push_back(tmp[i5275]);
        }
      }
    }
    prev = next_prev5276;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev5298;
    deque<int> star_final_prev5299;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev5298.clear();
      for(int i5300=0;i5300<(int)prev.size();++i5300) {
        i = prev[i5300];
        tmp = parse_while5277();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev5299.push_back(prev[i5300]);
        }
        for(int i5301=0;i5301<(int)tmp.size();++i5301) {
          if(tmp[i5301]==FAIL) {
            if(!( !next_prev5298.empty() && next_prev5298.front() == FAIL )) {
              next_prev5298.push_front(FAIL);
            }
          } else {
            next_prev5298.push_back(tmp[i5301]);
          }
        }
      }
      prev = next_prev5298;
    }
    prev = star_final_prev5299;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5274=0;i5274<(int)prev.size();++i5274) {
    if( prev[i5274] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5274]);
    }
  }
  return memo[key(728,backtracking_ptr_for_packrat728)] = result;
}

inline deque<int> parse_while5277() { 
  if(memo.count(key(729,i))) {
    return memo[key(729,i)];
  }
  int backtracking_ptr_for_packrat729=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev5280;
    deque<int> prioritized_choice_final_prev5281;
    next_prev5280.clear();
    for(int i5279=0;i5279<(int)prev.size();++i5279) {
      i = prev[i5279];
      tmp = parse_slash5282();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5280.push_back(prev[i5279]); }
      for(int i5288=0;i5288<(int)tmp.size();++i5288) {
        if( tmp[i5288] != FAIL ) {
          prioritized_choice_final_prev5281.push_back(tmp[i5288]);
        }
      }
    }
    prev = next_prev5280;
    next_prev5280.clear();
    for(int i5279=0;i5279<(int)prev.size();++i5279) {
      i = prev[i5279];
      tmp = parse_slash5289();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5280.push_back(prev[i5279]); }
      for(int i5295=0;i5295<(int)tmp.size();++i5295) {
        if( tmp[i5295] != FAIL ) {
          prioritized_choice_final_prev5281.push_back(tmp[i5295]);
        }
      }
    }
    prev = next_prev5280;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev5281.empty() && prioritized_choice_final_prev5281.front() == FAIL )) {
        prioritized_choice_final_prev5281.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev5281;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (RelationalExpression) */
    deque<int> next_prev5297;
    for(int i5296=0;i5296<(int)prev.size();++i5296) {
      if( prev[i5296] == FAIL ) {
        if(!(!next_prev5297.empty() && next_prev5297.front() == FAIL )) {
          next_prev5297.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5296];
      tmp = parse_RelationalExpression();
      
      for(int i5296=0;i5296<(int)tmp.size();++i5296) {
        if( tmp[i5296] == FAIL ) {
          if(!( !next_prev5297.empty() && next_prev5297[0] == FAIL )) {
            next_prev5297.push_front(FAIL);
          }
        } else {
          next_prev5297.push_back(tmp[i5296]);
        }
      }
    }
    prev = next_prev5297;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5278=0;i5278<(int)prev.size();++i5278) {
    if( prev[i5278] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5278]);
    }
  }
  return memo[key(729,backtracking_ptr_for_packrat729)] = result;
}

inline deque<int> parse_slash5282() { 
  if(memo.count(key(730,i))) {
    return memo[key(730,i)];
  }
  int backtracking_ptr_for_packrat730=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5284=0;i5284<(int)prev.size();++i5284) {
        if( prev[i5284] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5284]<m&&I[prev[i5284]]=='=') {
          tmp.push_back(prev[i5284]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5285=0;i5285<(int)prev.size();++i5285) {
        if( prev[i5285] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5285]<m&&I[prev[i5285]]=='=') {
          tmp.push_back(prev[i5285]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5287;
      for(int i5286=0;i5286<(int)prev.size();++i5286) {
        if( prev[i5286] == FAIL ) {
          if(!(!next_prev5287.empty() && next_prev5287.front() == FAIL )) {
            next_prev5287.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5286];
        tmp = parse__();
        
        for(int i5286=0;i5286<(int)tmp.size();++i5286) {
          if( tmp[i5286] == FAIL ) {
            if(!( !next_prev5287.empty() && next_prev5287[0] == FAIL )) {
              next_prev5287.push_front(FAIL);
            }
          } else {
            next_prev5287.push_back(tmp[i5286]);
          }
        }
      }
      prev = next_prev5287;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5283=0;i5283<(int)prev.size();++i5283) {
    if( prev[i5283] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5283]);
    }
  }
  return memo[key(730,backtracking_ptr_for_packrat730)] = result;
}

inline deque<int> parse_slash5289() { 
  if(memo.count(key(731,i))) {
    return memo[key(731,i)];
  }
  int backtracking_ptr_for_packrat731=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5291=0;i5291<(int)prev.size();++i5291) {
        if( prev[i5291] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5291]<m&&I[prev[i5291]]=='!') {
          tmp.push_back(prev[i5291]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5292=0;i5292<(int)prev.size();++i5292) {
        if( prev[i5292] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5292]<m&&I[prev[i5292]]=='=') {
          tmp.push_back(prev[i5292]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5294;
      for(int i5293=0;i5293<(int)prev.size();++i5293) {
        if( prev[i5293] == FAIL ) {
          if(!(!next_prev5294.empty() && next_prev5294.front() == FAIL )) {
            next_prev5294.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5293];
        tmp = parse__();
        
        for(int i5293=0;i5293<(int)tmp.size();++i5293) {
          if( tmp[i5293] == FAIL ) {
            if(!( !next_prev5294.empty() && next_prev5294[0] == FAIL )) {
              next_prev5294.push_front(FAIL);
            }
          } else {
            next_prev5294.push_back(tmp[i5293]);
          }
        }
      }
      prev = next_prev5294;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5290=0;i5290<(int)prev.size();++i5290) {
    if( prev[i5290] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5290]);
    }
  }
  return memo[key(731,backtracking_ptr_for_packrat731)] = result;
}

deque<int> parse_relationalOperator(){
  if(memo.count(key(732,i))) {
    return memo[key(732,i)];
  }
  int backtracking_ptr_for_packrat732=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev5304;
  deque<int> prioritized_choice_final_prev5305;
  next_prev5304.clear();
  for(int i5303=0;i5303<(int)prev.size();++i5303) {
    i = prev[i5303];
    tmp = parse_slash5306();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5304.push_back(prev[i5303]); }
    for(int i5312=0;i5312<(int)tmp.size();++i5312) {
      if( tmp[i5312] != FAIL ) {
        prioritized_choice_final_prev5305.push_back(tmp[i5312]);
      }
    }
  }
  prev = next_prev5304;
  next_prev5304.clear();
  for(int i5303=0;i5303<(int)prev.size();++i5303) {
    i = prev[i5303];
    tmp = parse_slash5313();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5304.push_back(prev[i5303]); }
    for(int i5319=0;i5319<(int)tmp.size();++i5319) {
      if( tmp[i5319] != FAIL ) {
        prioritized_choice_final_prev5305.push_back(tmp[i5319]);
      }
    }
  }
  prev = next_prev5304;
  next_prev5304.clear();
  for(int i5303=0;i5303<(int)prev.size();++i5303) {
    i = prev[i5303];
    tmp = parse_slash5320();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5304.push_back(prev[i5303]); }
    for(int i5330=0;i5330<(int)tmp.size();++i5330) {
      if( tmp[i5330] != FAIL ) {
        prioritized_choice_final_prev5305.push_back(tmp[i5330]);
      }
    }
  }
  prev = next_prev5304;
  next_prev5304.clear();
  for(int i5303=0;i5303<(int)prev.size();++i5303) {
    i = prev[i5303];
    tmp = parse_slash5331();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5304.push_back(prev[i5303]); }
    for(int i5341=0;i5341<(int)tmp.size();++i5341) {
      if( tmp[i5341] != FAIL ) {
        prioritized_choice_final_prev5305.push_back(tmp[i5341]);
      }
    }
  }
  prev = next_prev5304;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev5305.empty() && prioritized_choice_final_prev5305.front() == FAIL )) {
      prioritized_choice_final_prev5305.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev5305;
  for(int i5302=0;i5302<(int)prev.size();++i5302) {
    if( prev[i5302] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5302]);
    }
  }
  return memo[key(732,backtracking_ptr_for_packrat732)] = result;
}

inline deque<int> parse_slash5306() { 
  if(memo.count(key(733,i))) {
    return memo[key(733,i)];
  }
  int backtracking_ptr_for_packrat733=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5308=0;i5308<(int)prev.size();++i5308) {
        if( prev[i5308] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5308]<m&&I[prev[i5308]]=='<') {
          tmp.push_back(prev[i5308]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5309=0;i5309<(int)prev.size();++i5309) {
        if( prev[i5309] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5309]<m&&I[prev[i5309]]=='=') {
          tmp.push_back(prev[i5309]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5311;
      for(int i5310=0;i5310<(int)prev.size();++i5310) {
        if( prev[i5310] == FAIL ) {
          if(!(!next_prev5311.empty() && next_prev5311.front() == FAIL )) {
            next_prev5311.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5310];
        tmp = parse__();
        
        for(int i5310=0;i5310<(int)tmp.size();++i5310) {
          if( tmp[i5310] == FAIL ) {
            if(!( !next_prev5311.empty() && next_prev5311[0] == FAIL )) {
              next_prev5311.push_front(FAIL);
            }
          } else {
            next_prev5311.push_back(tmp[i5310]);
          }
        }
      }
      prev = next_prev5311;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5307=0;i5307<(int)prev.size();++i5307) {
    if( prev[i5307] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5307]);
    }
  }
  return memo[key(733,backtracking_ptr_for_packrat733)] = result;
}

inline deque<int> parse_slash5313() { 
  if(memo.count(key(734,i))) {
    return memo[key(734,i)];
  }
  int backtracking_ptr_for_packrat734=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5315=0;i5315<(int)prev.size();++i5315) {
        if( prev[i5315] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5315]<m&&I[prev[i5315]]=='>') {
          tmp.push_back(prev[i5315]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5316=0;i5316<(int)prev.size();++i5316) {
        if( prev[i5316] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5316]<m&&I[prev[i5316]]=='=') {
          tmp.push_back(prev[i5316]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5318;
      for(int i5317=0;i5317<(int)prev.size();++i5317) {
        if( prev[i5317] == FAIL ) {
          if(!(!next_prev5318.empty() && next_prev5318.front() == FAIL )) {
            next_prev5318.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5317];
        tmp = parse__();
        
        for(int i5317=0;i5317<(int)tmp.size();++i5317) {
          if( tmp[i5317] == FAIL ) {
            if(!( !next_prev5318.empty() && next_prev5318[0] == FAIL )) {
              next_prev5318.push_front(FAIL);
            }
          } else {
            next_prev5318.push_back(tmp[i5317]);
          }
        }
      }
      prev = next_prev5318;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5314=0;i5314<(int)prev.size();++i5314) {
    if( prev[i5314] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5314]);
    }
  }
  return memo[key(734,backtracking_ptr_for_packrat734)] = result;
}

inline deque<int> parse_slash5320() { 
  if(memo.count(key(735,i))) {
    return memo[key(735,i)];
  }
  int backtracking_ptr_for_packrat735=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5322=0;i5322<(int)prev.size();++i5322) {
        if( prev[i5322] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5322]<m&&I[prev[i5322]]=='<') {
          tmp.push_back(prev[i5322]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5327;
      for(int i5326=0;i5326<(int)prev.size();++i5326) {
        i = prev[i5326];
        tmp = parse_not5323();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5327.push_back(prev[i5326]);
        } else {
          if(!(!next_prev5327.empty()&&next_prev5327.front()==FAIL)) {
            next_prev5327.push_front(FAIL);
          }
        }
      }
      prev = next_prev5327;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5329;
      for(int i5328=0;i5328<(int)prev.size();++i5328) {
        if( prev[i5328] == FAIL ) {
          if(!(!next_prev5329.empty() && next_prev5329.front() == FAIL )) {
            next_prev5329.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5328];
        tmp = parse__();
        
        for(int i5328=0;i5328<(int)tmp.size();++i5328) {
          if( tmp[i5328] == FAIL ) {
            if(!( !next_prev5329.empty() && next_prev5329[0] == FAIL )) {
              next_prev5329.push_front(FAIL);
            }
          } else {
            next_prev5329.push_back(tmp[i5328]);
          }
        }
      }
      prev = next_prev5329;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5321=0;i5321<(int)prev.size();++i5321) {
    if( prev[i5321] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5321]);
    }
  }
  return memo[key(735,backtracking_ptr_for_packrat735)] = result;
}

inline deque<int> parse_not5323() { 
  if(memo.count(key(736,i))) {
    return memo[key(736,i)];
  }
  int backtracking_ptr_for_packrat736=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i5325=0;i5325<(int)prev.size();++i5325) {
    if( prev[i5325] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i5325]<m&&(I[prev[i5325]]=='=')) {
      tmp.push_back(prev[i5325]+1);
    } else {
      if(!( !tmp.empty() && tmp.front() == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i5324=0;i5324<(int)prev.size();++i5324) {
    if( prev[i5324] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5324]);
    }
  }
  return memo[key(736,backtracking_ptr_for_packrat736)] = result;
}

inline deque<int> parse_slash5331() { 
  if(memo.count(key(737,i))) {
    return memo[key(737,i)];
  }
  int backtracking_ptr_for_packrat737=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5333=0;i5333<(int)prev.size();++i5333) {
        if( prev[i5333] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5333]<m&&I[prev[i5333]]=='>') {
          tmp.push_back(prev[i5333]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5338;
      for(int i5337=0;i5337<(int)prev.size();++i5337) {
        i = prev[i5337];
        tmp = parse_not5334();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5338.push_back(prev[i5337]);
        } else {
          if(!(!next_prev5338.empty()&&next_prev5338.front()==FAIL)) {
            next_prev5338.push_front(FAIL);
          }
        }
      }
      prev = next_prev5338;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5340;
      for(int i5339=0;i5339<(int)prev.size();++i5339) {
        if( prev[i5339] == FAIL ) {
          if(!(!next_prev5340.empty() && next_prev5340.front() == FAIL )) {
            next_prev5340.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5339];
        tmp = parse__();
        
        for(int i5339=0;i5339<(int)tmp.size();++i5339) {
          if( tmp[i5339] == FAIL ) {
            if(!( !next_prev5340.empty() && next_prev5340[0] == FAIL )) {
              next_prev5340.push_front(FAIL);
            }
          } else {
            next_prev5340.push_back(tmp[i5339]);
          }
        }
      }
      prev = next_prev5340;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5332=0;i5332<(int)prev.size();++i5332) {
    if( prev[i5332] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5332]);
    }
  }
  return memo[key(737,backtracking_ptr_for_packrat737)] = result;
}

inline deque<int> parse_not5334() { 
  if(memo.count(key(738,i))) {
    return memo[key(738,i)];
  }
  int backtracking_ptr_for_packrat738=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i5336=0;i5336<(int)prev.size();++i5336) {
    if( prev[i5336] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i5336]<m&&(I[prev[i5336]]=='=')) {
      tmp.push_back(prev[i5336]+1);
    } else {
      if(!( !tmp.empty() && tmp.front() == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i5335=0;i5335<(int)prev.size();++i5335) {
    if( prev[i5335] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5335]);
    }
  }
  return memo[key(738,backtracking_ptr_for_packrat738)] = result;
}

deque<int> parse_RelationalExpression(){
  if(memo.count(key(739,i))) {
    return memo[key(739,i)];
  }
  int backtracking_ptr_for_packrat739=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ShiftExpression) */
    deque<int> next_prev5344;
    for(int i5343=0;i5343<(int)prev.size();++i5343) {
      if( prev[i5343] == FAIL ) {
        if(!(!next_prev5344.empty() && next_prev5344.front() == FAIL )) {
          next_prev5344.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5343];
      tmp = parse_ShiftExpression();
      
      for(int i5343=0;i5343<(int)tmp.size();++i5343) {
        if( tmp[i5343] == FAIL ) {
          if(!( !next_prev5344.empty() && next_prev5344[0] == FAIL )) {
            next_prev5344.push_front(FAIL);
          }
        } else {
          next_prev5344.push_back(tmp[i5343]);
        }
      }
    }
    prev = next_prev5344;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev5380;
    deque<int> star_final_prev5381;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev5380.clear();
      for(int i5382=0;i5382<(int)prev.size();++i5382) {
        i = prev[i5382];
        tmp = parse_while5345();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev5381.push_back(prev[i5382]);
        }
        for(int i5383=0;i5383<(int)tmp.size();++i5383) {
          if(tmp[i5383]==FAIL) {
            if(!( !next_prev5380.empty() && next_prev5380.front() == FAIL )) {
              next_prev5380.push_front(FAIL);
            }
          } else {
            next_prev5380.push_back(tmp[i5383]);
          }
        }
      }
      prev = next_prev5380;
    }
    prev = star_final_prev5381;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5342=0;i5342<(int)prev.size();++i5342) {
    if( prev[i5342] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5342]);
    }
  }
  return memo[key(739,backtracking_ptr_for_packrat739)] = result;
}

inline deque<int> parse_while5345() { 
  if(memo.count(key(740,i))) {
    return memo[key(740,i)];
  }
  int backtracking_ptr_for_packrat740=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev5348;
    deque<int> prioritized_choice_final_prev5349;
    next_prev5348.clear();
    for(int i5347=0;i5347<(int)prev.size();++i5347) {
      i = prev[i5347];
      tmp = parse_slash5350();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5348.push_back(prev[i5347]); }
      for(int i5356=0;i5356<(int)tmp.size();++i5356) {
        if( tmp[i5356] != FAIL ) {
          prioritized_choice_final_prev5349.push_back(tmp[i5356]);
        }
      }
    }
    prev = next_prev5348;
    next_prev5348.clear();
    for(int i5347=0;i5347<(int)prev.size();++i5347) {
      i = prev[i5347];
      tmp = parse_slash5357();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5348.push_back(prev[i5347]); }
      for(int i5379=0;i5379<(int)tmp.size();++i5379) {
        if( tmp[i5379] != FAIL ) {
          prioritized_choice_final_prev5349.push_back(tmp[i5379]);
        }
      }
    }
    prev = next_prev5348;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev5349.empty() && prioritized_choice_final_prev5349.front() == FAIL )) {
        prioritized_choice_final_prev5349.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev5349;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5346=0;i5346<(int)prev.size();++i5346) {
    if( prev[i5346] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5346]);
    }
  }
  return memo[key(740,backtracking_ptr_for_packrat740)] = result;
}

inline deque<int> parse_slash5350() { 
  if(memo.count(key(741,i))) {
    return memo[key(741,i)];
  }
  int backtracking_ptr_for_packrat741=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (relationalOperator) */
    deque<int> next_prev5353;
    for(int i5352=0;i5352<(int)prev.size();++i5352) {
      if( prev[i5352] == FAIL ) {
        if(!(!next_prev5353.empty() && next_prev5353.front() == FAIL )) {
          next_prev5353.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5352];
      tmp = parse_relationalOperator();
      
      for(int i5352=0;i5352<(int)tmp.size();++i5352) {
        if( tmp[i5352] == FAIL ) {
          if(!( !next_prev5353.empty() && next_prev5353[0] == FAIL )) {
            next_prev5353.push_front(FAIL);
          }
        } else {
          next_prev5353.push_back(tmp[i5352]);
        }
      }
    }
    prev = next_prev5353;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ShiftExpression) */
    deque<int> next_prev5355;
    for(int i5354=0;i5354<(int)prev.size();++i5354) {
      if( prev[i5354] == FAIL ) {
        if(!(!next_prev5355.empty() && next_prev5355.front() == FAIL )) {
          next_prev5355.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5354];
      tmp = parse_ShiftExpression();
      
      for(int i5354=0;i5354<(int)tmp.size();++i5354) {
        if( tmp[i5354] == FAIL ) {
          if(!( !next_prev5355.empty() && next_prev5355[0] == FAIL )) {
            next_prev5355.push_front(FAIL);
          }
        } else {
          next_prev5355.push_back(tmp[i5354]);
        }
      }
    }
    prev = next_prev5355;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5351=0;i5351<(int)prev.size();++i5351) {
    if( prev[i5351] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5351]);
    }
  }
  return memo[key(741,backtracking_ptr_for_packrat741)] = result;
}

inline deque<int> parse_slash5357() { 
  if(memo.count(key(742,i))) {
    return memo[key(742,i)];
  }
  int backtracking_ptr_for_packrat742=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5359=0;i5359<(int)prev.size();++i5359) {
        if( prev[i5359] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5359]<m&&I[prev[i5359]]=='i') {
          tmp.push_back(prev[i5359]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5360=0;i5360<(int)prev.size();++i5360) {
        if( prev[i5360] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5360]<m&&I[prev[i5360]]=='n') {
          tmp.push_back(prev[i5360]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5361=0;i5361<(int)prev.size();++i5361) {
        if( prev[i5361] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5361]<m&&I[prev[i5361]]=='s') {
          tmp.push_back(prev[i5361]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5362=0;i5362<(int)prev.size();++i5362) {
        if( prev[i5362] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5362]<m&&I[prev[i5362]]=='t') {
          tmp.push_back(prev[i5362]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5363=0;i5363<(int)prev.size();++i5363) {
        if( prev[i5363] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5363]<m&&I[prev[i5363]]=='a') {
          tmp.push_back(prev[i5363]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5364=0;i5364<(int)prev.size();++i5364) {
        if( prev[i5364] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5364]<m&&I[prev[i5364]]=='n') {
          tmp.push_back(prev[i5364]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5365=0;i5365<(int)prev.size();++i5365) {
        if( prev[i5365] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5365]<m&&I[prev[i5365]]=='c') {
          tmp.push_back(prev[i5365]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5366=0;i5366<(int)prev.size();++i5366) {
        if( prev[i5366] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5366]<m&&I[prev[i5366]]=='e') {
          tmp.push_back(prev[i5366]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5367=0;i5367<(int)prev.size();++i5367) {
        if( prev[i5367] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5367]<m&&I[prev[i5367]]=='o') {
          tmp.push_back(prev[i5367]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5368=0;i5368<(int)prev.size();++i5368) {
        if( prev[i5368] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5368]<m&&I[prev[i5368]]=='f') {
          tmp.push_back(prev[i5368]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5374;
      for(int i5373=0;i5373<(int)prev.size();++i5373) {
        i = prev[i5373];
        tmp = parse_not5369();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5374.push_back(prev[i5373]);
        } else {
          if(!(!next_prev5374.empty()&&next_prev5374.front()==FAIL)) {
            next_prev5374.push_front(FAIL);
          }
        }
      }
      prev = next_prev5374;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5376;
      for(int i5375=0;i5375<(int)prev.size();++i5375) {
        if( prev[i5375] == FAIL ) {
          if(!(!next_prev5376.empty() && next_prev5376.front() == FAIL )) {
            next_prev5376.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5375];
        tmp = parse__();
        
        for(int i5375=0;i5375<(int)tmp.size();++i5375) {
          if( tmp[i5375] == FAIL ) {
            if(!( !next_prev5376.empty() && next_prev5376[0] == FAIL )) {
              next_prev5376.push_front(FAIL);
            }
          } else {
            next_prev5376.push_back(tmp[i5375]);
          }
        }
      }
      prev = next_prev5376;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ReferenceType) */
    deque<int> next_prev5378;
    for(int i5377=0;i5377<(int)prev.size();++i5377) {
      if( prev[i5377] == FAIL ) {
        if(!(!next_prev5378.empty() && next_prev5378.front() == FAIL )) {
          next_prev5378.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5377];
      tmp = parse_ReferenceType();
      
      for(int i5377=0;i5377<(int)tmp.size();++i5377) {
        if( tmp[i5377] == FAIL ) {
          if(!( !next_prev5378.empty() && next_prev5378[0] == FAIL )) {
            next_prev5378.push_front(FAIL);
          }
        } else {
          next_prev5378.push_back(tmp[i5377]);
        }
      }
    }
    prev = next_prev5378;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5358=0;i5358<(int)prev.size();++i5358) {
    if( prev[i5358] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5358]);
    }
  }
  return memo[key(742,backtracking_ptr_for_packrat742)] = result;
}

inline deque<int> parse_not5369() { 
  if(memo.count(key(743,i))) {
    return memo[key(743,i)];
  }
  int backtracking_ptr_for_packrat743=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev5372;
  for(int i5371=0;i5371<(int)prev.size();++i5371) {
    if( prev[i5371] == FAIL ) {
      if(!(!next_prev5372.empty() && next_prev5372.front() == FAIL )) {
        next_prev5372.push_front(FAIL);
      }
      continue;
    }
    i = prev[i5371];
    tmp = parse_W();
    
    for(int i5371=0;i5371<(int)tmp.size();++i5371) {
      if( tmp[i5371] == FAIL ) {
        if(!( !next_prev5372.empty() && next_prev5372[0] == FAIL )) {
          next_prev5372.push_front(FAIL);
        }
      } else {
        next_prev5372.push_back(tmp[i5371]);
      }
    }
  }
  prev = next_prev5372;
  for(int i5370=0;i5370<(int)prev.size();++i5370) {
    if( prev[i5370] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5370]);
    }
  }
  return memo[key(743,backtracking_ptr_for_packrat743)] = result;
}

deque<int> parse_ShiftExpression(){
  if(memo.count(key(744,i))) {
    return memo[key(744,i)];
  }
  int backtracking_ptr_for_packrat744=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (AdditiveExpression) */
    deque<int> next_prev5386;
    for(int i5385=0;i5385<(int)prev.size();++i5385) {
      if( prev[i5385] == FAIL ) {
        if(!(!next_prev5386.empty() && next_prev5386.front() == FAIL )) {
          next_prev5386.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5385];
      tmp = parse_AdditiveExpression();
      
      for(int i5385=0;i5385<(int)tmp.size();++i5385) {
        if( tmp[i5385] == FAIL ) {
          if(!( !next_prev5386.empty() && next_prev5386[0] == FAIL )) {
            next_prev5386.push_front(FAIL);
          }
        } else {
          next_prev5386.push_back(tmp[i5385]);
        }
      }
    }
    prev = next_prev5386;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev5431;
    deque<int> star_final_prev5432;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev5431.clear();
      for(int i5433=0;i5433<(int)prev.size();++i5433) {
        i = prev[i5433];
        tmp = parse_while5387();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev5432.push_back(prev[i5433]);
        }
        for(int i5434=0;i5434<(int)tmp.size();++i5434) {
          if(tmp[i5434]==FAIL) {
            if(!( !next_prev5431.empty() && next_prev5431.front() == FAIL )) {
              next_prev5431.push_front(FAIL);
            }
          } else {
            next_prev5431.push_back(tmp[i5434]);
          }
        }
      }
      prev = next_prev5431;
    }
    prev = star_final_prev5432;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5384=0;i5384<(int)prev.size();++i5384) {
    if( prev[i5384] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5384]);
    }
  }
  return memo[key(744,backtracking_ptr_for_packrat744)] = result;
}

inline deque<int> parse_while5387() { 
  if(memo.count(key(745,i))) {
    return memo[key(745,i)];
  }
  int backtracking_ptr_for_packrat745=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev5390;
    deque<int> prioritized_choice_final_prev5391;
    next_prev5390.clear();
    for(int i5389=0;i5389<(int)prev.size();++i5389) {
      i = prev[i5389];
      tmp = parse_slash5392();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5390.push_back(prev[i5389]); }
      for(int i5403=0;i5403<(int)tmp.size();++i5403) {
        if( tmp[i5403] != FAIL ) {
          prioritized_choice_final_prev5391.push_back(tmp[i5403]);
        }
      }
    }
    prev = next_prev5390;
    next_prev5390.clear();
    for(int i5389=0;i5389<(int)prev.size();++i5389) {
      i = prev[i5389];
      tmp = parse_slash5404();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5390.push_back(prev[i5389]); }
      for(int i5415=0;i5415<(int)tmp.size();++i5415) {
        if( tmp[i5415] != FAIL ) {
          prioritized_choice_final_prev5391.push_back(tmp[i5415]);
        }
      }
    }
    prev = next_prev5390;
    next_prev5390.clear();
    for(int i5389=0;i5389<(int)prev.size();++i5389) {
      i = prev[i5389];
      tmp = parse_slash5416();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5390.push_back(prev[i5389]); }
      for(int i5428=0;i5428<(int)tmp.size();++i5428) {
        if( tmp[i5428] != FAIL ) {
          prioritized_choice_final_prev5391.push_back(tmp[i5428]);
        }
      }
    }
    prev = next_prev5390;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev5391.empty() && prioritized_choice_final_prev5391.front() == FAIL )) {
        prioritized_choice_final_prev5391.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev5391;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (AdditiveExpression) */
    deque<int> next_prev5430;
    for(int i5429=0;i5429<(int)prev.size();++i5429) {
      if( prev[i5429] == FAIL ) {
        if(!(!next_prev5430.empty() && next_prev5430.front() == FAIL )) {
          next_prev5430.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5429];
      tmp = parse_AdditiveExpression();
      
      for(int i5429=0;i5429<(int)tmp.size();++i5429) {
        if( tmp[i5429] == FAIL ) {
          if(!( !next_prev5430.empty() && next_prev5430[0] == FAIL )) {
            next_prev5430.push_front(FAIL);
          }
        } else {
          next_prev5430.push_back(tmp[i5429]);
        }
      }
    }
    prev = next_prev5430;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5388=0;i5388<(int)prev.size();++i5388) {
    if( prev[i5388] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5388]);
    }
  }
  return memo[key(745,backtracking_ptr_for_packrat745)] = result;
}

inline deque<int> parse_slash5392() { 
  if(memo.count(key(746,i))) {
    return memo[key(746,i)];
  }
  int backtracking_ptr_for_packrat746=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5394=0;i5394<(int)prev.size();++i5394) {
        if( prev[i5394] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5394]<m&&I[prev[i5394]]=='<') {
          tmp.push_back(prev[i5394]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5395=0;i5395<(int)prev.size();++i5395) {
        if( prev[i5395] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5395]<m&&I[prev[i5395]]=='<') {
          tmp.push_back(prev[i5395]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5400;
      for(int i5399=0;i5399<(int)prev.size();++i5399) {
        i = prev[i5399];
        tmp = parse_not5396();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5400.push_back(prev[i5399]);
        } else {
          if(!(!next_prev5400.empty()&&next_prev5400.front()==FAIL)) {
            next_prev5400.push_front(FAIL);
          }
        }
      }
      prev = next_prev5400;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5402;
      for(int i5401=0;i5401<(int)prev.size();++i5401) {
        if( prev[i5401] == FAIL ) {
          if(!(!next_prev5402.empty() && next_prev5402.front() == FAIL )) {
            next_prev5402.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5401];
        tmp = parse__();
        
        for(int i5401=0;i5401<(int)tmp.size();++i5401) {
          if( tmp[i5401] == FAIL ) {
            if(!( !next_prev5402.empty() && next_prev5402[0] == FAIL )) {
              next_prev5402.push_front(FAIL);
            }
          } else {
            next_prev5402.push_back(tmp[i5401]);
          }
        }
      }
      prev = next_prev5402;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5393=0;i5393<(int)prev.size();++i5393) {
    if( prev[i5393] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5393]);
    }
  }
  return memo[key(746,backtracking_ptr_for_packrat746)] = result;
}

inline deque<int> parse_not5396() { 
  if(memo.count(key(747,i))) {
    return memo[key(747,i)];
  }
  int backtracking_ptr_for_packrat747=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i5398=0;i5398<(int)prev.size();++i5398) {
    if( prev[i5398] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i5398]<m&&I[prev[i5398]]=='=') {
      tmp.push_back(prev[i5398]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i5397=0;i5397<(int)prev.size();++i5397) {
    if( prev[i5397] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5397]);
    }
  }
  return memo[key(747,backtracking_ptr_for_packrat747)] = result;
}

inline deque<int> parse_slash5404() { 
  if(memo.count(key(748,i))) {
    return memo[key(748,i)];
  }
  int backtracking_ptr_for_packrat748=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5406=0;i5406<(int)prev.size();++i5406) {
        if( prev[i5406] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5406]<m&&I[prev[i5406]]=='>') {
          tmp.push_back(prev[i5406]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5407=0;i5407<(int)prev.size();++i5407) {
        if( prev[i5407] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5407]<m&&I[prev[i5407]]=='>') {
          tmp.push_back(prev[i5407]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5412;
      for(int i5411=0;i5411<(int)prev.size();++i5411) {
        i = prev[i5411];
        tmp = parse_not5408();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5412.push_back(prev[i5411]);
        } else {
          if(!(!next_prev5412.empty()&&next_prev5412.front()==FAIL)) {
            next_prev5412.push_front(FAIL);
          }
        }
      }
      prev = next_prev5412;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5414;
      for(int i5413=0;i5413<(int)prev.size();++i5413) {
        if( prev[i5413] == FAIL ) {
          if(!(!next_prev5414.empty() && next_prev5414.front() == FAIL )) {
            next_prev5414.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5413];
        tmp = parse__();
        
        for(int i5413=0;i5413<(int)tmp.size();++i5413) {
          if( tmp[i5413] == FAIL ) {
            if(!( !next_prev5414.empty() && next_prev5414[0] == FAIL )) {
              next_prev5414.push_front(FAIL);
            }
          } else {
            next_prev5414.push_back(tmp[i5413]);
          }
        }
      }
      prev = next_prev5414;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5405=0;i5405<(int)prev.size();++i5405) {
    if( prev[i5405] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5405]);
    }
  }
  return memo[key(748,backtracking_ptr_for_packrat748)] = result;
}

inline deque<int> parse_not5408() { 
  if(memo.count(key(749,i))) {
    return memo[key(749,i)];
  }
  int backtracking_ptr_for_packrat749=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i5410=0;i5410<(int)prev.size();++i5410) {
    if( prev[i5410] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i5410]<m&&(I[prev[i5410]]=='='||I[prev[i5410]]=='>')) {
      tmp.push_back(prev[i5410]+1);
    } else {
      if(!( !tmp.empty() && tmp.front() == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i5409=0;i5409<(int)prev.size();++i5409) {
    if( prev[i5409] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5409]);
    }
  }
  return memo[key(749,backtracking_ptr_for_packrat749)] = result;
}

inline deque<int> parse_slash5416() { 
  if(memo.count(key(750,i))) {
    return memo[key(750,i)];
  }
  int backtracking_ptr_for_packrat750=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5418=0;i5418<(int)prev.size();++i5418) {
        if( prev[i5418] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5418]<m&&I[prev[i5418]]=='>') {
          tmp.push_back(prev[i5418]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5419=0;i5419<(int)prev.size();++i5419) {
        if( prev[i5419] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5419]<m&&I[prev[i5419]]=='>') {
          tmp.push_back(prev[i5419]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5420=0;i5420<(int)prev.size();++i5420) {
        if( prev[i5420] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5420]<m&&I[prev[i5420]]=='>') {
          tmp.push_back(prev[i5420]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5425;
      for(int i5424=0;i5424<(int)prev.size();++i5424) {
        i = prev[i5424];
        tmp = parse_not5421();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5425.push_back(prev[i5424]);
        } else {
          if(!(!next_prev5425.empty()&&next_prev5425.front()==FAIL)) {
            next_prev5425.push_front(FAIL);
          }
        }
      }
      prev = next_prev5425;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5427;
      for(int i5426=0;i5426<(int)prev.size();++i5426) {
        if( prev[i5426] == FAIL ) {
          if(!(!next_prev5427.empty() && next_prev5427.front() == FAIL )) {
            next_prev5427.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5426];
        tmp = parse__();
        
        for(int i5426=0;i5426<(int)tmp.size();++i5426) {
          if( tmp[i5426] == FAIL ) {
            if(!( !next_prev5427.empty() && next_prev5427[0] == FAIL )) {
              next_prev5427.push_front(FAIL);
            }
          } else {
            next_prev5427.push_back(tmp[i5426]);
          }
        }
      }
      prev = next_prev5427;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5417=0;i5417<(int)prev.size();++i5417) {
    if( prev[i5417] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5417]);
    }
  }
  return memo[key(750,backtracking_ptr_for_packrat750)] = result;
}

inline deque<int> parse_not5421() { 
  if(memo.count(key(751,i))) {
    return memo[key(751,i)];
  }
  int backtracking_ptr_for_packrat751=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i5423=0;i5423<(int)prev.size();++i5423) {
    if( prev[i5423] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i5423]<m&&I[prev[i5423]]=='=') {
      tmp.push_back(prev[i5423]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i5422=0;i5422<(int)prev.size();++i5422) {
    if( prev[i5422] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5422]);
    }
  }
  return memo[key(751,backtracking_ptr_for_packrat751)] = result;
}

deque<int> parse_AdditiveExpression(){
  if(memo.count(key(752,i))) {
    return memo[key(752,i)];
  }
  int backtracking_ptr_for_packrat752=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (MultiplicativeExpression) */
    deque<int> next_prev5437;
    for(int i5436=0;i5436<(int)prev.size();++i5436) {
      if( prev[i5436] == FAIL ) {
        if(!(!next_prev5437.empty() && next_prev5437.front() == FAIL )) {
          next_prev5437.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5436];
      tmp = parse_MultiplicativeExpression();
      
      for(int i5436=0;i5436<(int)tmp.size();++i5436) {
        if( tmp[i5436] == FAIL ) {
          if(!( !next_prev5437.empty() && next_prev5437[0] == FAIL )) {
            next_prev5437.push_front(FAIL);
          }
        } else {
          next_prev5437.push_back(tmp[i5436]);
        }
      }
    }
    prev = next_prev5437;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev5477;
    deque<int> star_final_prev5478;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev5477.clear();
      for(int i5479=0;i5479<(int)prev.size();++i5479) {
        i = prev[i5479];
        tmp = parse_while5438();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev5478.push_back(prev[i5479]);
        }
        for(int i5480=0;i5480<(int)tmp.size();++i5480) {
          if(tmp[i5480]==FAIL) {
            if(!( !next_prev5477.empty() && next_prev5477.front() == FAIL )) {
              next_prev5477.push_front(FAIL);
            }
          } else {
            next_prev5477.push_back(tmp[i5480]);
          }
        }
      }
      prev = next_prev5477;
    }
    prev = star_final_prev5478;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5435=0;i5435<(int)prev.size();++i5435) {
    if( prev[i5435] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5435]);
    }
  }
  return memo[key(752,backtracking_ptr_for_packrat752)] = result;
}

inline deque<int> parse_while5438() { 
  if(memo.count(key(753,i))) {
    return memo[key(753,i)];
  }
  int backtracking_ptr_for_packrat753=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev5441;
    deque<int> prioritized_choice_final_prev5442;
    next_prev5441.clear();
    for(int i5440=0;i5440<(int)prev.size();++i5440) {
      i = prev[i5440];
      tmp = parse_slash5443();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5441.push_back(prev[i5440]); }
      for(int i5453=0;i5453<(int)tmp.size();++i5453) {
        if( tmp[i5453] != FAIL ) {
          prioritized_choice_final_prev5442.push_back(tmp[i5453]);
        }
      }
    }
    prev = next_prev5441;
    next_prev5441.clear();
    for(int i5440=0;i5440<(int)prev.size();++i5440) {
      i = prev[i5440];
      tmp = parse_slash5454();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5441.push_back(prev[i5440]); }
      for(int i5474=0;i5474<(int)tmp.size();++i5474) {
        if( tmp[i5474] != FAIL ) {
          prioritized_choice_final_prev5442.push_back(tmp[i5474]);
        }
      }
    }
    prev = next_prev5441;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev5442.empty() && prioritized_choice_final_prev5442.front() == FAIL )) {
        prioritized_choice_final_prev5442.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev5442;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (MultiplicativeExpression) */
    deque<int> next_prev5476;
    for(int i5475=0;i5475<(int)prev.size();++i5475) {
      if( prev[i5475] == FAIL ) {
        if(!(!next_prev5476.empty() && next_prev5476.front() == FAIL )) {
          next_prev5476.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5475];
      tmp = parse_MultiplicativeExpression();
      
      for(int i5475=0;i5475<(int)tmp.size();++i5475) {
        if( tmp[i5475] == FAIL ) {
          if(!( !next_prev5476.empty() && next_prev5476[0] == FAIL )) {
            next_prev5476.push_front(FAIL);
          }
        } else {
          next_prev5476.push_back(tmp[i5475]);
        }
      }
    }
    prev = next_prev5476;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5439=0;i5439<(int)prev.size();++i5439) {
    if( prev[i5439] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5439]);
    }
  }
  return memo[key(753,backtracking_ptr_for_packrat753)] = result;
}

inline deque<int> parse_slash5443() { 
  if(memo.count(key(754,i))) {
    return memo[key(754,i)];
  }
  int backtracking_ptr_for_packrat754=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5445=0;i5445<(int)prev.size();++i5445) {
        if( prev[i5445] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5445]<m&&I[prev[i5445]]=='+') {
          tmp.push_back(prev[i5445]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5450;
      for(int i5449=0;i5449<(int)prev.size();++i5449) {
        i = prev[i5449];
        tmp = parse_not5446();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5450.push_back(prev[i5449]);
        } else {
          if(!(!next_prev5450.empty()&&next_prev5450.front()==FAIL)) {
            next_prev5450.push_front(FAIL);
          }
        }
      }
      prev = next_prev5450;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5452;
      for(int i5451=0;i5451<(int)prev.size();++i5451) {
        if( prev[i5451] == FAIL ) {
          if(!(!next_prev5452.empty() && next_prev5452.front() == FAIL )) {
            next_prev5452.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5451];
        tmp = parse__();
        
        for(int i5451=0;i5451<(int)tmp.size();++i5451) {
          if( tmp[i5451] == FAIL ) {
            if(!( !next_prev5452.empty() && next_prev5452[0] == FAIL )) {
              next_prev5452.push_front(FAIL);
            }
          } else {
            next_prev5452.push_back(tmp[i5451]);
          }
        }
      }
      prev = next_prev5452;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5444=0;i5444<(int)prev.size();++i5444) {
    if( prev[i5444] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5444]);
    }
  }
  return memo[key(754,backtracking_ptr_for_packrat754)] = result;
}

inline deque<int> parse_not5446() { 
  if(memo.count(key(755,i))) {
    return memo[key(755,i)];
  }
  int backtracking_ptr_for_packrat755=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i5448=0;i5448<(int)prev.size();++i5448) {
    if( prev[i5448] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i5448]<m&&(I[prev[i5448]]=='+'||I[prev[i5448]]=='=')) {
      tmp.push_back(prev[i5448]+1);
    } else {
      if(!( !tmp.empty() && tmp.front() == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i5447=0;i5447<(int)prev.size();++i5447) {
    if( prev[i5447] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5447]);
    }
  }
  return memo[key(755,backtracking_ptr_for_packrat755)] = result;
}

inline deque<int> parse_slash5454() { 
  if(memo.count(key(756,i))) {
    return memo[key(756,i)];
  }
  int backtracking_ptr_for_packrat756=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5456=0;i5456<(int)prev.size();++i5456) {
        if( prev[i5456] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5456]<m&&I[prev[i5456]]=='-') {
          tmp.push_back(prev[i5456]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5471;
      for(int i5470=0;i5470<(int)prev.size();++i5470) {
        i = prev[i5470];
        tmp = parse_not5457();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5471.push_back(prev[i5470]);
        } else {
          if(!(!next_prev5471.empty()&&next_prev5471.front()==FAIL)) {
            next_prev5471.push_front(FAIL);
          }
        }
      }
      prev = next_prev5471;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5473;
      for(int i5472=0;i5472<(int)prev.size();++i5472) {
        if( prev[i5472] == FAIL ) {
          if(!(!next_prev5473.empty() && next_prev5473.front() == FAIL )) {
            next_prev5473.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5472];
        tmp = parse__();
        
        for(int i5472=0;i5472<(int)tmp.size();++i5472) {
          if( tmp[i5472] == FAIL ) {
            if(!( !next_prev5473.empty() && next_prev5473[0] == FAIL )) {
              next_prev5473.push_front(FAIL);
            }
          } else {
            next_prev5473.push_back(tmp[i5472]);
          }
        }
      }
      prev = next_prev5473;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5455=0;i5455<(int)prev.size();++i5455) {
    if( prev[i5455] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5455]);
    }
  }
  return memo[key(756,backtracking_ptr_for_packrat756)] = result;
}

inline deque<int> parse_not5457() { 
  if(memo.count(key(757,i))) {
    return memo[key(757,i)];
  }
  int backtracking_ptr_for_packrat757=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev5460;
  deque<int> prioritized_choice_final_prev5461;
  next_prev5460.clear();
  for(int i5459=0;i5459<(int)prev.size();++i5459) {
    i = prev[i5459];
    tmp = parse_slash5462();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5460.push_back(prev[i5459]); }
    for(int i5465=0;i5465<(int)tmp.size();++i5465) {
      if( tmp[i5465] != FAIL ) {
        prioritized_choice_final_prev5461.push_back(tmp[i5465]);
      }
    }
  }
  prev = next_prev5460;
  next_prev5460.clear();
  for(int i5459=0;i5459<(int)prev.size();++i5459) {
    i = prev[i5459];
    tmp = parse_slash5466();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5460.push_back(prev[i5459]); }
    for(int i5469=0;i5469<(int)tmp.size();++i5469) {
      if( tmp[i5469] != FAIL ) {
        prioritized_choice_final_prev5461.push_back(tmp[i5469]);
      }
    }
  }
  prev = next_prev5460;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev5461.empty() && prioritized_choice_final_prev5461.front() == FAIL )) {
      prioritized_choice_final_prev5461.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev5461;
  for(int i5458=0;i5458<(int)prev.size();++i5458) {
    if( prev[i5458] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5458]);
    }
  }
  return memo[key(757,backtracking_ptr_for_packrat757)] = result;
}

inline deque<int> parse_slash5462() { 
  if(memo.count(key(758,i))) {
    return memo[key(758,i)];
  }
  int backtracking_ptr_for_packrat758=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i5464=0;i5464<(int)prev.size();++i5464) {
      if( prev[i5464] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i5464]<m&&I[prev[i5464]]=='-') {
        tmp.push_back(prev[i5464]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5463=0;i5463<(int)prev.size();++i5463) {
    if( prev[i5463] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5463]);
    }
  }
  return memo[key(758,backtracking_ptr_for_packrat758)] = result;
}

inline deque<int> parse_slash5466() { 
  if(memo.count(key(759,i))) {
    return memo[key(759,i)];
  }
  int backtracking_ptr_for_packrat759=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i5468=0;i5468<(int)prev.size();++i5468) {
      if( prev[i5468] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i5468]<m&&(I[prev[i5468]]=='='||I[prev[i5468]]=='>')) {
        tmp.push_back(prev[i5468]+1);
      } else {
        if(!( !tmp.empty() && tmp.front() == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5467=0;i5467<(int)prev.size();++i5467) {
    if( prev[i5467] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5467]);
    }
  }
  return memo[key(759,backtracking_ptr_for_packrat759)] = result;
}

deque<int> parse_MultiplicativeExpression(){
  if(memo.count(key(760,i))) {
    return memo[key(760,i)];
  }
  int backtracking_ptr_for_packrat760=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (CastNewExpression) */
    deque<int> next_prev5483;
    for(int i5482=0;i5482<(int)prev.size();++i5482) {
      if( prev[i5482] == FAIL ) {
        if(!(!next_prev5483.empty() && next_prev5483.front() == FAIL )) {
          next_prev5483.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5482];
      tmp = parse_CastNewExpression();
      
      for(int i5482=0;i5482<(int)tmp.size();++i5482) {
        if( tmp[i5482] == FAIL ) {
          if(!( !next_prev5483.empty() && next_prev5483[0] == FAIL )) {
            next_prev5483.push_front(FAIL);
          }
        } else {
          next_prev5483.push_back(tmp[i5482]);
        }
      }
    }
    prev = next_prev5483;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev5524;
    deque<int> star_final_prev5525;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev5524.clear();
      for(int i5526=0;i5526<(int)prev.size();++i5526) {
        i = prev[i5526];
        tmp = parse_while5484();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev5525.push_back(prev[i5526]);
        }
        for(int i5527=0;i5527<(int)tmp.size();++i5527) {
          if(tmp[i5527]==FAIL) {
            if(!( !next_prev5524.empty() && next_prev5524.front() == FAIL )) {
              next_prev5524.push_front(FAIL);
            }
          } else {
            next_prev5524.push_back(tmp[i5527]);
          }
        }
      }
      prev = next_prev5524;
    }
    prev = star_final_prev5525;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5481=0;i5481<(int)prev.size();++i5481) {
    if( prev[i5481] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5481]);
    }
  }
  return memo[key(760,backtracking_ptr_for_packrat760)] = result;
}

inline deque<int> parse_while5484() { 
  if(memo.count(key(761,i))) {
    return memo[key(761,i)];
  }
  int backtracking_ptr_for_packrat761=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev5487;
    deque<int> prioritized_choice_final_prev5488;
    next_prev5487.clear();
    for(int i5486=0;i5486<(int)prev.size();++i5486) {
      i = prev[i5486];
      tmp = parse_slash5489();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5487.push_back(prev[i5486]); }
      for(int i5499=0;i5499<(int)tmp.size();++i5499) {
        if( tmp[i5499] != FAIL ) {
          prioritized_choice_final_prev5488.push_back(tmp[i5499]);
        }
      }
    }
    prev = next_prev5487;
    next_prev5487.clear();
    for(int i5486=0;i5486<(int)prev.size();++i5486) {
      i = prev[i5486];
      tmp = parse_slash5500();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5487.push_back(prev[i5486]); }
      for(int i5510=0;i5510<(int)tmp.size();++i5510) {
        if( tmp[i5510] != FAIL ) {
          prioritized_choice_final_prev5488.push_back(tmp[i5510]);
        }
      }
    }
    prev = next_prev5487;
    next_prev5487.clear();
    for(int i5486=0;i5486<(int)prev.size();++i5486) {
      i = prev[i5486];
      tmp = parse_slash5511();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5487.push_back(prev[i5486]); }
      for(int i5521=0;i5521<(int)tmp.size();++i5521) {
        if( tmp[i5521] != FAIL ) {
          prioritized_choice_final_prev5488.push_back(tmp[i5521]);
        }
      }
    }
    prev = next_prev5487;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev5488.empty() && prioritized_choice_final_prev5488.front() == FAIL )) {
        prioritized_choice_final_prev5488.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev5488;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (CastNewExpression) */
    deque<int> next_prev5523;
    for(int i5522=0;i5522<(int)prev.size();++i5522) {
      if( prev[i5522] == FAIL ) {
        if(!(!next_prev5523.empty() && next_prev5523.front() == FAIL )) {
          next_prev5523.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5522];
      tmp = parse_CastNewExpression();
      
      for(int i5522=0;i5522<(int)tmp.size();++i5522) {
        if( tmp[i5522] == FAIL ) {
          if(!( !next_prev5523.empty() && next_prev5523[0] == FAIL )) {
            next_prev5523.push_front(FAIL);
          }
        } else {
          next_prev5523.push_back(tmp[i5522]);
        }
      }
    }
    prev = next_prev5523;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5485=0;i5485<(int)prev.size();++i5485) {
    if( prev[i5485] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5485]);
    }
  }
  return memo[key(761,backtracking_ptr_for_packrat761)] = result;
}

inline deque<int> parse_slash5489() { 
  if(memo.count(key(762,i))) {
    return memo[key(762,i)];
  }
  int backtracking_ptr_for_packrat762=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5491=0;i5491<(int)prev.size();++i5491) {
        if( prev[i5491] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5491]<m&&I[prev[i5491]]=='*') {
          tmp.push_back(prev[i5491]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5496;
      for(int i5495=0;i5495<(int)prev.size();++i5495) {
        i = prev[i5495];
        tmp = parse_not5492();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5496.push_back(prev[i5495]);
        } else {
          if(!(!next_prev5496.empty()&&next_prev5496.front()==FAIL)) {
            next_prev5496.push_front(FAIL);
          }
        }
      }
      prev = next_prev5496;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5498;
      for(int i5497=0;i5497<(int)prev.size();++i5497) {
        if( prev[i5497] == FAIL ) {
          if(!(!next_prev5498.empty() && next_prev5498.front() == FAIL )) {
            next_prev5498.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5497];
        tmp = parse__();
        
        for(int i5497=0;i5497<(int)tmp.size();++i5497) {
          if( tmp[i5497] == FAIL ) {
            if(!( !next_prev5498.empty() && next_prev5498[0] == FAIL )) {
              next_prev5498.push_front(FAIL);
            }
          } else {
            next_prev5498.push_back(tmp[i5497]);
          }
        }
      }
      prev = next_prev5498;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5490=0;i5490<(int)prev.size();++i5490) {
    if( prev[i5490] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5490]);
    }
  }
  return memo[key(762,backtracking_ptr_for_packrat762)] = result;
}

inline deque<int> parse_not5492() { 
  if(memo.count(key(763,i))) {
    return memo[key(763,i)];
  }
  int backtracking_ptr_for_packrat763=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i5494=0;i5494<(int)prev.size();++i5494) {
    if( prev[i5494] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i5494]<m&&I[prev[i5494]]=='=') {
      tmp.push_back(prev[i5494]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i5493=0;i5493<(int)prev.size();++i5493) {
    if( prev[i5493] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5493]);
    }
  }
  return memo[key(763,backtracking_ptr_for_packrat763)] = result;
}

inline deque<int> parse_slash5500() { 
  if(memo.count(key(764,i))) {
    return memo[key(764,i)];
  }
  int backtracking_ptr_for_packrat764=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5502=0;i5502<(int)prev.size();++i5502) {
        if( prev[i5502] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5502]<m&&I[prev[i5502]]=='/') {
          tmp.push_back(prev[i5502]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5507;
      for(int i5506=0;i5506<(int)prev.size();++i5506) {
        i = prev[i5506];
        tmp = parse_not5503();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5507.push_back(prev[i5506]);
        } else {
          if(!(!next_prev5507.empty()&&next_prev5507.front()==FAIL)) {
            next_prev5507.push_front(FAIL);
          }
        }
      }
      prev = next_prev5507;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5509;
      for(int i5508=0;i5508<(int)prev.size();++i5508) {
        if( prev[i5508] == FAIL ) {
          if(!(!next_prev5509.empty() && next_prev5509.front() == FAIL )) {
            next_prev5509.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5508];
        tmp = parse__();
        
        for(int i5508=0;i5508<(int)tmp.size();++i5508) {
          if( tmp[i5508] == FAIL ) {
            if(!( !next_prev5509.empty() && next_prev5509[0] == FAIL )) {
              next_prev5509.push_front(FAIL);
            }
          } else {
            next_prev5509.push_back(tmp[i5508]);
          }
        }
      }
      prev = next_prev5509;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5501=0;i5501<(int)prev.size();++i5501) {
    if( prev[i5501] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5501]);
    }
  }
  return memo[key(764,backtracking_ptr_for_packrat764)] = result;
}

inline deque<int> parse_not5503() { 
  if(memo.count(key(765,i))) {
    return memo[key(765,i)];
  }
  int backtracking_ptr_for_packrat765=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i5505=0;i5505<(int)prev.size();++i5505) {
    if( prev[i5505] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i5505]<m&&I[prev[i5505]]=='=') {
      tmp.push_back(prev[i5505]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i5504=0;i5504<(int)prev.size();++i5504) {
    if( prev[i5504] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5504]);
    }
  }
  return memo[key(765,backtracking_ptr_for_packrat765)] = result;
}

inline deque<int> parse_slash5511() { 
  if(memo.count(key(766,i))) {
    return memo[key(766,i)];
  }
  int backtracking_ptr_for_packrat766=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5513=0;i5513<(int)prev.size();++i5513) {
        if( prev[i5513] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5513]<m&&I[prev[i5513]]=='%') {
          tmp.push_back(prev[i5513]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5518;
      for(int i5517=0;i5517<(int)prev.size();++i5517) {
        i = prev[i5517];
        tmp = parse_not5514();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5518.push_back(prev[i5517]);
        } else {
          if(!(!next_prev5518.empty()&&next_prev5518.front()==FAIL)) {
            next_prev5518.push_front(FAIL);
          }
        }
      }
      prev = next_prev5518;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5520;
      for(int i5519=0;i5519<(int)prev.size();++i5519) {
        if( prev[i5519] == FAIL ) {
          if(!(!next_prev5520.empty() && next_prev5520.front() == FAIL )) {
            next_prev5520.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5519];
        tmp = parse__();
        
        for(int i5519=0;i5519<(int)tmp.size();++i5519) {
          if( tmp[i5519] == FAIL ) {
            if(!( !next_prev5520.empty() && next_prev5520[0] == FAIL )) {
              next_prev5520.push_front(FAIL);
            }
          } else {
            next_prev5520.push_back(tmp[i5519]);
          }
        }
      }
      prev = next_prev5520;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5512=0;i5512<(int)prev.size();++i5512) {
    if( prev[i5512] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5512]);
    }
  }
  return memo[key(766,backtracking_ptr_for_packrat766)] = result;
}

inline deque<int> parse_not5514() { 
  if(memo.count(key(767,i))) {
    return memo[key(767,i)];
  }
  int backtracking_ptr_for_packrat767=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i5516=0;i5516<(int)prev.size();++i5516) {
    if( prev[i5516] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i5516]<m&&(I[prev[i5516]]=='='||I[prev[i5516]]=='>')) {
      tmp.push_back(prev[i5516]+1);
    } else {
      if(!( !tmp.empty() && tmp.front() == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i5515=0;i5515<(int)prev.size();++i5515) {
    if( prev[i5515] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5515]);
    }
  }
  return memo[key(767,backtracking_ptr_for_packrat767)] = result;
}

deque<int> parse_CastNewExpression(){
  if(memo.count(key(768,i))) {
    return memo[key(768,i)];
  }
  int backtracking_ptr_for_packrat768=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev5530;
  deque<int> prioritized_choice_final_prev5531;
  next_prev5530.clear();
  for(int i5529=0;i5529<(int)prev.size();++i5529) {
    i = prev[i5529];
    tmp = parse_slash5532();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5530.push_back(prev[i5529]); }
    for(int i5544=0;i5544<(int)tmp.size();++i5544) {
      if( tmp[i5544] != FAIL ) {
        prioritized_choice_final_prev5531.push_back(tmp[i5544]);
      }
    }
  }
  prev = next_prev5530;
  next_prev5530.clear();
  for(int i5529=0;i5529<(int)prev.size();++i5529) {
    i = prev[i5529];
    tmp = parse_slash5545();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5530.push_back(prev[i5529]); }
    for(int i5549=0;i5549<(int)tmp.size();++i5549) {
      if( tmp[i5549] != FAIL ) {
        prioritized_choice_final_prev5531.push_back(tmp[i5549]);
      }
    }
  }
  prev = next_prev5530;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev5531.empty() && prioritized_choice_final_prev5531.front() == FAIL )) {
      prioritized_choice_final_prev5531.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev5531;
  for(int i5528=0;i5528<(int)prev.size();++i5528) {
    if( prev[i5528] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5528]);
    }
  }
  return memo[key(768,backtracking_ptr_for_packrat768)] = result;
}

inline deque<int> parse_slash5532() { 
  if(memo.count(key(769,i))) {
    return memo[key(769,i)];
  }
  int backtracking_ptr_for_packrat769=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5534=0;i5534<(int)prev.size();++i5534) {
        if( prev[i5534] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5534]<m&&I[prev[i5534]]=='(') {
          tmp.push_back(prev[i5534]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5536;
      for(int i5535=0;i5535<(int)prev.size();++i5535) {
        if( prev[i5535] == FAIL ) {
          if(!(!next_prev5536.empty() && next_prev5536.front() == FAIL )) {
            next_prev5536.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5535];
        tmp = parse__();
        
        for(int i5535=0;i5535<(int)tmp.size();++i5535) {
          if( tmp[i5535] == FAIL ) {
            if(!( !next_prev5536.empty() && next_prev5536[0] == FAIL )) {
              next_prev5536.push_front(FAIL);
            }
          } else {
            next_prev5536.push_back(tmp[i5535]);
          }
        }
      }
      prev = next_prev5536;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Type) */
    deque<int> next_prev5538;
    for(int i5537=0;i5537<(int)prev.size();++i5537) {
      if( prev[i5537] == FAIL ) {
        if(!(!next_prev5538.empty() && next_prev5538.front() == FAIL )) {
          next_prev5538.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5537];
      tmp = parse_Type();
      
      for(int i5537=0;i5537<(int)tmp.size();++i5537) {
        if( tmp[i5537] == FAIL ) {
          if(!( !next_prev5538.empty() && next_prev5538[0] == FAIL )) {
            next_prev5538.push_front(FAIL);
          }
        } else {
          next_prev5538.push_back(tmp[i5537]);
        }
      }
    }
    prev = next_prev5538;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5539=0;i5539<(int)prev.size();++i5539) {
        if( prev[i5539] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5539]<m&&I[prev[i5539]]==')') {
          tmp.push_back(prev[i5539]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5541;
      for(int i5540=0;i5540<(int)prev.size();++i5540) {
        if( prev[i5540] == FAIL ) {
          if(!(!next_prev5541.empty() && next_prev5541.front() == FAIL )) {
            next_prev5541.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5540];
        tmp = parse__();
        
        for(int i5540=0;i5540<(int)tmp.size();++i5540) {
          if( tmp[i5540] == FAIL ) {
            if(!( !next_prev5541.empty() && next_prev5541[0] == FAIL )) {
              next_prev5541.push_front(FAIL);
            }
          } else {
            next_prev5541.push_back(tmp[i5540]);
          }
        }
      }
      prev = next_prev5541;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (CastNewExpression) */
    deque<int> next_prev5543;
    for(int i5542=0;i5542<(int)prev.size();++i5542) {
      if( prev[i5542] == FAIL ) {
        if(!(!next_prev5543.empty() && next_prev5543.front() == FAIL )) {
          next_prev5543.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5542];
      tmp = parse_CastNewExpression();
      
      for(int i5542=0;i5542<(int)tmp.size();++i5542) {
        if( tmp[i5542] == FAIL ) {
          if(!( !next_prev5543.empty() && next_prev5543[0] == FAIL )) {
            next_prev5543.push_front(FAIL);
          }
        } else {
          next_prev5543.push_back(tmp[i5542]);
        }
      }
    }
    prev = next_prev5543;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5533=0;i5533<(int)prev.size();++i5533) {
    if( prev[i5533] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5533]);
    }
  }
  return memo[key(769,backtracking_ptr_for_packrat769)] = result;
}

inline deque<int> parse_slash5545() { 
  if(memo.count(key(770,i))) {
    return memo[key(770,i)];
  }
  int backtracking_ptr_for_packrat770=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (UnaryExpression) */
    deque<int> next_prev5548;
    for(int i5547=0;i5547<(int)prev.size();++i5547) {
      if( prev[i5547] == FAIL ) {
        if(!(!next_prev5548.empty() && next_prev5548.front() == FAIL )) {
          next_prev5548.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5547];
      tmp = parse_UnaryExpression();
      
      for(int i5547=0;i5547<(int)tmp.size();++i5547) {
        if( tmp[i5547] == FAIL ) {
          if(!( !next_prev5548.empty() && next_prev5548[0] == FAIL )) {
            next_prev5548.push_front(FAIL);
          }
        } else {
          next_prev5548.push_back(tmp[i5547]);
        }
      }
    }
    prev = next_prev5548;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5546=0;i5546<(int)prev.size();++i5546) {
    if( prev[i5546] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5546]);
    }
  }
  return memo[key(770,backtracking_ptr_for_packrat770)] = result;
}

deque<int> parse_UnaryExpression(){
  if(memo.count(key(771,i))) {
    return memo[key(771,i)];
  }
  int backtracking_ptr_for_packrat771=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev5552;
  deque<int> prioritized_choice_final_prev5553;
  next_prev5552.clear();
  for(int i5551=0;i5551<(int)prev.size();++i5551) {
    i = prev[i5551];
    tmp = parse_slash5554();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5552.push_back(prev[i5551]); }
    for(int i5558=0;i5558<(int)tmp.size();++i5558) {
      if( tmp[i5558] != FAIL ) {
        prioritized_choice_final_prev5553.push_back(tmp[i5558]);
      }
    }
  }
  prev = next_prev5552;
  next_prev5552.clear();
  for(int i5551=0;i5551<(int)prev.size();++i5551) {
    i = prev[i5551];
    tmp = parse_slash5559();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5552.push_back(prev[i5551]); }
    for(int i5567=0;i5567<(int)tmp.size();++i5567) {
      if( tmp[i5567] != FAIL ) {
        prioritized_choice_final_prev5553.push_back(tmp[i5567]);
      }
    }
  }
  prev = next_prev5552;
  next_prev5552.clear();
  for(int i5551=0;i5551<(int)prev.size();++i5551) {
    i = prev[i5551];
    tmp = parse_slash5568();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5552.push_back(prev[i5551]); }
    for(int i5576=0;i5576<(int)tmp.size();++i5576) {
      if( tmp[i5576] != FAIL ) {
        prioritized_choice_final_prev5553.push_back(tmp[i5576]);
      }
    }
  }
  prev = next_prev5552;
  next_prev5552.clear();
  for(int i5551=0;i5551<(int)prev.size();++i5551) {
    i = prev[i5551];
    tmp = parse_slash5577();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5552.push_back(prev[i5551]); }
    for(int i5589=0;i5589<(int)tmp.size();++i5589) {
      if( tmp[i5589] != FAIL ) {
        prioritized_choice_final_prev5553.push_back(tmp[i5589]);
      }
    }
  }
  prev = next_prev5552;
  next_prev5552.clear();
  for(int i5551=0;i5551<(int)prev.size();++i5551) {
    i = prev[i5551];
    tmp = parse_slash5590();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5552.push_back(prev[i5551]); }
    for(int i5612=0;i5612<(int)tmp.size();++i5612) {
      if( tmp[i5612] != FAIL ) {
        prioritized_choice_final_prev5553.push_back(tmp[i5612]);
      }
    }
  }
  prev = next_prev5552;
  next_prev5552.clear();
  for(int i5551=0;i5551<(int)prev.size();++i5551) {
    i = prev[i5551];
    tmp = parse_slash5613();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5552.push_back(prev[i5551]); }
    for(int i5620=0;i5620<(int)tmp.size();++i5620) {
      if( tmp[i5620] != FAIL ) {
        prioritized_choice_final_prev5553.push_back(tmp[i5620]);
      }
    }
  }
  prev = next_prev5552;
  next_prev5552.clear();
  for(int i5551=0;i5551<(int)prev.size();++i5551) {
    i = prev[i5551];
    tmp = parse_slash5621();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5552.push_back(prev[i5551]); }
    for(int i5633=0;i5633<(int)tmp.size();++i5633) {
      if( tmp[i5633] != FAIL ) {
        prioritized_choice_final_prev5553.push_back(tmp[i5633]);
      }
    }
  }
  prev = next_prev5552;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev5553.empty() && prioritized_choice_final_prev5553.front() == FAIL )) {
      prioritized_choice_final_prev5553.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev5553;
  for(int i5550=0;i5550<(int)prev.size();++i5550) {
    if( prev[i5550] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5550]);
    }
  }
  return memo[key(771,backtracking_ptr_for_packrat771)] = result;
}

inline deque<int> parse_slash5554() { 
  if(memo.count(key(772,i))) {
    return memo[key(772,i)];
  }
  int backtracking_ptr_for_packrat772=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (PostfixExpression) */
    deque<int> next_prev5557;
    for(int i5556=0;i5556<(int)prev.size();++i5556) {
      if( prev[i5556] == FAIL ) {
        if(!(!next_prev5557.empty() && next_prev5557.front() == FAIL )) {
          next_prev5557.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5556];
      tmp = parse_PostfixExpression();
      
      for(int i5556=0;i5556<(int)tmp.size();++i5556) {
        if( tmp[i5556] == FAIL ) {
          if(!( !next_prev5557.empty() && next_prev5557[0] == FAIL )) {
            next_prev5557.push_front(FAIL);
          }
        } else {
          next_prev5557.push_back(tmp[i5556]);
        }
      }
    }
    prev = next_prev5557;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5555=0;i5555<(int)prev.size();++i5555) {
    if( prev[i5555] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5555]);
    }
  }
  return memo[key(772,backtracking_ptr_for_packrat772)] = result;
}

inline deque<int> parse_slash5559() { 
  if(memo.count(key(773,i))) {
    return memo[key(773,i)];
  }
  int backtracking_ptr_for_packrat773=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5561=0;i5561<(int)prev.size();++i5561) {
        if( prev[i5561] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5561]<m&&I[prev[i5561]]=='+') {
          tmp.push_back(prev[i5561]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5562=0;i5562<(int)prev.size();++i5562) {
        if( prev[i5562] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5562]<m&&I[prev[i5562]]=='+') {
          tmp.push_back(prev[i5562]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5564;
      for(int i5563=0;i5563<(int)prev.size();++i5563) {
        if( prev[i5563] == FAIL ) {
          if(!(!next_prev5564.empty() && next_prev5564.front() == FAIL )) {
            next_prev5564.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5563];
        tmp = parse__();
        
        for(int i5563=0;i5563<(int)tmp.size();++i5563) {
          if( tmp[i5563] == FAIL ) {
            if(!( !next_prev5564.empty() && next_prev5564[0] == FAIL )) {
              next_prev5564.push_front(FAIL);
            }
          } else {
            next_prev5564.push_back(tmp[i5563]);
          }
        }
      }
      prev = next_prev5564;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (UnaryExpression) */
    deque<int> next_prev5566;
    for(int i5565=0;i5565<(int)prev.size();++i5565) {
      if( prev[i5565] == FAIL ) {
        if(!(!next_prev5566.empty() && next_prev5566.front() == FAIL )) {
          next_prev5566.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5565];
      tmp = parse_UnaryExpression();
      
      for(int i5565=0;i5565<(int)tmp.size();++i5565) {
        if( tmp[i5565] == FAIL ) {
          if(!( !next_prev5566.empty() && next_prev5566[0] == FAIL )) {
            next_prev5566.push_front(FAIL);
          }
        } else {
          next_prev5566.push_back(tmp[i5565]);
        }
      }
    }
    prev = next_prev5566;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5560=0;i5560<(int)prev.size();++i5560) {
    if( prev[i5560] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5560]);
    }
  }
  return memo[key(773,backtracking_ptr_for_packrat773)] = result;
}

inline deque<int> parse_slash5568() { 
  if(memo.count(key(774,i))) {
    return memo[key(774,i)];
  }
  int backtracking_ptr_for_packrat774=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5570=0;i5570<(int)prev.size();++i5570) {
        if( prev[i5570] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5570]<m&&I[prev[i5570]]=='-') {
          tmp.push_back(prev[i5570]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5571=0;i5571<(int)prev.size();++i5571) {
        if( prev[i5571] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5571]<m&&I[prev[i5571]]=='-') {
          tmp.push_back(prev[i5571]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5573;
      for(int i5572=0;i5572<(int)prev.size();++i5572) {
        if( prev[i5572] == FAIL ) {
          if(!(!next_prev5573.empty() && next_prev5573.front() == FAIL )) {
            next_prev5573.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5572];
        tmp = parse__();
        
        for(int i5572=0;i5572<(int)tmp.size();++i5572) {
          if( tmp[i5572] == FAIL ) {
            if(!( !next_prev5573.empty() && next_prev5573[0] == FAIL )) {
              next_prev5573.push_front(FAIL);
            }
          } else {
            next_prev5573.push_back(tmp[i5572]);
          }
        }
      }
      prev = next_prev5573;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (UnaryExpression) */
    deque<int> next_prev5575;
    for(int i5574=0;i5574<(int)prev.size();++i5574) {
      if( prev[i5574] == FAIL ) {
        if(!(!next_prev5575.empty() && next_prev5575.front() == FAIL )) {
          next_prev5575.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5574];
      tmp = parse_UnaryExpression();
      
      for(int i5574=0;i5574<(int)tmp.size();++i5574) {
        if( tmp[i5574] == FAIL ) {
          if(!( !next_prev5575.empty() && next_prev5575[0] == FAIL )) {
            next_prev5575.push_front(FAIL);
          }
        } else {
          next_prev5575.push_back(tmp[i5574]);
        }
      }
    }
    prev = next_prev5575;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5569=0;i5569<(int)prev.size();++i5569) {
    if( prev[i5569] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5569]);
    }
  }
  return memo[key(774,backtracking_ptr_for_packrat774)] = result;
}

inline deque<int> parse_slash5577() { 
  if(memo.count(key(775,i))) {
    return memo[key(775,i)];
  }
  int backtracking_ptr_for_packrat775=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5579=0;i5579<(int)prev.size();++i5579) {
        if( prev[i5579] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5579]<m&&I[prev[i5579]]=='+') {
          tmp.push_back(prev[i5579]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5584;
      for(int i5583=0;i5583<(int)prev.size();++i5583) {
        i = prev[i5583];
        tmp = parse_not5580();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5584.push_back(prev[i5583]);
        } else {
          if(!(!next_prev5584.empty()&&next_prev5584.front()==FAIL)) {
            next_prev5584.push_front(FAIL);
          }
        }
      }
      prev = next_prev5584;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5586;
      for(int i5585=0;i5585<(int)prev.size();++i5585) {
        if( prev[i5585] == FAIL ) {
          if(!(!next_prev5586.empty() && next_prev5586.front() == FAIL )) {
            next_prev5586.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5585];
        tmp = parse__();
        
        for(int i5585=0;i5585<(int)tmp.size();++i5585) {
          if( tmp[i5585] == FAIL ) {
            if(!( !next_prev5586.empty() && next_prev5586[0] == FAIL )) {
              next_prev5586.push_front(FAIL);
            }
          } else {
            next_prev5586.push_back(tmp[i5585]);
          }
        }
      }
      prev = next_prev5586;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (CastNewExpression) */
    deque<int> next_prev5588;
    for(int i5587=0;i5587<(int)prev.size();++i5587) {
      if( prev[i5587] == FAIL ) {
        if(!(!next_prev5588.empty() && next_prev5588.front() == FAIL )) {
          next_prev5588.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5587];
      tmp = parse_CastNewExpression();
      
      for(int i5587=0;i5587<(int)tmp.size();++i5587) {
        if( tmp[i5587] == FAIL ) {
          if(!( !next_prev5588.empty() && next_prev5588[0] == FAIL )) {
            next_prev5588.push_front(FAIL);
          }
        } else {
          next_prev5588.push_back(tmp[i5587]);
        }
      }
    }
    prev = next_prev5588;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5578=0;i5578<(int)prev.size();++i5578) {
    if( prev[i5578] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5578]);
    }
  }
  return memo[key(775,backtracking_ptr_for_packrat775)] = result;
}

inline deque<int> parse_not5580() { 
  if(memo.count(key(776,i))) {
    return memo[key(776,i)];
  }
  int backtracking_ptr_for_packrat776=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i5582=0;i5582<(int)prev.size();++i5582) {
    if( prev[i5582] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i5582]<m&&(I[prev[i5582]]=='+'||I[prev[i5582]]=='=')) {
      tmp.push_back(prev[i5582]+1);
    } else {
      if(!( !tmp.empty() && tmp.front() == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i5581=0;i5581<(int)prev.size();++i5581) {
    if( prev[i5581] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5581]);
    }
  }
  return memo[key(776,backtracking_ptr_for_packrat776)] = result;
}

inline deque<int> parse_slash5590() { 
  if(memo.count(key(777,i))) {
    return memo[key(777,i)];
  }
  int backtracking_ptr_for_packrat777=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5592=0;i5592<(int)prev.size();++i5592) {
        if( prev[i5592] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5592]<m&&I[prev[i5592]]=='-') {
          tmp.push_back(prev[i5592]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5607;
      for(int i5606=0;i5606<(int)prev.size();++i5606) {
        i = prev[i5606];
        tmp = parse_not5593();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5607.push_back(prev[i5606]);
        } else {
          if(!(!next_prev5607.empty()&&next_prev5607.front()==FAIL)) {
            next_prev5607.push_front(FAIL);
          }
        }
      }
      prev = next_prev5607;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5609;
      for(int i5608=0;i5608<(int)prev.size();++i5608) {
        if( prev[i5608] == FAIL ) {
          if(!(!next_prev5609.empty() && next_prev5609.front() == FAIL )) {
            next_prev5609.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5608];
        tmp = parse__();
        
        for(int i5608=0;i5608<(int)tmp.size();++i5608) {
          if( tmp[i5608] == FAIL ) {
            if(!( !next_prev5609.empty() && next_prev5609[0] == FAIL )) {
              next_prev5609.push_front(FAIL);
            }
          } else {
            next_prev5609.push_back(tmp[i5608]);
          }
        }
      }
      prev = next_prev5609;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (CastNewExpression) */
    deque<int> next_prev5611;
    for(int i5610=0;i5610<(int)prev.size();++i5610) {
      if( prev[i5610] == FAIL ) {
        if(!(!next_prev5611.empty() && next_prev5611.front() == FAIL )) {
          next_prev5611.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5610];
      tmp = parse_CastNewExpression();
      
      for(int i5610=0;i5610<(int)tmp.size();++i5610) {
        if( tmp[i5610] == FAIL ) {
          if(!( !next_prev5611.empty() && next_prev5611[0] == FAIL )) {
            next_prev5611.push_front(FAIL);
          }
        } else {
          next_prev5611.push_back(tmp[i5610]);
        }
      }
    }
    prev = next_prev5611;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5591=0;i5591<(int)prev.size();++i5591) {
    if( prev[i5591] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5591]);
    }
  }
  return memo[key(777,backtracking_ptr_for_packrat777)] = result;
}

inline deque<int> parse_not5593() { 
  if(memo.count(key(778,i))) {
    return memo[key(778,i)];
  }
  int backtracking_ptr_for_packrat778=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev5596;
  deque<int> prioritized_choice_final_prev5597;
  next_prev5596.clear();
  for(int i5595=0;i5595<(int)prev.size();++i5595) {
    i = prev[i5595];
    tmp = parse_slash5598();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5596.push_back(prev[i5595]); }
    for(int i5601=0;i5601<(int)tmp.size();++i5601) {
      if( tmp[i5601] != FAIL ) {
        prioritized_choice_final_prev5597.push_back(tmp[i5601]);
      }
    }
  }
  prev = next_prev5596;
  next_prev5596.clear();
  for(int i5595=0;i5595<(int)prev.size();++i5595) {
    i = prev[i5595];
    tmp = parse_slash5602();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5596.push_back(prev[i5595]); }
    for(int i5605=0;i5605<(int)tmp.size();++i5605) {
      if( tmp[i5605] != FAIL ) {
        prioritized_choice_final_prev5597.push_back(tmp[i5605]);
      }
    }
  }
  prev = next_prev5596;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev5597.empty() && prioritized_choice_final_prev5597.front() == FAIL )) {
      prioritized_choice_final_prev5597.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev5597;
  for(int i5594=0;i5594<(int)prev.size();++i5594) {
    if( prev[i5594] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5594]);
    }
  }
  return memo[key(778,backtracking_ptr_for_packrat778)] = result;
}

inline deque<int> parse_slash5598() { 
  if(memo.count(key(779,i))) {
    return memo[key(779,i)];
  }
  int backtracking_ptr_for_packrat779=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i5600=0;i5600<(int)prev.size();++i5600) {
      if( prev[i5600] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i5600]<m&&I[prev[i5600]]=='-') {
        tmp.push_back(prev[i5600]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5599=0;i5599<(int)prev.size();++i5599) {
    if( prev[i5599] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5599]);
    }
  }
  return memo[key(779,backtracking_ptr_for_packrat779)] = result;
}

inline deque<int> parse_slash5602() { 
  if(memo.count(key(780,i))) {
    return memo[key(780,i)];
  }
  int backtracking_ptr_for_packrat780=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i5604=0;i5604<(int)prev.size();++i5604) {
      if( prev[i5604] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i5604]<m&&(I[prev[i5604]]=='='||I[prev[i5604]]=='>')) {
        tmp.push_back(prev[i5604]+1);
      } else {
        if(!( !tmp.empty() && tmp.front() == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5603=0;i5603<(int)prev.size();++i5603) {
    if( prev[i5603] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5603]);
    }
  }
  return memo[key(780,backtracking_ptr_for_packrat780)] = result;
}

inline deque<int> parse_slash5613() { 
  if(memo.count(key(781,i))) {
    return memo[key(781,i)];
  }
  int backtracking_ptr_for_packrat781=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5615=0;i5615<(int)prev.size();++i5615) {
        if( prev[i5615] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5615]<m&&I[prev[i5615]]=='~') {
          tmp.push_back(prev[i5615]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5617;
      for(int i5616=0;i5616<(int)prev.size();++i5616) {
        if( prev[i5616] == FAIL ) {
          if(!(!next_prev5617.empty() && next_prev5617.front() == FAIL )) {
            next_prev5617.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5616];
        tmp = parse__();
        
        for(int i5616=0;i5616<(int)tmp.size();++i5616) {
          if( tmp[i5616] == FAIL ) {
            if(!( !next_prev5617.empty() && next_prev5617[0] == FAIL )) {
              next_prev5617.push_front(FAIL);
            }
          } else {
            next_prev5617.push_back(tmp[i5616]);
          }
        }
      }
      prev = next_prev5617;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (CastNewExpression) */
    deque<int> next_prev5619;
    for(int i5618=0;i5618<(int)prev.size();++i5618) {
      if( prev[i5618] == FAIL ) {
        if(!(!next_prev5619.empty() && next_prev5619.front() == FAIL )) {
          next_prev5619.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5618];
      tmp = parse_CastNewExpression();
      
      for(int i5618=0;i5618<(int)tmp.size();++i5618) {
        if( tmp[i5618] == FAIL ) {
          if(!( !next_prev5619.empty() && next_prev5619[0] == FAIL )) {
            next_prev5619.push_front(FAIL);
          }
        } else {
          next_prev5619.push_back(tmp[i5618]);
        }
      }
    }
    prev = next_prev5619;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5614=0;i5614<(int)prev.size();++i5614) {
    if( prev[i5614] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5614]);
    }
  }
  return memo[key(781,backtracking_ptr_for_packrat781)] = result;
}

inline deque<int> parse_slash5621() { 
  if(memo.count(key(782,i))) {
    return memo[key(782,i)];
  }
  int backtracking_ptr_for_packrat782=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5623=0;i5623<(int)prev.size();++i5623) {
        if( prev[i5623] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5623]<m&&I[prev[i5623]]=='!') {
          tmp.push_back(prev[i5623]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5628;
      for(int i5627=0;i5627<(int)prev.size();++i5627) {
        i = prev[i5627];
        tmp = parse_not5624();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5628.push_back(prev[i5627]);
        } else {
          if(!(!next_prev5628.empty()&&next_prev5628.front()==FAIL)) {
            next_prev5628.push_front(FAIL);
          }
        }
      }
      prev = next_prev5628;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5630;
      for(int i5629=0;i5629<(int)prev.size();++i5629) {
        if( prev[i5629] == FAIL ) {
          if(!(!next_prev5630.empty() && next_prev5630.front() == FAIL )) {
            next_prev5630.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5629];
        tmp = parse__();
        
        for(int i5629=0;i5629<(int)tmp.size();++i5629) {
          if( tmp[i5629] == FAIL ) {
            if(!( !next_prev5630.empty() && next_prev5630[0] == FAIL )) {
              next_prev5630.push_front(FAIL);
            }
          } else {
            next_prev5630.push_back(tmp[i5629]);
          }
        }
      }
      prev = next_prev5630;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (CastNewExpression) */
    deque<int> next_prev5632;
    for(int i5631=0;i5631<(int)prev.size();++i5631) {
      if( prev[i5631] == FAIL ) {
        if(!(!next_prev5632.empty() && next_prev5632.front() == FAIL )) {
          next_prev5632.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5631];
      tmp = parse_CastNewExpression();
      
      for(int i5631=0;i5631<(int)tmp.size();++i5631) {
        if( tmp[i5631] == FAIL ) {
          if(!( !next_prev5632.empty() && next_prev5632[0] == FAIL )) {
            next_prev5632.push_front(FAIL);
          }
        } else {
          next_prev5632.push_back(tmp[i5631]);
        }
      }
    }
    prev = next_prev5632;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5622=0;i5622<(int)prev.size();++i5622) {
    if( prev[i5622] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5622]);
    }
  }
  return memo[key(782,backtracking_ptr_for_packrat782)] = result;
}

inline deque<int> parse_not5624() { 
  if(memo.count(key(783,i))) {
    return memo[key(783,i)];
  }
  int backtracking_ptr_for_packrat783=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i5626=0;i5626<(int)prev.size();++i5626) {
    if( prev[i5626] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i5626]<m&&I[prev[i5626]]=='=') {
      tmp.push_back(prev[i5626]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i5625=0;i5625<(int)prev.size();++i5625) {
    if( prev[i5625] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5625]);
    }
  }
  return memo[key(783,backtracking_ptr_for_packrat783)] = result;
}

deque<int> parse_PostfixExpression(){
  if(memo.count(key(784,i))) {
    return memo[key(784,i)];
  }
  int backtracking_ptr_for_packrat784=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (PrimaryExpression) */
    deque<int> next_prev5636;
    for(int i5635=0;i5635<(int)prev.size();++i5635) {
      if( prev[i5635] == FAIL ) {
        if(!(!next_prev5636.empty() && next_prev5636.front() == FAIL )) {
          next_prev5636.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5635];
      tmp = parse_PrimaryExpression();
      
      for(int i5635=0;i5635<(int)tmp.size();++i5635) {
        if( tmp[i5635] == FAIL ) {
          if(!( !next_prev5636.empty() && next_prev5636[0] == FAIL )) {
            next_prev5636.push_front(FAIL);
          }
        } else {
          next_prev5636.push_back(tmp[i5635]);
        }
      }
    }
    prev = next_prev5636;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev5677;
    deque<int> star_final_prev5678;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev5677.clear();
      for(int i5679=0;i5679<(int)prev.size();++i5679) {
        i = prev[i5679];
        tmp = parse_while5637();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev5678.push_back(prev[i5679]);
        }
        for(int i5680=0;i5680<(int)tmp.size();++i5680) {
          if(tmp[i5680]==FAIL) {
            if(!( !next_prev5677.empty() && next_prev5677.front() == FAIL )) {
              next_prev5677.push_front(FAIL);
            }
          } else {
            next_prev5677.push_back(tmp[i5680]);
          }
        }
      }
      prev = next_prev5677;
    }
    prev = star_final_prev5678;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5634=0;i5634<(int)prev.size();++i5634) {
    if( prev[i5634] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5634]);
    }
  }
  return memo[key(784,backtracking_ptr_for_packrat784)] = result;
}

inline deque<int> parse_while5637() { 
  if(memo.count(key(785,i))) {
    return memo[key(785,i)];
  }
  int backtracking_ptr_for_packrat785=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev5640;
    deque<int> prioritized_choice_final_prev5641;
    next_prev5640.clear();
    for(int i5639=0;i5639<(int)prev.size();++i5639) {
      i = prev[i5639];
      tmp = parse_slash5642();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5640.push_back(prev[i5639]); }
      for(int i5646=0;i5646<(int)tmp.size();++i5646) {
        if( tmp[i5646] != FAIL ) {
          prioritized_choice_final_prev5641.push_back(tmp[i5646]);
        }
      }
    }
    prev = next_prev5640;
    next_prev5640.clear();
    for(int i5639=0;i5639<(int)prev.size();++i5639) {
      i = prev[i5639];
      tmp = parse_slash5647();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5640.push_back(prev[i5639]); }
      for(int i5651=0;i5651<(int)tmp.size();++i5651) {
        if( tmp[i5651] != FAIL ) {
          prioritized_choice_final_prev5641.push_back(tmp[i5651]);
        }
      }
    }
    prev = next_prev5640;
    next_prev5640.clear();
    for(int i5639=0;i5639<(int)prev.size();++i5639) {
      i = prev[i5639];
      tmp = parse_slash5652();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5640.push_back(prev[i5639]); }
      for(int i5656=0;i5656<(int)tmp.size();++i5656) {
        if( tmp[i5656] != FAIL ) {
          prioritized_choice_final_prev5641.push_back(tmp[i5656]);
        }
      }
    }
    prev = next_prev5640;
    next_prev5640.clear();
    for(int i5639=0;i5639<(int)prev.size();++i5639) {
      i = prev[i5639];
      tmp = parse_slash5657();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5640.push_back(prev[i5639]); }
      for(int i5661=0;i5661<(int)tmp.size();++i5661) {
        if( tmp[i5661] != FAIL ) {
          prioritized_choice_final_prev5641.push_back(tmp[i5661]);
        }
      }
    }
    prev = next_prev5640;
    next_prev5640.clear();
    for(int i5639=0;i5639<(int)prev.size();++i5639) {
      i = prev[i5639];
      tmp = parse_slash5662();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5640.push_back(prev[i5639]); }
      for(int i5666=0;i5666<(int)tmp.size();++i5666) {
        if( tmp[i5666] != FAIL ) {
          prioritized_choice_final_prev5641.push_back(tmp[i5666]);
        }
      }
    }
    prev = next_prev5640;
    next_prev5640.clear();
    for(int i5639=0;i5639<(int)prev.size();++i5639) {
      i = prev[i5639];
      tmp = parse_slash5667();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5640.push_back(prev[i5639]); }
      for(int i5671=0;i5671<(int)tmp.size();++i5671) {
        if( tmp[i5671] != FAIL ) {
          prioritized_choice_final_prev5641.push_back(tmp[i5671]);
        }
      }
    }
    prev = next_prev5640;
    next_prev5640.clear();
    for(int i5639=0;i5639<(int)prev.size();++i5639) {
      i = prev[i5639];
      tmp = parse_slash5672();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5640.push_back(prev[i5639]); }
      for(int i5676=0;i5676<(int)tmp.size();++i5676) {
        if( tmp[i5676] != FAIL ) {
          prioritized_choice_final_prev5641.push_back(tmp[i5676]);
        }
      }
    }
    prev = next_prev5640;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev5641.empty() && prioritized_choice_final_prev5641.front() == FAIL )) {
        prioritized_choice_final_prev5641.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev5641;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5638=0;i5638<(int)prev.size();++i5638) {
    if( prev[i5638] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5638]);
    }
  }
  return memo[key(785,backtracking_ptr_for_packrat785)] = result;
}

inline deque<int> parse_slash5642() { 
  if(memo.count(key(786,i))) {
    return memo[key(786,i)];
  }
  int backtracking_ptr_for_packrat786=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (addMethodCall) */
    deque<int> next_prev5645;
    for(int i5644=0;i5644<(int)prev.size();++i5644) {
      if( prev[i5644] == FAIL ) {
        if(!(!next_prev5645.empty() && next_prev5645.front() == FAIL )) {
          next_prev5645.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5644];
      tmp = parse_addMethodCall();
      
      for(int i5644=0;i5644<(int)tmp.size();++i5644) {
        if( tmp[i5644] == FAIL ) {
          if(!( !next_prev5645.empty() && next_prev5645[0] == FAIL )) {
            next_prev5645.push_front(FAIL);
          }
        } else {
          next_prev5645.push_back(tmp[i5644]);
        }
      }
    }
    prev = next_prev5645;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5643=0;i5643<(int)prev.size();++i5643) {
    if( prev[i5643] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5643]);
    }
  }
  return memo[key(786,backtracking_ptr_for_packrat786)] = result;
}

inline deque<int> parse_slash5647() { 
  if(memo.count(key(787,i))) {
    return memo[key(787,i)];
  }
  int backtracking_ptr_for_packrat787=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (addInstanceCreation) */
    deque<int> next_prev5650;
    for(int i5649=0;i5649<(int)prev.size();++i5649) {
      if( prev[i5649] == FAIL ) {
        if(!(!next_prev5650.empty() && next_prev5650.front() == FAIL )) {
          next_prev5650.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5649];
      tmp = parse_addInstanceCreation();
      
      for(int i5649=0;i5649<(int)tmp.size();++i5649) {
        if( tmp[i5649] == FAIL ) {
          if(!( !next_prev5650.empty() && next_prev5650[0] == FAIL )) {
            next_prev5650.push_front(FAIL);
          }
        } else {
          next_prev5650.push_back(tmp[i5649]);
        }
      }
    }
    prev = next_prev5650;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5648=0;i5648<(int)prev.size();++i5648) {
    if( prev[i5648] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5648]);
    }
  }
  return memo[key(787,backtracking_ptr_for_packrat787)] = result;
}

inline deque<int> parse_slash5652() { 
  if(memo.count(key(788,i))) {
    return memo[key(788,i)];
  }
  int backtracking_ptr_for_packrat788=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (addIndex) */
    deque<int> next_prev5655;
    for(int i5654=0;i5654<(int)prev.size();++i5654) {
      if( prev[i5654] == FAIL ) {
        if(!(!next_prev5655.empty() && next_prev5655.front() == FAIL )) {
          next_prev5655.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5654];
      tmp = parse_addIndex();
      
      for(int i5654=0;i5654<(int)tmp.size();++i5654) {
        if( tmp[i5654] == FAIL ) {
          if(!( !next_prev5655.empty() && next_prev5655[0] == FAIL )) {
            next_prev5655.push_front(FAIL);
          }
        } else {
          next_prev5655.push_back(tmp[i5654]);
        }
      }
    }
    prev = next_prev5655;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5653=0;i5653<(int)prev.size();++i5653) {
    if( prev[i5653] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5653]);
    }
  }
  return memo[key(788,backtracking_ptr_for_packrat788)] = result;
}

inline deque<int> parse_slash5657() { 
  if(memo.count(key(789,i))) {
    return memo[key(789,i)];
  }
  int backtracking_ptr_for_packrat789=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (addField) */
    deque<int> next_prev5660;
    for(int i5659=0;i5659<(int)prev.size();++i5659) {
      if( prev[i5659] == FAIL ) {
        if(!(!next_prev5660.empty() && next_prev5660.front() == FAIL )) {
          next_prev5660.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5659];
      tmp = parse_addField();
      
      for(int i5659=0;i5659<(int)tmp.size();++i5659) {
        if( tmp[i5659] == FAIL ) {
          if(!( !next_prev5660.empty() && next_prev5660[0] == FAIL )) {
            next_prev5660.push_front(FAIL);
          }
        } else {
          next_prev5660.push_back(tmp[i5659]);
        }
      }
    }
    prev = next_prev5660;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5658=0;i5658<(int)prev.size();++i5658) {
    if( prev[i5658] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5658]);
    }
  }
  return memo[key(789,backtracking_ptr_for_packrat789)] = result;
}

inline deque<int> parse_slash5662() { 
  if(memo.count(key(790,i))) {
    return memo[key(790,i)];
  }
  int backtracking_ptr_for_packrat790=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (addMethodReference) */
    deque<int> next_prev5665;
    for(int i5664=0;i5664<(int)prev.size();++i5664) {
      if( prev[i5664] == FAIL ) {
        if(!(!next_prev5665.empty() && next_prev5665.front() == FAIL )) {
          next_prev5665.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5664];
      tmp = parse_addMethodReference();
      
      for(int i5664=0;i5664<(int)tmp.size();++i5664) {
        if( tmp[i5664] == FAIL ) {
          if(!( !next_prev5665.empty() && next_prev5665[0] == FAIL )) {
            next_prev5665.push_front(FAIL);
          }
        } else {
          next_prev5665.push_back(tmp[i5664]);
        }
      }
    }
    prev = next_prev5665;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5663=0;i5663<(int)prev.size();++i5663) {
    if( prev[i5663] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5663]);
    }
  }
  return memo[key(790,backtracking_ptr_for_packrat790)] = result;
}

inline deque<int> parse_slash5667() { 
  if(memo.count(key(791,i))) {
    return memo[key(791,i)];
  }
  int backtracking_ptr_for_packrat791=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (addInc) */
    deque<int> next_prev5670;
    for(int i5669=0;i5669<(int)prev.size();++i5669) {
      if( prev[i5669] == FAIL ) {
        if(!(!next_prev5670.empty() && next_prev5670.front() == FAIL )) {
          next_prev5670.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5669];
      tmp = parse_addInc();
      
      for(int i5669=0;i5669<(int)tmp.size();++i5669) {
        if( tmp[i5669] == FAIL ) {
          if(!( !next_prev5670.empty() && next_prev5670[0] == FAIL )) {
            next_prev5670.push_front(FAIL);
          }
        } else {
          next_prev5670.push_back(tmp[i5669]);
        }
      }
    }
    prev = next_prev5670;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5668=0;i5668<(int)prev.size();++i5668) {
    if( prev[i5668] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5668]);
    }
  }
  return memo[key(791,backtracking_ptr_for_packrat791)] = result;
}

inline deque<int> parse_slash5672() { 
  if(memo.count(key(792,i))) {
    return memo[key(792,i)];
  }
  int backtracking_ptr_for_packrat792=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (addDec) */
    deque<int> next_prev5675;
    for(int i5674=0;i5674<(int)prev.size();++i5674) {
      if( prev[i5674] == FAIL ) {
        if(!(!next_prev5675.empty() && next_prev5675.front() == FAIL )) {
          next_prev5675.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5674];
      tmp = parse_addDec();
      
      for(int i5674=0;i5674<(int)tmp.size();++i5674) {
        if( tmp[i5674] == FAIL ) {
          if(!( !next_prev5675.empty() && next_prev5675[0] == FAIL )) {
            next_prev5675.push_front(FAIL);
          }
        } else {
          next_prev5675.push_back(tmp[i5674]);
        }
      }
    }
    prev = next_prev5675;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5673=0;i5673<(int)prev.size();++i5673) {
    if( prev[i5673] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5673]);
    }
  }
  return memo[key(792,backtracking_ptr_for_packrat792)] = result;
}

deque<int> parse_addMethodCall(){
  if(memo.count(key(793,i))) {
    return memo[key(793,i)];
  }
  int backtracking_ptr_for_packrat793=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5682=0;i5682<(int)prev.size();++i5682) {
        if( prev[i5682] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5682]<m&&I[prev[i5682]]=='.') {
          tmp.push_back(prev[i5682]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5687;
      for(int i5686=0;i5686<(int)prev.size();++i5686) {
        i = prev[i5686];
        tmp = parse_not5683();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5687.push_back(prev[i5686]);
        } else {
          if(!(!next_prev5687.empty()&&next_prev5687.front()==FAIL)) {
            next_prev5687.push_front(FAIL);
          }
        }
      }
      prev = next_prev5687;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5689;
      for(int i5688=0;i5688<(int)prev.size();++i5688) {
        if( prev[i5688] == FAIL ) {
          if(!(!next_prev5689.empty() && next_prev5689.front() == FAIL )) {
            next_prev5689.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5688];
        tmp = parse__();
        
        for(int i5688=0;i5688<(int)tmp.size();++i5688) {
          if( tmp[i5688] == FAIL ) {
            if(!( !next_prev5689.empty() && next_prev5689[0] == FAIL )) {
              next_prev5689.push_front(FAIL);
            }
          } else {
            next_prev5689.push_back(tmp[i5688]);
          }
        }
      }
      prev = next_prev5689;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev5691;
    deque<int> prioritized_choice_final_prev5692;
    next_prev5691.clear();
    for(int i5690=0;i5690<(int)prev.size();++i5690) {
      i = prev[i5690];
      tmp = parse_slash5693();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5691.push_back(prev[i5690]); }
      for(int i5697=0;i5697<(int)tmp.size();++i5697) {
        if( tmp[i5697] != FAIL ) {
          prioritized_choice_final_prev5692.push_back(tmp[i5697]);
        }
      }
    }
    prev = next_prev5691;
    next_prev5691.clear();
    for(int i5690=0;i5690<(int)prev.size();++i5690) {
      i = prev[i5690];
      tmp = parse_slash5698();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5691.push_back(prev[i5690]); }
      for(int i5700=0;i5700<(int)tmp.size();++i5700) {
        if( tmp[i5700] != FAIL ) {
          prioritized_choice_final_prev5692.push_back(tmp[i5700]);
        }
      }
    }
    prev = next_prev5691;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev5692.empty() && prioritized_choice_final_prev5692.front() == FAIL )) {
        prioritized_choice_final_prev5692.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev5692;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev5702;
    for(int i5701=0;i5701<(int)prev.size();++i5701) {
      if( prev[i5701] == FAIL ) {
        if(!(!next_prev5702.empty() && next_prev5702.front() == FAIL )) {
          next_prev5702.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5701];
      tmp = parse_Identifier();
      
      for(int i5701=0;i5701<(int)tmp.size();++i5701) {
        if( tmp[i5701] == FAIL ) {
          if(!( !next_prev5702.empty() && next_prev5702[0] == FAIL )) {
            next_prev5702.push_front(FAIL);
          }
        } else {
          next_prev5702.push_back(tmp[i5701]);
        }
      }
    }
    prev = next_prev5702;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5703=0;i5703<(int)prev.size();++i5703) {
        if( prev[i5703] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5703]<m&&I[prev[i5703]]=='(') {
          tmp.push_back(prev[i5703]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5705;
      for(int i5704=0;i5704<(int)prev.size();++i5704) {
        if( prev[i5704] == FAIL ) {
          if(!(!next_prev5705.empty() && next_prev5705.front() == FAIL )) {
            next_prev5705.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5704];
        tmp = parse__();
        
        for(int i5704=0;i5704<(int)tmp.size();++i5704) {
          if( tmp[i5704] == FAIL ) {
            if(!( !next_prev5705.empty() && next_prev5705[0] == FAIL )) {
              next_prev5705.push_front(FAIL);
            }
          } else {
            next_prev5705.push_back(tmp[i5704]);
          }
        }
      }
      prev = next_prev5705;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev5707;
    deque<int> prioritized_choice_final_prev5708;
    next_prev5707.clear();
    for(int i5706=0;i5706<(int)prev.size();++i5706) {
      i = prev[i5706];
      tmp = parse_slash5709();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5707.push_back(prev[i5706]); }
      for(int i5713=0;i5713<(int)tmp.size();++i5713) {
        if( tmp[i5713] != FAIL ) {
          prioritized_choice_final_prev5708.push_back(tmp[i5713]);
        }
      }
    }
    prev = next_prev5707;
    next_prev5707.clear();
    for(int i5706=0;i5706<(int)prev.size();++i5706) {
      i = prev[i5706];
      tmp = parse_slash5714();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5707.push_back(prev[i5706]); }
      for(int i5716=0;i5716<(int)tmp.size();++i5716) {
        if( tmp[i5716] != FAIL ) {
          prioritized_choice_final_prev5708.push_back(tmp[i5716]);
        }
      }
    }
    prev = next_prev5707;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev5708.empty() && prioritized_choice_final_prev5708.front() == FAIL )) {
        prioritized_choice_final_prev5708.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev5708;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5717=0;i5717<(int)prev.size();++i5717) {
        if( prev[i5717] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5717]<m&&I[prev[i5717]]==')') {
          tmp.push_back(prev[i5717]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5719;
      for(int i5718=0;i5718<(int)prev.size();++i5718) {
        if( prev[i5718] == FAIL ) {
          if(!(!next_prev5719.empty() && next_prev5719.front() == FAIL )) {
            next_prev5719.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5718];
        tmp = parse__();
        
        for(int i5718=0;i5718<(int)tmp.size();++i5718) {
          if( tmp[i5718] == FAIL ) {
            if(!( !next_prev5719.empty() && next_prev5719[0] == FAIL )) {
              next_prev5719.push_front(FAIL);
            }
          } else {
            next_prev5719.push_back(tmp[i5718]);
          }
        }
      }
      prev = next_prev5719;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5681=0;i5681<(int)prev.size();++i5681) {
    if( prev[i5681] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5681]);
    }
  }
  return memo[key(793,backtracking_ptr_for_packrat793)] = result;
}

inline deque<int> parse_not5683() { 
  if(memo.count(key(794,i))) {
    return memo[key(794,i)];
  }
  int backtracking_ptr_for_packrat794=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i5685=0;i5685<(int)prev.size();++i5685) {
    if( prev[i5685] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i5685]<m&&I[prev[i5685]]=='.') {
      tmp.push_back(prev[i5685]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i5684=0;i5684<(int)prev.size();++i5684) {
    if( prev[i5684] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5684]);
    }
  }
  return memo[key(794,backtracking_ptr_for_packrat794)] = result;
}

inline deque<int> parse_slash5693() { 
  if(memo.count(key(795,i))) {
    return memo[key(795,i)];
  }
  int backtracking_ptr_for_packrat795=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (TypeArguments) */
    deque<int> next_prev5696;
    for(int i5695=0;i5695<(int)prev.size();++i5695) {
      if( prev[i5695] == FAIL ) {
        if(!(!next_prev5696.empty() && next_prev5696.front() == FAIL )) {
          next_prev5696.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5695];
      tmp = parse_TypeArguments();
      
      for(int i5695=0;i5695<(int)tmp.size();++i5695) {
        if( tmp[i5695] == FAIL ) {
          if(!( !next_prev5696.empty() && next_prev5696[0] == FAIL )) {
            next_prev5696.push_front(FAIL);
          }
        } else {
          next_prev5696.push_back(tmp[i5695]);
        }
      }
    }
    prev = next_prev5696;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5694=0;i5694<(int)prev.size();++i5694) {
    if( prev[i5694] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5694]);
    }
  }
  return memo[key(795,backtracking_ptr_for_packrat795)] = result;
}

inline deque<int> parse_slash5698() { 
  if(memo.count(key(796,i))) {
    return memo[key(796,i)];
  }
  int backtracking_ptr_for_packrat796=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i5699=0;i5699<(int)prev.size();++i5699) {
    if( prev[i5699] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5699]);
    }
  }
  return memo[key(796,backtracking_ptr_for_packrat796)] = result;
}

inline deque<int> parse_slash5709() { 
  if(memo.count(key(797,i))) {
    return memo[key(797,i)];
  }
  int backtracking_ptr_for_packrat797=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (addArgumentExpressionList) */
  deque<int> next_prev5712;
  for(int i5711=0;i5711<(int)prev.size();++i5711) {
    if( prev[i5711] == FAIL ) {
      if(!(!next_prev5712.empty() && next_prev5712.front() == FAIL )) {
        next_prev5712.push_front(FAIL);
      }
      continue;
    }
    i = prev[i5711];
    tmp = parse_addArgumentExpressionList();
    
    for(int i5711=0;i5711<(int)tmp.size();++i5711) {
      if( tmp[i5711] == FAIL ) {
        if(!( !next_prev5712.empty() && next_prev5712[0] == FAIL )) {
          next_prev5712.push_front(FAIL);
        }
      } else {
        next_prev5712.push_back(tmp[i5711]);
      }
    }
  }
  prev = next_prev5712;
  for(int i5710=0;i5710<(int)prev.size();++i5710) {
    if( prev[i5710] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5710]);
    }
  }
  return memo[key(797,backtracking_ptr_for_packrat797)] = result;
}

inline deque<int> parse_slash5714() { 
  if(memo.count(key(798,i))) {
    return memo[key(798,i)];
  }
  int backtracking_ptr_for_packrat798=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i5715=0;i5715<(int)prev.size();++i5715) {
    if( prev[i5715] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5715]);
    }
  }
  return memo[key(798,backtracking_ptr_for_packrat798)] = result;
}

deque<int> parse_addInstanceCreation(){
  if(memo.count(key(799,i))) {
    return memo[key(799,i)];
  }
  int backtracking_ptr_for_packrat799=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5721=0;i5721<(int)prev.size();++i5721) {
        if( prev[i5721] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5721]<m&&I[prev[i5721]]=='.') {
          tmp.push_back(prev[i5721]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5726;
      for(int i5725=0;i5725<(int)prev.size();++i5725) {
        i = prev[i5725];
        tmp = parse_not5722();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5726.push_back(prev[i5725]);
        } else {
          if(!(!next_prev5726.empty()&&next_prev5726.front()==FAIL)) {
            next_prev5726.push_front(FAIL);
          }
        }
      }
      prev = next_prev5726;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5728;
      for(int i5727=0;i5727<(int)prev.size();++i5727) {
        if( prev[i5727] == FAIL ) {
          if(!(!next_prev5728.empty() && next_prev5728.front() == FAIL )) {
            next_prev5728.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5727];
        tmp = parse__();
        
        for(int i5727=0;i5727<(int)tmp.size();++i5727) {
          if( tmp[i5727] == FAIL ) {
            if(!( !next_prev5728.empty() && next_prev5728[0] == FAIL )) {
              next_prev5728.push_front(FAIL);
            }
          } else {
            next_prev5728.push_back(tmp[i5727]);
          }
        }
      }
      prev = next_prev5728;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5729=0;i5729<(int)prev.size();++i5729) {
        if( prev[i5729] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5729]<m&&I[prev[i5729]]=='n') {
          tmp.push_back(prev[i5729]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5730=0;i5730<(int)prev.size();++i5730) {
        if( prev[i5730] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5730]<m&&I[prev[i5730]]=='e') {
          tmp.push_back(prev[i5730]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5731=0;i5731<(int)prev.size();++i5731) {
        if( prev[i5731] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5731]<m&&I[prev[i5731]]=='w') {
          tmp.push_back(prev[i5731]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5737;
      for(int i5736=0;i5736<(int)prev.size();++i5736) {
        i = prev[i5736];
        tmp = parse_not5732();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5737.push_back(prev[i5736]);
        } else {
          if(!(!next_prev5737.empty()&&next_prev5737.front()==FAIL)) {
            next_prev5737.push_front(FAIL);
          }
        }
      }
      prev = next_prev5737;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5739;
      for(int i5738=0;i5738<(int)prev.size();++i5738) {
        if( prev[i5738] == FAIL ) {
          if(!(!next_prev5739.empty() && next_prev5739.front() == FAIL )) {
            next_prev5739.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5738];
        tmp = parse__();
        
        for(int i5738=0;i5738<(int)tmp.size();++i5738) {
          if( tmp[i5738] == FAIL ) {
            if(!( !next_prev5739.empty() && next_prev5739[0] == FAIL )) {
              next_prev5739.push_front(FAIL);
            }
          } else {
            next_prev5739.push_back(tmp[i5738]);
          }
        }
      }
      prev = next_prev5739;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev5741;
    deque<int> prioritized_choice_final_prev5742;
    next_prev5741.clear();
    for(int i5740=0;i5740<(int)prev.size();++i5740) {
      i = prev[i5740];
      tmp = parse_slash5743();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5741.push_back(prev[i5740]); }
      for(int i5747=0;i5747<(int)tmp.size();++i5747) {
        if( tmp[i5747] != FAIL ) {
          prioritized_choice_final_prev5742.push_back(tmp[i5747]);
        }
      }
    }
    prev = next_prev5741;
    next_prev5741.clear();
    for(int i5740=0;i5740<(int)prev.size();++i5740) {
      i = prev[i5740];
      tmp = parse_slash5748();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5741.push_back(prev[i5740]); }
      for(int i5750=0;i5750<(int)tmp.size();++i5750) {
        if( tmp[i5750] != FAIL ) {
          prioritized_choice_final_prev5742.push_back(tmp[i5750]);
        }
      }
    }
    prev = next_prev5741;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev5742.empty() && prioritized_choice_final_prev5742.front() == FAIL )) {
        prioritized_choice_final_prev5742.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev5742;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev5752;
    deque<int> prioritized_choice_final_prev5753;
    next_prev5752.clear();
    for(int i5751=0;i5751<(int)prev.size();++i5751) {
      i = prev[i5751];
      tmp = parse_slash5754();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5752.push_back(prev[i5751]); }
      for(int i5758=0;i5758<(int)tmp.size();++i5758) {
        if( tmp[i5758] != FAIL ) {
          prioritized_choice_final_prev5753.push_back(tmp[i5758]);
        }
      }
    }
    prev = next_prev5752;
    next_prev5752.clear();
    for(int i5751=0;i5751<(int)prev.size();++i5751) {
      i = prev[i5751];
      tmp = parse_slash5759();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5752.push_back(prev[i5751]); }
      for(int i5761=0;i5761<(int)tmp.size();++i5761) {
        if( tmp[i5761] != FAIL ) {
          prioritized_choice_final_prev5753.push_back(tmp[i5761]);
        }
      }
    }
    prev = next_prev5752;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev5753.empty() && prioritized_choice_final_prev5753.front() == FAIL )) {
        prioritized_choice_final_prev5753.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev5753;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassOrInterfaceType) */
    deque<int> next_prev5763;
    for(int i5762=0;i5762<(int)prev.size();++i5762) {
      if( prev[i5762] == FAIL ) {
        if(!(!next_prev5763.empty() && next_prev5763.front() == FAIL )) {
          next_prev5763.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5762];
      tmp = parse_ClassOrInterfaceType();
      
      for(int i5762=0;i5762<(int)tmp.size();++i5762) {
        if( tmp[i5762] == FAIL ) {
          if(!( !next_prev5763.empty() && next_prev5763[0] == FAIL )) {
            next_prev5763.push_front(FAIL);
          }
        } else {
          next_prev5763.push_back(tmp[i5762]);
        }
      }
    }
    prev = next_prev5763;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        tmp.clear();
        for(int i5764=0;i5764<(int)prev.size();++i5764) {
          if( prev[i5764] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i5764]<m&&I[prev[i5764]]=='(') {
            tmp.push_back(prev[i5764]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Nonterminal (_) */
        deque<int> next_prev5766;
        for(int i5765=0;i5765<(int)prev.size();++i5765) {
          if( prev[i5765] == FAIL ) {
            if(!(!next_prev5766.empty() && next_prev5766.front() == FAIL )) {
              next_prev5766.push_front(FAIL);
            }
            continue;
          }
          i = prev[i5765];
          tmp = parse__();
          
          for(int i5765=0;i5765<(int)tmp.size();++i5765) {
            if( tmp[i5765] == FAIL ) {
              if(!( !next_prev5766.empty() && next_prev5766[0] == FAIL )) {
                next_prev5766.push_front(FAIL);
              }
            } else {
              next_prev5766.push_back(tmp[i5765]);
            }
          }
        }
        prev = next_prev5766;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Prioritized Choice */
      deque<int> next_prev5768;
      deque<int> prioritized_choice_final_prev5769;
      next_prev5768.clear();
      for(int i5767=0;i5767<(int)prev.size();++i5767) {
        i = prev[i5767];
        tmp = parse_slash5770();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5768.push_back(prev[i5767]); }
        for(int i5774=0;i5774<(int)tmp.size();++i5774) {
          if( tmp[i5774] != FAIL ) {
            prioritized_choice_final_prev5769.push_back(tmp[i5774]);
          }
        }
      }
      prev = next_prev5768;
      next_prev5768.clear();
      for(int i5767=0;i5767<(int)prev.size();++i5767) {
        i = prev[i5767];
        tmp = parse_slash5775();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5768.push_back(prev[i5767]); }
        for(int i5777=0;i5777<(int)tmp.size();++i5777) {
          if( tmp[i5777] != FAIL ) {
            prioritized_choice_final_prev5769.push_back(tmp[i5777]);
          }
        }
      }
      prev = next_prev5768;
      if(!prev.empty()) {
        if(!(!prioritized_choice_final_prev5769.empty() && prioritized_choice_final_prev5769.front() == FAIL )) {
          prioritized_choice_final_prev5769.push_front(FAIL);
        }
      }
      prev = prioritized_choice_final_prev5769;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        tmp.clear();
        for(int i5778=0;i5778<(int)prev.size();++i5778) {
          if( prev[i5778] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i5778]<m&&I[prev[i5778]]==')') {
            tmp.push_back(prev[i5778]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Nonterminal (_) */
        deque<int> next_prev5780;
        for(int i5779=0;i5779<(int)prev.size();++i5779) {
          if( prev[i5779] == FAIL ) {
            if(!(!next_prev5780.empty() && next_prev5780.front() == FAIL )) {
              next_prev5780.push_front(FAIL);
            }
            continue;
          }
          i = prev[i5779];
          tmp = parse__();
          
          for(int i5779=0;i5779<(int)tmp.size();++i5779) {
            if( tmp[i5779] == FAIL ) {
              if(!( !next_prev5780.empty() && next_prev5780[0] == FAIL )) {
                next_prev5780.push_front(FAIL);
              }
            } else {
              next_prev5780.push_back(tmp[i5779]);
            }
          }
        }
        prev = next_prev5780;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev5782;
    deque<int> prioritized_choice_final_prev5783;
    next_prev5782.clear();
    for(int i5781=0;i5781<(int)prev.size();++i5781) {
      i = prev[i5781];
      tmp = parse_slash5784();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5782.push_back(prev[i5781]); }
      for(int i5788=0;i5788<(int)tmp.size();++i5788) {
        if( tmp[i5788] != FAIL ) {
          prioritized_choice_final_prev5783.push_back(tmp[i5788]);
        }
      }
    }
    prev = next_prev5782;
    next_prev5782.clear();
    for(int i5781=0;i5781<(int)prev.size();++i5781) {
      i = prev[i5781];
      tmp = parse_slash5789();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5782.push_back(prev[i5781]); }
      for(int i5791=0;i5791<(int)tmp.size();++i5791) {
        if( tmp[i5791] != FAIL ) {
          prioritized_choice_final_prev5783.push_back(tmp[i5791]);
        }
      }
    }
    prev = next_prev5782;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev5783.empty() && prioritized_choice_final_prev5783.front() == FAIL )) {
        prioritized_choice_final_prev5783.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev5783;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5720=0;i5720<(int)prev.size();++i5720) {
    if( prev[i5720] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5720]);
    }
  }
  return memo[key(799,backtracking_ptr_for_packrat799)] = result;
}

inline deque<int> parse_not5722() { 
  if(memo.count(key(800,i))) {
    return memo[key(800,i)];
  }
  int backtracking_ptr_for_packrat800=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i5724=0;i5724<(int)prev.size();++i5724) {
    if( prev[i5724] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i5724]<m&&I[prev[i5724]]=='.') {
      tmp.push_back(prev[i5724]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i5723=0;i5723<(int)prev.size();++i5723) {
    if( prev[i5723] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5723]);
    }
  }
  return memo[key(800,backtracking_ptr_for_packrat800)] = result;
}

inline deque<int> parse_not5732() { 
  if(memo.count(key(801,i))) {
    return memo[key(801,i)];
  }
  int backtracking_ptr_for_packrat801=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev5735;
  for(int i5734=0;i5734<(int)prev.size();++i5734) {
    if( prev[i5734] == FAIL ) {
      if(!(!next_prev5735.empty() && next_prev5735.front() == FAIL )) {
        next_prev5735.push_front(FAIL);
      }
      continue;
    }
    i = prev[i5734];
    tmp = parse_W();
    
    for(int i5734=0;i5734<(int)tmp.size();++i5734) {
      if( tmp[i5734] == FAIL ) {
        if(!( !next_prev5735.empty() && next_prev5735[0] == FAIL )) {
          next_prev5735.push_front(FAIL);
        }
      } else {
        next_prev5735.push_back(tmp[i5734]);
      }
    }
  }
  prev = next_prev5735;
  for(int i5733=0;i5733<(int)prev.size();++i5733) {
    if( prev[i5733] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5733]);
    }
  }
  return memo[key(801,backtracking_ptr_for_packrat801)] = result;
}

inline deque<int> parse_slash5743() { 
  if(memo.count(key(802,i))) {
    return memo[key(802,i)];
  }
  int backtracking_ptr_for_packrat802=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (TypeArguments) */
    deque<int> next_prev5746;
    for(int i5745=0;i5745<(int)prev.size();++i5745) {
      if( prev[i5745] == FAIL ) {
        if(!(!next_prev5746.empty() && next_prev5746.front() == FAIL )) {
          next_prev5746.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5745];
      tmp = parse_TypeArguments();
      
      for(int i5745=0;i5745<(int)tmp.size();++i5745) {
        if( tmp[i5745] == FAIL ) {
          if(!( !next_prev5746.empty() && next_prev5746[0] == FAIL )) {
            next_prev5746.push_front(FAIL);
          }
        } else {
          next_prev5746.push_back(tmp[i5745]);
        }
      }
    }
    prev = next_prev5746;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5744=0;i5744<(int)prev.size();++i5744) {
    if( prev[i5744] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5744]);
    }
  }
  return memo[key(802,backtracking_ptr_for_packrat802)] = result;
}

inline deque<int> parse_slash5748() { 
  if(memo.count(key(803,i))) {
    return memo[key(803,i)];
  }
  int backtracking_ptr_for_packrat803=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i5749=0;i5749<(int)prev.size();++i5749) {
    if( prev[i5749] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5749]);
    }
  }
  return memo[key(803,backtracking_ptr_for_packrat803)] = result;
}

inline deque<int> parse_slash5754() { 
  if(memo.count(key(804,i))) {
    return memo[key(804,i)];
  }
  int backtracking_ptr_for_packrat804=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotations) */
    deque<int> next_prev5757;
    for(int i5756=0;i5756<(int)prev.size();++i5756) {
      if( prev[i5756] == FAIL ) {
        if(!(!next_prev5757.empty() && next_prev5757.front() == FAIL )) {
          next_prev5757.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5756];
      tmp = parse_Annotations();
      
      for(int i5756=0;i5756<(int)tmp.size();++i5756) {
        if( tmp[i5756] == FAIL ) {
          if(!( !next_prev5757.empty() && next_prev5757[0] == FAIL )) {
            next_prev5757.push_front(FAIL);
          }
        } else {
          next_prev5757.push_back(tmp[i5756]);
        }
      }
    }
    prev = next_prev5757;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5755=0;i5755<(int)prev.size();++i5755) {
    if( prev[i5755] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5755]);
    }
  }
  return memo[key(804,backtracking_ptr_for_packrat804)] = result;
}

inline deque<int> parse_slash5759() { 
  if(memo.count(key(805,i))) {
    return memo[key(805,i)];
  }
  int backtracking_ptr_for_packrat805=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i5760=0;i5760<(int)prev.size();++i5760) {
    if( prev[i5760] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5760]);
    }
  }
  return memo[key(805,backtracking_ptr_for_packrat805)] = result;
}

inline deque<int> parse_slash5770() { 
  if(memo.count(key(806,i))) {
    return memo[key(806,i)];
  }
  int backtracking_ptr_for_packrat806=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (addArgumentExpressionList) */
  deque<int> next_prev5773;
  for(int i5772=0;i5772<(int)prev.size();++i5772) {
    if( prev[i5772] == FAIL ) {
      if(!(!next_prev5773.empty() && next_prev5773.front() == FAIL )) {
        next_prev5773.push_front(FAIL);
      }
      continue;
    }
    i = prev[i5772];
    tmp = parse_addArgumentExpressionList();
    
    for(int i5772=0;i5772<(int)tmp.size();++i5772) {
      if( tmp[i5772] == FAIL ) {
        if(!( !next_prev5773.empty() && next_prev5773[0] == FAIL )) {
          next_prev5773.push_front(FAIL);
        }
      } else {
        next_prev5773.push_back(tmp[i5772]);
      }
    }
  }
  prev = next_prev5773;
  for(int i5771=0;i5771<(int)prev.size();++i5771) {
    if( prev[i5771] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5771]);
    }
  }
  return memo[key(806,backtracking_ptr_for_packrat806)] = result;
}

inline deque<int> parse_slash5775() { 
  if(memo.count(key(807,i))) {
    return memo[key(807,i)];
  }
  int backtracking_ptr_for_packrat807=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i5776=0;i5776<(int)prev.size();++i5776) {
    if( prev[i5776] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5776]);
    }
  }
  return memo[key(807,backtracking_ptr_for_packrat807)] = result;
}

inline deque<int> parse_slash5784() { 
  if(memo.count(key(808,i))) {
    return memo[key(808,i)];
  }
  int backtracking_ptr_for_packrat808=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassBody) */
    deque<int> next_prev5787;
    for(int i5786=0;i5786<(int)prev.size();++i5786) {
      if( prev[i5786] == FAIL ) {
        if(!(!next_prev5787.empty() && next_prev5787.front() == FAIL )) {
          next_prev5787.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5786];
      tmp = parse_ClassBody();
      
      for(int i5786=0;i5786<(int)tmp.size();++i5786) {
        if( tmp[i5786] == FAIL ) {
          if(!( !next_prev5787.empty() && next_prev5787[0] == FAIL )) {
            next_prev5787.push_front(FAIL);
          }
        } else {
          next_prev5787.push_back(tmp[i5786]);
        }
      }
    }
    prev = next_prev5787;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5785=0;i5785<(int)prev.size();++i5785) {
    if( prev[i5785] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5785]);
    }
  }
  return memo[key(808,backtracking_ptr_for_packrat808)] = result;
}

inline deque<int> parse_slash5789() { 
  if(memo.count(key(809,i))) {
    return memo[key(809,i)];
  }
  int backtracking_ptr_for_packrat809=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i5790=0;i5790<(int)prev.size();++i5790) {
    if( prev[i5790] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5790]);
    }
  }
  return memo[key(809,backtracking_ptr_for_packrat809)] = result;
}

deque<int> parse_addArgumentExpressionList(){
  if(memo.count(key(810,i))) {
    return memo[key(810,i)];
  }
  int backtracking_ptr_for_packrat810=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (Expression) */
      deque<int> next_prev5794;
      for(int i5793=0;i5793<(int)prev.size();++i5793) {
        if( prev[i5793] == FAIL ) {
          if(!(!next_prev5794.empty() && next_prev5794.front() == FAIL )) {
            next_prev5794.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5793];
        tmp = parse_Expression();
        
        for(int i5793=0;i5793<(int)tmp.size();++i5793) {
          if( tmp[i5793] == FAIL ) {
            if(!( !next_prev5794.empty() && next_prev5794[0] == FAIL )) {
              next_prev5794.push_front(FAIL);
            }
          } else {
            next_prev5794.push_back(tmp[i5793]);
          }
        }
      }
      prev = next_prev5794;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Star */
      deque<int> next_prev5802;
      deque<int> star_final_prev5803;
      while(!((int)prev.size()==1&&prev.front()==FAIL)) {
        next_prev5802.clear();
        for(int i5804=0;i5804<(int)prev.size();++i5804) {
          i = prev[i5804];
          tmp = parse_while5795();
          if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
            star_final_prev5803.push_back(prev[i5804]);
          }
          for(int i5805=0;i5805<(int)tmp.size();++i5805) {
            if(tmp[i5805]==FAIL) {
              if(!( !next_prev5802.empty() && next_prev5802.front() == FAIL )) {
                next_prev5802.push_front(FAIL);
              }
            } else {
              next_prev5802.push_back(tmp[i5805]);
            }
          }
        }
        prev = next_prev5802;
      }
      prev = star_final_prev5803;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5792=0;i5792<(int)prev.size();++i5792) {
    if( prev[i5792] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5792]);
    }
  }
  return memo[key(810,backtracking_ptr_for_packrat810)] = result;
}

inline deque<int> parse_while5795() { 
  if(memo.count(key(811,i))) {
    return memo[key(811,i)];
  }
  int backtracking_ptr_for_packrat811=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5797=0;i5797<(int)prev.size();++i5797) {
        if( prev[i5797] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5797]<m&&I[prev[i5797]]==',') {
          tmp.push_back(prev[i5797]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5799;
      for(int i5798=0;i5798<(int)prev.size();++i5798) {
        if( prev[i5798] == FAIL ) {
          if(!(!next_prev5799.empty() && next_prev5799.front() == FAIL )) {
            next_prev5799.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5798];
        tmp = parse__();
        
        for(int i5798=0;i5798<(int)tmp.size();++i5798) {
          if( tmp[i5798] == FAIL ) {
            if(!( !next_prev5799.empty() && next_prev5799[0] == FAIL )) {
              next_prev5799.push_front(FAIL);
            }
          } else {
            next_prev5799.push_back(tmp[i5798]);
          }
        }
      }
      prev = next_prev5799;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Expression) */
    deque<int> next_prev5801;
    for(int i5800=0;i5800<(int)prev.size();++i5800) {
      if( prev[i5800] == FAIL ) {
        if(!(!next_prev5801.empty() && next_prev5801.front() == FAIL )) {
          next_prev5801.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5800];
      tmp = parse_Expression();
      
      for(int i5800=0;i5800<(int)tmp.size();++i5800) {
        if( tmp[i5800] == FAIL ) {
          if(!( !next_prev5801.empty() && next_prev5801[0] == FAIL )) {
            next_prev5801.push_front(FAIL);
          }
        } else {
          next_prev5801.push_back(tmp[i5800]);
        }
      }
    }
    prev = next_prev5801;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5796=0;i5796<(int)prev.size();++i5796) {
    if( prev[i5796] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5796]);
    }
  }
  return memo[key(811,backtracking_ptr_for_packrat811)] = result;
}

deque<int> parse_addIndex(){
  if(memo.count(key(812,i))) {
    return memo[key(812,i)];
  }
  int backtracking_ptr_for_packrat812=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5807=0;i5807<(int)prev.size();++i5807) {
        if( prev[i5807] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5807]<m&&I[prev[i5807]]=='[') {
          tmp.push_back(prev[i5807]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5809;
      for(int i5808=0;i5808<(int)prev.size();++i5808) {
        if( prev[i5808] == FAIL ) {
          if(!(!next_prev5809.empty() && next_prev5809.front() == FAIL )) {
            next_prev5809.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5808];
        tmp = parse__();
        
        for(int i5808=0;i5808<(int)tmp.size();++i5808) {
          if( tmp[i5808] == FAIL ) {
            if(!( !next_prev5809.empty() && next_prev5809[0] == FAIL )) {
              next_prev5809.push_front(FAIL);
            }
          } else {
            next_prev5809.push_back(tmp[i5808]);
          }
        }
      }
      prev = next_prev5809;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Expression) */
    deque<int> next_prev5811;
    for(int i5810=0;i5810<(int)prev.size();++i5810) {
      if( prev[i5810] == FAIL ) {
        if(!(!next_prev5811.empty() && next_prev5811.front() == FAIL )) {
          next_prev5811.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5810];
      tmp = parse_Expression();
      
      for(int i5810=0;i5810<(int)tmp.size();++i5810) {
        if( tmp[i5810] == FAIL ) {
          if(!( !next_prev5811.empty() && next_prev5811[0] == FAIL )) {
            next_prev5811.push_front(FAIL);
          }
        } else {
          next_prev5811.push_back(tmp[i5810]);
        }
      }
    }
    prev = next_prev5811;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5812=0;i5812<(int)prev.size();++i5812) {
        if( prev[i5812] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5812]<m&&I[prev[i5812]]==']') {
          tmp.push_back(prev[i5812]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5814;
      for(int i5813=0;i5813<(int)prev.size();++i5813) {
        if( prev[i5813] == FAIL ) {
          if(!(!next_prev5814.empty() && next_prev5814.front() == FAIL )) {
            next_prev5814.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5813];
        tmp = parse__();
        
        for(int i5813=0;i5813<(int)tmp.size();++i5813) {
          if( tmp[i5813] == FAIL ) {
            if(!( !next_prev5814.empty() && next_prev5814[0] == FAIL )) {
              next_prev5814.push_front(FAIL);
            }
          } else {
            next_prev5814.push_back(tmp[i5813]);
          }
        }
      }
      prev = next_prev5814;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5806=0;i5806<(int)prev.size();++i5806) {
    if( prev[i5806] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5806]);
    }
  }
  return memo[key(812,backtracking_ptr_for_packrat812)] = result;
}

deque<int> parse_addField(){
  if(memo.count(key(813,i))) {
    return memo[key(813,i)];
  }
  int backtracking_ptr_for_packrat813=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5816=0;i5816<(int)prev.size();++i5816) {
        if( prev[i5816] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5816]<m&&I[prev[i5816]]=='.') {
          tmp.push_back(prev[i5816]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5821;
      for(int i5820=0;i5820<(int)prev.size();++i5820) {
        i = prev[i5820];
        tmp = parse_not5817();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5821.push_back(prev[i5820]);
        } else {
          if(!(!next_prev5821.empty()&&next_prev5821.front()==FAIL)) {
            next_prev5821.push_front(FAIL);
          }
        }
      }
      prev = next_prev5821;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5823;
      for(int i5822=0;i5822<(int)prev.size();++i5822) {
        if( prev[i5822] == FAIL ) {
          if(!(!next_prev5823.empty() && next_prev5823.front() == FAIL )) {
            next_prev5823.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5822];
        tmp = parse__();
        
        for(int i5822=0;i5822<(int)tmp.size();++i5822) {
          if( tmp[i5822] == FAIL ) {
            if(!( !next_prev5823.empty() && next_prev5823[0] == FAIL )) {
              next_prev5823.push_front(FAIL);
            }
          } else {
            next_prev5823.push_back(tmp[i5822]);
          }
        }
      }
      prev = next_prev5823;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev5825;
    for(int i5824=0;i5824<(int)prev.size();++i5824) {
      if( prev[i5824] == FAIL ) {
        if(!(!next_prev5825.empty() && next_prev5825.front() == FAIL )) {
          next_prev5825.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5824];
      tmp = parse_Identifier();
      
      for(int i5824=0;i5824<(int)tmp.size();++i5824) {
        if( tmp[i5824] == FAIL ) {
          if(!( !next_prev5825.empty() && next_prev5825[0] == FAIL )) {
            next_prev5825.push_front(FAIL);
          }
        } else {
          next_prev5825.push_back(tmp[i5824]);
        }
      }
    }
    prev = next_prev5825;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Not */
    deque<int> next_prev5830;
    for(int i5829=0;i5829<(int)prev.size();++i5829) {
      i = prev[i5829];
      tmp = parse_not5826();
      if(!tmp.empty()&&tmp.front()==FAIL) {
        next_prev5830.push_back(prev[i5829]);
      } else {
        if(!(!next_prev5830.empty()&&next_prev5830.front()==FAIL)) {
          next_prev5830.push_front(FAIL);
        }
      }
    }
    prev = next_prev5830;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5815=0;i5815<(int)prev.size();++i5815) {
    if( prev[i5815] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5815]);
    }
  }
  return memo[key(813,backtracking_ptr_for_packrat813)] = result;
}

inline deque<int> parse_not5817() { 
  if(memo.count(key(814,i))) {
    return memo[key(814,i)];
  }
  int backtracking_ptr_for_packrat814=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i5819=0;i5819<(int)prev.size();++i5819) {
    if( prev[i5819] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i5819]<m&&I[prev[i5819]]=='.') {
      tmp.push_back(prev[i5819]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i5818=0;i5818<(int)prev.size();++i5818) {
    if( prev[i5818] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5818]);
    }
  }
  return memo[key(814,backtracking_ptr_for_packrat814)] = result;
}

inline deque<int> parse_not5826() { 
  if(memo.count(key(815,i))) {
    return memo[key(815,i)];
  }
  int backtracking_ptr_for_packrat815=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i5828=0;i5828<(int)prev.size();++i5828) {
    if( prev[i5828] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i5828]<m&&I[prev[i5828]]=='(') {
      tmp.push_back(prev[i5828]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i5827=0;i5827<(int)prev.size();++i5827) {
    if( prev[i5827] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5827]);
    }
  }
  return memo[key(815,backtracking_ptr_for_packrat815)] = result;
}

deque<int> parse_addMethodReference(){
  if(memo.count(key(816,i))) {
    return memo[key(816,i)];
  }
  int backtracking_ptr_for_packrat816=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5832=0;i5832<(int)prev.size();++i5832) {
        if( prev[i5832] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5832]<m&&I[prev[i5832]]==':') {
          tmp.push_back(prev[i5832]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5833=0;i5833<(int)prev.size();++i5833) {
        if( prev[i5833] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5833]<m&&I[prev[i5833]]==':') {
          tmp.push_back(prev[i5833]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5835;
      for(int i5834=0;i5834<(int)prev.size();++i5834) {
        if( prev[i5834] == FAIL ) {
          if(!(!next_prev5835.empty() && next_prev5835.front() == FAIL )) {
            next_prev5835.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5834];
        tmp = parse__();
        
        for(int i5834=0;i5834<(int)tmp.size();++i5834) {
          if( tmp[i5834] == FAIL ) {
            if(!( !next_prev5835.empty() && next_prev5835[0] == FAIL )) {
              next_prev5835.push_front(FAIL);
            }
          } else {
            next_prev5835.push_back(tmp[i5834]);
          }
        }
      }
      prev = next_prev5835;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev5837;
    deque<int> prioritized_choice_final_prev5838;
    next_prev5837.clear();
    for(int i5836=0;i5836<(int)prev.size();++i5836) {
      i = prev[i5836];
      tmp = parse_slash5839();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5837.push_back(prev[i5836]); }
      for(int i5843=0;i5843<(int)tmp.size();++i5843) {
        if( tmp[i5843] != FAIL ) {
          prioritized_choice_final_prev5838.push_back(tmp[i5843]);
        }
      }
    }
    prev = next_prev5837;
    next_prev5837.clear();
    for(int i5836=0;i5836<(int)prev.size();++i5836) {
      i = prev[i5836];
      tmp = parse_slash5844();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5837.push_back(prev[i5836]); }
      for(int i5846=0;i5846<(int)tmp.size();++i5846) {
        if( tmp[i5846] != FAIL ) {
          prioritized_choice_final_prev5838.push_back(tmp[i5846]);
        }
      }
    }
    prev = next_prev5837;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev5838.empty() && prioritized_choice_final_prev5838.front() == FAIL )) {
        prioritized_choice_final_prev5838.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev5838;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev5848;
    for(int i5847=0;i5847<(int)prev.size();++i5847) {
      if( prev[i5847] == FAIL ) {
        if(!(!next_prev5848.empty() && next_prev5848.front() == FAIL )) {
          next_prev5848.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5847];
      tmp = parse_Identifier();
      
      for(int i5847=0;i5847<(int)tmp.size();++i5847) {
        if( tmp[i5847] == FAIL ) {
          if(!( !next_prev5848.empty() && next_prev5848[0] == FAIL )) {
            next_prev5848.push_front(FAIL);
          }
        } else {
          next_prev5848.push_back(tmp[i5847]);
        }
      }
    }
    prev = next_prev5848;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5831=0;i5831<(int)prev.size();++i5831) {
    if( prev[i5831] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5831]);
    }
  }
  return memo[key(816,backtracking_ptr_for_packrat816)] = result;
}

inline deque<int> parse_slash5839() { 
  if(memo.count(key(817,i))) {
    return memo[key(817,i)];
  }
  int backtracking_ptr_for_packrat817=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (TypeArguments) */
    deque<int> next_prev5842;
    for(int i5841=0;i5841<(int)prev.size();++i5841) {
      if( prev[i5841] == FAIL ) {
        if(!(!next_prev5842.empty() && next_prev5842.front() == FAIL )) {
          next_prev5842.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5841];
      tmp = parse_TypeArguments();
      
      for(int i5841=0;i5841<(int)tmp.size();++i5841) {
        if( tmp[i5841] == FAIL ) {
          if(!( !next_prev5842.empty() && next_prev5842[0] == FAIL )) {
            next_prev5842.push_front(FAIL);
          }
        } else {
          next_prev5842.push_back(tmp[i5841]);
        }
      }
    }
    prev = next_prev5842;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5840=0;i5840<(int)prev.size();++i5840) {
    if( prev[i5840] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5840]);
    }
  }
  return memo[key(817,backtracking_ptr_for_packrat817)] = result;
}

inline deque<int> parse_slash5844() { 
  if(memo.count(key(818,i))) {
    return memo[key(818,i)];
  }
  int backtracking_ptr_for_packrat818=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i5845=0;i5845<(int)prev.size();++i5845) {
    if( prev[i5845] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5845]);
    }
  }
  return memo[key(818,backtracking_ptr_for_packrat818)] = result;
}

deque<int> parse_addInc(){
  if(memo.count(key(819,i))) {
    return memo[key(819,i)];
  }
  int backtracking_ptr_for_packrat819=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5850=0;i5850<(int)prev.size();++i5850) {
        if( prev[i5850] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5850]<m&&I[prev[i5850]]=='+') {
          tmp.push_back(prev[i5850]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5851=0;i5851<(int)prev.size();++i5851) {
        if( prev[i5851] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5851]<m&&I[prev[i5851]]=='+') {
          tmp.push_back(prev[i5851]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5853;
      for(int i5852=0;i5852<(int)prev.size();++i5852) {
        if( prev[i5852] == FAIL ) {
          if(!(!next_prev5853.empty() && next_prev5853.front() == FAIL )) {
            next_prev5853.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5852];
        tmp = parse__();
        
        for(int i5852=0;i5852<(int)tmp.size();++i5852) {
          if( tmp[i5852] == FAIL ) {
            if(!( !next_prev5853.empty() && next_prev5853[0] == FAIL )) {
              next_prev5853.push_front(FAIL);
            }
          } else {
            next_prev5853.push_back(tmp[i5852]);
          }
        }
      }
      prev = next_prev5853;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5849=0;i5849<(int)prev.size();++i5849) {
    if( prev[i5849] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5849]);
    }
  }
  return memo[key(819,backtracking_ptr_for_packrat819)] = result;
}

deque<int> parse_addDec(){
  if(memo.count(key(820,i))) {
    return memo[key(820,i)];
  }
  int backtracking_ptr_for_packrat820=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5855=0;i5855<(int)prev.size();++i5855) {
        if( prev[i5855] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5855]<m&&I[prev[i5855]]=='-') {
          tmp.push_back(prev[i5855]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5856=0;i5856<(int)prev.size();++i5856) {
        if( prev[i5856] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5856]<m&&I[prev[i5856]]=='-') {
          tmp.push_back(prev[i5856]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5858;
      for(int i5857=0;i5857<(int)prev.size();++i5857) {
        if( prev[i5857] == FAIL ) {
          if(!(!next_prev5858.empty() && next_prev5858.front() == FAIL )) {
            next_prev5858.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5857];
        tmp = parse__();
        
        for(int i5857=0;i5857<(int)tmp.size();++i5857) {
          if( tmp[i5857] == FAIL ) {
            if(!( !next_prev5858.empty() && next_prev5858[0] == FAIL )) {
              next_prev5858.push_front(FAIL);
            }
          } else {
            next_prev5858.push_back(tmp[i5857]);
          }
        }
      }
      prev = next_prev5858;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5854=0;i5854<(int)prev.size();++i5854) {
    if( prev[i5854] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5854]);
    }
  }
  return memo[key(820,backtracking_ptr_for_packrat820)] = result;
}

deque<int> parse_PrimaryExpression(){
  if(memo.count(key(821,i))) {
    return memo[key(821,i)];
  }
  int backtracking_ptr_for_packrat821=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev5861;
  deque<int> prioritized_choice_final_prev5862;
  next_prev5861.clear();
  for(int i5860=0;i5860<(int)prev.size();++i5860) {
    i = prev[i5860];
    tmp = parse_slash5863();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5861.push_back(prev[i5860]); }
    for(int i5867=0;i5867<(int)tmp.size();++i5867) {
      if( tmp[i5867] != FAIL ) {
        prioritized_choice_final_prev5862.push_back(tmp[i5867]);
      }
    }
  }
  prev = next_prev5861;
  next_prev5861.clear();
  for(int i5860=0;i5860<(int)prev.size();++i5860) {
    i = prev[i5860];
    tmp = parse_slash5868();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5861.push_back(prev[i5860]); }
    for(int i5872=0;i5872<(int)tmp.size();++i5872) {
      if( tmp[i5872] != FAIL ) {
        prioritized_choice_final_prev5862.push_back(tmp[i5872]);
      }
    }
  }
  prev = next_prev5861;
  next_prev5861.clear();
  for(int i5860=0;i5860<(int)prev.size();++i5860) {
    i = prev[i5860];
    tmp = parse_slash5873();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5861.push_back(prev[i5860]); }
    for(int i5877=0;i5877<(int)tmp.size();++i5877) {
      if( tmp[i5877] != FAIL ) {
        prioritized_choice_final_prev5862.push_back(tmp[i5877]);
      }
    }
  }
  prev = next_prev5861;
  next_prev5861.clear();
  for(int i5860=0;i5860<(int)prev.size();++i5860) {
    i = prev[i5860];
    tmp = parse_slash5878();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5861.push_back(prev[i5860]); }
    for(int i5888=0;i5888<(int)tmp.size();++i5888) {
      if( tmp[i5888] != FAIL ) {
        prioritized_choice_final_prev5862.push_back(tmp[i5888]);
      }
    }
  }
  prev = next_prev5861;
  next_prev5861.clear();
  for(int i5860=0;i5860<(int)prev.size();++i5860) {
    i = prev[i5860];
    tmp = parse_slash5889();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5861.push_back(prev[i5860]); }
    for(int i5893=0;i5893<(int)tmp.size();++i5893) {
      if( tmp[i5893] != FAIL ) {
        prioritized_choice_final_prev5862.push_back(tmp[i5893]);
      }
    }
  }
  prev = next_prev5861;
  next_prev5861.clear();
  for(int i5860=0;i5860<(int)prev.size();++i5860) {
    i = prev[i5860];
    tmp = parse_slash5894();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5861.push_back(prev[i5860]); }
    for(int i5918=0;i5918<(int)tmp.size();++i5918) {
      if( tmp[i5918] != FAIL ) {
        prioritized_choice_final_prev5862.push_back(tmp[i5918]);
      }
    }
  }
  prev = next_prev5861;
  next_prev5861.clear();
  for(int i5860=0;i5860<(int)prev.size();++i5860) {
    i = prev[i5860];
    tmp = parse_slash5919();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5861.push_back(prev[i5860]); }
    for(int i5944=0;i5944<(int)tmp.size();++i5944) {
      if( tmp[i5944] != FAIL ) {
        prioritized_choice_final_prev5862.push_back(tmp[i5944]);
      }
    }
  }
  prev = next_prev5861;
  next_prev5861.clear();
  for(int i5860=0;i5860<(int)prev.size();++i5860) {
    i = prev[i5860];
    tmp = parse_slash5945();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5861.push_back(prev[i5860]); }
    for(int i5949=0;i5949<(int)tmp.size();++i5949) {
      if( tmp[i5949] != FAIL ) {
        prioritized_choice_final_prev5862.push_back(tmp[i5949]);
      }
    }
  }
  prev = next_prev5861;
  next_prev5861.clear();
  for(int i5860=0;i5860<(int)prev.size();++i5860) {
    i = prev[i5860];
    tmp = parse_slash5950();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5861.push_back(prev[i5860]); }
    for(int i5954=0;i5954<(int)tmp.size();++i5954) {
      if( tmp[i5954] != FAIL ) {
        prioritized_choice_final_prev5862.push_back(tmp[i5954]);
      }
    }
  }
  prev = next_prev5861;
  next_prev5861.clear();
  for(int i5860=0;i5860<(int)prev.size();++i5860) {
    i = prev[i5860];
    tmp = parse_slash5955();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5861.push_back(prev[i5860]); }
    for(int i5959=0;i5959<(int)tmp.size();++i5959) {
      if( tmp[i5959] != FAIL ) {
        prioritized_choice_final_prev5862.push_back(tmp[i5959]);
      }
    }
  }
  prev = next_prev5861;
  next_prev5861.clear();
  for(int i5860=0;i5860<(int)prev.size();++i5860) {
    i = prev[i5860];
    tmp = parse_slash5960();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5861.push_back(prev[i5860]); }
    for(int i5964=0;i5964<(int)tmp.size();++i5964) {
      if( tmp[i5964] != FAIL ) {
        prioritized_choice_final_prev5862.push_back(tmp[i5964]);
      }
    }
  }
  prev = next_prev5861;
  next_prev5861.clear();
  for(int i5860=0;i5860<(int)prev.size();++i5860) {
    i = prev[i5860];
    tmp = parse_slash5965();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev5861.push_back(prev[i5860]); }
    for(int i5969=0;i5969<(int)tmp.size();++i5969) {
      if( tmp[i5969] != FAIL ) {
        prioritized_choice_final_prev5862.push_back(tmp[i5969]);
      }
    }
  }
  prev = next_prev5861;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev5862.empty() && prioritized_choice_final_prev5862.front() == FAIL )) {
      prioritized_choice_final_prev5862.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev5862;
  for(int i5859=0;i5859<(int)prev.size();++i5859) {
    if( prev[i5859] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5859]);
    }
  }
  return memo[key(821,backtracking_ptr_for_packrat821)] = result;
}

inline deque<int> parse_slash5863() { 
  if(memo.count(key(822,i))) {
    return memo[key(822,i)];
  }
  int backtracking_ptr_for_packrat822=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Constant) */
    deque<int> next_prev5866;
    for(int i5865=0;i5865<(int)prev.size();++i5865) {
      if( prev[i5865] == FAIL ) {
        if(!(!next_prev5866.empty() && next_prev5866.front() == FAIL )) {
          next_prev5866.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5865];
      tmp = parse_Constant();
      
      for(int i5865=0;i5865<(int)tmp.size();++i5865) {
        if( tmp[i5865] == FAIL ) {
          if(!( !next_prev5866.empty() && next_prev5866[0] == FAIL )) {
            next_prev5866.push_front(FAIL);
          }
        } else {
          next_prev5866.push_back(tmp[i5865]);
        }
      }
    }
    prev = next_prev5866;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5864=0;i5864<(int)prev.size();++i5864) {
    if( prev[i5864] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5864]);
    }
  }
  return memo[key(822,backtracking_ptr_for_packrat822)] = result;
}

inline deque<int> parse_slash5868() { 
  if(memo.count(key(823,i))) {
    return memo[key(823,i)];
  }
  int backtracking_ptr_for_packrat823=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (This) */
    deque<int> next_prev5871;
    for(int i5870=0;i5870<(int)prev.size();++i5870) {
      if( prev[i5870] == FAIL ) {
        if(!(!next_prev5871.empty() && next_prev5871.front() == FAIL )) {
          next_prev5871.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5870];
      tmp = parse_This();
      
      for(int i5870=0;i5870<(int)tmp.size();++i5870) {
        if( tmp[i5870] == FAIL ) {
          if(!( !next_prev5871.empty() && next_prev5871[0] == FAIL )) {
            next_prev5871.push_front(FAIL);
          }
        } else {
          next_prev5871.push_back(tmp[i5870]);
        }
      }
    }
    prev = next_prev5871;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5869=0;i5869<(int)prev.size();++i5869) {
    if( prev[i5869] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5869]);
    }
  }
  return memo[key(823,backtracking_ptr_for_packrat823)] = result;
}

inline deque<int> parse_slash5873() { 
  if(memo.count(key(824,i))) {
    return memo[key(824,i)];
  }
  int backtracking_ptr_for_packrat824=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Super) */
    deque<int> next_prev5876;
    for(int i5875=0;i5875<(int)prev.size();++i5875) {
      if( prev[i5875] == FAIL ) {
        if(!(!next_prev5876.empty() && next_prev5876.front() == FAIL )) {
          next_prev5876.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5875];
      tmp = parse_Super();
      
      for(int i5875=0;i5875<(int)tmp.size();++i5875) {
        if( tmp[i5875] == FAIL ) {
          if(!( !next_prev5876.empty() && next_prev5876[0] == FAIL )) {
            next_prev5876.push_front(FAIL);
          }
        } else {
          next_prev5876.push_back(tmp[i5875]);
        }
      }
    }
    prev = next_prev5876;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5874=0;i5874<(int)prev.size();++i5874) {
    if( prev[i5874] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5874]);
    }
  }
  return memo[key(824,backtracking_ptr_for_packrat824)] = result;
}

inline deque<int> parse_slash5878() { 
  if(memo.count(key(825,i))) {
    return memo[key(825,i)];
  }
  int backtracking_ptr_for_packrat825=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5880=0;i5880<(int)prev.size();++i5880) {
        if( prev[i5880] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5880]<m&&I[prev[i5880]]=='(') {
          tmp.push_back(prev[i5880]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5882;
      for(int i5881=0;i5881<(int)prev.size();++i5881) {
        if( prev[i5881] == FAIL ) {
          if(!(!next_prev5882.empty() && next_prev5882.front() == FAIL )) {
            next_prev5882.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5881];
        tmp = parse__();
        
        for(int i5881=0;i5881<(int)tmp.size();++i5881) {
          if( tmp[i5881] == FAIL ) {
            if(!( !next_prev5882.empty() && next_prev5882[0] == FAIL )) {
              next_prev5882.push_front(FAIL);
            }
          } else {
            next_prev5882.push_back(tmp[i5881]);
          }
        }
      }
      prev = next_prev5882;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Expression) */
    deque<int> next_prev5884;
    for(int i5883=0;i5883<(int)prev.size();++i5883) {
      if( prev[i5883] == FAIL ) {
        if(!(!next_prev5884.empty() && next_prev5884.front() == FAIL )) {
          next_prev5884.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5883];
      tmp = parse_Expression();
      
      for(int i5883=0;i5883<(int)tmp.size();++i5883) {
        if( tmp[i5883] == FAIL ) {
          if(!( !next_prev5884.empty() && next_prev5884[0] == FAIL )) {
            next_prev5884.push_front(FAIL);
          }
        } else {
          next_prev5884.push_back(tmp[i5883]);
        }
      }
    }
    prev = next_prev5884;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5885=0;i5885<(int)prev.size();++i5885) {
        if( prev[i5885] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5885]<m&&I[prev[i5885]]==')') {
          tmp.push_back(prev[i5885]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5887;
      for(int i5886=0;i5886<(int)prev.size();++i5886) {
        if( prev[i5886] == FAIL ) {
          if(!(!next_prev5887.empty() && next_prev5887.front() == FAIL )) {
            next_prev5887.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5886];
        tmp = parse__();
        
        for(int i5886=0;i5886<(int)tmp.size();++i5886) {
          if( tmp[i5886] == FAIL ) {
            if(!( !next_prev5887.empty() && next_prev5887[0] == FAIL )) {
              next_prev5887.push_front(FAIL);
            }
          } else {
            next_prev5887.push_back(tmp[i5886]);
          }
        }
      }
      prev = next_prev5887;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5879=0;i5879<(int)prev.size();++i5879) {
    if( prev[i5879] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5879]);
    }
  }
  return memo[key(825,backtracking_ptr_for_packrat825)] = result;
}

inline deque<int> parse_slash5889() { 
  if(memo.count(key(826,i))) {
    return memo[key(826,i)];
  }
  int backtracking_ptr_for_packrat826=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassLiteral) */
    deque<int> next_prev5892;
    for(int i5891=0;i5891<(int)prev.size();++i5891) {
      if( prev[i5891] == FAIL ) {
        if(!(!next_prev5892.empty() && next_prev5892.front() == FAIL )) {
          next_prev5892.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5891];
      tmp = parse_ClassLiteral();
      
      for(int i5891=0;i5891<(int)tmp.size();++i5891) {
        if( tmp[i5891] == FAIL ) {
          if(!( !next_prev5892.empty() && next_prev5892[0] == FAIL )) {
            next_prev5892.push_front(FAIL);
          }
        } else {
          next_prev5892.push_back(tmp[i5891]);
        }
      }
    }
    prev = next_prev5892;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5890=0;i5890<(int)prev.size();++i5890) {
    if( prev[i5890] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5890]);
    }
  }
  return memo[key(826,backtracking_ptr_for_packrat826)] = result;
}

inline deque<int> parse_slash5894() { 
  if(memo.count(key(827,i))) {
    return memo[key(827,i)];
  }
  int backtracking_ptr_for_packrat827=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (QualifiedName) */
    deque<int> next_prev5897;
    for(int i5896=0;i5896<(int)prev.size();++i5896) {
      if( prev[i5896] == FAIL ) {
        if(!(!next_prev5897.empty() && next_prev5897.front() == FAIL )) {
          next_prev5897.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5896];
      tmp = parse_QualifiedName();
      
      for(int i5896=0;i5896<(int)tmp.size();++i5896) {
        if( tmp[i5896] == FAIL ) {
          if(!( !next_prev5897.empty() && next_prev5897[0] == FAIL )) {
            next_prev5897.push_front(FAIL);
          }
        } else {
          next_prev5897.push_back(tmp[i5896]);
        }
      }
    }
    prev = next_prev5897;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5898=0;i5898<(int)prev.size();++i5898) {
        if( prev[i5898] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5898]<m&&I[prev[i5898]]=='.') {
          tmp.push_back(prev[i5898]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5903;
      for(int i5902=0;i5902<(int)prev.size();++i5902) {
        i = prev[i5902];
        tmp = parse_not5899();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5903.push_back(prev[i5902]);
        } else {
          if(!(!next_prev5903.empty()&&next_prev5903.front()==FAIL)) {
            next_prev5903.push_front(FAIL);
          }
        }
      }
      prev = next_prev5903;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5905;
      for(int i5904=0;i5904<(int)prev.size();++i5904) {
        if( prev[i5904] == FAIL ) {
          if(!(!next_prev5905.empty() && next_prev5905.front() == FAIL )) {
            next_prev5905.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5904];
        tmp = parse__();
        
        for(int i5904=0;i5904<(int)tmp.size();++i5904) {
          if( tmp[i5904] == FAIL ) {
            if(!( !next_prev5905.empty() && next_prev5905[0] == FAIL )) {
              next_prev5905.push_front(FAIL);
            }
          } else {
            next_prev5905.push_back(tmp[i5904]);
          }
        }
      }
      prev = next_prev5905;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5906=0;i5906<(int)prev.size();++i5906) {
        if( prev[i5906] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5906]<m&&I[prev[i5906]]=='t') {
          tmp.push_back(prev[i5906]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5907=0;i5907<(int)prev.size();++i5907) {
        if( prev[i5907] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5907]<m&&I[prev[i5907]]=='h') {
          tmp.push_back(prev[i5907]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5908=0;i5908<(int)prev.size();++i5908) {
        if( prev[i5908] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5908]<m&&I[prev[i5908]]=='i') {
          tmp.push_back(prev[i5908]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5909=0;i5909<(int)prev.size();++i5909) {
        if( prev[i5909] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5909]<m&&I[prev[i5909]]=='s') {
          tmp.push_back(prev[i5909]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5915;
      for(int i5914=0;i5914<(int)prev.size();++i5914) {
        i = prev[i5914];
        tmp = parse_not5910();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5915.push_back(prev[i5914]);
        } else {
          if(!(!next_prev5915.empty()&&next_prev5915.front()==FAIL)) {
            next_prev5915.push_front(FAIL);
          }
        }
      }
      prev = next_prev5915;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5917;
      for(int i5916=0;i5916<(int)prev.size();++i5916) {
        if( prev[i5916] == FAIL ) {
          if(!(!next_prev5917.empty() && next_prev5917.front() == FAIL )) {
            next_prev5917.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5916];
        tmp = parse__();
        
        for(int i5916=0;i5916<(int)tmp.size();++i5916) {
          if( tmp[i5916] == FAIL ) {
            if(!( !next_prev5917.empty() && next_prev5917[0] == FAIL )) {
              next_prev5917.push_front(FAIL);
            }
          } else {
            next_prev5917.push_back(tmp[i5916]);
          }
        }
      }
      prev = next_prev5917;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5895=0;i5895<(int)prev.size();++i5895) {
    if( prev[i5895] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5895]);
    }
  }
  return memo[key(827,backtracking_ptr_for_packrat827)] = result;
}

inline deque<int> parse_not5899() { 
  if(memo.count(key(828,i))) {
    return memo[key(828,i)];
  }
  int backtracking_ptr_for_packrat828=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i5901=0;i5901<(int)prev.size();++i5901) {
    if( prev[i5901] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i5901]<m&&I[prev[i5901]]=='.') {
      tmp.push_back(prev[i5901]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i5900=0;i5900<(int)prev.size();++i5900) {
    if( prev[i5900] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5900]);
    }
  }
  return memo[key(828,backtracking_ptr_for_packrat828)] = result;
}

inline deque<int> parse_not5910() { 
  if(memo.count(key(829,i))) {
    return memo[key(829,i)];
  }
  int backtracking_ptr_for_packrat829=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev5913;
  for(int i5912=0;i5912<(int)prev.size();++i5912) {
    if( prev[i5912] == FAIL ) {
      if(!(!next_prev5913.empty() && next_prev5913.front() == FAIL )) {
        next_prev5913.push_front(FAIL);
      }
      continue;
    }
    i = prev[i5912];
    tmp = parse_W();
    
    for(int i5912=0;i5912<(int)tmp.size();++i5912) {
      if( tmp[i5912] == FAIL ) {
        if(!( !next_prev5913.empty() && next_prev5913[0] == FAIL )) {
          next_prev5913.push_front(FAIL);
        }
      } else {
        next_prev5913.push_back(tmp[i5912]);
      }
    }
  }
  prev = next_prev5913;
  for(int i5911=0;i5911<(int)prev.size();++i5911) {
    if( prev[i5911] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5911]);
    }
  }
  return memo[key(829,backtracking_ptr_for_packrat829)] = result;
}

inline deque<int> parse_slash5919() { 
  if(memo.count(key(830,i))) {
    return memo[key(830,i)];
  }
  int backtracking_ptr_for_packrat830=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (QualifiedName) */
    deque<int> next_prev5922;
    for(int i5921=0;i5921<(int)prev.size();++i5921) {
      if( prev[i5921] == FAIL ) {
        if(!(!next_prev5922.empty() && next_prev5922.front() == FAIL )) {
          next_prev5922.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5921];
      tmp = parse_QualifiedName();
      
      for(int i5921=0;i5921<(int)tmp.size();++i5921) {
        if( tmp[i5921] == FAIL ) {
          if(!( !next_prev5922.empty() && next_prev5922[0] == FAIL )) {
            next_prev5922.push_front(FAIL);
          }
        } else {
          next_prev5922.push_back(tmp[i5921]);
        }
      }
    }
    prev = next_prev5922;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5923=0;i5923<(int)prev.size();++i5923) {
        if( prev[i5923] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5923]<m&&I[prev[i5923]]=='.') {
          tmp.push_back(prev[i5923]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5928;
      for(int i5927=0;i5927<(int)prev.size();++i5927) {
        i = prev[i5927];
        tmp = parse_not5924();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5928.push_back(prev[i5927]);
        } else {
          if(!(!next_prev5928.empty()&&next_prev5928.front()==FAIL)) {
            next_prev5928.push_front(FAIL);
          }
        }
      }
      prev = next_prev5928;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5930;
      for(int i5929=0;i5929<(int)prev.size();++i5929) {
        if( prev[i5929] == FAIL ) {
          if(!(!next_prev5930.empty() && next_prev5930.front() == FAIL )) {
            next_prev5930.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5929];
        tmp = parse__();
        
        for(int i5929=0;i5929<(int)tmp.size();++i5929) {
          if( tmp[i5929] == FAIL ) {
            if(!( !next_prev5930.empty() && next_prev5930[0] == FAIL )) {
              next_prev5930.push_front(FAIL);
            }
          } else {
            next_prev5930.push_back(tmp[i5929]);
          }
        }
      }
      prev = next_prev5930;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5931=0;i5931<(int)prev.size();++i5931) {
        if( prev[i5931] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5931]<m&&I[prev[i5931]]=='s') {
          tmp.push_back(prev[i5931]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5932=0;i5932<(int)prev.size();++i5932) {
        if( prev[i5932] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5932]<m&&I[prev[i5932]]=='u') {
          tmp.push_back(prev[i5932]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5933=0;i5933<(int)prev.size();++i5933) {
        if( prev[i5933] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5933]<m&&I[prev[i5933]]=='p') {
          tmp.push_back(prev[i5933]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5934=0;i5934<(int)prev.size();++i5934) {
        if( prev[i5934] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5934]<m&&I[prev[i5934]]=='e') {
          tmp.push_back(prev[i5934]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5935=0;i5935<(int)prev.size();++i5935) {
        if( prev[i5935] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5935]<m&&I[prev[i5935]]=='r') {
          tmp.push_back(prev[i5935]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5941;
      for(int i5940=0;i5940<(int)prev.size();++i5940) {
        i = prev[i5940];
        tmp = parse_not5936();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5941.push_back(prev[i5940]);
        } else {
          if(!(!next_prev5941.empty()&&next_prev5941.front()==FAIL)) {
            next_prev5941.push_front(FAIL);
          }
        }
      }
      prev = next_prev5941;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5943;
      for(int i5942=0;i5942<(int)prev.size();++i5942) {
        if( prev[i5942] == FAIL ) {
          if(!(!next_prev5943.empty() && next_prev5943.front() == FAIL )) {
            next_prev5943.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5942];
        tmp = parse__();
        
        for(int i5942=0;i5942<(int)tmp.size();++i5942) {
          if( tmp[i5942] == FAIL ) {
            if(!( !next_prev5943.empty() && next_prev5943[0] == FAIL )) {
              next_prev5943.push_front(FAIL);
            }
          } else {
            next_prev5943.push_back(tmp[i5942]);
          }
        }
      }
      prev = next_prev5943;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5920=0;i5920<(int)prev.size();++i5920) {
    if( prev[i5920] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5920]);
    }
  }
  return memo[key(830,backtracking_ptr_for_packrat830)] = result;
}

inline deque<int> parse_not5924() { 
  if(memo.count(key(831,i))) {
    return memo[key(831,i)];
  }
  int backtracking_ptr_for_packrat831=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i5926=0;i5926<(int)prev.size();++i5926) {
    if( prev[i5926] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i5926]<m&&I[prev[i5926]]=='.') {
      tmp.push_back(prev[i5926]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i5925=0;i5925<(int)prev.size();++i5925) {
    if( prev[i5925] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5925]);
    }
  }
  return memo[key(831,backtracking_ptr_for_packrat831)] = result;
}

inline deque<int> parse_not5936() { 
  if(memo.count(key(832,i))) {
    return memo[key(832,i)];
  }
  int backtracking_ptr_for_packrat832=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev5939;
  for(int i5938=0;i5938<(int)prev.size();++i5938) {
    if( prev[i5938] == FAIL ) {
      if(!(!next_prev5939.empty() && next_prev5939.front() == FAIL )) {
        next_prev5939.push_front(FAIL);
      }
      continue;
    }
    i = prev[i5938];
    tmp = parse_W();
    
    for(int i5938=0;i5938<(int)tmp.size();++i5938) {
      if( tmp[i5938] == FAIL ) {
        if(!( !next_prev5939.empty() && next_prev5939[0] == FAIL )) {
          next_prev5939.push_front(FAIL);
        }
      } else {
        next_prev5939.push_back(tmp[i5938]);
      }
    }
  }
  prev = next_prev5939;
  for(int i5937=0;i5937<(int)prev.size();++i5937) {
    if( prev[i5937] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5937]);
    }
  }
  return memo[key(832,backtracking_ptr_for_packrat832)] = result;
}

inline deque<int> parse_slash5945() { 
  if(memo.count(key(833,i))) {
    return memo[key(833,i)];
  }
  int backtracking_ptr_for_packrat833=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (MethodInvocationExpression) */
    deque<int> next_prev5948;
    for(int i5947=0;i5947<(int)prev.size();++i5947) {
      if( prev[i5947] == FAIL ) {
        if(!(!next_prev5948.empty() && next_prev5948.front() == FAIL )) {
          next_prev5948.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5947];
      tmp = parse_MethodInvocationExpression();
      
      for(int i5947=0;i5947<(int)tmp.size();++i5947) {
        if( tmp[i5947] == FAIL ) {
          if(!( !next_prev5948.empty() && next_prev5948[0] == FAIL )) {
            next_prev5948.push_front(FAIL);
          }
        } else {
          next_prev5948.push_back(tmp[i5947]);
        }
      }
    }
    prev = next_prev5948;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5946=0;i5946<(int)prev.size();++i5946) {
    if( prev[i5946] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5946]);
    }
  }
  return memo[key(833,backtracking_ptr_for_packrat833)] = result;
}

inline deque<int> parse_slash5950() { 
  if(memo.count(key(834,i))) {
    return memo[key(834,i)];
  }
  int backtracking_ptr_for_packrat834=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (InstanceCreationExpression) */
    deque<int> next_prev5953;
    for(int i5952=0;i5952<(int)prev.size();++i5952) {
      if( prev[i5952] == FAIL ) {
        if(!(!next_prev5953.empty() && next_prev5953.front() == FAIL )) {
          next_prev5953.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5952];
      tmp = parse_InstanceCreationExpression();
      
      for(int i5952=0;i5952<(int)tmp.size();++i5952) {
        if( tmp[i5952] == FAIL ) {
          if(!( !next_prev5953.empty() && next_prev5953[0] == FAIL )) {
            next_prev5953.push_front(FAIL);
          }
        } else {
          next_prev5953.push_back(tmp[i5952]);
        }
      }
    }
    prev = next_prev5953;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5951=0;i5951<(int)prev.size();++i5951) {
    if( prev[i5951] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5951]);
    }
  }
  return memo[key(834,backtracking_ptr_for_packrat834)] = result;
}

inline deque<int> parse_slash5955() { 
  if(memo.count(key(835,i))) {
    return memo[key(835,i)];
  }
  int backtracking_ptr_for_packrat835=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ArrayCreationExpression) */
    deque<int> next_prev5958;
    for(int i5957=0;i5957<(int)prev.size();++i5957) {
      if( prev[i5957] == FAIL ) {
        if(!(!next_prev5958.empty() && next_prev5958.front() == FAIL )) {
          next_prev5958.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5957];
      tmp = parse_ArrayCreationExpression();
      
      for(int i5957=0;i5957<(int)tmp.size();++i5957) {
        if( tmp[i5957] == FAIL ) {
          if(!( !next_prev5958.empty() && next_prev5958[0] == FAIL )) {
            next_prev5958.push_front(FAIL);
          }
        } else {
          next_prev5958.push_back(tmp[i5957]);
        }
      }
    }
    prev = next_prev5958;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5956=0;i5956<(int)prev.size();++i5956) {
    if( prev[i5956] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5956]);
    }
  }
  return memo[key(835,backtracking_ptr_for_packrat835)] = result;
}

inline deque<int> parse_slash5960() { 
  if(memo.count(key(836,i))) {
    return memo[key(836,i)];
  }
  int backtracking_ptr_for_packrat836=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (MethodReference) */
    deque<int> next_prev5963;
    for(int i5962=0;i5962<(int)prev.size();++i5962) {
      if( prev[i5962] == FAIL ) {
        if(!(!next_prev5963.empty() && next_prev5963.front() == FAIL )) {
          next_prev5963.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5962];
      tmp = parse_MethodReference();
      
      for(int i5962=0;i5962<(int)tmp.size();++i5962) {
        if( tmp[i5962] == FAIL ) {
          if(!( !next_prev5963.empty() && next_prev5963[0] == FAIL )) {
            next_prev5963.push_front(FAIL);
          }
        } else {
          next_prev5963.push_back(tmp[i5962]);
        }
      }
    }
    prev = next_prev5963;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5961=0;i5961<(int)prev.size();++i5961) {
    if( prev[i5961] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5961]);
    }
  }
  return memo[key(836,backtracking_ptr_for_packrat836)] = result;
}

inline deque<int> parse_slash5965() { 
  if(memo.count(key(837,i))) {
    return memo[key(837,i)];
  }
  int backtracking_ptr_for_packrat837=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev5968;
    for(int i5967=0;i5967<(int)prev.size();++i5967) {
      if( prev[i5967] == FAIL ) {
        if(!(!next_prev5968.empty() && next_prev5968.front() == FAIL )) {
          next_prev5968.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5967];
      tmp = parse_Identifier();
      
      for(int i5967=0;i5967<(int)tmp.size();++i5967) {
        if( tmp[i5967] == FAIL ) {
          if(!( !next_prev5968.empty() && next_prev5968[0] == FAIL )) {
            next_prev5968.push_front(FAIL);
          }
        } else {
          next_prev5968.push_back(tmp[i5967]);
        }
      }
    }
    prev = next_prev5968;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5966=0;i5966<(int)prev.size();++i5966) {
    if( prev[i5966] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5966]);
    }
  }
  return memo[key(837,backtracking_ptr_for_packrat837)] = result;
}

deque<int> parse_ClassLiteral(){
  if(memo.count(key(838,i))) {
    return memo[key(838,i)];
  }
  int backtracking_ptr_for_packrat838=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (TypeOrVoid) */
    deque<int> next_prev5972;
    for(int i5971=0;i5971<(int)prev.size();++i5971) {
      if( prev[i5971] == FAIL ) {
        if(!(!next_prev5972.empty() && next_prev5972.front() == FAIL )) {
          next_prev5972.push_front(FAIL);
        }
        continue;
      }
      i = prev[i5971];
      tmp = parse_TypeOrVoid();
      
      for(int i5971=0;i5971<(int)tmp.size();++i5971) {
        if( tmp[i5971] == FAIL ) {
          if(!( !next_prev5972.empty() && next_prev5972[0] == FAIL )) {
            next_prev5972.push_front(FAIL);
          }
        } else {
          next_prev5972.push_back(tmp[i5971]);
        }
      }
    }
    prev = next_prev5972;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5973=0;i5973<(int)prev.size();++i5973) {
        if( prev[i5973] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5973]<m&&I[prev[i5973]]=='.') {
          tmp.push_back(prev[i5973]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5978;
      for(int i5977=0;i5977<(int)prev.size();++i5977) {
        i = prev[i5977];
        tmp = parse_not5974();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5978.push_back(prev[i5977]);
        } else {
          if(!(!next_prev5978.empty()&&next_prev5978.front()==FAIL)) {
            next_prev5978.push_front(FAIL);
          }
        }
      }
      prev = next_prev5978;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5980;
      for(int i5979=0;i5979<(int)prev.size();++i5979) {
        if( prev[i5979] == FAIL ) {
          if(!(!next_prev5980.empty() && next_prev5980.front() == FAIL )) {
            next_prev5980.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5979];
        tmp = parse__();
        
        for(int i5979=0;i5979<(int)tmp.size();++i5979) {
          if( tmp[i5979] == FAIL ) {
            if(!( !next_prev5980.empty() && next_prev5980[0] == FAIL )) {
              next_prev5980.push_front(FAIL);
            }
          } else {
            next_prev5980.push_back(tmp[i5979]);
          }
        }
      }
      prev = next_prev5980;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5981=0;i5981<(int)prev.size();++i5981) {
        if( prev[i5981] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5981]<m&&I[prev[i5981]]=='c') {
          tmp.push_back(prev[i5981]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5982=0;i5982<(int)prev.size();++i5982) {
        if( prev[i5982] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5982]<m&&I[prev[i5982]]=='l') {
          tmp.push_back(prev[i5982]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5983=0;i5983<(int)prev.size();++i5983) {
        if( prev[i5983] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5983]<m&&I[prev[i5983]]=='a') {
          tmp.push_back(prev[i5983]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5984=0;i5984<(int)prev.size();++i5984) {
        if( prev[i5984] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5984]<m&&I[prev[i5984]]=='s') {
          tmp.push_back(prev[i5984]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5985=0;i5985<(int)prev.size();++i5985) {
        if( prev[i5985] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5985]<m&&I[prev[i5985]]=='s') {
          tmp.push_back(prev[i5985]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev5991;
      for(int i5990=0;i5990<(int)prev.size();++i5990) {
        i = prev[i5990];
        tmp = parse_not5986();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev5991.push_back(prev[i5990]);
        } else {
          if(!(!next_prev5991.empty()&&next_prev5991.front()==FAIL)) {
            next_prev5991.push_front(FAIL);
          }
        }
      }
      prev = next_prev5991;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev5993;
      for(int i5992=0;i5992<(int)prev.size();++i5992) {
        if( prev[i5992] == FAIL ) {
          if(!(!next_prev5993.empty() && next_prev5993.front() == FAIL )) {
            next_prev5993.push_front(FAIL);
          }
          continue;
        }
        i = prev[i5992];
        tmp = parse__();
        
        for(int i5992=0;i5992<(int)tmp.size();++i5992) {
          if( tmp[i5992] == FAIL ) {
            if(!( !next_prev5993.empty() && next_prev5993[0] == FAIL )) {
              next_prev5993.push_front(FAIL);
            }
          } else {
            next_prev5993.push_back(tmp[i5992]);
          }
        }
      }
      prev = next_prev5993;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5970=0;i5970<(int)prev.size();++i5970) {
    if( prev[i5970] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5970]);
    }
  }
  return memo[key(838,backtracking_ptr_for_packrat838)] = result;
}

inline deque<int> parse_not5974() { 
  if(memo.count(key(839,i))) {
    return memo[key(839,i)];
  }
  int backtracking_ptr_for_packrat839=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i5976=0;i5976<(int)prev.size();++i5976) {
    if( prev[i5976] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i5976]<m&&I[prev[i5976]]=='.') {
      tmp.push_back(prev[i5976]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i5975=0;i5975<(int)prev.size();++i5975) {
    if( prev[i5975] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5975]);
    }
  }
  return memo[key(839,backtracking_ptr_for_packrat839)] = result;
}

inline deque<int> parse_not5986() { 
  if(memo.count(key(840,i))) {
    return memo[key(840,i)];
  }
  int backtracking_ptr_for_packrat840=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev5989;
  for(int i5988=0;i5988<(int)prev.size();++i5988) {
    if( prev[i5988] == FAIL ) {
      if(!(!next_prev5989.empty() && next_prev5989.front() == FAIL )) {
        next_prev5989.push_front(FAIL);
      }
      continue;
    }
    i = prev[i5988];
    tmp = parse_W();
    
    for(int i5988=0;i5988<(int)tmp.size();++i5988) {
      if( tmp[i5988] == FAIL ) {
        if(!( !next_prev5989.empty() && next_prev5989[0] == FAIL )) {
          next_prev5989.push_front(FAIL);
        }
      } else {
        next_prev5989.push_back(tmp[i5988]);
      }
    }
  }
  prev = next_prev5989;
  for(int i5987=0;i5987<(int)prev.size();++i5987) {
    if( prev[i5987] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5987]);
    }
  }
  return memo[key(840,backtracking_ptr_for_packrat840)] = result;
}

deque<int> parse_This(){
  if(memo.count(key(841,i))) {
    return memo[key(841,i)];
  }
  int backtracking_ptr_for_packrat841=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i5995=0;i5995<(int)prev.size();++i5995) {
        if( prev[i5995] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5995]<m&&I[prev[i5995]]=='t') {
          tmp.push_back(prev[i5995]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5996=0;i5996<(int)prev.size();++i5996) {
        if( prev[i5996] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5996]<m&&I[prev[i5996]]=='h') {
          tmp.push_back(prev[i5996]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5997=0;i5997<(int)prev.size();++i5997) {
        if( prev[i5997] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5997]<m&&I[prev[i5997]]=='i') {
          tmp.push_back(prev[i5997]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i5998=0;i5998<(int)prev.size();++i5998) {
        if( prev[i5998] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i5998]<m&&I[prev[i5998]]=='s') {
          tmp.push_back(prev[i5998]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev6004;
      for(int i6003=0;i6003<(int)prev.size();++i6003) {
        i = prev[i6003];
        tmp = parse_not5999();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev6004.push_back(prev[i6003]);
        } else {
          if(!(!next_prev6004.empty()&&next_prev6004.front()==FAIL)) {
            next_prev6004.push_front(FAIL);
          }
        }
      }
      prev = next_prev6004;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev6006;
      for(int i6005=0;i6005<(int)prev.size();++i6005) {
        if( prev[i6005] == FAIL ) {
          if(!(!next_prev6006.empty() && next_prev6006.front() == FAIL )) {
            next_prev6006.push_front(FAIL);
          }
          continue;
        }
        i = prev[i6005];
        tmp = parse__();
        
        for(int i6005=0;i6005<(int)tmp.size();++i6005) {
          if( tmp[i6005] == FAIL ) {
            if(!( !next_prev6006.empty() && next_prev6006[0] == FAIL )) {
              next_prev6006.push_front(FAIL);
            }
          } else {
            next_prev6006.push_back(tmp[i6005]);
          }
        }
      }
      prev = next_prev6006;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i5994=0;i5994<(int)prev.size();++i5994) {
    if( prev[i5994] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i5994]);
    }
  }
  return memo[key(841,backtracking_ptr_for_packrat841)] = result;
}

inline deque<int> parse_not5999() { 
  if(memo.count(key(842,i))) {
    return memo[key(842,i)];
  }
  int backtracking_ptr_for_packrat842=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev6002;
  for(int i6001=0;i6001<(int)prev.size();++i6001) {
    if( prev[i6001] == FAIL ) {
      if(!(!next_prev6002.empty() && next_prev6002.front() == FAIL )) {
        next_prev6002.push_front(FAIL);
      }
      continue;
    }
    i = prev[i6001];
    tmp = parse_W();
    
    for(int i6001=0;i6001<(int)tmp.size();++i6001) {
      if( tmp[i6001] == FAIL ) {
        if(!( !next_prev6002.empty() && next_prev6002[0] == FAIL )) {
          next_prev6002.push_front(FAIL);
        }
      } else {
        next_prev6002.push_back(tmp[i6001]);
      }
    }
  }
  prev = next_prev6002;
  for(int i6000=0;i6000<(int)prev.size();++i6000) {
    if( prev[i6000] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6000]);
    }
  }
  return memo[key(842,backtracking_ptr_for_packrat842)] = result;
}

deque<int> parse_Super(){
  if(memo.count(key(843,i))) {
    return memo[key(843,i)];
  }
  int backtracking_ptr_for_packrat843=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i6008=0;i6008<(int)prev.size();++i6008) {
        if( prev[i6008] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6008]<m&&I[prev[i6008]]=='s') {
          tmp.push_back(prev[i6008]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i6009=0;i6009<(int)prev.size();++i6009) {
        if( prev[i6009] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6009]<m&&I[prev[i6009]]=='u') {
          tmp.push_back(prev[i6009]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i6010=0;i6010<(int)prev.size();++i6010) {
        if( prev[i6010] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6010]<m&&I[prev[i6010]]=='p') {
          tmp.push_back(prev[i6010]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i6011=0;i6011<(int)prev.size();++i6011) {
        if( prev[i6011] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6011]<m&&I[prev[i6011]]=='e') {
          tmp.push_back(prev[i6011]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i6012=0;i6012<(int)prev.size();++i6012) {
        if( prev[i6012] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6012]<m&&I[prev[i6012]]=='r') {
          tmp.push_back(prev[i6012]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev6018;
      for(int i6017=0;i6017<(int)prev.size();++i6017) {
        i = prev[i6017];
        tmp = parse_not6013();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev6018.push_back(prev[i6017]);
        } else {
          if(!(!next_prev6018.empty()&&next_prev6018.front()==FAIL)) {
            next_prev6018.push_front(FAIL);
          }
        }
      }
      prev = next_prev6018;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev6020;
      for(int i6019=0;i6019<(int)prev.size();++i6019) {
        if( prev[i6019] == FAIL ) {
          if(!(!next_prev6020.empty() && next_prev6020.front() == FAIL )) {
            next_prev6020.push_front(FAIL);
          }
          continue;
        }
        i = prev[i6019];
        tmp = parse__();
        
        for(int i6019=0;i6019<(int)tmp.size();++i6019) {
          if( tmp[i6019] == FAIL ) {
            if(!( !next_prev6020.empty() && next_prev6020[0] == FAIL )) {
              next_prev6020.push_front(FAIL);
            }
          } else {
            next_prev6020.push_back(tmp[i6019]);
          }
        }
      }
      prev = next_prev6020;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6007=0;i6007<(int)prev.size();++i6007) {
    if( prev[i6007] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6007]);
    }
  }
  return memo[key(843,backtracking_ptr_for_packrat843)] = result;
}

inline deque<int> parse_not6013() { 
  if(memo.count(key(844,i))) {
    return memo[key(844,i)];
  }
  int backtracking_ptr_for_packrat844=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev6016;
  for(int i6015=0;i6015<(int)prev.size();++i6015) {
    if( prev[i6015] == FAIL ) {
      if(!(!next_prev6016.empty() && next_prev6016.front() == FAIL )) {
        next_prev6016.push_front(FAIL);
      }
      continue;
    }
    i = prev[i6015];
    tmp = parse_W();
    
    for(int i6015=0;i6015<(int)tmp.size();++i6015) {
      if( tmp[i6015] == FAIL ) {
        if(!( !next_prev6016.empty() && next_prev6016[0] == FAIL )) {
          next_prev6016.push_front(FAIL);
        }
      } else {
        next_prev6016.push_back(tmp[i6015]);
      }
    }
  }
  prev = next_prev6016;
  for(int i6014=0;i6014<(int)prev.size();++i6014) {
    if( prev[i6014] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6014]);
    }
  }
  return memo[key(844,backtracking_ptr_for_packrat844)] = result;
}

deque<int> parse_MethodInvocationExpression(){
  if(memo.count(key(845,i))) {
    return memo[key(845,i)];
  }
  int backtracking_ptr_for_packrat845=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev6023;
    for(int i6022=0;i6022<(int)prev.size();++i6022) {
      if( prev[i6022] == FAIL ) {
        if(!(!next_prev6023.empty() && next_prev6023.front() == FAIL )) {
          next_prev6023.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6022];
      tmp = parse_Identifier();
      
      for(int i6022=0;i6022<(int)tmp.size();++i6022) {
        if( tmp[i6022] == FAIL ) {
          if(!( !next_prev6023.empty() && next_prev6023[0] == FAIL )) {
            next_prev6023.push_front(FAIL);
          }
        } else {
          next_prev6023.push_back(tmp[i6022]);
        }
      }
    }
    prev = next_prev6023;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i6024=0;i6024<(int)prev.size();++i6024) {
        if( prev[i6024] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6024]<m&&I[prev[i6024]]=='(') {
          tmp.push_back(prev[i6024]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev6026;
      for(int i6025=0;i6025<(int)prev.size();++i6025) {
        if( prev[i6025] == FAIL ) {
          if(!(!next_prev6026.empty() && next_prev6026.front() == FAIL )) {
            next_prev6026.push_front(FAIL);
          }
          continue;
        }
        i = prev[i6025];
        tmp = parse__();
        
        for(int i6025=0;i6025<(int)tmp.size();++i6025) {
          if( tmp[i6025] == FAIL ) {
            if(!( !next_prev6026.empty() && next_prev6026[0] == FAIL )) {
              next_prev6026.push_front(FAIL);
            }
          } else {
            next_prev6026.push_back(tmp[i6025]);
          }
        }
      }
      prev = next_prev6026;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev6028;
    deque<int> prioritized_choice_final_prev6029;
    next_prev6028.clear();
    for(int i6027=0;i6027<(int)prev.size();++i6027) {
      i = prev[i6027];
      tmp = parse_slash6030();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6028.push_back(prev[i6027]); }
      for(int i6034=0;i6034<(int)tmp.size();++i6034) {
        if( tmp[i6034] != FAIL ) {
          prioritized_choice_final_prev6029.push_back(tmp[i6034]);
        }
      }
    }
    prev = next_prev6028;
    next_prev6028.clear();
    for(int i6027=0;i6027<(int)prev.size();++i6027) {
      i = prev[i6027];
      tmp = parse_slash6035();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6028.push_back(prev[i6027]); }
      for(int i6037=0;i6037<(int)tmp.size();++i6037) {
        if( tmp[i6037] != FAIL ) {
          prioritized_choice_final_prev6029.push_back(tmp[i6037]);
        }
      }
    }
    prev = next_prev6028;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev6029.empty() && prioritized_choice_final_prev6029.front() == FAIL )) {
        prioritized_choice_final_prev6029.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev6029;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i6038=0;i6038<(int)prev.size();++i6038) {
        if( prev[i6038] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6038]<m&&I[prev[i6038]]==')') {
          tmp.push_back(prev[i6038]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev6040;
      for(int i6039=0;i6039<(int)prev.size();++i6039) {
        if( prev[i6039] == FAIL ) {
          if(!(!next_prev6040.empty() && next_prev6040.front() == FAIL )) {
            next_prev6040.push_front(FAIL);
          }
          continue;
        }
        i = prev[i6039];
        tmp = parse__();
        
        for(int i6039=0;i6039<(int)tmp.size();++i6039) {
          if( tmp[i6039] == FAIL ) {
            if(!( !next_prev6040.empty() && next_prev6040[0] == FAIL )) {
              next_prev6040.push_front(FAIL);
            }
          } else {
            next_prev6040.push_back(tmp[i6039]);
          }
        }
      }
      prev = next_prev6040;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6021=0;i6021<(int)prev.size();++i6021) {
    if( prev[i6021] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6021]);
    }
  }
  return memo[key(845,backtracking_ptr_for_packrat845)] = result;
}

inline deque<int> parse_slash6030() { 
  if(memo.count(key(846,i))) {
    return memo[key(846,i)];
  }
  int backtracking_ptr_for_packrat846=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (addArgumentExpressionList) */
  deque<int> next_prev6033;
  for(int i6032=0;i6032<(int)prev.size();++i6032) {
    if( prev[i6032] == FAIL ) {
      if(!(!next_prev6033.empty() && next_prev6033.front() == FAIL )) {
        next_prev6033.push_front(FAIL);
      }
      continue;
    }
    i = prev[i6032];
    tmp = parse_addArgumentExpressionList();
    
    for(int i6032=0;i6032<(int)tmp.size();++i6032) {
      if( tmp[i6032] == FAIL ) {
        if(!( !next_prev6033.empty() && next_prev6033[0] == FAIL )) {
          next_prev6033.push_front(FAIL);
        }
      } else {
        next_prev6033.push_back(tmp[i6032]);
      }
    }
  }
  prev = next_prev6033;
  for(int i6031=0;i6031<(int)prev.size();++i6031) {
    if( prev[i6031] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6031]);
    }
  }
  return memo[key(846,backtracking_ptr_for_packrat846)] = result;
}

inline deque<int> parse_slash6035() { 
  if(memo.count(key(847,i))) {
    return memo[key(847,i)];
  }
  int backtracking_ptr_for_packrat847=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i6036=0;i6036<(int)prev.size();++i6036) {
    if( prev[i6036] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6036]);
    }
  }
  return memo[key(847,backtracking_ptr_for_packrat847)] = result;
}

deque<int> parse_InstanceCreationExpression(){
  if(memo.count(key(848,i))) {
    return memo[key(848,i)];
  }
  int backtracking_ptr_for_packrat848=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i6042=0;i6042<(int)prev.size();++i6042) {
        if( prev[i6042] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6042]<m&&I[prev[i6042]]=='n') {
          tmp.push_back(prev[i6042]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i6043=0;i6043<(int)prev.size();++i6043) {
        if( prev[i6043] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6043]<m&&I[prev[i6043]]=='e') {
          tmp.push_back(prev[i6043]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i6044=0;i6044<(int)prev.size();++i6044) {
        if( prev[i6044] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6044]<m&&I[prev[i6044]]=='w') {
          tmp.push_back(prev[i6044]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev6050;
      for(int i6049=0;i6049<(int)prev.size();++i6049) {
        i = prev[i6049];
        tmp = parse_not6045();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev6050.push_back(prev[i6049]);
        } else {
          if(!(!next_prev6050.empty()&&next_prev6050.front()==FAIL)) {
            next_prev6050.push_front(FAIL);
          }
        }
      }
      prev = next_prev6050;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev6052;
      for(int i6051=0;i6051<(int)prev.size();++i6051) {
        if( prev[i6051] == FAIL ) {
          if(!(!next_prev6052.empty() && next_prev6052.front() == FAIL )) {
            next_prev6052.push_front(FAIL);
          }
          continue;
        }
        i = prev[i6051];
        tmp = parse__();
        
        for(int i6051=0;i6051<(int)tmp.size();++i6051) {
          if( tmp[i6051] == FAIL ) {
            if(!( !next_prev6052.empty() && next_prev6052[0] == FAIL )) {
              next_prev6052.push_front(FAIL);
            }
          } else {
            next_prev6052.push_back(tmp[i6051]);
          }
        }
      }
      prev = next_prev6052;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev6054;
    deque<int> prioritized_choice_final_prev6055;
    next_prev6054.clear();
    for(int i6053=0;i6053<(int)prev.size();++i6053) {
      i = prev[i6053];
      tmp = parse_slash6056();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6054.push_back(prev[i6053]); }
      for(int i6060=0;i6060<(int)tmp.size();++i6060) {
        if( tmp[i6060] != FAIL ) {
          prioritized_choice_final_prev6055.push_back(tmp[i6060]);
        }
      }
    }
    prev = next_prev6054;
    next_prev6054.clear();
    for(int i6053=0;i6053<(int)prev.size();++i6053) {
      i = prev[i6053];
      tmp = parse_slash6061();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6054.push_back(prev[i6053]); }
      for(int i6063=0;i6063<(int)tmp.size();++i6063) {
        if( tmp[i6063] != FAIL ) {
          prioritized_choice_final_prev6055.push_back(tmp[i6063]);
        }
      }
    }
    prev = next_prev6054;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev6055.empty() && prioritized_choice_final_prev6055.front() == FAIL )) {
        prioritized_choice_final_prev6055.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev6055;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev6065;
    deque<int> prioritized_choice_final_prev6066;
    next_prev6065.clear();
    for(int i6064=0;i6064<(int)prev.size();++i6064) {
      i = prev[i6064];
      tmp = parse_slash6067();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6065.push_back(prev[i6064]); }
      for(int i6071=0;i6071<(int)tmp.size();++i6071) {
        if( tmp[i6071] != FAIL ) {
          prioritized_choice_final_prev6066.push_back(tmp[i6071]);
        }
      }
    }
    prev = next_prev6065;
    next_prev6065.clear();
    for(int i6064=0;i6064<(int)prev.size();++i6064) {
      i = prev[i6064];
      tmp = parse_slash6072();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6065.push_back(prev[i6064]); }
      for(int i6074=0;i6074<(int)tmp.size();++i6074) {
        if( tmp[i6074] != FAIL ) {
          prioritized_choice_final_prev6066.push_back(tmp[i6074]);
        }
      }
    }
    prev = next_prev6065;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev6066.empty() && prioritized_choice_final_prev6066.front() == FAIL )) {
        prioritized_choice_final_prev6066.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev6066;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassOrInterfaceType) */
    deque<int> next_prev6076;
    for(int i6075=0;i6075<(int)prev.size();++i6075) {
      if( prev[i6075] == FAIL ) {
        if(!(!next_prev6076.empty() && next_prev6076.front() == FAIL )) {
          next_prev6076.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6075];
      tmp = parse_ClassOrInterfaceType();
      
      for(int i6075=0;i6075<(int)tmp.size();++i6075) {
        if( tmp[i6075] == FAIL ) {
          if(!( !next_prev6076.empty() && next_prev6076[0] == FAIL )) {
            next_prev6076.push_front(FAIL);
          }
        } else {
          next_prev6076.push_back(tmp[i6075]);
        }
      }
    }
    prev = next_prev6076;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i6077=0;i6077<(int)prev.size();++i6077) {
        if( prev[i6077] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6077]<m&&I[prev[i6077]]=='(') {
          tmp.push_back(prev[i6077]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev6079;
      for(int i6078=0;i6078<(int)prev.size();++i6078) {
        if( prev[i6078] == FAIL ) {
          if(!(!next_prev6079.empty() && next_prev6079.front() == FAIL )) {
            next_prev6079.push_front(FAIL);
          }
          continue;
        }
        i = prev[i6078];
        tmp = parse__();
        
        for(int i6078=0;i6078<(int)tmp.size();++i6078) {
          if( tmp[i6078] == FAIL ) {
            if(!( !next_prev6079.empty() && next_prev6079[0] == FAIL )) {
              next_prev6079.push_front(FAIL);
            }
          } else {
            next_prev6079.push_back(tmp[i6078]);
          }
        }
      }
      prev = next_prev6079;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev6081;
    deque<int> prioritized_choice_final_prev6082;
    next_prev6081.clear();
    for(int i6080=0;i6080<(int)prev.size();++i6080) {
      i = prev[i6080];
      tmp = parse_slash6083();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6081.push_back(prev[i6080]); }
      for(int i6087=0;i6087<(int)tmp.size();++i6087) {
        if( tmp[i6087] != FAIL ) {
          prioritized_choice_final_prev6082.push_back(tmp[i6087]);
        }
      }
    }
    prev = next_prev6081;
    next_prev6081.clear();
    for(int i6080=0;i6080<(int)prev.size();++i6080) {
      i = prev[i6080];
      tmp = parse_slash6088();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6081.push_back(prev[i6080]); }
      for(int i6090=0;i6090<(int)tmp.size();++i6090) {
        if( tmp[i6090] != FAIL ) {
          prioritized_choice_final_prev6082.push_back(tmp[i6090]);
        }
      }
    }
    prev = next_prev6081;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev6082.empty() && prioritized_choice_final_prev6082.front() == FAIL )) {
        prioritized_choice_final_prev6082.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev6082;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i6091=0;i6091<(int)prev.size();++i6091) {
        if( prev[i6091] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6091]<m&&I[prev[i6091]]==')') {
          tmp.push_back(prev[i6091]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev6093;
      for(int i6092=0;i6092<(int)prev.size();++i6092) {
        if( prev[i6092] == FAIL ) {
          if(!(!next_prev6093.empty() && next_prev6093.front() == FAIL )) {
            next_prev6093.push_front(FAIL);
          }
          continue;
        }
        i = prev[i6092];
        tmp = parse__();
        
        for(int i6092=0;i6092<(int)tmp.size();++i6092) {
          if( tmp[i6092] == FAIL ) {
            if(!( !next_prev6093.empty() && next_prev6093[0] == FAIL )) {
              next_prev6093.push_front(FAIL);
            }
          } else {
            next_prev6093.push_back(tmp[i6092]);
          }
        }
      }
      prev = next_prev6093;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev6095;
    deque<int> prioritized_choice_final_prev6096;
    next_prev6095.clear();
    for(int i6094=0;i6094<(int)prev.size();++i6094) {
      i = prev[i6094];
      tmp = parse_slash6097();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6095.push_back(prev[i6094]); }
      for(int i6101=0;i6101<(int)tmp.size();++i6101) {
        if( tmp[i6101] != FAIL ) {
          prioritized_choice_final_prev6096.push_back(tmp[i6101]);
        }
      }
    }
    prev = next_prev6095;
    next_prev6095.clear();
    for(int i6094=0;i6094<(int)prev.size();++i6094) {
      i = prev[i6094];
      tmp = parse_slash6102();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6095.push_back(prev[i6094]); }
      for(int i6104=0;i6104<(int)tmp.size();++i6104) {
        if( tmp[i6104] != FAIL ) {
          prioritized_choice_final_prev6096.push_back(tmp[i6104]);
        }
      }
    }
    prev = next_prev6095;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev6096.empty() && prioritized_choice_final_prev6096.front() == FAIL )) {
        prioritized_choice_final_prev6096.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev6096;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6041=0;i6041<(int)prev.size();++i6041) {
    if( prev[i6041] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6041]);
    }
  }
  return memo[key(848,backtracking_ptr_for_packrat848)] = result;
}

inline deque<int> parse_not6045() { 
  if(memo.count(key(849,i))) {
    return memo[key(849,i)];
  }
  int backtracking_ptr_for_packrat849=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev6048;
  for(int i6047=0;i6047<(int)prev.size();++i6047) {
    if( prev[i6047] == FAIL ) {
      if(!(!next_prev6048.empty() && next_prev6048.front() == FAIL )) {
        next_prev6048.push_front(FAIL);
      }
      continue;
    }
    i = prev[i6047];
    tmp = parse_W();
    
    for(int i6047=0;i6047<(int)tmp.size();++i6047) {
      if( tmp[i6047] == FAIL ) {
        if(!( !next_prev6048.empty() && next_prev6048[0] == FAIL )) {
          next_prev6048.push_front(FAIL);
        }
      } else {
        next_prev6048.push_back(tmp[i6047]);
      }
    }
  }
  prev = next_prev6048;
  for(int i6046=0;i6046<(int)prev.size();++i6046) {
    if( prev[i6046] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6046]);
    }
  }
  return memo[key(849,backtracking_ptr_for_packrat849)] = result;
}

inline deque<int> parse_slash6056() { 
  if(memo.count(key(850,i))) {
    return memo[key(850,i)];
  }
  int backtracking_ptr_for_packrat850=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (TypeArguments) */
    deque<int> next_prev6059;
    for(int i6058=0;i6058<(int)prev.size();++i6058) {
      if( prev[i6058] == FAIL ) {
        if(!(!next_prev6059.empty() && next_prev6059.front() == FAIL )) {
          next_prev6059.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6058];
      tmp = parse_TypeArguments();
      
      for(int i6058=0;i6058<(int)tmp.size();++i6058) {
        if( tmp[i6058] == FAIL ) {
          if(!( !next_prev6059.empty() && next_prev6059[0] == FAIL )) {
            next_prev6059.push_front(FAIL);
          }
        } else {
          next_prev6059.push_back(tmp[i6058]);
        }
      }
    }
    prev = next_prev6059;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6057=0;i6057<(int)prev.size();++i6057) {
    if( prev[i6057] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6057]);
    }
  }
  return memo[key(850,backtracking_ptr_for_packrat850)] = result;
}

inline deque<int> parse_slash6061() { 
  if(memo.count(key(851,i))) {
    return memo[key(851,i)];
  }
  int backtracking_ptr_for_packrat851=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i6062=0;i6062<(int)prev.size();++i6062) {
    if( prev[i6062] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6062]);
    }
  }
  return memo[key(851,backtracking_ptr_for_packrat851)] = result;
}

inline deque<int> parse_slash6067() { 
  if(memo.count(key(852,i))) {
    return memo[key(852,i)];
  }
  int backtracking_ptr_for_packrat852=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotations) */
    deque<int> next_prev6070;
    for(int i6069=0;i6069<(int)prev.size();++i6069) {
      if( prev[i6069] == FAIL ) {
        if(!(!next_prev6070.empty() && next_prev6070.front() == FAIL )) {
          next_prev6070.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6069];
      tmp = parse_Annotations();
      
      for(int i6069=0;i6069<(int)tmp.size();++i6069) {
        if( tmp[i6069] == FAIL ) {
          if(!( !next_prev6070.empty() && next_prev6070[0] == FAIL )) {
            next_prev6070.push_front(FAIL);
          }
        } else {
          next_prev6070.push_back(tmp[i6069]);
        }
      }
    }
    prev = next_prev6070;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6068=0;i6068<(int)prev.size();++i6068) {
    if( prev[i6068] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6068]);
    }
  }
  return memo[key(852,backtracking_ptr_for_packrat852)] = result;
}

inline deque<int> parse_slash6072() { 
  if(memo.count(key(853,i))) {
    return memo[key(853,i)];
  }
  int backtracking_ptr_for_packrat853=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i6073=0;i6073<(int)prev.size();++i6073) {
    if( prev[i6073] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6073]);
    }
  }
  return memo[key(853,backtracking_ptr_for_packrat853)] = result;
}

inline deque<int> parse_slash6083() { 
  if(memo.count(key(854,i))) {
    return memo[key(854,i)];
  }
  int backtracking_ptr_for_packrat854=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (addArgumentExpressionList) */
  deque<int> next_prev6086;
  for(int i6085=0;i6085<(int)prev.size();++i6085) {
    if( prev[i6085] == FAIL ) {
      if(!(!next_prev6086.empty() && next_prev6086.front() == FAIL )) {
        next_prev6086.push_front(FAIL);
      }
      continue;
    }
    i = prev[i6085];
    tmp = parse_addArgumentExpressionList();
    
    for(int i6085=0;i6085<(int)tmp.size();++i6085) {
      if( tmp[i6085] == FAIL ) {
        if(!( !next_prev6086.empty() && next_prev6086[0] == FAIL )) {
          next_prev6086.push_front(FAIL);
        }
      } else {
        next_prev6086.push_back(tmp[i6085]);
      }
    }
  }
  prev = next_prev6086;
  for(int i6084=0;i6084<(int)prev.size();++i6084) {
    if( prev[i6084] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6084]);
    }
  }
  return memo[key(854,backtracking_ptr_for_packrat854)] = result;
}

inline deque<int> parse_slash6088() { 
  if(memo.count(key(855,i))) {
    return memo[key(855,i)];
  }
  int backtracking_ptr_for_packrat855=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i6089=0;i6089<(int)prev.size();++i6089) {
    if( prev[i6089] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6089]);
    }
  }
  return memo[key(855,backtracking_ptr_for_packrat855)] = result;
}

inline deque<int> parse_slash6097() { 
  if(memo.count(key(856,i))) {
    return memo[key(856,i)];
  }
  int backtracking_ptr_for_packrat856=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ClassBody) */
    deque<int> next_prev6100;
    for(int i6099=0;i6099<(int)prev.size();++i6099) {
      if( prev[i6099] == FAIL ) {
        if(!(!next_prev6100.empty() && next_prev6100.front() == FAIL )) {
          next_prev6100.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6099];
      tmp = parse_ClassBody();
      
      for(int i6099=0;i6099<(int)tmp.size();++i6099) {
        if( tmp[i6099] == FAIL ) {
          if(!( !next_prev6100.empty() && next_prev6100[0] == FAIL )) {
            next_prev6100.push_front(FAIL);
          }
        } else {
          next_prev6100.push_back(tmp[i6099]);
        }
      }
    }
    prev = next_prev6100;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6098=0;i6098<(int)prev.size();++i6098) {
    if( prev[i6098] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6098]);
    }
  }
  return memo[key(856,backtracking_ptr_for_packrat856)] = result;
}

inline deque<int> parse_slash6102() { 
  if(memo.count(key(857,i))) {
    return memo[key(857,i)];
  }
  int backtracking_ptr_for_packrat857=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i6103=0;i6103<(int)prev.size();++i6103) {
    if( prev[i6103] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6103]);
    }
  }
  return memo[key(857,backtracking_ptr_for_packrat857)] = result;
}

deque<int> parse_ArrayCreationExpression(){
  if(memo.count(key(858,i))) {
    return memo[key(858,i)];
  }
  int backtracking_ptr_for_packrat858=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev6107;
  deque<int> prioritized_choice_final_prev6108;
  next_prev6107.clear();
  for(int i6106=0;i6106<(int)prev.size();++i6106) {
    i = prev[i6106];
    tmp = parse_slash6109();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6107.push_back(prev[i6106]); }
    for(int i6202=0;i6202<(int)tmp.size();++i6202) {
      if( tmp[i6202] != FAIL ) {
        prioritized_choice_final_prev6108.push_back(tmp[i6202]);
      }
    }
  }
  prev = next_prev6107;
  next_prev6107.clear();
  for(int i6106=0;i6106<(int)prev.size();++i6106) {
    i = prev[i6106];
    tmp = parse_slash6203();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6107.push_back(prev[i6106]); }
    for(int i6271=0;i6271<(int)tmp.size();++i6271) {
      if( tmp[i6271] != FAIL ) {
        prioritized_choice_final_prev6108.push_back(tmp[i6271]);
      }
    }
  }
  prev = next_prev6107;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev6108.empty() && prioritized_choice_final_prev6108.front() == FAIL )) {
      prioritized_choice_final_prev6108.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev6108;
  for(int i6105=0;i6105<(int)prev.size();++i6105) {
    if( prev[i6105] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6105]);
    }
  }
  return memo[key(858,backtracking_ptr_for_packrat858)] = result;
}

inline deque<int> parse_slash6109() { 
  if(memo.count(key(859,i))) {
    return memo[key(859,i)];
  }
  int backtracking_ptr_for_packrat859=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i6111=0;i6111<(int)prev.size();++i6111) {
        if( prev[i6111] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6111]<m&&I[prev[i6111]]=='n') {
          tmp.push_back(prev[i6111]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i6112=0;i6112<(int)prev.size();++i6112) {
        if( prev[i6112] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6112]<m&&I[prev[i6112]]=='e') {
          tmp.push_back(prev[i6112]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i6113=0;i6113<(int)prev.size();++i6113) {
        if( prev[i6113] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6113]<m&&I[prev[i6113]]=='w') {
          tmp.push_back(prev[i6113]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev6119;
      for(int i6118=0;i6118<(int)prev.size();++i6118) {
        i = prev[i6118];
        tmp = parse_not6114();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev6119.push_back(prev[i6118]);
        } else {
          if(!(!next_prev6119.empty()&&next_prev6119.front()==FAIL)) {
            next_prev6119.push_front(FAIL);
          }
        }
      }
      prev = next_prev6119;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev6121;
      for(int i6120=0;i6120<(int)prev.size();++i6120) {
        if( prev[i6120] == FAIL ) {
          if(!(!next_prev6121.empty() && next_prev6121.front() == FAIL )) {
            next_prev6121.push_front(FAIL);
          }
          continue;
        }
        i = prev[i6120];
        tmp = parse__();
        
        for(int i6120=0;i6120<(int)tmp.size();++i6120) {
          if( tmp[i6120] == FAIL ) {
            if(!( !next_prev6121.empty() && next_prev6121[0] == FAIL )) {
              next_prev6121.push_front(FAIL);
            }
          } else {
            next_prev6121.push_back(tmp[i6120]);
          }
        }
      }
      prev = next_prev6121;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev6123;
    deque<int> prioritized_choice_final_prev6124;
    next_prev6123.clear();
    for(int i6122=0;i6122<(int)prev.size();++i6122) {
      i = prev[i6122];
      tmp = parse_slash6125();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6123.push_back(prev[i6122]); }
      for(int i6129=0;i6129<(int)tmp.size();++i6129) {
        if( tmp[i6129] != FAIL ) {
          prioritized_choice_final_prev6124.push_back(tmp[i6129]);
        }
      }
    }
    prev = next_prev6123;
    next_prev6123.clear();
    for(int i6122=0;i6122<(int)prev.size();++i6122) {
      i = prev[i6122];
      tmp = parse_slash6130();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6123.push_back(prev[i6122]); }
      for(int i6132=0;i6132<(int)tmp.size();++i6132) {
        if( tmp[i6132] != FAIL ) {
          prioritized_choice_final_prev6124.push_back(tmp[i6132]);
        }
      }
    }
    prev = next_prev6123;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev6124.empty() && prioritized_choice_final_prev6124.front() == FAIL )) {
        prioritized_choice_final_prev6124.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev6124;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (NonArrayType) */
      deque<int> next_prev6134;
      for(int i6133=0;i6133<(int)prev.size();++i6133) {
        if( prev[i6133] == FAIL ) {
          if(!(!next_prev6134.empty() && next_prev6134.front() == FAIL )) {
            next_prev6134.push_front(FAIL);
          }
          continue;
        }
        i = prev[i6133];
        tmp = parse_NonArrayType();
        
        for(int i6133=0;i6133<(int)tmp.size();++i6133) {
          if( tmp[i6133] == FAIL ) {
            if(!( !next_prev6134.empty() && next_prev6134[0] == FAIL )) {
              next_prev6134.push_front(FAIL);
            }
          } else {
            next_prev6134.push_back(tmp[i6133]);
          }
        }
      }
      prev = next_prev6134;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        if(!((int)prev.size()==1&&prev.front()==FAIL)) {
          /* Prioritized Choice */
          deque<int> next_prev6136;
          deque<int> prioritized_choice_final_prev6137;
          next_prev6136.clear();
          for(int i6135=0;i6135<(int)prev.size();++i6135) {
            i = prev[i6135];
            tmp = parse_slash6138();
            if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6136.push_back(prev[i6135]); }
            for(int i6142=0;i6142<(int)tmp.size();++i6142) {
              if( tmp[i6142] != FAIL ) {
                prioritized_choice_final_prev6137.push_back(tmp[i6142]);
              }
            }
          }
          prev = next_prev6136;
          next_prev6136.clear();
          for(int i6135=0;i6135<(int)prev.size();++i6135) {
            i = prev[i6135];
            tmp = parse_slash6143();
            if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6136.push_back(prev[i6135]); }
            for(int i6145=0;i6145<(int)tmp.size();++i6145) {
              if( tmp[i6145] != FAIL ) {
                prioritized_choice_final_prev6137.push_back(tmp[i6145]);
              }
            }
          }
          prev = next_prev6136;
          if(!prev.empty()) {
            if(!(!prioritized_choice_final_prev6137.empty() && prioritized_choice_final_prev6137.front() == FAIL )) {
              prioritized_choice_final_prev6137.push_front(FAIL);
            }
          }
          prev = prioritized_choice_final_prev6137;
          sort(prev.begin(),prev.end());
          prev.erase(unique(prev.begin(),prev.end()),prev.end());
        }
        if(!((int)prev.size()==1&&prev.front()==FAIL)) {
          if(!((int)prev.size()==1&&prev.front()==FAIL)) {
            tmp.clear();
            for(int i6146=0;i6146<(int)prev.size();++i6146) {
              if( prev[i6146] == FAIL ) {
                if(!(!tmp.empty()&&tmp.front()==FAIL)) {
                  tmp.push_front(FAIL);
                }
                continue;
              }
              if(prev[i6146]<m&&I[prev[i6146]]=='[') {
                tmp.push_back(prev[i6146]+1);
              } else {
                if(!( !tmp.empty() && tmp[0] == FAIL )){
                  tmp.push_front(FAIL);
                }
              }
            }
            prev = tmp;
            sort(prev.begin(),prev.end());
            prev.erase(unique(prev.begin(),prev.end()),prev.end());
          }
          if(!((int)prev.size()==1&&prev.front()==FAIL)) {
            /* Nonterminal (_) */
            deque<int> next_prev6148;
            for(int i6147=0;i6147<(int)prev.size();++i6147) {
              if( prev[i6147] == FAIL ) {
                if(!(!next_prev6148.empty() && next_prev6148.front() == FAIL )) {
                  next_prev6148.push_front(FAIL);
                }
                continue;
              }
              i = prev[i6147];
              tmp = parse__();
              
              for(int i6147=0;i6147<(int)tmp.size();++i6147) {
                if( tmp[i6147] == FAIL ) {
                  if(!( !next_prev6148.empty() && next_prev6148[0] == FAIL )) {
                    next_prev6148.push_front(FAIL);
                  }
                } else {
                  next_prev6148.push_back(tmp[i6147]);
                }
              }
            }
            prev = next_prev6148;
            sort(prev.begin(),prev.end());
            prev.erase(unique(prev.begin(),prev.end()),prev.end());
          }
          sort(prev.begin(),prev.end());
          prev.erase(unique(prev.begin(),prev.end()),prev.end());
        }
        if(!((int)prev.size()==1&&prev.front()==FAIL)) {
          /* Nonterminal (Expression) */
          deque<int> next_prev6150;
          for(int i6149=0;i6149<(int)prev.size();++i6149) {
            if( prev[i6149] == FAIL ) {
              if(!(!next_prev6150.empty() && next_prev6150.front() == FAIL )) {
                next_prev6150.push_front(FAIL);
              }
              continue;
            }
            i = prev[i6149];
            tmp = parse_Expression();
            
            for(int i6149=0;i6149<(int)tmp.size();++i6149) {
              if( tmp[i6149] == FAIL ) {
                if(!( !next_prev6150.empty() && next_prev6150[0] == FAIL )) {
                  next_prev6150.push_front(FAIL);
                }
              } else {
                next_prev6150.push_back(tmp[i6149]);
              }
            }
          }
          prev = next_prev6150;
          sort(prev.begin(),prev.end());
          prev.erase(unique(prev.begin(),prev.end()),prev.end());
        }
        if(!((int)prev.size()==1&&prev.front()==FAIL)) {
          if(!((int)prev.size()==1&&prev.front()==FAIL)) {
            tmp.clear();
            for(int i6151=0;i6151<(int)prev.size();++i6151) {
              if( prev[i6151] == FAIL ) {
                if(!(!tmp.empty()&&tmp.front()==FAIL)) {
                  tmp.push_front(FAIL);
                }
                continue;
              }
              if(prev[i6151]<m&&I[prev[i6151]]==']') {
                tmp.push_back(prev[i6151]+1);
              } else {
                if(!( !tmp.empty() && tmp[0] == FAIL )){
                  tmp.push_front(FAIL);
                }
              }
            }
            prev = tmp;
            sort(prev.begin(),prev.end());
            prev.erase(unique(prev.begin(),prev.end()),prev.end());
          }
          if(!((int)prev.size()==1&&prev.front()==FAIL)) {
            /* Nonterminal (_) */
            deque<int> next_prev6153;
            for(int i6152=0;i6152<(int)prev.size();++i6152) {
              if( prev[i6152] == FAIL ) {
                if(!(!next_prev6153.empty() && next_prev6153.front() == FAIL )) {
                  next_prev6153.push_front(FAIL);
                }
                continue;
              }
              i = prev[i6152];
              tmp = parse__();
              
              for(int i6152=0;i6152<(int)tmp.size();++i6152) {
                if( tmp[i6152] == FAIL ) {
                  if(!( !next_prev6153.empty() && next_prev6153[0] == FAIL )) {
                    next_prev6153.push_front(FAIL);
                  }
                } else {
                  next_prev6153.push_back(tmp[i6152]);
                }
              }
            }
            prev = next_prev6153;
            sort(prev.begin(),prev.end());
            prev.erase(unique(prev.begin(),prev.end()),prev.end());
          }
          sort(prev.begin(),prev.end());
          prev.erase(unique(prev.begin(),prev.end()),prev.end());
        }
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Star */
        deque<int> next_prev6175;
        deque<int> star_final_prev6176;
        while(!((int)prev.size()==1&&prev.front()==FAIL)) {
          next_prev6175.clear();
          for(int i6177=0;i6177<(int)prev.size();++i6177) {
            i = prev[i6177];
            tmp = parse_while6154();
            if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
              star_final_prev6176.push_back(prev[i6177]);
            }
            for(int i6178=0;i6178<(int)tmp.size();++i6178) {
              if(tmp[i6178]==FAIL) {
                if(!( !next_prev6175.empty() && next_prev6175.front() == FAIL )) {
                  next_prev6175.push_front(FAIL);
                }
              } else {
                next_prev6175.push_back(tmp[i6178]);
              }
            }
          }
          prev = next_prev6175;
        }
        prev = star_final_prev6176;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Star */
      deque<int> next_prev6198;
      deque<int> star_final_prev6199;
      while(!((int)prev.size()==1&&prev.front()==FAIL)) {
        next_prev6198.clear();
        for(int i6200=0;i6200<(int)prev.size();++i6200) {
          i = prev[i6200];
          tmp = parse_while6179();
          if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
            star_final_prev6199.push_back(prev[i6200]);
          }
          for(int i6201=0;i6201<(int)tmp.size();++i6201) {
            if(tmp[i6201]==FAIL) {
              if(!( !next_prev6198.empty() && next_prev6198.front() == FAIL )) {
                next_prev6198.push_front(FAIL);
              }
            } else {
              next_prev6198.push_back(tmp[i6201]);
            }
          }
        }
        prev = next_prev6198;
      }
      prev = star_final_prev6199;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6110=0;i6110<(int)prev.size();++i6110) {
    if( prev[i6110] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6110]);
    }
  }
  return memo[key(859,backtracking_ptr_for_packrat859)] = result;
}

inline deque<int> parse_not6114() { 
  if(memo.count(key(860,i))) {
    return memo[key(860,i)];
  }
  int backtracking_ptr_for_packrat860=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev6117;
  for(int i6116=0;i6116<(int)prev.size();++i6116) {
    if( prev[i6116] == FAIL ) {
      if(!(!next_prev6117.empty() && next_prev6117.front() == FAIL )) {
        next_prev6117.push_front(FAIL);
      }
      continue;
    }
    i = prev[i6116];
    tmp = parse_W();
    
    for(int i6116=0;i6116<(int)tmp.size();++i6116) {
      if( tmp[i6116] == FAIL ) {
        if(!( !next_prev6117.empty() && next_prev6117[0] == FAIL )) {
          next_prev6117.push_front(FAIL);
        }
      } else {
        next_prev6117.push_back(tmp[i6116]);
      }
    }
  }
  prev = next_prev6117;
  for(int i6115=0;i6115<(int)prev.size();++i6115) {
    if( prev[i6115] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6115]);
    }
  }
  return memo[key(860,backtracking_ptr_for_packrat860)] = result;
}

inline deque<int> parse_slash6125() { 
  if(memo.count(key(861,i))) {
    return memo[key(861,i)];
  }
  int backtracking_ptr_for_packrat861=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotations) */
    deque<int> next_prev6128;
    for(int i6127=0;i6127<(int)prev.size();++i6127) {
      if( prev[i6127] == FAIL ) {
        if(!(!next_prev6128.empty() && next_prev6128.front() == FAIL )) {
          next_prev6128.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6127];
      tmp = parse_Annotations();
      
      for(int i6127=0;i6127<(int)tmp.size();++i6127) {
        if( tmp[i6127] == FAIL ) {
          if(!( !next_prev6128.empty() && next_prev6128[0] == FAIL )) {
            next_prev6128.push_front(FAIL);
          }
        } else {
          next_prev6128.push_back(tmp[i6127]);
        }
      }
    }
    prev = next_prev6128;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6126=0;i6126<(int)prev.size();++i6126) {
    if( prev[i6126] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6126]);
    }
  }
  return memo[key(861,backtracking_ptr_for_packrat861)] = result;
}

inline deque<int> parse_slash6130() { 
  if(memo.count(key(862,i))) {
    return memo[key(862,i)];
  }
  int backtracking_ptr_for_packrat862=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i6131=0;i6131<(int)prev.size();++i6131) {
    if( prev[i6131] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6131]);
    }
  }
  return memo[key(862,backtracking_ptr_for_packrat862)] = result;
}

inline deque<int> parse_slash6138() { 
  if(memo.count(key(863,i))) {
    return memo[key(863,i)];
  }
  int backtracking_ptr_for_packrat863=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotations) */
    deque<int> next_prev6141;
    for(int i6140=0;i6140<(int)prev.size();++i6140) {
      if( prev[i6140] == FAIL ) {
        if(!(!next_prev6141.empty() && next_prev6141.front() == FAIL )) {
          next_prev6141.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6140];
      tmp = parse_Annotations();
      
      for(int i6140=0;i6140<(int)tmp.size();++i6140) {
        if( tmp[i6140] == FAIL ) {
          if(!( !next_prev6141.empty() && next_prev6141[0] == FAIL )) {
            next_prev6141.push_front(FAIL);
          }
        } else {
          next_prev6141.push_back(tmp[i6140]);
        }
      }
    }
    prev = next_prev6141;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6139=0;i6139<(int)prev.size();++i6139) {
    if( prev[i6139] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6139]);
    }
  }
  return memo[key(863,backtracking_ptr_for_packrat863)] = result;
}

inline deque<int> parse_slash6143() { 
  if(memo.count(key(864,i))) {
    return memo[key(864,i)];
  }
  int backtracking_ptr_for_packrat864=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i6144=0;i6144<(int)prev.size();++i6144) {
    if( prev[i6144] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6144]);
    }
  }
  return memo[key(864,backtracking_ptr_for_packrat864)] = result;
}

inline deque<int> parse_while6154() { 
  if(memo.count(key(865,i))) {
    return memo[key(865,i)];
  }
  int backtracking_ptr_for_packrat865=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev6157;
    deque<int> prioritized_choice_final_prev6158;
    next_prev6157.clear();
    for(int i6156=0;i6156<(int)prev.size();++i6156) {
      i = prev[i6156];
      tmp = parse_slash6159();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6157.push_back(prev[i6156]); }
      for(int i6163=0;i6163<(int)tmp.size();++i6163) {
        if( tmp[i6163] != FAIL ) {
          prioritized_choice_final_prev6158.push_back(tmp[i6163]);
        }
      }
    }
    prev = next_prev6157;
    next_prev6157.clear();
    for(int i6156=0;i6156<(int)prev.size();++i6156) {
      i = prev[i6156];
      tmp = parse_slash6164();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6157.push_back(prev[i6156]); }
      for(int i6166=0;i6166<(int)tmp.size();++i6166) {
        if( tmp[i6166] != FAIL ) {
          prioritized_choice_final_prev6158.push_back(tmp[i6166]);
        }
      }
    }
    prev = next_prev6157;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev6158.empty() && prioritized_choice_final_prev6158.front() == FAIL )) {
        prioritized_choice_final_prev6158.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev6158;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i6167=0;i6167<(int)prev.size();++i6167) {
        if( prev[i6167] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6167]<m&&I[prev[i6167]]=='[') {
          tmp.push_back(prev[i6167]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev6169;
      for(int i6168=0;i6168<(int)prev.size();++i6168) {
        if( prev[i6168] == FAIL ) {
          if(!(!next_prev6169.empty() && next_prev6169.front() == FAIL )) {
            next_prev6169.push_front(FAIL);
          }
          continue;
        }
        i = prev[i6168];
        tmp = parse__();
        
        for(int i6168=0;i6168<(int)tmp.size();++i6168) {
          if( tmp[i6168] == FAIL ) {
            if(!( !next_prev6169.empty() && next_prev6169[0] == FAIL )) {
              next_prev6169.push_front(FAIL);
            }
          } else {
            next_prev6169.push_back(tmp[i6168]);
          }
        }
      }
      prev = next_prev6169;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Expression) */
    deque<int> next_prev6171;
    for(int i6170=0;i6170<(int)prev.size();++i6170) {
      if( prev[i6170] == FAIL ) {
        if(!(!next_prev6171.empty() && next_prev6171.front() == FAIL )) {
          next_prev6171.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6170];
      tmp = parse_Expression();
      
      for(int i6170=0;i6170<(int)tmp.size();++i6170) {
        if( tmp[i6170] == FAIL ) {
          if(!( !next_prev6171.empty() && next_prev6171[0] == FAIL )) {
            next_prev6171.push_front(FAIL);
          }
        } else {
          next_prev6171.push_back(tmp[i6170]);
        }
      }
    }
    prev = next_prev6171;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i6172=0;i6172<(int)prev.size();++i6172) {
        if( prev[i6172] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6172]<m&&I[prev[i6172]]==']') {
          tmp.push_back(prev[i6172]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev6174;
      for(int i6173=0;i6173<(int)prev.size();++i6173) {
        if( prev[i6173] == FAIL ) {
          if(!(!next_prev6174.empty() && next_prev6174.front() == FAIL )) {
            next_prev6174.push_front(FAIL);
          }
          continue;
        }
        i = prev[i6173];
        tmp = parse__();
        
        for(int i6173=0;i6173<(int)tmp.size();++i6173) {
          if( tmp[i6173] == FAIL ) {
            if(!( !next_prev6174.empty() && next_prev6174[0] == FAIL )) {
              next_prev6174.push_front(FAIL);
            }
          } else {
            next_prev6174.push_back(tmp[i6173]);
          }
        }
      }
      prev = next_prev6174;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6155=0;i6155<(int)prev.size();++i6155) {
    if( prev[i6155] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6155]);
    }
  }
  return memo[key(865,backtracking_ptr_for_packrat865)] = result;
}

inline deque<int> parse_slash6159() { 
  if(memo.count(key(866,i))) {
    return memo[key(866,i)];
  }
  int backtracking_ptr_for_packrat866=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotations) */
    deque<int> next_prev6162;
    for(int i6161=0;i6161<(int)prev.size();++i6161) {
      if( prev[i6161] == FAIL ) {
        if(!(!next_prev6162.empty() && next_prev6162.front() == FAIL )) {
          next_prev6162.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6161];
      tmp = parse_Annotations();
      
      for(int i6161=0;i6161<(int)tmp.size();++i6161) {
        if( tmp[i6161] == FAIL ) {
          if(!( !next_prev6162.empty() && next_prev6162[0] == FAIL )) {
            next_prev6162.push_front(FAIL);
          }
        } else {
          next_prev6162.push_back(tmp[i6161]);
        }
      }
    }
    prev = next_prev6162;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6160=0;i6160<(int)prev.size();++i6160) {
    if( prev[i6160] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6160]);
    }
  }
  return memo[key(866,backtracking_ptr_for_packrat866)] = result;
}

inline deque<int> parse_slash6164() { 
  if(memo.count(key(867,i))) {
    return memo[key(867,i)];
  }
  int backtracking_ptr_for_packrat867=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i6165=0;i6165<(int)prev.size();++i6165) {
    if( prev[i6165] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6165]);
    }
  }
  return memo[key(867,backtracking_ptr_for_packrat867)] = result;
}

inline deque<int> parse_while6179() { 
  if(memo.count(key(868,i))) {
    return memo[key(868,i)];
  }
  int backtracking_ptr_for_packrat868=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev6182;
    deque<int> prioritized_choice_final_prev6183;
    next_prev6182.clear();
    for(int i6181=0;i6181<(int)prev.size();++i6181) {
      i = prev[i6181];
      tmp = parse_slash6184();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6182.push_back(prev[i6181]); }
      for(int i6188=0;i6188<(int)tmp.size();++i6188) {
        if( tmp[i6188] != FAIL ) {
          prioritized_choice_final_prev6183.push_back(tmp[i6188]);
        }
      }
    }
    prev = next_prev6182;
    next_prev6182.clear();
    for(int i6181=0;i6181<(int)prev.size();++i6181) {
      i = prev[i6181];
      tmp = parse_slash6189();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6182.push_back(prev[i6181]); }
      for(int i6191=0;i6191<(int)tmp.size();++i6191) {
        if( tmp[i6191] != FAIL ) {
          prioritized_choice_final_prev6183.push_back(tmp[i6191]);
        }
      }
    }
    prev = next_prev6182;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev6183.empty() && prioritized_choice_final_prev6183.front() == FAIL )) {
        prioritized_choice_final_prev6183.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev6183;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i6192=0;i6192<(int)prev.size();++i6192) {
        if( prev[i6192] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6192]<m&&I[prev[i6192]]=='[') {
          tmp.push_back(prev[i6192]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev6194;
      for(int i6193=0;i6193<(int)prev.size();++i6193) {
        if( prev[i6193] == FAIL ) {
          if(!(!next_prev6194.empty() && next_prev6194.front() == FAIL )) {
            next_prev6194.push_front(FAIL);
          }
          continue;
        }
        i = prev[i6193];
        tmp = parse__();
        
        for(int i6193=0;i6193<(int)tmp.size();++i6193) {
          if( tmp[i6193] == FAIL ) {
            if(!( !next_prev6194.empty() && next_prev6194[0] == FAIL )) {
              next_prev6194.push_front(FAIL);
            }
          } else {
            next_prev6194.push_back(tmp[i6193]);
          }
        }
      }
      prev = next_prev6194;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i6195=0;i6195<(int)prev.size();++i6195) {
        if( prev[i6195] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6195]<m&&I[prev[i6195]]==']') {
          tmp.push_back(prev[i6195]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev6197;
      for(int i6196=0;i6196<(int)prev.size();++i6196) {
        if( prev[i6196] == FAIL ) {
          if(!(!next_prev6197.empty() && next_prev6197.front() == FAIL )) {
            next_prev6197.push_front(FAIL);
          }
          continue;
        }
        i = prev[i6196];
        tmp = parse__();
        
        for(int i6196=0;i6196<(int)tmp.size();++i6196) {
          if( tmp[i6196] == FAIL ) {
            if(!( !next_prev6197.empty() && next_prev6197[0] == FAIL )) {
              next_prev6197.push_front(FAIL);
            }
          } else {
            next_prev6197.push_back(tmp[i6196]);
          }
        }
      }
      prev = next_prev6197;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6180=0;i6180<(int)prev.size();++i6180) {
    if( prev[i6180] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6180]);
    }
  }
  return memo[key(868,backtracking_ptr_for_packrat868)] = result;
}

inline deque<int> parse_slash6184() { 
  if(memo.count(key(869,i))) {
    return memo[key(869,i)];
  }
  int backtracking_ptr_for_packrat869=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotations) */
    deque<int> next_prev6187;
    for(int i6186=0;i6186<(int)prev.size();++i6186) {
      if( prev[i6186] == FAIL ) {
        if(!(!next_prev6187.empty() && next_prev6187.front() == FAIL )) {
          next_prev6187.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6186];
      tmp = parse_Annotations();
      
      for(int i6186=0;i6186<(int)tmp.size();++i6186) {
        if( tmp[i6186] == FAIL ) {
          if(!( !next_prev6187.empty() && next_prev6187[0] == FAIL )) {
            next_prev6187.push_front(FAIL);
          }
        } else {
          next_prev6187.push_back(tmp[i6186]);
        }
      }
    }
    prev = next_prev6187;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6185=0;i6185<(int)prev.size();++i6185) {
    if( prev[i6185] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6185]);
    }
  }
  return memo[key(869,backtracking_ptr_for_packrat869)] = result;
}

inline deque<int> parse_slash6189() { 
  if(memo.count(key(870,i))) {
    return memo[key(870,i)];
  }
  int backtracking_ptr_for_packrat870=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i6190=0;i6190<(int)prev.size();++i6190) {
    if( prev[i6190] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6190]);
    }
  }
  return memo[key(870,backtracking_ptr_for_packrat870)] = result;
}

inline deque<int> parse_slash6203() { 
  if(memo.count(key(871,i))) {
    return memo[key(871,i)];
  }
  int backtracking_ptr_for_packrat871=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i6205=0;i6205<(int)prev.size();++i6205) {
        if( prev[i6205] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6205]<m&&I[prev[i6205]]=='n') {
          tmp.push_back(prev[i6205]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i6206=0;i6206<(int)prev.size();++i6206) {
        if( prev[i6206] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6206]<m&&I[prev[i6206]]=='e') {
          tmp.push_back(prev[i6206]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i6207=0;i6207<(int)prev.size();++i6207) {
        if( prev[i6207] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6207]<m&&I[prev[i6207]]=='w') {
          tmp.push_back(prev[i6207]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev6213;
      for(int i6212=0;i6212<(int)prev.size();++i6212) {
        i = prev[i6212];
        tmp = parse_not6208();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev6213.push_back(prev[i6212]);
        } else {
          if(!(!next_prev6213.empty()&&next_prev6213.front()==FAIL)) {
            next_prev6213.push_front(FAIL);
          }
        }
      }
      prev = next_prev6213;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev6215;
      for(int i6214=0;i6214<(int)prev.size();++i6214) {
        if( prev[i6214] == FAIL ) {
          if(!(!next_prev6215.empty() && next_prev6215.front() == FAIL )) {
            next_prev6215.push_front(FAIL);
          }
          continue;
        }
        i = prev[i6214];
        tmp = parse__();
        
        for(int i6214=0;i6214<(int)tmp.size();++i6214) {
          if( tmp[i6214] == FAIL ) {
            if(!( !next_prev6215.empty() && next_prev6215[0] == FAIL )) {
              next_prev6215.push_front(FAIL);
            }
          } else {
            next_prev6215.push_back(tmp[i6214]);
          }
        }
      }
      prev = next_prev6215;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev6217;
    deque<int> prioritized_choice_final_prev6218;
    next_prev6217.clear();
    for(int i6216=0;i6216<(int)prev.size();++i6216) {
      i = prev[i6216];
      tmp = parse_slash6219();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6217.push_back(prev[i6216]); }
      for(int i6223=0;i6223<(int)tmp.size();++i6223) {
        if( tmp[i6223] != FAIL ) {
          prioritized_choice_final_prev6218.push_back(tmp[i6223]);
        }
      }
    }
    prev = next_prev6217;
    next_prev6217.clear();
    for(int i6216=0;i6216<(int)prev.size();++i6216) {
      i = prev[i6216];
      tmp = parse_slash6224();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6217.push_back(prev[i6216]); }
      for(int i6226=0;i6226<(int)tmp.size();++i6226) {
        if( tmp[i6226] != FAIL ) {
          prioritized_choice_final_prev6218.push_back(tmp[i6226]);
        }
      }
    }
    prev = next_prev6217;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev6218.empty() && prioritized_choice_final_prev6218.front() == FAIL )) {
        prioritized_choice_final_prev6218.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev6218;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (NonArrayType) */
      deque<int> next_prev6228;
      for(int i6227=0;i6227<(int)prev.size();++i6227) {
        if( prev[i6227] == FAIL ) {
          if(!(!next_prev6228.empty() && next_prev6228.front() == FAIL )) {
            next_prev6228.push_front(FAIL);
          }
          continue;
        }
        i = prev[i6227];
        tmp = parse_NonArrayType();
        
        for(int i6227=0;i6227<(int)tmp.size();++i6227) {
          if( tmp[i6227] == FAIL ) {
            if(!( !next_prev6228.empty() && next_prev6228[0] == FAIL )) {
              next_prev6228.push_front(FAIL);
            }
          } else {
            next_prev6228.push_back(tmp[i6227]);
          }
        }
      }
      prev = next_prev6228;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        if(!((int)prev.size()==1&&prev.front()==FAIL)) {
          /* Prioritized Choice */
          deque<int> next_prev6230;
          deque<int> prioritized_choice_final_prev6231;
          next_prev6230.clear();
          for(int i6229=0;i6229<(int)prev.size();++i6229) {
            i = prev[i6229];
            tmp = parse_slash6232();
            if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6230.push_back(prev[i6229]); }
            for(int i6236=0;i6236<(int)tmp.size();++i6236) {
              if( tmp[i6236] != FAIL ) {
                prioritized_choice_final_prev6231.push_back(tmp[i6236]);
              }
            }
          }
          prev = next_prev6230;
          next_prev6230.clear();
          for(int i6229=0;i6229<(int)prev.size();++i6229) {
            i = prev[i6229];
            tmp = parse_slash6237();
            if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6230.push_back(prev[i6229]); }
            for(int i6239=0;i6239<(int)tmp.size();++i6239) {
              if( tmp[i6239] != FAIL ) {
                prioritized_choice_final_prev6231.push_back(tmp[i6239]);
              }
            }
          }
          prev = next_prev6230;
          if(!prev.empty()) {
            if(!(!prioritized_choice_final_prev6231.empty() && prioritized_choice_final_prev6231.front() == FAIL )) {
              prioritized_choice_final_prev6231.push_front(FAIL);
            }
          }
          prev = prioritized_choice_final_prev6231;
          sort(prev.begin(),prev.end());
          prev.erase(unique(prev.begin(),prev.end()),prev.end());
        }
        if(!((int)prev.size()==1&&prev.front()==FAIL)) {
          if(!((int)prev.size()==1&&prev.front()==FAIL)) {
            tmp.clear();
            for(int i6240=0;i6240<(int)prev.size();++i6240) {
              if( prev[i6240] == FAIL ) {
                if(!(!tmp.empty()&&tmp.front()==FAIL)) {
                  tmp.push_front(FAIL);
                }
                continue;
              }
              if(prev[i6240]<m&&I[prev[i6240]]=='[') {
                tmp.push_back(prev[i6240]+1);
              } else {
                if(!( !tmp.empty() && tmp[0] == FAIL )){
                  tmp.push_front(FAIL);
                }
              }
            }
            prev = tmp;
            sort(prev.begin(),prev.end());
            prev.erase(unique(prev.begin(),prev.end()),prev.end());
          }
          if(!((int)prev.size()==1&&prev.front()==FAIL)) {
            /* Nonterminal (_) */
            deque<int> next_prev6242;
            for(int i6241=0;i6241<(int)prev.size();++i6241) {
              if( prev[i6241] == FAIL ) {
                if(!(!next_prev6242.empty() && next_prev6242.front() == FAIL )) {
                  next_prev6242.push_front(FAIL);
                }
                continue;
              }
              i = prev[i6241];
              tmp = parse__();
              
              for(int i6241=0;i6241<(int)tmp.size();++i6241) {
                if( tmp[i6241] == FAIL ) {
                  if(!( !next_prev6242.empty() && next_prev6242[0] == FAIL )) {
                    next_prev6242.push_front(FAIL);
                  }
                } else {
                  next_prev6242.push_back(tmp[i6241]);
                }
              }
            }
            prev = next_prev6242;
            sort(prev.begin(),prev.end());
            prev.erase(unique(prev.begin(),prev.end()),prev.end());
          }
          sort(prev.begin(),prev.end());
          prev.erase(unique(prev.begin(),prev.end()),prev.end());
        }
        if(!((int)prev.size()==1&&prev.front()==FAIL)) {
          if(!((int)prev.size()==1&&prev.front()==FAIL)) {
            tmp.clear();
            for(int i6243=0;i6243<(int)prev.size();++i6243) {
              if( prev[i6243] == FAIL ) {
                if(!(!tmp.empty()&&tmp.front()==FAIL)) {
                  tmp.push_front(FAIL);
                }
                continue;
              }
              if(prev[i6243]<m&&I[prev[i6243]]==']') {
                tmp.push_back(prev[i6243]+1);
              } else {
                if(!( !tmp.empty() && tmp[0] == FAIL )){
                  tmp.push_front(FAIL);
                }
              }
            }
            prev = tmp;
            sort(prev.begin(),prev.end());
            prev.erase(unique(prev.begin(),prev.end()),prev.end());
          }
          if(!((int)prev.size()==1&&prev.front()==FAIL)) {
            /* Nonterminal (_) */
            deque<int> next_prev6245;
            for(int i6244=0;i6244<(int)prev.size();++i6244) {
              if( prev[i6244] == FAIL ) {
                if(!(!next_prev6245.empty() && next_prev6245.front() == FAIL )) {
                  next_prev6245.push_front(FAIL);
                }
                continue;
              }
              i = prev[i6244];
              tmp = parse__();
              
              for(int i6244=0;i6244<(int)tmp.size();++i6244) {
                if( tmp[i6244] == FAIL ) {
                  if(!( !next_prev6245.empty() && next_prev6245[0] == FAIL )) {
                    next_prev6245.push_front(FAIL);
                  }
                } else {
                  next_prev6245.push_back(tmp[i6244]);
                }
              }
            }
            prev = next_prev6245;
            sort(prev.begin(),prev.end());
            prev.erase(unique(prev.begin(),prev.end()),prev.end());
          }
          sort(prev.begin(),prev.end());
          prev.erase(unique(prev.begin(),prev.end()),prev.end());
        }
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Star */
        deque<int> next_prev6265;
        deque<int> star_final_prev6266;
        while(!((int)prev.size()==1&&prev.front()==FAIL)) {
          next_prev6265.clear();
          for(int i6267=0;i6267<(int)prev.size();++i6267) {
            i = prev[i6267];
            tmp = parse_while6246();
            if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
              star_final_prev6266.push_back(prev[i6267]);
            }
            for(int i6268=0;i6268<(int)tmp.size();++i6268) {
              if(tmp[i6268]==FAIL) {
                if(!( !next_prev6265.empty() && next_prev6265.front() == FAIL )) {
                  next_prev6265.push_front(FAIL);
                }
              } else {
                next_prev6265.push_back(tmp[i6268]);
              }
            }
          }
          prev = next_prev6265;
        }
        prev = star_final_prev6266;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ArrayInitializer) */
    deque<int> next_prev6270;
    for(int i6269=0;i6269<(int)prev.size();++i6269) {
      if( prev[i6269] == FAIL ) {
        if(!(!next_prev6270.empty() && next_prev6270.front() == FAIL )) {
          next_prev6270.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6269];
      tmp = parse_ArrayInitializer();
      
      for(int i6269=0;i6269<(int)tmp.size();++i6269) {
        if( tmp[i6269] == FAIL ) {
          if(!( !next_prev6270.empty() && next_prev6270[0] == FAIL )) {
            next_prev6270.push_front(FAIL);
          }
        } else {
          next_prev6270.push_back(tmp[i6269]);
        }
      }
    }
    prev = next_prev6270;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6204=0;i6204<(int)prev.size();++i6204) {
    if( prev[i6204] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6204]);
    }
  }
  return memo[key(871,backtracking_ptr_for_packrat871)] = result;
}

inline deque<int> parse_not6208() { 
  if(memo.count(key(872,i))) {
    return memo[key(872,i)];
  }
  int backtracking_ptr_for_packrat872=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev6211;
  for(int i6210=0;i6210<(int)prev.size();++i6210) {
    if( prev[i6210] == FAIL ) {
      if(!(!next_prev6211.empty() && next_prev6211.front() == FAIL )) {
        next_prev6211.push_front(FAIL);
      }
      continue;
    }
    i = prev[i6210];
    tmp = parse_W();
    
    for(int i6210=0;i6210<(int)tmp.size();++i6210) {
      if( tmp[i6210] == FAIL ) {
        if(!( !next_prev6211.empty() && next_prev6211[0] == FAIL )) {
          next_prev6211.push_front(FAIL);
        }
      } else {
        next_prev6211.push_back(tmp[i6210]);
      }
    }
  }
  prev = next_prev6211;
  for(int i6209=0;i6209<(int)prev.size();++i6209) {
    if( prev[i6209] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6209]);
    }
  }
  return memo[key(872,backtracking_ptr_for_packrat872)] = result;
}

inline deque<int> parse_slash6219() { 
  if(memo.count(key(873,i))) {
    return memo[key(873,i)];
  }
  int backtracking_ptr_for_packrat873=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotations) */
    deque<int> next_prev6222;
    for(int i6221=0;i6221<(int)prev.size();++i6221) {
      if( prev[i6221] == FAIL ) {
        if(!(!next_prev6222.empty() && next_prev6222.front() == FAIL )) {
          next_prev6222.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6221];
      tmp = parse_Annotations();
      
      for(int i6221=0;i6221<(int)tmp.size();++i6221) {
        if( tmp[i6221] == FAIL ) {
          if(!( !next_prev6222.empty() && next_prev6222[0] == FAIL )) {
            next_prev6222.push_front(FAIL);
          }
        } else {
          next_prev6222.push_back(tmp[i6221]);
        }
      }
    }
    prev = next_prev6222;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6220=0;i6220<(int)prev.size();++i6220) {
    if( prev[i6220] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6220]);
    }
  }
  return memo[key(873,backtracking_ptr_for_packrat873)] = result;
}

inline deque<int> parse_slash6224() { 
  if(memo.count(key(874,i))) {
    return memo[key(874,i)];
  }
  int backtracking_ptr_for_packrat874=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i6225=0;i6225<(int)prev.size();++i6225) {
    if( prev[i6225] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6225]);
    }
  }
  return memo[key(874,backtracking_ptr_for_packrat874)] = result;
}

inline deque<int> parse_slash6232() { 
  if(memo.count(key(875,i))) {
    return memo[key(875,i)];
  }
  int backtracking_ptr_for_packrat875=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotations) */
    deque<int> next_prev6235;
    for(int i6234=0;i6234<(int)prev.size();++i6234) {
      if( prev[i6234] == FAIL ) {
        if(!(!next_prev6235.empty() && next_prev6235.front() == FAIL )) {
          next_prev6235.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6234];
      tmp = parse_Annotations();
      
      for(int i6234=0;i6234<(int)tmp.size();++i6234) {
        if( tmp[i6234] == FAIL ) {
          if(!( !next_prev6235.empty() && next_prev6235[0] == FAIL )) {
            next_prev6235.push_front(FAIL);
          }
        } else {
          next_prev6235.push_back(tmp[i6234]);
        }
      }
    }
    prev = next_prev6235;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6233=0;i6233<(int)prev.size();++i6233) {
    if( prev[i6233] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6233]);
    }
  }
  return memo[key(875,backtracking_ptr_for_packrat875)] = result;
}

inline deque<int> parse_slash6237() { 
  if(memo.count(key(876,i))) {
    return memo[key(876,i)];
  }
  int backtracking_ptr_for_packrat876=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i6238=0;i6238<(int)prev.size();++i6238) {
    if( prev[i6238] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6238]);
    }
  }
  return memo[key(876,backtracking_ptr_for_packrat876)] = result;
}

inline deque<int> parse_while6246() { 
  if(memo.count(key(877,i))) {
    return memo[key(877,i)];
  }
  int backtracking_ptr_for_packrat877=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev6249;
    deque<int> prioritized_choice_final_prev6250;
    next_prev6249.clear();
    for(int i6248=0;i6248<(int)prev.size();++i6248) {
      i = prev[i6248];
      tmp = parse_slash6251();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6249.push_back(prev[i6248]); }
      for(int i6255=0;i6255<(int)tmp.size();++i6255) {
        if( tmp[i6255] != FAIL ) {
          prioritized_choice_final_prev6250.push_back(tmp[i6255]);
        }
      }
    }
    prev = next_prev6249;
    next_prev6249.clear();
    for(int i6248=0;i6248<(int)prev.size();++i6248) {
      i = prev[i6248];
      tmp = parse_slash6256();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6249.push_back(prev[i6248]); }
      for(int i6258=0;i6258<(int)tmp.size();++i6258) {
        if( tmp[i6258] != FAIL ) {
          prioritized_choice_final_prev6250.push_back(tmp[i6258]);
        }
      }
    }
    prev = next_prev6249;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev6250.empty() && prioritized_choice_final_prev6250.front() == FAIL )) {
        prioritized_choice_final_prev6250.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev6250;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i6259=0;i6259<(int)prev.size();++i6259) {
        if( prev[i6259] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6259]<m&&I[prev[i6259]]=='[') {
          tmp.push_back(prev[i6259]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev6261;
      for(int i6260=0;i6260<(int)prev.size();++i6260) {
        if( prev[i6260] == FAIL ) {
          if(!(!next_prev6261.empty() && next_prev6261.front() == FAIL )) {
            next_prev6261.push_front(FAIL);
          }
          continue;
        }
        i = prev[i6260];
        tmp = parse__();
        
        for(int i6260=0;i6260<(int)tmp.size();++i6260) {
          if( tmp[i6260] == FAIL ) {
            if(!( !next_prev6261.empty() && next_prev6261[0] == FAIL )) {
              next_prev6261.push_front(FAIL);
            }
          } else {
            next_prev6261.push_back(tmp[i6260]);
          }
        }
      }
      prev = next_prev6261;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i6262=0;i6262<(int)prev.size();++i6262) {
        if( prev[i6262] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6262]<m&&I[prev[i6262]]==']') {
          tmp.push_back(prev[i6262]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev6264;
      for(int i6263=0;i6263<(int)prev.size();++i6263) {
        if( prev[i6263] == FAIL ) {
          if(!(!next_prev6264.empty() && next_prev6264.front() == FAIL )) {
            next_prev6264.push_front(FAIL);
          }
          continue;
        }
        i = prev[i6263];
        tmp = parse__();
        
        for(int i6263=0;i6263<(int)tmp.size();++i6263) {
          if( tmp[i6263] == FAIL ) {
            if(!( !next_prev6264.empty() && next_prev6264[0] == FAIL )) {
              next_prev6264.push_front(FAIL);
            }
          } else {
            next_prev6264.push_back(tmp[i6263]);
          }
        }
      }
      prev = next_prev6264;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6247=0;i6247<(int)prev.size();++i6247) {
    if( prev[i6247] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6247]);
    }
  }
  return memo[key(877,backtracking_ptr_for_packrat877)] = result;
}

inline deque<int> parse_slash6251() { 
  if(memo.count(key(878,i))) {
    return memo[key(878,i)];
  }
  int backtracking_ptr_for_packrat878=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Annotations) */
    deque<int> next_prev6254;
    for(int i6253=0;i6253<(int)prev.size();++i6253) {
      if( prev[i6253] == FAIL ) {
        if(!(!next_prev6254.empty() && next_prev6254.front() == FAIL )) {
          next_prev6254.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6253];
      tmp = parse_Annotations();
      
      for(int i6253=0;i6253<(int)tmp.size();++i6253) {
        if( tmp[i6253] == FAIL ) {
          if(!( !next_prev6254.empty() && next_prev6254[0] == FAIL )) {
            next_prev6254.push_front(FAIL);
          }
        } else {
          next_prev6254.push_back(tmp[i6253]);
        }
      }
    }
    prev = next_prev6254;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6252=0;i6252<(int)prev.size();++i6252) {
    if( prev[i6252] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6252]);
    }
  }
  return memo[key(878,backtracking_ptr_for_packrat878)] = result;
}

inline deque<int> parse_slash6256() { 
  if(memo.count(key(879,i))) {
    return memo[key(879,i)];
  }
  int backtracking_ptr_for_packrat879=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i6257=0;i6257<(int)prev.size();++i6257) {
    if( prev[i6257] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6257]);
    }
  }
  return memo[key(879,backtracking_ptr_for_packrat879)] = result;
}

deque<int> parse_MethodReference(){
  if(memo.count(key(880,i))) {
    return memo[key(880,i)];
  }
  int backtracking_ptr_for_packrat880=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ReferenceType) */
    deque<int> next_prev6274;
    for(int i6273=0;i6273<(int)prev.size();++i6273) {
      if( prev[i6273] == FAIL ) {
        if(!(!next_prev6274.empty() && next_prev6274.front() == FAIL )) {
          next_prev6274.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6273];
      tmp = parse_ReferenceType();
      
      for(int i6273=0;i6273<(int)tmp.size();++i6273) {
        if( tmp[i6273] == FAIL ) {
          if(!( !next_prev6274.empty() && next_prev6274[0] == FAIL )) {
            next_prev6274.push_front(FAIL);
          }
        } else {
          next_prev6274.push_back(tmp[i6273]);
        }
      }
    }
    prev = next_prev6274;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i6275=0;i6275<(int)prev.size();++i6275) {
        if( prev[i6275] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6275]<m&&I[prev[i6275]]==':') {
          tmp.push_back(prev[i6275]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i6276=0;i6276<(int)prev.size();++i6276) {
        if( prev[i6276] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6276]<m&&I[prev[i6276]]==':') {
          tmp.push_back(prev[i6276]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev6278;
      for(int i6277=0;i6277<(int)prev.size();++i6277) {
        if( prev[i6277] == FAIL ) {
          if(!(!next_prev6278.empty() && next_prev6278.front() == FAIL )) {
            next_prev6278.push_front(FAIL);
          }
          continue;
        }
        i = prev[i6277];
        tmp = parse__();
        
        for(int i6277=0;i6277<(int)tmp.size();++i6277) {
          if( tmp[i6277] == FAIL ) {
            if(!( !next_prev6278.empty() && next_prev6278[0] == FAIL )) {
              next_prev6278.push_front(FAIL);
            }
          } else {
            next_prev6278.push_back(tmp[i6277]);
          }
        }
      }
      prev = next_prev6278;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev6280;
    deque<int> prioritized_choice_final_prev6281;
    next_prev6280.clear();
    for(int i6279=0;i6279<(int)prev.size();++i6279) {
      i = prev[i6279];
      tmp = parse_slash6282();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6280.push_back(prev[i6279]); }
      for(int i6286=0;i6286<(int)tmp.size();++i6286) {
        if( tmp[i6286] != FAIL ) {
          prioritized_choice_final_prev6281.push_back(tmp[i6286]);
        }
      }
    }
    prev = next_prev6280;
    next_prev6280.clear();
    for(int i6279=0;i6279<(int)prev.size();++i6279) {
      i = prev[i6279];
      tmp = parse_slash6287();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6280.push_back(prev[i6279]); }
      for(int i6289=0;i6289<(int)tmp.size();++i6289) {
        if( tmp[i6289] != FAIL ) {
          prioritized_choice_final_prev6281.push_back(tmp[i6289]);
        }
      }
    }
    prev = next_prev6280;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev6281.empty() && prioritized_choice_final_prev6281.front() == FAIL )) {
        prioritized_choice_final_prev6281.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev6281;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev6291;
    deque<int> prioritized_choice_final_prev6292;
    next_prev6291.clear();
    for(int i6290=0;i6290<(int)prev.size();++i6290) {
      i = prev[i6290];
      tmp = parse_slash6293();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6291.push_back(prev[i6290]); }
      for(int i6297=0;i6297<(int)tmp.size();++i6297) {
        if( tmp[i6297] != FAIL ) {
          prioritized_choice_final_prev6292.push_back(tmp[i6297]);
        }
      }
    }
    prev = next_prev6291;
    next_prev6291.clear();
    for(int i6290=0;i6290<(int)prev.size();++i6290) {
      i = prev[i6290];
      tmp = parse_slash6298();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6291.push_back(prev[i6290]); }
      for(int i6311=0;i6311<(int)tmp.size();++i6311) {
        if( tmp[i6311] != FAIL ) {
          prioritized_choice_final_prev6292.push_back(tmp[i6311]);
        }
      }
    }
    prev = next_prev6291;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev6292.empty() && prioritized_choice_final_prev6292.front() == FAIL )) {
        prioritized_choice_final_prev6292.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev6292;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6272=0;i6272<(int)prev.size();++i6272) {
    if( prev[i6272] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6272]);
    }
  }
  return memo[key(880,backtracking_ptr_for_packrat880)] = result;
}

inline deque<int> parse_slash6282() { 
  if(memo.count(key(881,i))) {
    return memo[key(881,i)];
  }
  int backtracking_ptr_for_packrat881=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (TypeArguments) */
    deque<int> next_prev6285;
    for(int i6284=0;i6284<(int)prev.size();++i6284) {
      if( prev[i6284] == FAIL ) {
        if(!(!next_prev6285.empty() && next_prev6285.front() == FAIL )) {
          next_prev6285.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6284];
      tmp = parse_TypeArguments();
      
      for(int i6284=0;i6284<(int)tmp.size();++i6284) {
        if( tmp[i6284] == FAIL ) {
          if(!( !next_prev6285.empty() && next_prev6285[0] == FAIL )) {
            next_prev6285.push_front(FAIL);
          }
        } else {
          next_prev6285.push_back(tmp[i6284]);
        }
      }
    }
    prev = next_prev6285;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6283=0;i6283<(int)prev.size();++i6283) {
    if( prev[i6283] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6283]);
    }
  }
  return memo[key(881,backtracking_ptr_for_packrat881)] = result;
}

inline deque<int> parse_slash6287() { 
  if(memo.count(key(882,i))) {
    return memo[key(882,i)];
  }
  int backtracking_ptr_for_packrat882=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i6288=0;i6288<(int)prev.size();++i6288) {
    if( prev[i6288] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6288]);
    }
  }
  return memo[key(882,backtracking_ptr_for_packrat882)] = result;
}

inline deque<int> parse_slash6293() { 
  if(memo.count(key(883,i))) {
    return memo[key(883,i)];
  }
  int backtracking_ptr_for_packrat883=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev6296;
    for(int i6295=0;i6295<(int)prev.size();++i6295) {
      if( prev[i6295] == FAIL ) {
        if(!(!next_prev6296.empty() && next_prev6296.front() == FAIL )) {
          next_prev6296.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6295];
      tmp = parse_Identifier();
      
      for(int i6295=0;i6295<(int)tmp.size();++i6295) {
        if( tmp[i6295] == FAIL ) {
          if(!( !next_prev6296.empty() && next_prev6296[0] == FAIL )) {
            next_prev6296.push_front(FAIL);
          }
        } else {
          next_prev6296.push_back(tmp[i6295]);
        }
      }
    }
    prev = next_prev6296;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6294=0;i6294<(int)prev.size();++i6294) {
    if( prev[i6294] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6294]);
    }
  }
  return memo[key(883,backtracking_ptr_for_packrat883)] = result;
}

inline deque<int> parse_slash6298() { 
  if(memo.count(key(884,i))) {
    return memo[key(884,i)];
  }
  int backtracking_ptr_for_packrat884=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i6300=0;i6300<(int)prev.size();++i6300) {
        if( prev[i6300] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6300]<m&&I[prev[i6300]]=='n') {
          tmp.push_back(prev[i6300]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i6301=0;i6301<(int)prev.size();++i6301) {
        if( prev[i6301] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6301]<m&&I[prev[i6301]]=='e') {
          tmp.push_back(prev[i6301]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i6302=0;i6302<(int)prev.size();++i6302) {
        if( prev[i6302] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6302]<m&&I[prev[i6302]]=='w') {
          tmp.push_back(prev[i6302]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev6308;
      for(int i6307=0;i6307<(int)prev.size();++i6307) {
        i = prev[i6307];
        tmp = parse_not6303();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev6308.push_back(prev[i6307]);
        } else {
          if(!(!next_prev6308.empty()&&next_prev6308.front()==FAIL)) {
            next_prev6308.push_front(FAIL);
          }
        }
      }
      prev = next_prev6308;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev6310;
      for(int i6309=0;i6309<(int)prev.size();++i6309) {
        if( prev[i6309] == FAIL ) {
          if(!(!next_prev6310.empty() && next_prev6310.front() == FAIL )) {
            next_prev6310.push_front(FAIL);
          }
          continue;
        }
        i = prev[i6309];
        tmp = parse__();
        
        for(int i6309=0;i6309<(int)tmp.size();++i6309) {
          if( tmp[i6309] == FAIL ) {
            if(!( !next_prev6310.empty() && next_prev6310[0] == FAIL )) {
              next_prev6310.push_front(FAIL);
            }
          } else {
            next_prev6310.push_back(tmp[i6309]);
          }
        }
      }
      prev = next_prev6310;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6299=0;i6299<(int)prev.size();++i6299) {
    if( prev[i6299] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6299]);
    }
  }
  return memo[key(884,backtracking_ptr_for_packrat884)] = result;
}

inline deque<int> parse_not6303() { 
  if(memo.count(key(885,i))) {
    return memo[key(885,i)];
  }
  int backtracking_ptr_for_packrat885=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev6306;
  for(int i6305=0;i6305<(int)prev.size();++i6305) {
    if( prev[i6305] == FAIL ) {
      if(!(!next_prev6306.empty() && next_prev6306.front() == FAIL )) {
        next_prev6306.push_front(FAIL);
      }
      continue;
    }
    i = prev[i6305];
    tmp = parse_W();
    
    for(int i6305=0;i6305<(int)tmp.size();++i6305) {
      if( tmp[i6305] == FAIL ) {
        if(!( !next_prev6306.empty() && next_prev6306[0] == FAIL )) {
          next_prev6306.push_front(FAIL);
        }
      } else {
        next_prev6306.push_back(tmp[i6305]);
      }
    }
  }
  prev = next_prev6306;
  for(int i6304=0;i6304<(int)prev.size();++i6304) {
    if( prev[i6304] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6304]);
    }
  }
  return memo[key(885,backtracking_ptr_for_packrat885)] = result;
}

deque<int> parse_LambdaExpression(){
  if(memo.count(key(886,i))) {
    return memo[key(886,i)];
  }
  int backtracking_ptr_for_packrat886=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (LambdaParameters) */
    deque<int> next_prev6314;
    for(int i6313=0;i6313<(int)prev.size();++i6313) {
      if( prev[i6313] == FAIL ) {
        if(!(!next_prev6314.empty() && next_prev6314.front() == FAIL )) {
          next_prev6314.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6313];
      tmp = parse_LambdaParameters();
      
      for(int i6313=0;i6313<(int)tmp.size();++i6313) {
        if( tmp[i6313] == FAIL ) {
          if(!( !next_prev6314.empty() && next_prev6314[0] == FAIL )) {
            next_prev6314.push_front(FAIL);
          }
        } else {
          next_prev6314.push_back(tmp[i6313]);
        }
      }
    }
    prev = next_prev6314;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i6315=0;i6315<(int)prev.size();++i6315) {
        if( prev[i6315] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6315]<m&&I[prev[i6315]]=='-') {
          tmp.push_back(prev[i6315]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i6316=0;i6316<(int)prev.size();++i6316) {
        if( prev[i6316] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6316]<m&&I[prev[i6316]]=='>') {
          tmp.push_back(prev[i6316]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev6318;
      for(int i6317=0;i6317<(int)prev.size();++i6317) {
        if( prev[i6317] == FAIL ) {
          if(!(!next_prev6318.empty() && next_prev6318.front() == FAIL )) {
            next_prev6318.push_front(FAIL);
          }
          continue;
        }
        i = prev[i6317];
        tmp = parse__();
        
        for(int i6317=0;i6317<(int)tmp.size();++i6317) {
          if( tmp[i6317] == FAIL ) {
            if(!( !next_prev6318.empty() && next_prev6318[0] == FAIL )) {
              next_prev6318.push_front(FAIL);
            }
          } else {
            next_prev6318.push_back(tmp[i6317]);
          }
        }
      }
      prev = next_prev6318;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (LambdaBody) */
    deque<int> next_prev6320;
    for(int i6319=0;i6319<(int)prev.size();++i6319) {
      if( prev[i6319] == FAIL ) {
        if(!(!next_prev6320.empty() && next_prev6320.front() == FAIL )) {
          next_prev6320.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6319];
      tmp = parse_LambdaBody();
      
      for(int i6319=0;i6319<(int)tmp.size();++i6319) {
        if( tmp[i6319] == FAIL ) {
          if(!( !next_prev6320.empty() && next_prev6320[0] == FAIL )) {
            next_prev6320.push_front(FAIL);
          }
        } else {
          next_prev6320.push_back(tmp[i6319]);
        }
      }
    }
    prev = next_prev6320;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6312=0;i6312<(int)prev.size();++i6312) {
    if( prev[i6312] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6312]);
    }
  }
  return memo[key(886,backtracking_ptr_for_packrat886)] = result;
}

deque<int> parse_LambdaParameters(){
  if(memo.count(key(887,i))) {
    return memo[key(887,i)];
  }
  int backtracking_ptr_for_packrat887=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Prioritized Choice */
      deque<int> next_prev6323;
      deque<int> prioritized_choice_final_prev6324;
      next_prev6323.clear();
      for(int i6322=0;i6322<(int)prev.size();++i6322) {
        i = prev[i6322];
        tmp = parse_slash6325();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6323.push_back(prev[i6322]); }
        for(int i6329=0;i6329<(int)tmp.size();++i6329) {
          if( tmp[i6329] != FAIL ) {
            prioritized_choice_final_prev6324.push_back(tmp[i6329]);
          }
        }
      }
      prev = next_prev6323;
      next_prev6323.clear();
      for(int i6322=0;i6322<(int)prev.size();++i6322) {
        i = prev[i6322];
        tmp = parse_slash6330();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6323.push_back(prev[i6322]); }
        for(int i6349=0;i6349<(int)tmp.size();++i6349) {
          if( tmp[i6349] != FAIL ) {
            prioritized_choice_final_prev6324.push_back(tmp[i6349]);
          }
        }
      }
      prev = next_prev6323;
      next_prev6323.clear();
      for(int i6322=0;i6322<(int)prev.size();++i6322) {
        i = prev[i6322];
        tmp = parse_slash6350();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6323.push_back(prev[i6322]); }
        for(int i6360=0;i6360<(int)tmp.size();++i6360) {
          if( tmp[i6360] != FAIL ) {
            prioritized_choice_final_prev6324.push_back(tmp[i6360]);
          }
        }
      }
      prev = next_prev6323;
      if(!prev.empty()) {
        if(!(!prioritized_choice_final_prev6324.empty() && prioritized_choice_final_prev6324.front() == FAIL )) {
          prioritized_choice_final_prev6324.push_front(FAIL);
        }
      }
      prev = prioritized_choice_final_prev6324;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6321=0;i6321<(int)prev.size();++i6321) {
    if( prev[i6321] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6321]);
    }
  }
  return memo[key(887,backtracking_ptr_for_packrat887)] = result;
}

inline deque<int> parse_slash6325() { 
  if(memo.count(key(888,i))) {
    return memo[key(888,i)];
  }
  int backtracking_ptr_for_packrat888=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev6328;
    for(int i6327=0;i6327<(int)prev.size();++i6327) {
      if( prev[i6327] == FAIL ) {
        if(!(!next_prev6328.empty() && next_prev6328.front() == FAIL )) {
          next_prev6328.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6327];
      tmp = parse_Identifier();
      
      for(int i6327=0;i6327<(int)tmp.size();++i6327) {
        if( tmp[i6327] == FAIL ) {
          if(!( !next_prev6328.empty() && next_prev6328[0] == FAIL )) {
            next_prev6328.push_front(FAIL);
          }
        } else {
          next_prev6328.push_back(tmp[i6327]);
        }
      }
    }
    prev = next_prev6328;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6326=0;i6326<(int)prev.size();++i6326) {
    if( prev[i6326] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6326]);
    }
  }
  return memo[key(888,backtracking_ptr_for_packrat888)] = result;
}

inline deque<int> parse_slash6330() { 
  if(memo.count(key(889,i))) {
    return memo[key(889,i)];
  }
  int backtracking_ptr_for_packrat889=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        tmp.clear();
        for(int i6332=0;i6332<(int)prev.size();++i6332) {
          if( prev[i6332] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i6332]<m&&I[prev[i6332]]=='(') {
            tmp.push_back(prev[i6332]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Nonterminal (_) */
        deque<int> next_prev6334;
        for(int i6333=0;i6333<(int)prev.size();++i6333) {
          if( prev[i6333] == FAIL ) {
            if(!(!next_prev6334.empty() && next_prev6334.front() == FAIL )) {
              next_prev6334.push_front(FAIL);
            }
            continue;
          }
          i = prev[i6333];
          tmp = parse__();
          
          for(int i6333=0;i6333<(int)tmp.size();++i6333) {
            if( tmp[i6333] == FAIL ) {
              if(!( !next_prev6334.empty() && next_prev6334[0] == FAIL )) {
                next_prev6334.push_front(FAIL);
              }
            } else {
              next_prev6334.push_back(tmp[i6333]);
            }
          }
        }
        prev = next_prev6334;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Prioritized Choice */
      deque<int> next_prev6336;
      deque<int> prioritized_choice_final_prev6337;
      next_prev6336.clear();
      for(int i6335=0;i6335<(int)prev.size();++i6335) {
        i = prev[i6335];
        tmp = parse_slash6338();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6336.push_back(prev[i6335]); }
        for(int i6342=0;i6342<(int)tmp.size();++i6342) {
          if( tmp[i6342] != FAIL ) {
            prioritized_choice_final_prev6337.push_back(tmp[i6342]);
          }
        }
      }
      prev = next_prev6336;
      next_prev6336.clear();
      for(int i6335=0;i6335<(int)prev.size();++i6335) {
        i = prev[i6335];
        tmp = parse_slash6343();
        if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6336.push_back(prev[i6335]); }
        for(int i6345=0;i6345<(int)tmp.size();++i6345) {
          if( tmp[i6345] != FAIL ) {
            prioritized_choice_final_prev6337.push_back(tmp[i6345]);
          }
        }
      }
      prev = next_prev6336;
      if(!prev.empty()) {
        if(!(!prioritized_choice_final_prev6337.empty() && prioritized_choice_final_prev6337.front() == FAIL )) {
          prioritized_choice_final_prev6337.push_front(FAIL);
        }
      }
      prev = prioritized_choice_final_prev6337;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        tmp.clear();
        for(int i6346=0;i6346<(int)prev.size();++i6346) {
          if( prev[i6346] == FAIL ) {
            if(!(!tmp.empty()&&tmp.front()==FAIL)) {
              tmp.push_front(FAIL);
            }
            continue;
          }
          if(prev[i6346]<m&&I[prev[i6346]]==')') {
            tmp.push_back(prev[i6346]+1);
          } else {
            if(!( !tmp.empty() && tmp[0] == FAIL )){
              tmp.push_front(FAIL);
            }
          }
        }
        prev = tmp;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      if(!((int)prev.size()==1&&prev.front()==FAIL)) {
        /* Nonterminal (_) */
        deque<int> next_prev6348;
        for(int i6347=0;i6347<(int)prev.size();++i6347) {
          if( prev[i6347] == FAIL ) {
            if(!(!next_prev6348.empty() && next_prev6348.front() == FAIL )) {
              next_prev6348.push_front(FAIL);
            }
            continue;
          }
          i = prev[i6347];
          tmp = parse__();
          
          for(int i6347=0;i6347<(int)tmp.size();++i6347) {
            if( tmp[i6347] == FAIL ) {
              if(!( !next_prev6348.empty() && next_prev6348[0] == FAIL )) {
                next_prev6348.push_front(FAIL);
              }
            } else {
              next_prev6348.push_back(tmp[i6347]);
            }
          }
        }
        prev = next_prev6348;
        sort(prev.begin(),prev.end());
        prev.erase(unique(prev.begin(),prev.end()),prev.end());
      }
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6331=0;i6331<(int)prev.size();++i6331) {
    if( prev[i6331] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6331]);
    }
  }
  return memo[key(889,backtracking_ptr_for_packrat889)] = result;
}

inline deque<int> parse_slash6338() { 
  if(memo.count(key(890,i))) {
    return memo[key(890,i)];
  }
  int backtracking_ptr_for_packrat890=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (addArgumentExpressionList) */
  deque<int> next_prev6341;
  for(int i6340=0;i6340<(int)prev.size();++i6340) {
    if( prev[i6340] == FAIL ) {
      if(!(!next_prev6341.empty() && next_prev6341.front() == FAIL )) {
        next_prev6341.push_front(FAIL);
      }
      continue;
    }
    i = prev[i6340];
    tmp = parse_addArgumentExpressionList();
    
    for(int i6340=0;i6340<(int)tmp.size();++i6340) {
      if( tmp[i6340] == FAIL ) {
        if(!( !next_prev6341.empty() && next_prev6341[0] == FAIL )) {
          next_prev6341.push_front(FAIL);
        }
      } else {
        next_prev6341.push_back(tmp[i6340]);
      }
    }
  }
  prev = next_prev6341;
  for(int i6339=0;i6339<(int)prev.size();++i6339) {
    if( prev[i6339] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6339]);
    }
  }
  return memo[key(890,backtracking_ptr_for_packrat890)] = result;
}

inline deque<int> parse_slash6343() { 
  if(memo.count(key(891,i))) {
    return memo[key(891,i)];
  }
  int backtracking_ptr_for_packrat891=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i6344=0;i6344<(int)prev.size();++i6344) {
    if( prev[i6344] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6344]);
    }
  }
  return memo[key(891,backtracking_ptr_for_packrat891)] = result;
}

inline deque<int> parse_slash6350() { 
  if(memo.count(key(892,i))) {
    return memo[key(892,i)];
  }
  int backtracking_ptr_for_packrat892=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i6352=0;i6352<(int)prev.size();++i6352) {
        if( prev[i6352] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6352]<m&&I[prev[i6352]]=='(') {
          tmp.push_back(prev[i6352]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev6354;
      for(int i6353=0;i6353<(int)prev.size();++i6353) {
        if( prev[i6353] == FAIL ) {
          if(!(!next_prev6354.empty() && next_prev6354.front() == FAIL )) {
            next_prev6354.push_front(FAIL);
          }
          continue;
        }
        i = prev[i6353];
        tmp = parse__();
        
        for(int i6353=0;i6353<(int)tmp.size();++i6353) {
          if( tmp[i6353] == FAIL ) {
            if(!( !next_prev6354.empty() && next_prev6354[0] == FAIL )) {
              next_prev6354.push_front(FAIL);
            }
          } else {
            next_prev6354.push_back(tmp[i6353]);
          }
        }
      }
      prev = next_prev6354;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (InferredFormalParameterList) */
    deque<int> next_prev6356;
    for(int i6355=0;i6355<(int)prev.size();++i6355) {
      if( prev[i6355] == FAIL ) {
        if(!(!next_prev6356.empty() && next_prev6356.front() == FAIL )) {
          next_prev6356.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6355];
      tmp = parse_InferredFormalParameterList();
      
      for(int i6355=0;i6355<(int)tmp.size();++i6355) {
        if( tmp[i6355] == FAIL ) {
          if(!( !next_prev6356.empty() && next_prev6356[0] == FAIL )) {
            next_prev6356.push_front(FAIL);
          }
        } else {
          next_prev6356.push_back(tmp[i6355]);
        }
      }
    }
    prev = next_prev6356;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i6357=0;i6357<(int)prev.size();++i6357) {
        if( prev[i6357] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6357]<m&&I[prev[i6357]]==')') {
          tmp.push_back(prev[i6357]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev6359;
      for(int i6358=0;i6358<(int)prev.size();++i6358) {
        if( prev[i6358] == FAIL ) {
          if(!(!next_prev6359.empty() && next_prev6359.front() == FAIL )) {
            next_prev6359.push_front(FAIL);
          }
          continue;
        }
        i = prev[i6358];
        tmp = parse__();
        
        for(int i6358=0;i6358<(int)tmp.size();++i6358) {
          if( tmp[i6358] == FAIL ) {
            if(!( !next_prev6359.empty() && next_prev6359[0] == FAIL )) {
              next_prev6359.push_front(FAIL);
            }
          } else {
            next_prev6359.push_back(tmp[i6358]);
          }
        }
      }
      prev = next_prev6359;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6351=0;i6351<(int)prev.size();++i6351) {
    if( prev[i6351] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6351]);
    }
  }
  return memo[key(892,backtracking_ptr_for_packrat892)] = result;
}

deque<int> parse_InferredFormalParameterList(){
  if(memo.count(key(893,i))) {
    return memo[key(893,i)];
  }
  int backtracking_ptr_for_packrat893=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev6363;
    for(int i6362=0;i6362<(int)prev.size();++i6362) {
      if( prev[i6362] == FAIL ) {
        if(!(!next_prev6363.empty() && next_prev6363.front() == FAIL )) {
          next_prev6363.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6362];
      tmp = parse_Identifier();
      
      for(int i6362=0;i6362<(int)tmp.size();++i6362) {
        if( tmp[i6362] == FAIL ) {
          if(!( !next_prev6363.empty() && next_prev6363[0] == FAIL )) {
            next_prev6363.push_front(FAIL);
          }
        } else {
          next_prev6363.push_back(tmp[i6362]);
        }
      }
    }
    prev = next_prev6363;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev6371;
    deque<int> star_final_prev6372;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev6371.clear();
      for(int i6373=0;i6373<(int)prev.size();++i6373) {
        i = prev[i6373];
        tmp = parse_while6364();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev6372.push_back(prev[i6373]);
        }
        for(int i6374=0;i6374<(int)tmp.size();++i6374) {
          if(tmp[i6374]==FAIL) {
            if(!( !next_prev6371.empty() && next_prev6371.front() == FAIL )) {
              next_prev6371.push_front(FAIL);
            }
          } else {
            next_prev6371.push_back(tmp[i6374]);
          }
        }
      }
      prev = next_prev6371;
    }
    prev = star_final_prev6372;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6361=0;i6361<(int)prev.size();++i6361) {
    if( prev[i6361] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6361]);
    }
  }
  return memo[key(893,backtracking_ptr_for_packrat893)] = result;
}

inline deque<int> parse_while6364() { 
  if(memo.count(key(894,i))) {
    return memo[key(894,i)];
  }
  int backtracking_ptr_for_packrat894=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i6366=0;i6366<(int)prev.size();++i6366) {
        if( prev[i6366] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6366]<m&&I[prev[i6366]]==',') {
          tmp.push_back(prev[i6366]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev6368;
      for(int i6367=0;i6367<(int)prev.size();++i6367) {
        if( prev[i6367] == FAIL ) {
          if(!(!next_prev6368.empty() && next_prev6368.front() == FAIL )) {
            next_prev6368.push_front(FAIL);
          }
          continue;
        }
        i = prev[i6367];
        tmp = parse__();
        
        for(int i6367=0;i6367<(int)tmp.size();++i6367) {
          if( tmp[i6367] == FAIL ) {
            if(!( !next_prev6368.empty() && next_prev6368[0] == FAIL )) {
              next_prev6368.push_front(FAIL);
            }
          } else {
            next_prev6368.push_back(tmp[i6367]);
          }
        }
      }
      prev = next_prev6368;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev6370;
    for(int i6369=0;i6369<(int)prev.size();++i6369) {
      if( prev[i6369] == FAIL ) {
        if(!(!next_prev6370.empty() && next_prev6370.front() == FAIL )) {
          next_prev6370.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6369];
      tmp = parse_Identifier();
      
      for(int i6369=0;i6369<(int)tmp.size();++i6369) {
        if( tmp[i6369] == FAIL ) {
          if(!( !next_prev6370.empty() && next_prev6370[0] == FAIL )) {
            next_prev6370.push_front(FAIL);
          }
        } else {
          next_prev6370.push_back(tmp[i6369]);
        }
      }
    }
    prev = next_prev6370;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6365=0;i6365<(int)prev.size();++i6365) {
    if( prev[i6365] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6365]);
    }
  }
  return memo[key(894,backtracking_ptr_for_packrat894)] = result;
}

deque<int> parse_LambdaBody(){
  if(memo.count(key(895,i))) {
    return memo[key(895,i)];
  }
  int backtracking_ptr_for_packrat895=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev6377;
  deque<int> prioritized_choice_final_prev6378;
  next_prev6377.clear();
  for(int i6376=0;i6376<(int)prev.size();++i6376) {
    i = prev[i6376];
    tmp = parse_slash6379();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6377.push_back(prev[i6376]); }
    for(int i6383=0;i6383<(int)tmp.size();++i6383) {
      if( tmp[i6383] != FAIL ) {
        prioritized_choice_final_prev6378.push_back(tmp[i6383]);
      }
    }
  }
  prev = next_prev6377;
  next_prev6377.clear();
  for(int i6376=0;i6376<(int)prev.size();++i6376) {
    i = prev[i6376];
    tmp = parse_slash6384();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6377.push_back(prev[i6376]); }
    for(int i6388=0;i6388<(int)tmp.size();++i6388) {
      if( tmp[i6388] != FAIL ) {
        prioritized_choice_final_prev6378.push_back(tmp[i6388]);
      }
    }
  }
  prev = next_prev6377;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev6378.empty() && prioritized_choice_final_prev6378.front() == FAIL )) {
      prioritized_choice_final_prev6378.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev6378;
  for(int i6375=0;i6375<(int)prev.size();++i6375) {
    if( prev[i6375] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6375]);
    }
  }
  return memo[key(895,backtracking_ptr_for_packrat895)] = result;
}

inline deque<int> parse_slash6379() { 
  if(memo.count(key(896,i))) {
    return memo[key(896,i)];
  }
  int backtracking_ptr_for_packrat896=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Expression) */
    deque<int> next_prev6382;
    for(int i6381=0;i6381<(int)prev.size();++i6381) {
      if( prev[i6381] == FAIL ) {
        if(!(!next_prev6382.empty() && next_prev6382.front() == FAIL )) {
          next_prev6382.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6381];
      tmp = parse_Expression();
      
      for(int i6381=0;i6381<(int)tmp.size();++i6381) {
        if( tmp[i6381] == FAIL ) {
          if(!( !next_prev6382.empty() && next_prev6382[0] == FAIL )) {
            next_prev6382.push_front(FAIL);
          }
        } else {
          next_prev6382.push_back(tmp[i6381]);
        }
      }
    }
    prev = next_prev6382;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6380=0;i6380<(int)prev.size();++i6380) {
    if( prev[i6380] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6380]);
    }
  }
  return memo[key(896,backtracking_ptr_for_packrat896)] = result;
}

inline deque<int> parse_slash6384() { 
  if(memo.count(key(897,i))) {
    return memo[key(897,i)];
  }
  int backtracking_ptr_for_packrat897=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Block) */
    deque<int> next_prev6387;
    for(int i6386=0;i6386<(int)prev.size();++i6386) {
      if( prev[i6386] == FAIL ) {
        if(!(!next_prev6387.empty() && next_prev6387.front() == FAIL )) {
          next_prev6387.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6386];
      tmp = parse_Block();
      
      for(int i6386=0;i6386<(int)tmp.size();++i6386) {
        if( tmp[i6386] == FAIL ) {
          if(!( !next_prev6387.empty() && next_prev6387[0] == FAIL )) {
            next_prev6387.push_front(FAIL);
          }
        } else {
          next_prev6387.push_back(tmp[i6386]);
        }
      }
    }
    prev = next_prev6387;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6385=0;i6385<(int)prev.size();++i6385) {
    if( prev[i6385] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6385]);
    }
  }
  return memo[key(897,backtracking_ptr_for_packrat897)] = result;
}

deque<int> parse_Identifier(){
  if(memo.count(key(898,i))) {
    return memo[key(898,i)];
  }
  int backtracking_ptr_for_packrat898=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (NAME) */
    deque<int> next_prev6391;
    for(int i6390=0;i6390<(int)prev.size();++i6390) {
      if( prev[i6390] == FAIL ) {
        if(!(!next_prev6391.empty() && next_prev6391.front() == FAIL )) {
          next_prev6391.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6390];
      tmp = parse_NAME();
      
      for(int i6390=0;i6390<(int)tmp.size();++i6390) {
        if( tmp[i6390] == FAIL ) {
          if(!( !next_prev6391.empty() && next_prev6391[0] == FAIL )) {
            next_prev6391.push_front(FAIL);
          }
        } else {
          next_prev6391.push_back(tmp[i6390]);
        }
      }
    }
    prev = next_prev6391;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (_) */
    deque<int> next_prev6393;
    for(int i6392=0;i6392<(int)prev.size();++i6392) {
      if( prev[i6392] == FAIL ) {
        if(!(!next_prev6393.empty() && next_prev6393.front() == FAIL )) {
          next_prev6393.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6392];
      tmp = parse__();
      
      for(int i6392=0;i6392<(int)tmp.size();++i6392) {
        if( tmp[i6392] == FAIL ) {
          if(!( !next_prev6393.empty() && next_prev6393[0] == FAIL )) {
            next_prev6393.push_front(FAIL);
          }
        } else {
          next_prev6393.push_back(tmp[i6392]);
        }
      }
    }
    prev = next_prev6393;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6389=0;i6389<(int)prev.size();++i6389) {
    if( prev[i6389] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6389]);
    }
  }
  return memo[key(898,backtracking_ptr_for_packrat898)] = result;
}

deque<int> parse_QualifiedName(){
  if(memo.count(key(899,i))) {
    return memo[key(899,i)];
  }
  int backtracking_ptr_for_packrat899=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev6396;
    for(int i6395=0;i6395<(int)prev.size();++i6395) {
      if( prev[i6395] == FAIL ) {
        if(!(!next_prev6396.empty() && next_prev6396.front() == FAIL )) {
          next_prev6396.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6395];
      tmp = parse_Identifier();
      
      for(int i6395=0;i6395<(int)tmp.size();++i6395) {
        if( tmp[i6395] == FAIL ) {
          if(!( !next_prev6396.empty() && next_prev6396[0] == FAIL )) {
            next_prev6396.push_front(FAIL);
          }
        } else {
          next_prev6396.push_back(tmp[i6395]);
        }
      }
    }
    prev = next_prev6396;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev6409;
    deque<int> star_final_prev6410;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev6409.clear();
      for(int i6411=0;i6411<(int)prev.size();++i6411) {
        i = prev[i6411];
        tmp = parse_while6397();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev6410.push_back(prev[i6411]);
        }
        for(int i6412=0;i6412<(int)tmp.size();++i6412) {
          if(tmp[i6412]==FAIL) {
            if(!( !next_prev6409.empty() && next_prev6409.front() == FAIL )) {
              next_prev6409.push_front(FAIL);
            }
          } else {
            next_prev6409.push_back(tmp[i6412]);
          }
        }
      }
      prev = next_prev6409;
    }
    prev = star_final_prev6410;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6394=0;i6394<(int)prev.size();++i6394) {
    if( prev[i6394] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6394]);
    }
  }
  return memo[key(899,backtracking_ptr_for_packrat899)] = result;
}

inline deque<int> parse_while6397() { 
  if(memo.count(key(900,i))) {
    return memo[key(900,i)];
  }
  int backtracking_ptr_for_packrat900=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i6399=0;i6399<(int)prev.size();++i6399) {
        if( prev[i6399] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6399]<m&&I[prev[i6399]]=='.') {
          tmp.push_back(prev[i6399]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev6404;
      for(int i6403=0;i6403<(int)prev.size();++i6403) {
        i = prev[i6403];
        tmp = parse_not6400();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev6404.push_back(prev[i6403]);
        } else {
          if(!(!next_prev6404.empty()&&next_prev6404.front()==FAIL)) {
            next_prev6404.push_front(FAIL);
          }
        }
      }
      prev = next_prev6404;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev6406;
      for(int i6405=0;i6405<(int)prev.size();++i6405) {
        if( prev[i6405] == FAIL ) {
          if(!(!next_prev6406.empty() && next_prev6406.front() == FAIL )) {
            next_prev6406.push_front(FAIL);
          }
          continue;
        }
        i = prev[i6405];
        tmp = parse__();
        
        for(int i6405=0;i6405<(int)tmp.size();++i6405) {
          if( tmp[i6405] == FAIL ) {
            if(!( !next_prev6406.empty() && next_prev6406[0] == FAIL )) {
              next_prev6406.push_front(FAIL);
            }
          } else {
            next_prev6406.push_back(tmp[i6405]);
          }
        }
      }
      prev = next_prev6406;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Identifier) */
    deque<int> next_prev6408;
    for(int i6407=0;i6407<(int)prev.size();++i6407) {
      if( prev[i6407] == FAIL ) {
        if(!(!next_prev6408.empty() && next_prev6408.front() == FAIL )) {
          next_prev6408.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6407];
      tmp = parse_Identifier();
      
      for(int i6407=0;i6407<(int)tmp.size();++i6407) {
        if( tmp[i6407] == FAIL ) {
          if(!( !next_prev6408.empty() && next_prev6408[0] == FAIL )) {
            next_prev6408.push_front(FAIL);
          }
        } else {
          next_prev6408.push_back(tmp[i6407]);
        }
      }
    }
    prev = next_prev6408;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6398=0;i6398<(int)prev.size();++i6398) {
    if( prev[i6398] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6398]);
    }
  }
  return memo[key(900,backtracking_ptr_for_packrat900)] = result;
}

inline deque<int> parse_not6400() { 
  if(memo.count(key(901,i))) {
    return memo[key(901,i)];
  }
  int backtracking_ptr_for_packrat901=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i6402=0;i6402<(int)prev.size();++i6402) {
    if( prev[i6402] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i6402]<m&&I[prev[i6402]]=='.') {
      tmp.push_back(prev[i6402]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i6401=0;i6401<(int)prev.size();++i6401) {
    if( prev[i6401] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6401]);
    }
  }
  return memo[key(901,backtracking_ptr_for_packrat901)] = result;
}

deque<int> parse_W(){
  if(memo.count(key(902,i))) {
    return memo[key(902,i)];
  }
  int backtracking_ptr_for_packrat902=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6414=0;i6414<(int)prev.size();++i6414) {
      if( prev[i6414] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6414]<m&&(I[prev[i6414]]=='a'||I[prev[i6414]]=='b'||I[prev[i6414]]=='c'||I[prev[i6414]]=='d'||I[prev[i6414]]=='e'||I[prev[i6414]]=='f'||I[prev[i6414]]=='g'||I[prev[i6414]]=='h'||I[prev[i6414]]=='i'||I[prev[i6414]]=='j'||I[prev[i6414]]=='k'||I[prev[i6414]]=='l'||I[prev[i6414]]=='m'||I[prev[i6414]]=='n'||I[prev[i6414]]=='o'||I[prev[i6414]]=='p'||I[prev[i6414]]=='q'||I[prev[i6414]]=='r'||I[prev[i6414]]=='s'||I[prev[i6414]]=='t'||I[prev[i6414]]=='u'||I[prev[i6414]]=='v'||I[prev[i6414]]=='w'||I[prev[i6414]]=='x'||I[prev[i6414]]=='y'||I[prev[i6414]]=='z'||I[prev[i6414]]=='A'||I[prev[i6414]]=='B'||I[prev[i6414]]=='C'||I[prev[i6414]]=='D'||I[prev[i6414]]=='E'||I[prev[i6414]]=='F'||I[prev[i6414]]=='G'||I[prev[i6414]]=='H'||I[prev[i6414]]=='I'||I[prev[i6414]]=='J'||I[prev[i6414]]=='K'||I[prev[i6414]]=='L'||I[prev[i6414]]=='M'||I[prev[i6414]]=='N'||I[prev[i6414]]=='O'||I[prev[i6414]]=='P'||I[prev[i6414]]=='Q'||I[prev[i6414]]=='R'||I[prev[i6414]]=='S'||I[prev[i6414]]=='T'||I[prev[i6414]]=='U'||I[prev[i6414]]=='V'||I[prev[i6414]]=='W'||I[prev[i6414]]=='X'||I[prev[i6414]]=='Y'||I[prev[i6414]]=='Z'||I[prev[i6414]]=='0'||I[prev[i6414]]=='1'||I[prev[i6414]]=='2'||I[prev[i6414]]=='3'||I[prev[i6414]]=='4'||I[prev[i6414]]=='5'||I[prev[i6414]]=='6'||I[prev[i6414]]=='7'||I[prev[i6414]]=='8'||I[prev[i6414]]=='9'||I[prev[i6414]]=='_'||I[prev[i6414]]=='$')) {
        tmp.push_back(prev[i6414]+1);
      } else {
        if(!( !tmp.empty() && tmp.front() == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6413=0;i6413<(int)prev.size();++i6413) {
    if( prev[i6413] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6413]);
    }
  }
  return memo[key(902,backtracking_ptr_for_packrat902)] = result;
}

deque<int> parse_NAME(){
  if(memo.count(key(903,i))) {
    return memo[key(903,i)];
  }
  int backtracking_ptr_for_packrat903=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Not */
    deque<int> next_prev6421;
    for(int i6420=0;i6420<(int)prev.size();++i6420) {
      i = prev[i6420];
      tmp = parse_not6416();
      if(!tmp.empty()&&tmp.front()==FAIL) {
        next_prev6421.push_back(prev[i6420]);
      } else {
        if(!(!next_prev6421.empty()&&next_prev6421.front()==FAIL)) {
          next_prev6421.push_front(FAIL);
        }
      }
    }
    prev = next_prev6421;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Not */
    deque<int> next_prev6433;
    for(int i6432=0;i6432<(int)prev.size();++i6432) {
      i = prev[i6432];
      tmp = parse_not6422();
      if(!tmp.empty()&&tmp.front()==FAIL) {
        next_prev6433.push_back(prev[i6432]);
      } else {
        if(!(!next_prev6433.empty()&&next_prev6433.front()==FAIL)) {
          next_prev6433.push_front(FAIL);
        }
      }
    }
    prev = next_prev6433;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (W) */
      deque<int> next_prev6435;
      for(int i6434=0;i6434<(int)prev.size();++i6434) {
        if( prev[i6434] == FAIL ) {
          if(!(!next_prev6435.empty() && next_prev6435.front() == FAIL )) {
            next_prev6435.push_front(FAIL);
          }
          continue;
        }
        i = prev[i6434];
        tmp = parse_W();
        
        for(int i6434=0;i6434<(int)tmp.size();++i6434) {
          if( tmp[i6434] == FAIL ) {
            if(!( !next_prev6435.empty() && next_prev6435[0] == FAIL )) {
              next_prev6435.push_front(FAIL);
            }
          } else {
            next_prev6435.push_back(tmp[i6434]);
          }
        }
      }
      prev = next_prev6435;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Star */
      deque<int> next_prev6440;
      deque<int> star_final_prev6441;
      while(!((int)prev.size()==1&&prev.front()==FAIL)) {
        next_prev6440.clear();
        for(int i6442=0;i6442<(int)prev.size();++i6442) {
          i = prev[i6442];
          tmp = parse_while6436();
          if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
            star_final_prev6441.push_back(prev[i6442]);
          }
          for(int i6443=0;i6443<(int)tmp.size();++i6443) {
            if(tmp[i6443]==FAIL) {
              if(!( !next_prev6440.empty() && next_prev6440.front() == FAIL )) {
                next_prev6440.push_front(FAIL);
              }
            } else {
              next_prev6440.push_back(tmp[i6443]);
            }
          }
        }
        prev = next_prev6440;
      }
      prev = star_final_prev6441;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6415=0;i6415<(int)prev.size();++i6415) {
    if( prev[i6415] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6415]);
    }
  }
  return memo[key(903,backtracking_ptr_for_packrat903)] = result;
}

inline deque<int> parse_not6416() { 
  if(memo.count(key(904,i))) {
    return memo[key(904,i)];
  }
  int backtracking_ptr_for_packrat904=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (DIGIT) */
  deque<int> next_prev6419;
  for(int i6418=0;i6418<(int)prev.size();++i6418) {
    if( prev[i6418] == FAIL ) {
      if(!(!next_prev6419.empty() && next_prev6419.front() == FAIL )) {
        next_prev6419.push_front(FAIL);
      }
      continue;
    }
    i = prev[i6418];
    tmp = parse_DIGIT();
    
    for(int i6418=0;i6418<(int)tmp.size();++i6418) {
      if( tmp[i6418] == FAIL ) {
        if(!( !next_prev6419.empty() && next_prev6419[0] == FAIL )) {
          next_prev6419.push_front(FAIL);
        }
      } else {
        next_prev6419.push_back(tmp[i6418]);
      }
    }
  }
  prev = next_prev6419;
  for(int i6417=0;i6417<(int)prev.size();++i6417) {
    if( prev[i6417] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6417]);
    }
  }
  return memo[key(904,backtracking_ptr_for_packrat904)] = result;
}

inline deque<int> parse_not6422() { 
  if(memo.count(key(905,i))) {
    return memo[key(905,i)];
  }
  int backtracking_ptr_for_packrat905=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (KEYWORD) */
    deque<int> next_prev6425;
    for(int i6424=0;i6424<(int)prev.size();++i6424) {
      if( prev[i6424] == FAIL ) {
        if(!(!next_prev6425.empty() && next_prev6425.front() == FAIL )) {
          next_prev6425.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6424];
      tmp = parse_KEYWORD();
      
      for(int i6424=0;i6424<(int)tmp.size();++i6424) {
        if( tmp[i6424] == FAIL ) {
          if(!( !next_prev6425.empty() && next_prev6425[0] == FAIL )) {
            next_prev6425.push_front(FAIL);
          }
        } else {
          next_prev6425.push_back(tmp[i6424]);
        }
      }
    }
    prev = next_prev6425;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Not */
    deque<int> next_prev6431;
    for(int i6430=0;i6430<(int)prev.size();++i6430) {
      i = prev[i6430];
      tmp = parse_not6426();
      if(!tmp.empty()&&tmp.front()==FAIL) {
        next_prev6431.push_back(prev[i6430]);
      } else {
        if(!(!next_prev6431.empty()&&next_prev6431.front()==FAIL)) {
          next_prev6431.push_front(FAIL);
        }
      }
    }
    prev = next_prev6431;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6423=0;i6423<(int)prev.size();++i6423) {
    if( prev[i6423] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6423]);
    }
  }
  return memo[key(905,backtracking_ptr_for_packrat905)] = result;
}

inline deque<int> parse_not6426() { 
  if(memo.count(key(906,i))) {
    return memo[key(906,i)];
  }
  int backtracking_ptr_for_packrat906=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev6429;
  for(int i6428=0;i6428<(int)prev.size();++i6428) {
    if( prev[i6428] == FAIL ) {
      if(!(!next_prev6429.empty() && next_prev6429.front() == FAIL )) {
        next_prev6429.push_front(FAIL);
      }
      continue;
    }
    i = prev[i6428];
    tmp = parse_W();
    
    for(int i6428=0;i6428<(int)tmp.size();++i6428) {
      if( tmp[i6428] == FAIL ) {
        if(!( !next_prev6429.empty() && next_prev6429[0] == FAIL )) {
          next_prev6429.push_front(FAIL);
        }
      } else {
        next_prev6429.push_back(tmp[i6428]);
      }
    }
  }
  prev = next_prev6429;
  for(int i6427=0;i6427<(int)prev.size();++i6427) {
    if( prev[i6427] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6427]);
    }
  }
  return memo[key(906,backtracking_ptr_for_packrat906)] = result;
}

inline deque<int> parse_while6436() { 
  if(memo.count(key(907,i))) {
    return memo[key(907,i)];
  }
  int backtracking_ptr_for_packrat907=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev6439;
  for(int i6438=0;i6438<(int)prev.size();++i6438) {
    if( prev[i6438] == FAIL ) {
      if(!(!next_prev6439.empty() && next_prev6439.front() == FAIL )) {
        next_prev6439.push_front(FAIL);
      }
      continue;
    }
    i = prev[i6438];
    tmp = parse_W();
    
    for(int i6438=0;i6438<(int)tmp.size();++i6438) {
      if( tmp[i6438] == FAIL ) {
        if(!( !next_prev6439.empty() && next_prev6439[0] == FAIL )) {
          next_prev6439.push_front(FAIL);
        }
      } else {
        next_prev6439.push_back(tmp[i6438]);
      }
    }
  }
  prev = next_prev6439;
  for(int i6437=0;i6437<(int)prev.size();++i6437) {
    if( prev[i6437] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6437]);
    }
  }
  return memo[key(907,backtracking_ptr_for_packrat907)] = result;
}

deque<int> parse_Literal(){
  if(memo.count(key(908,i))) {
    return memo[key(908,i)];
  }
  int backtracking_ptr_for_packrat908=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev6446;
  deque<int> prioritized_choice_final_prev6447;
  next_prev6446.clear();
  for(int i6445=0;i6445<(int)prev.size();++i6445) {
    i = prev[i6445];
    tmp = parse_slash6448();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6446.push_back(prev[i6445]); }
    for(int i6452=0;i6452<(int)tmp.size();++i6452) {
      if( tmp[i6452] != FAIL ) {
        prioritized_choice_final_prev6447.push_back(tmp[i6452]);
      }
    }
  }
  prev = next_prev6446;
  next_prev6446.clear();
  for(int i6445=0;i6445<(int)prev.size();++i6445) {
    i = prev[i6445];
    tmp = parse_slash6453();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6446.push_back(prev[i6445]); }
    for(int i6457=0;i6457<(int)tmp.size();++i6457) {
      if( tmp[i6457] != FAIL ) {
        prioritized_choice_final_prev6447.push_back(tmp[i6457]);
      }
    }
  }
  prev = next_prev6446;
  next_prev6446.clear();
  for(int i6445=0;i6445<(int)prev.size();++i6445) {
    i = prev[i6445];
    tmp = parse_slash6458();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6446.push_back(prev[i6445]); }
    for(int i6462=0;i6462<(int)tmp.size();++i6462) {
      if( tmp[i6462] != FAIL ) {
        prioritized_choice_final_prev6447.push_back(tmp[i6462]);
      }
    }
  }
  prev = next_prev6446;
  next_prev6446.clear();
  for(int i6445=0;i6445<(int)prev.size();++i6445) {
    i = prev[i6445];
    tmp = parse_slash6463();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6446.push_back(prev[i6445]); }
    for(int i6467=0;i6467<(int)tmp.size();++i6467) {
      if( tmp[i6467] != FAIL ) {
        prioritized_choice_final_prev6447.push_back(tmp[i6467]);
      }
    }
  }
  prev = next_prev6446;
  next_prev6446.clear();
  for(int i6445=0;i6445<(int)prev.size();++i6445) {
    i = prev[i6445];
    tmp = parse_slash6468();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6446.push_back(prev[i6445]); }
    for(int i6472=0;i6472<(int)tmp.size();++i6472) {
      if( tmp[i6472] != FAIL ) {
        prioritized_choice_final_prev6447.push_back(tmp[i6472]);
      }
    }
  }
  prev = next_prev6446;
  next_prev6446.clear();
  for(int i6445=0;i6445<(int)prev.size();++i6445) {
    i = prev[i6445];
    tmp = parse_slash6473();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6446.push_back(prev[i6445]); }
    for(int i6477=0;i6477<(int)tmp.size();++i6477) {
      if( tmp[i6477] != FAIL ) {
        prioritized_choice_final_prev6447.push_back(tmp[i6477]);
      }
    }
  }
  prev = next_prev6446;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev6447.empty() && prioritized_choice_final_prev6447.front() == FAIL )) {
      prioritized_choice_final_prev6447.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev6447;
  for(int i6444=0;i6444<(int)prev.size();++i6444) {
    if( prev[i6444] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6444]);
    }
  }
  return memo[key(908,backtracking_ptr_for_packrat908)] = result;
}

inline deque<int> parse_slash6448() { 
  if(memo.count(key(909,i))) {
    return memo[key(909,i)];
  }
  int backtracking_ptr_for_packrat909=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (FloatingPointLiteral) */
    deque<int> next_prev6451;
    for(int i6450=0;i6450<(int)prev.size();++i6450) {
      if( prev[i6450] == FAIL ) {
        if(!(!next_prev6451.empty() && next_prev6451.front() == FAIL )) {
          next_prev6451.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6450];
      tmp = parse_FloatingPointLiteral();
      
      for(int i6450=0;i6450<(int)tmp.size();++i6450) {
        if( tmp[i6450] == FAIL ) {
          if(!( !next_prev6451.empty() && next_prev6451[0] == FAIL )) {
            next_prev6451.push_front(FAIL);
          }
        } else {
          next_prev6451.push_back(tmp[i6450]);
        }
      }
    }
    prev = next_prev6451;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6449=0;i6449<(int)prev.size();++i6449) {
    if( prev[i6449] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6449]);
    }
  }
  return memo[key(909,backtracking_ptr_for_packrat909)] = result;
}

inline deque<int> parse_slash6453() { 
  if(memo.count(key(910,i))) {
    return memo[key(910,i)];
  }
  int backtracking_ptr_for_packrat910=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (IntegerLiteral) */
    deque<int> next_prev6456;
    for(int i6455=0;i6455<(int)prev.size();++i6455) {
      if( prev[i6455] == FAIL ) {
        if(!(!next_prev6456.empty() && next_prev6456.front() == FAIL )) {
          next_prev6456.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6455];
      tmp = parse_IntegerLiteral();
      
      for(int i6455=0;i6455<(int)tmp.size();++i6455) {
        if( tmp[i6455] == FAIL ) {
          if(!( !next_prev6456.empty() && next_prev6456[0] == FAIL )) {
            next_prev6456.push_front(FAIL);
          }
        } else {
          next_prev6456.push_back(tmp[i6455]);
        }
      }
    }
    prev = next_prev6456;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6454=0;i6454<(int)prev.size();++i6454) {
    if( prev[i6454] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6454]);
    }
  }
  return memo[key(910,backtracking_ptr_for_packrat910)] = result;
}

inline deque<int> parse_slash6458() { 
  if(memo.count(key(911,i))) {
    return memo[key(911,i)];
  }
  int backtracking_ptr_for_packrat911=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (BooleanLiteral) */
    deque<int> next_prev6461;
    for(int i6460=0;i6460<(int)prev.size();++i6460) {
      if( prev[i6460] == FAIL ) {
        if(!(!next_prev6461.empty() && next_prev6461.front() == FAIL )) {
          next_prev6461.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6460];
      tmp = parse_BooleanLiteral();
      
      for(int i6460=0;i6460<(int)tmp.size();++i6460) {
        if( tmp[i6460] == FAIL ) {
          if(!( !next_prev6461.empty() && next_prev6461[0] == FAIL )) {
            next_prev6461.push_front(FAIL);
          }
        } else {
          next_prev6461.push_back(tmp[i6460]);
        }
      }
    }
    prev = next_prev6461;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6459=0;i6459<(int)prev.size();++i6459) {
    if( prev[i6459] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6459]);
    }
  }
  return memo[key(911,backtracking_ptr_for_packrat911)] = result;
}

inline deque<int> parse_slash6463() { 
  if(memo.count(key(912,i))) {
    return memo[key(912,i)];
  }
  int backtracking_ptr_for_packrat912=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (CharacterLiteral) */
    deque<int> next_prev6466;
    for(int i6465=0;i6465<(int)prev.size();++i6465) {
      if( prev[i6465] == FAIL ) {
        if(!(!next_prev6466.empty() && next_prev6466.front() == FAIL )) {
          next_prev6466.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6465];
      tmp = parse_CharacterLiteral();
      
      for(int i6465=0;i6465<(int)tmp.size();++i6465) {
        if( tmp[i6465] == FAIL ) {
          if(!( !next_prev6466.empty() && next_prev6466[0] == FAIL )) {
            next_prev6466.push_front(FAIL);
          }
        } else {
          next_prev6466.push_back(tmp[i6465]);
        }
      }
    }
    prev = next_prev6466;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6464=0;i6464<(int)prev.size();++i6464) {
    if( prev[i6464] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6464]);
    }
  }
  return memo[key(912,backtracking_ptr_for_packrat912)] = result;
}

inline deque<int> parse_slash6468() { 
  if(memo.count(key(913,i))) {
    return memo[key(913,i)];
  }
  int backtracking_ptr_for_packrat913=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (StringLiteral) */
    deque<int> next_prev6471;
    for(int i6470=0;i6470<(int)prev.size();++i6470) {
      if( prev[i6470] == FAIL ) {
        if(!(!next_prev6471.empty() && next_prev6471.front() == FAIL )) {
          next_prev6471.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6470];
      tmp = parse_StringLiteral();
      
      for(int i6470=0;i6470<(int)tmp.size();++i6470) {
        if( tmp[i6470] == FAIL ) {
          if(!( !next_prev6471.empty() && next_prev6471[0] == FAIL )) {
            next_prev6471.push_front(FAIL);
          }
        } else {
          next_prev6471.push_back(tmp[i6470]);
        }
      }
    }
    prev = next_prev6471;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6469=0;i6469<(int)prev.size();++i6469) {
    if( prev[i6469] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6469]);
    }
  }
  return memo[key(913,backtracking_ptr_for_packrat913)] = result;
}

inline deque<int> parse_slash6473() { 
  if(memo.count(key(914,i))) {
    return memo[key(914,i)];
  }
  int backtracking_ptr_for_packrat914=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (NullLiteral) */
    deque<int> next_prev6476;
    for(int i6475=0;i6475<(int)prev.size();++i6475) {
      if( prev[i6475] == FAIL ) {
        if(!(!next_prev6476.empty() && next_prev6476.front() == FAIL )) {
          next_prev6476.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6475];
      tmp = parse_NullLiteral();
      
      for(int i6475=0;i6475<(int)tmp.size();++i6475) {
        if( tmp[i6475] == FAIL ) {
          if(!( !next_prev6476.empty() && next_prev6476[0] == FAIL )) {
            next_prev6476.push_front(FAIL);
          }
        } else {
          next_prev6476.push_back(tmp[i6475]);
        }
      }
    }
    prev = next_prev6476;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6474=0;i6474<(int)prev.size();++i6474) {
    if( prev[i6474] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6474]);
    }
  }
  return memo[key(914,backtracking_ptr_for_packrat914)] = result;
}

deque<int> parse_Constant(){
  if(memo.count(key(915,i))) {
    return memo[key(915,i)];
  }
  int backtracking_ptr_for_packrat915=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (Literal) */
    deque<int> next_prev6480;
    for(int i6479=0;i6479<(int)prev.size();++i6479) {
      if( prev[i6479] == FAIL ) {
        if(!(!next_prev6480.empty() && next_prev6480.front() == FAIL )) {
          next_prev6480.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6479];
      tmp = parse_Literal();
      
      for(int i6479=0;i6479<(int)tmp.size();++i6479) {
        if( tmp[i6479] == FAIL ) {
          if(!( !next_prev6480.empty() && next_prev6480[0] == FAIL )) {
            next_prev6480.push_front(FAIL);
          }
        } else {
          next_prev6480.push_back(tmp[i6479]);
        }
      }
    }
    prev = next_prev6480;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6478=0;i6478<(int)prev.size();++i6478) {
    if( prev[i6478] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6478]);
    }
  }
  return memo[key(915,backtracking_ptr_for_packrat915)] = result;
}

deque<int> parse_NullLiteral(){
  if(memo.count(key(916,i))) {
    return memo[key(916,i)];
  }
  int backtracking_ptr_for_packrat916=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i6482=0;i6482<(int)prev.size();++i6482) {
        if( prev[i6482] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6482]<m&&I[prev[i6482]]=='n') {
          tmp.push_back(prev[i6482]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i6483=0;i6483<(int)prev.size();++i6483) {
        if( prev[i6483] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6483]<m&&I[prev[i6483]]=='u') {
          tmp.push_back(prev[i6483]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i6484=0;i6484<(int)prev.size();++i6484) {
        if( prev[i6484] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6484]<m&&I[prev[i6484]]=='l') {
          tmp.push_back(prev[i6484]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i6485=0;i6485<(int)prev.size();++i6485) {
        if( prev[i6485] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6485]<m&&I[prev[i6485]]=='l') {
          tmp.push_back(prev[i6485]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev6491;
      for(int i6490=0;i6490<(int)prev.size();++i6490) {
        i = prev[i6490];
        tmp = parse_not6486();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev6491.push_back(prev[i6490]);
        } else {
          if(!(!next_prev6491.empty()&&next_prev6491.front()==FAIL)) {
            next_prev6491.push_front(FAIL);
          }
        }
      }
      prev = next_prev6491;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev6493;
      for(int i6492=0;i6492<(int)prev.size();++i6492) {
        if( prev[i6492] == FAIL ) {
          if(!(!next_prev6493.empty() && next_prev6493.front() == FAIL )) {
            next_prev6493.push_front(FAIL);
          }
          continue;
        }
        i = prev[i6492];
        tmp = parse__();
        
        for(int i6492=0;i6492<(int)tmp.size();++i6492) {
          if( tmp[i6492] == FAIL ) {
            if(!( !next_prev6493.empty() && next_prev6493[0] == FAIL )) {
              next_prev6493.push_front(FAIL);
            }
          } else {
            next_prev6493.push_back(tmp[i6492]);
          }
        }
      }
      prev = next_prev6493;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6481=0;i6481<(int)prev.size();++i6481) {
    if( prev[i6481] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6481]);
    }
  }
  return memo[key(916,backtracking_ptr_for_packrat916)] = result;
}

inline deque<int> parse_not6486() { 
  if(memo.count(key(917,i))) {
    return memo[key(917,i)];
  }
  int backtracking_ptr_for_packrat917=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev6489;
  for(int i6488=0;i6488<(int)prev.size();++i6488) {
    if( prev[i6488] == FAIL ) {
      if(!(!next_prev6489.empty() && next_prev6489.front() == FAIL )) {
        next_prev6489.push_front(FAIL);
      }
      continue;
    }
    i = prev[i6488];
    tmp = parse_W();
    
    for(int i6488=0;i6488<(int)tmp.size();++i6488) {
      if( tmp[i6488] == FAIL ) {
        if(!( !next_prev6489.empty() && next_prev6489[0] == FAIL )) {
          next_prev6489.push_front(FAIL);
        }
      } else {
        next_prev6489.push_back(tmp[i6488]);
      }
    }
  }
  prev = next_prev6489;
  for(int i6487=0;i6487<(int)prev.size();++i6487) {
    if( prev[i6487] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6487]);
    }
  }
  return memo[key(917,backtracking_ptr_for_packrat917)] = result;
}

deque<int> parse_BooleanLiteral(){
  if(memo.count(key(918,i))) {
    return memo[key(918,i)];
  }
  int backtracking_ptr_for_packrat918=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev6496;
  deque<int> prioritized_choice_final_prev6497;
  next_prev6496.clear();
  for(int i6495=0;i6495<(int)prev.size();++i6495) {
    i = prev[i6495];
    tmp = parse_slash6498();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6496.push_back(prev[i6495]); }
    for(int i6512=0;i6512<(int)tmp.size();++i6512) {
      if( tmp[i6512] != FAIL ) {
        prioritized_choice_final_prev6497.push_back(tmp[i6512]);
      }
    }
  }
  prev = next_prev6496;
  next_prev6496.clear();
  for(int i6495=0;i6495<(int)prev.size();++i6495) {
    i = prev[i6495];
    tmp = parse_slash6513();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6496.push_back(prev[i6495]); }
    for(int i6528=0;i6528<(int)tmp.size();++i6528) {
      if( tmp[i6528] != FAIL ) {
        prioritized_choice_final_prev6497.push_back(tmp[i6528]);
      }
    }
  }
  prev = next_prev6496;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev6497.empty() && prioritized_choice_final_prev6497.front() == FAIL )) {
      prioritized_choice_final_prev6497.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev6497;
  for(int i6494=0;i6494<(int)prev.size();++i6494) {
    if( prev[i6494] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6494]);
    }
  }
  return memo[key(918,backtracking_ptr_for_packrat918)] = result;
}

inline deque<int> parse_slash6498() { 
  if(memo.count(key(919,i))) {
    return memo[key(919,i)];
  }
  int backtracking_ptr_for_packrat919=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i6500=0;i6500<(int)prev.size();++i6500) {
        if( prev[i6500] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6500]<m&&I[prev[i6500]]=='t') {
          tmp.push_back(prev[i6500]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i6501=0;i6501<(int)prev.size();++i6501) {
        if( prev[i6501] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6501]<m&&I[prev[i6501]]=='r') {
          tmp.push_back(prev[i6501]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i6502=0;i6502<(int)prev.size();++i6502) {
        if( prev[i6502] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6502]<m&&I[prev[i6502]]=='u') {
          tmp.push_back(prev[i6502]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i6503=0;i6503<(int)prev.size();++i6503) {
        if( prev[i6503] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6503]<m&&I[prev[i6503]]=='e') {
          tmp.push_back(prev[i6503]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev6509;
      for(int i6508=0;i6508<(int)prev.size();++i6508) {
        i = prev[i6508];
        tmp = parse_not6504();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev6509.push_back(prev[i6508]);
        } else {
          if(!(!next_prev6509.empty()&&next_prev6509.front()==FAIL)) {
            next_prev6509.push_front(FAIL);
          }
        }
      }
      prev = next_prev6509;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev6511;
      for(int i6510=0;i6510<(int)prev.size();++i6510) {
        if( prev[i6510] == FAIL ) {
          if(!(!next_prev6511.empty() && next_prev6511.front() == FAIL )) {
            next_prev6511.push_front(FAIL);
          }
          continue;
        }
        i = prev[i6510];
        tmp = parse__();
        
        for(int i6510=0;i6510<(int)tmp.size();++i6510) {
          if( tmp[i6510] == FAIL ) {
            if(!( !next_prev6511.empty() && next_prev6511[0] == FAIL )) {
              next_prev6511.push_front(FAIL);
            }
          } else {
            next_prev6511.push_back(tmp[i6510]);
          }
        }
      }
      prev = next_prev6511;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6499=0;i6499<(int)prev.size();++i6499) {
    if( prev[i6499] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6499]);
    }
  }
  return memo[key(919,backtracking_ptr_for_packrat919)] = result;
}

inline deque<int> parse_not6504() { 
  if(memo.count(key(920,i))) {
    return memo[key(920,i)];
  }
  int backtracking_ptr_for_packrat920=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev6507;
  for(int i6506=0;i6506<(int)prev.size();++i6506) {
    if( prev[i6506] == FAIL ) {
      if(!(!next_prev6507.empty() && next_prev6507.front() == FAIL )) {
        next_prev6507.push_front(FAIL);
      }
      continue;
    }
    i = prev[i6506];
    tmp = parse_W();
    
    for(int i6506=0;i6506<(int)tmp.size();++i6506) {
      if( tmp[i6506] == FAIL ) {
        if(!( !next_prev6507.empty() && next_prev6507[0] == FAIL )) {
          next_prev6507.push_front(FAIL);
        }
      } else {
        next_prev6507.push_back(tmp[i6506]);
      }
    }
  }
  prev = next_prev6507;
  for(int i6505=0;i6505<(int)prev.size();++i6505) {
    if( prev[i6505] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6505]);
    }
  }
  return memo[key(920,backtracking_ptr_for_packrat920)] = result;
}

inline deque<int> parse_slash6513() { 
  if(memo.count(key(921,i))) {
    return memo[key(921,i)];
  }
  int backtracking_ptr_for_packrat921=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i6515=0;i6515<(int)prev.size();++i6515) {
        if( prev[i6515] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6515]<m&&I[prev[i6515]]=='f') {
          tmp.push_back(prev[i6515]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i6516=0;i6516<(int)prev.size();++i6516) {
        if( prev[i6516] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6516]<m&&I[prev[i6516]]=='a') {
          tmp.push_back(prev[i6516]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i6517=0;i6517<(int)prev.size();++i6517) {
        if( prev[i6517] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6517]<m&&I[prev[i6517]]=='l') {
          tmp.push_back(prev[i6517]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i6518=0;i6518<(int)prev.size();++i6518) {
        if( prev[i6518] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6518]<m&&I[prev[i6518]]=='s') {
          tmp.push_back(prev[i6518]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      tmp.clear();
      for(int i6519=0;i6519<(int)prev.size();++i6519) {
        if( prev[i6519] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6519]<m&&I[prev[i6519]]=='e') {
          tmp.push_back(prev[i6519]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Not */
      deque<int> next_prev6525;
      for(int i6524=0;i6524<(int)prev.size();++i6524) {
        i = prev[i6524];
        tmp = parse_not6520();
        if(!tmp.empty()&&tmp.front()==FAIL) {
          next_prev6525.push_back(prev[i6524]);
        } else {
          if(!(!next_prev6525.empty()&&next_prev6525.front()==FAIL)) {
            next_prev6525.push_front(FAIL);
          }
        }
      }
      prev = next_prev6525;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (_) */
      deque<int> next_prev6527;
      for(int i6526=0;i6526<(int)prev.size();++i6526) {
        if( prev[i6526] == FAIL ) {
          if(!(!next_prev6527.empty() && next_prev6527.front() == FAIL )) {
            next_prev6527.push_front(FAIL);
          }
          continue;
        }
        i = prev[i6526];
        tmp = parse__();
        
        for(int i6526=0;i6526<(int)tmp.size();++i6526) {
          if( tmp[i6526] == FAIL ) {
            if(!( !next_prev6527.empty() && next_prev6527[0] == FAIL )) {
              next_prev6527.push_front(FAIL);
            }
          } else {
            next_prev6527.push_back(tmp[i6526]);
          }
        }
      }
      prev = next_prev6527;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6514=0;i6514<(int)prev.size();++i6514) {
    if( prev[i6514] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6514]);
    }
  }
  return memo[key(921,backtracking_ptr_for_packrat921)] = result;
}

inline deque<int> parse_not6520() { 
  if(memo.count(key(922,i))) {
    return memo[key(922,i)];
  }
  int backtracking_ptr_for_packrat922=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (W) */
  deque<int> next_prev6523;
  for(int i6522=0;i6522<(int)prev.size();++i6522) {
    if( prev[i6522] == FAIL ) {
      if(!(!next_prev6523.empty() && next_prev6523.front() == FAIL )) {
        next_prev6523.push_front(FAIL);
      }
      continue;
    }
    i = prev[i6522];
    tmp = parse_W();
    
    for(int i6522=0;i6522<(int)tmp.size();++i6522) {
      if( tmp[i6522] == FAIL ) {
        if(!( !next_prev6523.empty() && next_prev6523[0] == FAIL )) {
          next_prev6523.push_front(FAIL);
        }
      } else {
        next_prev6523.push_back(tmp[i6522]);
      }
    }
  }
  prev = next_prev6523;
  for(int i6521=0;i6521<(int)prev.size();++i6521) {
    if( prev[i6521] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6521]);
    }
  }
  return memo[key(922,backtracking_ptr_for_packrat922)] = result;
}

deque<int> parse_IntegerLiteral(){
  if(memo.count(key(923,i))) {
    return memo[key(923,i)];
  }
  int backtracking_ptr_for_packrat923=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev6531;
    deque<int> prioritized_choice_final_prev6532;
    next_prev6531.clear();
    for(int i6530=0;i6530<(int)prev.size();++i6530) {
      i = prev[i6530];
      tmp = parse_slash6533();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6531.push_back(prev[i6530]); }
      for(int i6537=0;i6537<(int)tmp.size();++i6537) {
        if( tmp[i6537] != FAIL ) {
          prioritized_choice_final_prev6532.push_back(tmp[i6537]);
        }
      }
    }
    prev = next_prev6531;
    next_prev6531.clear();
    for(int i6530=0;i6530<(int)prev.size();++i6530) {
      i = prev[i6530];
      tmp = parse_slash6538();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6531.push_back(prev[i6530]); }
      for(int i6542=0;i6542<(int)tmp.size();++i6542) {
        if( tmp[i6542] != FAIL ) {
          prioritized_choice_final_prev6532.push_back(tmp[i6542]);
        }
      }
    }
    prev = next_prev6531;
    next_prev6531.clear();
    for(int i6530=0;i6530<(int)prev.size();++i6530) {
      i = prev[i6530];
      tmp = parse_slash6543();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6531.push_back(prev[i6530]); }
      for(int i6547=0;i6547<(int)tmp.size();++i6547) {
        if( tmp[i6547] != FAIL ) {
          prioritized_choice_final_prev6532.push_back(tmp[i6547]);
        }
      }
    }
    prev = next_prev6531;
    next_prev6531.clear();
    for(int i6530=0;i6530<(int)prev.size();++i6530) {
      i = prev[i6530];
      tmp = parse_slash6548();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6531.push_back(prev[i6530]); }
      for(int i6552=0;i6552<(int)tmp.size();++i6552) {
        if( tmp[i6552] != FAIL ) {
          prioritized_choice_final_prev6532.push_back(tmp[i6552]);
        }
      }
    }
    prev = next_prev6531;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev6532.empty() && prioritized_choice_final_prev6532.front() == FAIL )) {
        prioritized_choice_final_prev6532.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev6532;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev6554;
    deque<int> prioritized_choice_final_prev6555;
    next_prev6554.clear();
    for(int i6553=0;i6553<(int)prev.size();++i6553) {
      i = prev[i6553];
      tmp = parse_slash6556();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6554.push_back(prev[i6553]); }
      for(int i6560=0;i6560<(int)tmp.size();++i6560) {
        if( tmp[i6560] != FAIL ) {
          prioritized_choice_final_prev6555.push_back(tmp[i6560]);
        }
      }
    }
    prev = next_prev6554;
    next_prev6554.clear();
    for(int i6553=0;i6553<(int)prev.size();++i6553) {
      i = prev[i6553];
      tmp = parse_slash6561();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6554.push_back(prev[i6553]); }
      for(int i6565=0;i6565<(int)tmp.size();++i6565) {
        if( tmp[i6565] != FAIL ) {
          prioritized_choice_final_prev6555.push_back(tmp[i6565]);
        }
      }
    }
    prev = next_prev6554;
    next_prev6554.clear();
    for(int i6553=0;i6553<(int)prev.size();++i6553) {
      i = prev[i6553];
      tmp = parse_slash6566();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6554.push_back(prev[i6553]); }
      for(int i6568=0;i6568<(int)tmp.size();++i6568) {
        if( tmp[i6568] != FAIL ) {
          prioritized_choice_final_prev6555.push_back(tmp[i6568]);
        }
      }
    }
    prev = next_prev6554;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev6555.empty() && prioritized_choice_final_prev6555.front() == FAIL )) {
        prioritized_choice_final_prev6555.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev6555;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (_) */
    deque<int> next_prev6570;
    for(int i6569=0;i6569<(int)prev.size();++i6569) {
      if( prev[i6569] == FAIL ) {
        if(!(!next_prev6570.empty() && next_prev6570.front() == FAIL )) {
          next_prev6570.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6569];
      tmp = parse__();
      
      for(int i6569=0;i6569<(int)tmp.size();++i6569) {
        if( tmp[i6569] == FAIL ) {
          if(!( !next_prev6570.empty() && next_prev6570[0] == FAIL )) {
            next_prev6570.push_front(FAIL);
          }
        } else {
          next_prev6570.push_back(tmp[i6569]);
        }
      }
    }
    prev = next_prev6570;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6529=0;i6529<(int)prev.size();++i6529) {
    if( prev[i6529] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6529]);
    }
  }
  return memo[key(923,backtracking_ptr_for_packrat923)] = result;
}

inline deque<int> parse_slash6533() { 
  if(memo.count(key(924,i))) {
    return memo[key(924,i)];
  }
  int backtracking_ptr_for_packrat924=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (DECIMAL) */
    deque<int> next_prev6536;
    for(int i6535=0;i6535<(int)prev.size();++i6535) {
      if( prev[i6535] == FAIL ) {
        if(!(!next_prev6536.empty() && next_prev6536.front() == FAIL )) {
          next_prev6536.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6535];
      tmp = parse_DECIMAL();
      
      for(int i6535=0;i6535<(int)tmp.size();++i6535) {
        if( tmp[i6535] == FAIL ) {
          if(!( !next_prev6536.empty() && next_prev6536[0] == FAIL )) {
            next_prev6536.push_front(FAIL);
          }
        } else {
          next_prev6536.push_back(tmp[i6535]);
        }
      }
    }
    prev = next_prev6536;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6534=0;i6534<(int)prev.size();++i6534) {
    if( prev[i6534] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6534]);
    }
  }
  return memo[key(924,backtracking_ptr_for_packrat924)] = result;
}

inline deque<int> parse_slash6538() { 
  if(memo.count(key(925,i))) {
    return memo[key(925,i)];
  }
  int backtracking_ptr_for_packrat925=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (HEXADECIMAL) */
    deque<int> next_prev6541;
    for(int i6540=0;i6540<(int)prev.size();++i6540) {
      if( prev[i6540] == FAIL ) {
        if(!(!next_prev6541.empty() && next_prev6541.front() == FAIL )) {
          next_prev6541.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6540];
      tmp = parse_HEXADECIMAL();
      
      for(int i6540=0;i6540<(int)tmp.size();++i6540) {
        if( tmp[i6540] == FAIL ) {
          if(!( !next_prev6541.empty() && next_prev6541[0] == FAIL )) {
            next_prev6541.push_front(FAIL);
          }
        } else {
          next_prev6541.push_back(tmp[i6540]);
        }
      }
    }
    prev = next_prev6541;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6539=0;i6539<(int)prev.size();++i6539) {
    if( prev[i6539] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6539]);
    }
  }
  return memo[key(925,backtracking_ptr_for_packrat925)] = result;
}

inline deque<int> parse_slash6543() { 
  if(memo.count(key(926,i))) {
    return memo[key(926,i)];
  }
  int backtracking_ptr_for_packrat926=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (BINARY) */
    deque<int> next_prev6546;
    for(int i6545=0;i6545<(int)prev.size();++i6545) {
      if( prev[i6545] == FAIL ) {
        if(!(!next_prev6546.empty() && next_prev6546.front() == FAIL )) {
          next_prev6546.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6545];
      tmp = parse_BINARY();
      
      for(int i6545=0;i6545<(int)tmp.size();++i6545) {
        if( tmp[i6545] == FAIL ) {
          if(!( !next_prev6546.empty() && next_prev6546[0] == FAIL )) {
            next_prev6546.push_front(FAIL);
          }
        } else {
          next_prev6546.push_back(tmp[i6545]);
        }
      }
    }
    prev = next_prev6546;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6544=0;i6544<(int)prev.size();++i6544) {
    if( prev[i6544] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6544]);
    }
  }
  return memo[key(926,backtracking_ptr_for_packrat926)] = result;
}

inline deque<int> parse_slash6548() { 
  if(memo.count(key(927,i))) {
    return memo[key(927,i)];
  }
  int backtracking_ptr_for_packrat927=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (OCTAL) */
    deque<int> next_prev6551;
    for(int i6550=0;i6550<(int)prev.size();++i6550) {
      if( prev[i6550] == FAIL ) {
        if(!(!next_prev6551.empty() && next_prev6551.front() == FAIL )) {
          next_prev6551.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6550];
      tmp = parse_OCTAL();
      
      for(int i6550=0;i6550<(int)tmp.size();++i6550) {
        if( tmp[i6550] == FAIL ) {
          if(!( !next_prev6551.empty() && next_prev6551[0] == FAIL )) {
            next_prev6551.push_front(FAIL);
          }
        } else {
          next_prev6551.push_back(tmp[i6550]);
        }
      }
    }
    prev = next_prev6551;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6549=0;i6549<(int)prev.size();++i6549) {
    if( prev[i6549] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6549]);
    }
  }
  return memo[key(927,backtracking_ptr_for_packrat927)] = result;
}

inline deque<int> parse_slash6556() { 
  if(memo.count(key(928,i))) {
    return memo[key(928,i)];
  }
  int backtracking_ptr_for_packrat928=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (INT_SUFFIX) */
    deque<int> next_prev6559;
    for(int i6558=0;i6558<(int)prev.size();++i6558) {
      if( prev[i6558] == FAIL ) {
        if(!(!next_prev6559.empty() && next_prev6559.front() == FAIL )) {
          next_prev6559.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6558];
      tmp = parse_INT_SUFFIX();
      
      for(int i6558=0;i6558<(int)tmp.size();++i6558) {
        if( tmp[i6558] == FAIL ) {
          if(!( !next_prev6559.empty() && next_prev6559[0] == FAIL )) {
            next_prev6559.push_front(FAIL);
          }
        } else {
          next_prev6559.push_back(tmp[i6558]);
        }
      }
    }
    prev = next_prev6559;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6557=0;i6557<(int)prev.size();++i6557) {
    if( prev[i6557] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6557]);
    }
  }
  return memo[key(928,backtracking_ptr_for_packrat928)] = result;
}

inline deque<int> parse_slash6561() { 
  if(memo.count(key(929,i))) {
    return memo[key(929,i)];
  }
  int backtracking_ptr_for_packrat929=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (FLOAT_SUFFIX) */
    deque<int> next_prev6564;
    for(int i6563=0;i6563<(int)prev.size();++i6563) {
      if( prev[i6563] == FAIL ) {
        if(!(!next_prev6564.empty() && next_prev6564.front() == FAIL )) {
          next_prev6564.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6563];
      tmp = parse_FLOAT_SUFFIX();
      
      for(int i6563=0;i6563<(int)tmp.size();++i6563) {
        if( tmp[i6563] == FAIL ) {
          if(!( !next_prev6564.empty() && next_prev6564[0] == FAIL )) {
            next_prev6564.push_front(FAIL);
          }
        } else {
          next_prev6564.push_back(tmp[i6563]);
        }
      }
    }
    prev = next_prev6564;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6562=0;i6562<(int)prev.size();++i6562) {
    if( prev[i6562] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6562]);
    }
  }
  return memo[key(929,backtracking_ptr_for_packrat929)] = result;
}

inline deque<int> parse_slash6566() { 
  if(memo.count(key(930,i))) {
    return memo[key(930,i)];
  }
  int backtracking_ptr_for_packrat930=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6567=0;i6567<(int)prev.size();++i6567) {
    if( prev[i6567] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6567]);
    }
  }
  return memo[key(930,backtracking_ptr_for_packrat930)] = result;
}

deque<int> parse_DECIMAL(){
  if(memo.count(key(931,i))) {
    return memo[key(931,i)];
  }
  int backtracking_ptr_for_packrat931=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev6573;
  deque<int> prioritized_choice_final_prev6574;
  next_prev6573.clear();
  for(int i6572=0;i6572<(int)prev.size();++i6572) {
    i = prev[i6572];
    tmp = parse_slash6575();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6573.push_back(prev[i6572]); }
    for(int i6583=0;i6583<(int)tmp.size();++i6583) {
      if( tmp[i6583] != FAIL ) {
        prioritized_choice_final_prev6574.push_back(tmp[i6583]);
      }
    }
  }
  prev = next_prev6573;
  next_prev6573.clear();
  for(int i6572=0;i6572<(int)prev.size();++i6572) {
    i = prev[i6572];
    tmp = parse_slash6584();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6573.push_back(prev[i6572]); }
    for(int i6602=0;i6602<(int)tmp.size();++i6602) {
      if( tmp[i6602] != FAIL ) {
        prioritized_choice_final_prev6574.push_back(tmp[i6602]);
      }
    }
  }
  prev = next_prev6573;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev6574.empty() && prioritized_choice_final_prev6574.front() == FAIL )) {
      prioritized_choice_final_prev6574.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev6574;
  for(int i6571=0;i6571<(int)prev.size();++i6571) {
    if( prev[i6571] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6571]);
    }
  }
  return memo[key(931,backtracking_ptr_for_packrat931)] = result;
}

inline deque<int> parse_slash6575() { 
  if(memo.count(key(932,i))) {
    return memo[key(932,i)];
  }
  int backtracking_ptr_for_packrat932=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6577=0;i6577<(int)prev.size();++i6577) {
      if( prev[i6577] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6577]<m&&I[prev[i6577]]=='0') {
        tmp.push_back(prev[i6577]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Not */
    deque<int> next_prev6582;
    for(int i6581=0;i6581<(int)prev.size();++i6581) {
      i = prev[i6581];
      tmp = parse_not6578();
      if(!tmp.empty()&&tmp.front()==FAIL) {
        next_prev6582.push_back(prev[i6581]);
      } else {
        if(!(!next_prev6582.empty()&&next_prev6582.front()==FAIL)) {
          next_prev6582.push_front(FAIL);
        }
      }
    }
    prev = next_prev6582;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6576=0;i6576<(int)prev.size();++i6576) {
    if( prev[i6576] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6576]);
    }
  }
  return memo[key(932,backtracking_ptr_for_packrat932)] = result;
}

inline deque<int> parse_not6578() { 
  if(memo.count(key(933,i))) {
    return memo[key(933,i)];
  }
  int backtracking_ptr_for_packrat933=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i6580=0;i6580<(int)prev.size();++i6580) {
    if( prev[i6580] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i6580]<m&&(I[prev[i6580]]=='b'||I[prev[i6580]]=='B'||I[prev[i6580]]=='x'||I[prev[i6580]]=='X'||I[prev[i6580]]=='0'||I[prev[i6580]]=='1'||I[prev[i6580]]=='2'||I[prev[i6580]]=='3'||I[prev[i6580]]=='4'||I[prev[i6580]]=='5'||I[prev[i6580]]=='6'||I[prev[i6580]]=='7'||I[prev[i6580]]=='8'||I[prev[i6580]]=='9'||I[prev[i6580]]=='_')) {
      tmp.push_back(prev[i6580]+1);
    } else {
      if(!( !tmp.empty() && tmp.front() == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i6579=0;i6579<(int)prev.size();++i6579) {
    if( prev[i6579] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6579]);
    }
  }
  return memo[key(933,backtracking_ptr_for_packrat933)] = result;
}

inline deque<int> parse_slash6584() { 
  if(memo.count(key(934,i))) {
    return memo[key(934,i)];
  }
  int backtracking_ptr_for_packrat934=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6586=0;i6586<(int)prev.size();++i6586) {
      if( prev[i6586] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6586]<m&&(I[prev[i6586]]=='1'||I[prev[i6586]]=='2'||I[prev[i6586]]=='3'||I[prev[i6586]]=='4'||I[prev[i6586]]=='5'||I[prev[i6586]]=='6'||I[prev[i6586]]=='7'||I[prev[i6586]]=='8'||I[prev[i6586]]=='9')) {
        tmp.push_back(prev[i6586]+1);
      } else {
        if(!( !tmp.empty() && tmp.front() == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev6598;
    deque<int> star_final_prev6599;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev6598.clear();
      for(int i6600=0;i6600<(int)prev.size();++i6600) {
        i = prev[i6600];
        tmp = parse_while6587();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev6599.push_back(prev[i6600]);
        }
        for(int i6601=0;i6601<(int)tmp.size();++i6601) {
          if(tmp[i6601]==FAIL) {
            if(!( !next_prev6598.empty() && next_prev6598.front() == FAIL )) {
              next_prev6598.push_front(FAIL);
            }
          } else {
            next_prev6598.push_back(tmp[i6601]);
          }
        }
      }
      prev = next_prev6598;
    }
    prev = star_final_prev6599;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6585=0;i6585<(int)prev.size();++i6585) {
    if( prev[i6585] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6585]);
    }
  }
  return memo[key(934,backtracking_ptr_for_packrat934)] = result;
}

inline deque<int> parse_while6587() { 
  if(memo.count(key(935,i))) {
    return memo[key(935,i)];
  }
  int backtracking_ptr_for_packrat935=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev6592;
    deque<int> star_final_prev6593;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev6592.clear();
      for(int i6594=0;i6594<(int)prev.size();++i6594) {
        i = prev[i6594];
        tmp = parse_while6589();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev6593.push_back(prev[i6594]);
        }
        for(int i6595=0;i6595<(int)tmp.size();++i6595) {
          if(tmp[i6595]==FAIL) {
            if(!( !next_prev6592.empty() && next_prev6592.front() == FAIL )) {
              next_prev6592.push_front(FAIL);
            }
          } else {
            next_prev6592.push_back(tmp[i6595]);
          }
        }
      }
      prev = next_prev6592;
    }
    prev = star_final_prev6593;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (DIGIT) */
    deque<int> next_prev6597;
    for(int i6596=0;i6596<(int)prev.size();++i6596) {
      if( prev[i6596] == FAIL ) {
        if(!(!next_prev6597.empty() && next_prev6597.front() == FAIL )) {
          next_prev6597.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6596];
      tmp = parse_DIGIT();
      
      for(int i6596=0;i6596<(int)tmp.size();++i6596) {
        if( tmp[i6596] == FAIL ) {
          if(!( !next_prev6597.empty() && next_prev6597[0] == FAIL )) {
            next_prev6597.push_front(FAIL);
          }
        } else {
          next_prev6597.push_back(tmp[i6596]);
        }
      }
    }
    prev = next_prev6597;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6588=0;i6588<(int)prev.size();++i6588) {
    if( prev[i6588] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6588]);
    }
  }
  return memo[key(935,backtracking_ptr_for_packrat935)] = result;
}

inline deque<int> parse_while6589() { 
  if(memo.count(key(936,i))) {
    return memo[key(936,i)];
  }
  int backtracking_ptr_for_packrat936=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i6591=0;i6591<(int)prev.size();++i6591) {
    if( prev[i6591] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i6591]<m&&I[prev[i6591]]=='_') {
      tmp.push_back(prev[i6591]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i6590=0;i6590<(int)prev.size();++i6590) {
    if( prev[i6590] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6590]);
    }
  }
  return memo[key(936,backtracking_ptr_for_packrat936)] = result;
}

deque<int> parse_HEXADECIMAL(){
  if(memo.count(key(937,i))) {
    return memo[key(937,i)];
  }
  int backtracking_ptr_for_packrat937=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6604=0;i6604<(int)prev.size();++i6604) {
      if( prev[i6604] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6604]<m&&I[prev[i6604]]=='0') {
        tmp.push_back(prev[i6604]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6605=0;i6605<(int)prev.size();++i6605) {
      if( prev[i6605] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6605]<m&&(I[prev[i6605]]=='x'||I[prev[i6605]]=='X')) {
        tmp.push_back(prev[i6605]+1);
      } else {
        if(!( !tmp.empty() && tmp.front() == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (HEX) */
    deque<int> next_prev6607;
    for(int i6606=0;i6606<(int)prev.size();++i6606) {
      if( prev[i6606] == FAIL ) {
        if(!(!next_prev6607.empty() && next_prev6607.front() == FAIL )) {
          next_prev6607.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6606];
      tmp = parse_HEX();
      
      for(int i6606=0;i6606<(int)tmp.size();++i6606) {
        if( tmp[i6606] == FAIL ) {
          if(!( !next_prev6607.empty() && next_prev6607[0] == FAIL )) {
            next_prev6607.push_front(FAIL);
          }
        } else {
          next_prev6607.push_back(tmp[i6606]);
        }
      }
    }
    prev = next_prev6607;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev6619;
    deque<int> star_final_prev6620;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev6619.clear();
      for(int i6621=0;i6621<(int)prev.size();++i6621) {
        i = prev[i6621];
        tmp = parse_while6608();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev6620.push_back(prev[i6621]);
        }
        for(int i6622=0;i6622<(int)tmp.size();++i6622) {
          if(tmp[i6622]==FAIL) {
            if(!( !next_prev6619.empty() && next_prev6619.front() == FAIL )) {
              next_prev6619.push_front(FAIL);
            }
          } else {
            next_prev6619.push_back(tmp[i6622]);
          }
        }
      }
      prev = next_prev6619;
    }
    prev = star_final_prev6620;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6603=0;i6603<(int)prev.size();++i6603) {
    if( prev[i6603] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6603]);
    }
  }
  return memo[key(937,backtracking_ptr_for_packrat937)] = result;
}

inline deque<int> parse_while6608() { 
  if(memo.count(key(938,i))) {
    return memo[key(938,i)];
  }
  int backtracking_ptr_for_packrat938=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev6613;
    deque<int> star_final_prev6614;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev6613.clear();
      for(int i6615=0;i6615<(int)prev.size();++i6615) {
        i = prev[i6615];
        tmp = parse_while6610();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev6614.push_back(prev[i6615]);
        }
        for(int i6616=0;i6616<(int)tmp.size();++i6616) {
          if(tmp[i6616]==FAIL) {
            if(!( !next_prev6613.empty() && next_prev6613.front() == FAIL )) {
              next_prev6613.push_front(FAIL);
            }
          } else {
            next_prev6613.push_back(tmp[i6616]);
          }
        }
      }
      prev = next_prev6613;
    }
    prev = star_final_prev6614;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (HEX) */
    deque<int> next_prev6618;
    for(int i6617=0;i6617<(int)prev.size();++i6617) {
      if( prev[i6617] == FAIL ) {
        if(!(!next_prev6618.empty() && next_prev6618.front() == FAIL )) {
          next_prev6618.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6617];
      tmp = parse_HEX();
      
      for(int i6617=0;i6617<(int)tmp.size();++i6617) {
        if( tmp[i6617] == FAIL ) {
          if(!( !next_prev6618.empty() && next_prev6618[0] == FAIL )) {
            next_prev6618.push_front(FAIL);
          }
        } else {
          next_prev6618.push_back(tmp[i6617]);
        }
      }
    }
    prev = next_prev6618;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6609=0;i6609<(int)prev.size();++i6609) {
    if( prev[i6609] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6609]);
    }
  }
  return memo[key(938,backtracking_ptr_for_packrat938)] = result;
}

inline deque<int> parse_while6610() { 
  if(memo.count(key(939,i))) {
    return memo[key(939,i)];
  }
  int backtracking_ptr_for_packrat939=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i6612=0;i6612<(int)prev.size();++i6612) {
    if( prev[i6612] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i6612]<m&&I[prev[i6612]]=='_') {
      tmp.push_back(prev[i6612]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i6611=0;i6611<(int)prev.size();++i6611) {
    if( prev[i6611] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6611]);
    }
  }
  return memo[key(939,backtracking_ptr_for_packrat939)] = result;
}

deque<int> parse_BINARY(){
  if(memo.count(key(940,i))) {
    return memo[key(940,i)];
  }
  int backtracking_ptr_for_packrat940=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6624=0;i6624<(int)prev.size();++i6624) {
      if( prev[i6624] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6624]<m&&I[prev[i6624]]=='0') {
        tmp.push_back(prev[i6624]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6625=0;i6625<(int)prev.size();++i6625) {
      if( prev[i6625] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6625]<m&&(I[prev[i6625]]=='b'||I[prev[i6625]]=='B')) {
        tmp.push_back(prev[i6625]+1);
      } else {
        if(!( !tmp.empty() && tmp.front() == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6626=0;i6626<(int)prev.size();++i6626) {
      if( prev[i6626] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6626]<m&&(I[prev[i6626]]=='0'||I[prev[i6626]]=='1')) {
        tmp.push_back(prev[i6626]+1);
      } else {
        if(!( !tmp.empty() && tmp.front() == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev6637;
    deque<int> star_final_prev6638;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev6637.clear();
      for(int i6639=0;i6639<(int)prev.size();++i6639) {
        i = prev[i6639];
        tmp = parse_while6627();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev6638.push_back(prev[i6639]);
        }
        for(int i6640=0;i6640<(int)tmp.size();++i6640) {
          if(tmp[i6640]==FAIL) {
            if(!( !next_prev6637.empty() && next_prev6637.front() == FAIL )) {
              next_prev6637.push_front(FAIL);
            }
          } else {
            next_prev6637.push_back(tmp[i6640]);
          }
        }
      }
      prev = next_prev6637;
    }
    prev = star_final_prev6638;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6623=0;i6623<(int)prev.size();++i6623) {
    if( prev[i6623] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6623]);
    }
  }
  return memo[key(940,backtracking_ptr_for_packrat940)] = result;
}

inline deque<int> parse_while6627() { 
  if(memo.count(key(941,i))) {
    return memo[key(941,i)];
  }
  int backtracking_ptr_for_packrat941=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev6632;
    deque<int> star_final_prev6633;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev6632.clear();
      for(int i6634=0;i6634<(int)prev.size();++i6634) {
        i = prev[i6634];
        tmp = parse_while6629();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev6633.push_back(prev[i6634]);
        }
        for(int i6635=0;i6635<(int)tmp.size();++i6635) {
          if(tmp[i6635]==FAIL) {
            if(!( !next_prev6632.empty() && next_prev6632.front() == FAIL )) {
              next_prev6632.push_front(FAIL);
            }
          } else {
            next_prev6632.push_back(tmp[i6635]);
          }
        }
      }
      prev = next_prev6632;
    }
    prev = star_final_prev6633;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6636=0;i6636<(int)prev.size();++i6636) {
      if( prev[i6636] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6636]<m&&(I[prev[i6636]]=='0'||I[prev[i6636]]=='1')) {
        tmp.push_back(prev[i6636]+1);
      } else {
        if(!( !tmp.empty() && tmp.front() == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6628=0;i6628<(int)prev.size();++i6628) {
    if( prev[i6628] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6628]);
    }
  }
  return memo[key(941,backtracking_ptr_for_packrat941)] = result;
}

inline deque<int> parse_while6629() { 
  if(memo.count(key(942,i))) {
    return memo[key(942,i)];
  }
  int backtracking_ptr_for_packrat942=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i6631=0;i6631<(int)prev.size();++i6631) {
    if( prev[i6631] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i6631]<m&&I[prev[i6631]]=='_') {
      tmp.push_back(prev[i6631]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i6630=0;i6630<(int)prev.size();++i6630) {
    if( prev[i6630] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6630]);
    }
  }
  return memo[key(942,backtracking_ptr_for_packrat942)] = result;
}

deque<int> parse_OCTAL(){
  if(memo.count(key(943,i))) {
    return memo[key(943,i)];
  }
  int backtracking_ptr_for_packrat943=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6642=0;i6642<(int)prev.size();++i6642) {
      if( prev[i6642] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6642]<m&&I[prev[i6642]]=='0') {
        tmp.push_back(prev[i6642]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev6653;
    deque<int> star_final_prev6654;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev6653.clear();
      for(int i6655=0;i6655<(int)prev.size();++i6655) {
        i = prev[i6655];
        tmp = parse_while6643();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev6654.push_back(prev[i6655]);
        }
        for(int i6656=0;i6656<(int)tmp.size();++i6656) {
          if(tmp[i6656]==FAIL) {
            if(!( !next_prev6653.empty() && next_prev6653.front() == FAIL )) {
              next_prev6653.push_front(FAIL);
            }
          } else {
            next_prev6653.push_back(tmp[i6656]);
          }
        }
      }
      prev = next_prev6653;
    }
    prev = star_final_prev6654;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6641=0;i6641<(int)prev.size();++i6641) {
    if( prev[i6641] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6641]);
    }
  }
  return memo[key(943,backtracking_ptr_for_packrat943)] = result;
}

inline deque<int> parse_while6643() { 
  if(memo.count(key(944,i))) {
    return memo[key(944,i)];
  }
  int backtracking_ptr_for_packrat944=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev6648;
    deque<int> star_final_prev6649;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev6648.clear();
      for(int i6650=0;i6650<(int)prev.size();++i6650) {
        i = prev[i6650];
        tmp = parse_while6645();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev6649.push_back(prev[i6650]);
        }
        for(int i6651=0;i6651<(int)tmp.size();++i6651) {
          if(tmp[i6651]==FAIL) {
            if(!( !next_prev6648.empty() && next_prev6648.front() == FAIL )) {
              next_prev6648.push_front(FAIL);
            }
          } else {
            next_prev6648.push_back(tmp[i6651]);
          }
        }
      }
      prev = next_prev6648;
    }
    prev = star_final_prev6649;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6652=0;i6652<(int)prev.size();++i6652) {
      if( prev[i6652] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6652]<m&&(I[prev[i6652]]=='0'||I[prev[i6652]]=='1'||I[prev[i6652]]=='2'||I[prev[i6652]]=='3'||I[prev[i6652]]=='4'||I[prev[i6652]]=='5'||I[prev[i6652]]=='6'||I[prev[i6652]]=='7')) {
        tmp.push_back(prev[i6652]+1);
      } else {
        if(!( !tmp.empty() && tmp.front() == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6644=0;i6644<(int)prev.size();++i6644) {
    if( prev[i6644] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6644]);
    }
  }
  return memo[key(944,backtracking_ptr_for_packrat944)] = result;
}

inline deque<int> parse_while6645() { 
  if(memo.count(key(945,i))) {
    return memo[key(945,i)];
  }
  int backtracking_ptr_for_packrat945=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i6647=0;i6647<(int)prev.size();++i6647) {
    if( prev[i6647] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i6647]<m&&I[prev[i6647]]=='_') {
      tmp.push_back(prev[i6647]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i6646=0;i6646<(int)prev.size();++i6646) {
    if( prev[i6646] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6646]);
    }
  }
  return memo[key(945,backtracking_ptr_for_packrat945)] = result;
}

deque<int> parse_DIGIT(){
  if(memo.count(key(946,i))) {
    return memo[key(946,i)];
  }
  int backtracking_ptr_for_packrat946=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6658=0;i6658<(int)prev.size();++i6658) {
      if( prev[i6658] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6658]<m&&(I[prev[i6658]]=='0'||I[prev[i6658]]=='1'||I[prev[i6658]]=='2'||I[prev[i6658]]=='3'||I[prev[i6658]]=='4'||I[prev[i6658]]=='5'||I[prev[i6658]]=='6'||I[prev[i6658]]=='7'||I[prev[i6658]]=='8'||I[prev[i6658]]=='9')) {
        tmp.push_back(prev[i6658]+1);
      } else {
        if(!( !tmp.empty() && tmp.front() == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6657=0;i6657<(int)prev.size();++i6657) {
    if( prev[i6657] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6657]);
    }
  }
  return memo[key(946,backtracking_ptr_for_packrat946)] = result;
}

deque<int> parse_HEX(){
  if(memo.count(key(947,i))) {
    return memo[key(947,i)];
  }
  int backtracking_ptr_for_packrat947=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6660=0;i6660<(int)prev.size();++i6660) {
      if( prev[i6660] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6660]<m&&(I[prev[i6660]]=='a'||I[prev[i6660]]=='b'||I[prev[i6660]]=='c'||I[prev[i6660]]=='d'||I[prev[i6660]]=='e'||I[prev[i6660]]=='f'||I[prev[i6660]]=='A'||I[prev[i6660]]=='B'||I[prev[i6660]]=='C'||I[prev[i6660]]=='D'||I[prev[i6660]]=='E'||I[prev[i6660]]=='F'||I[prev[i6660]]=='0'||I[prev[i6660]]=='1'||I[prev[i6660]]=='2'||I[prev[i6660]]=='3'||I[prev[i6660]]=='4'||I[prev[i6660]]=='5'||I[prev[i6660]]=='6'||I[prev[i6660]]=='7'||I[prev[i6660]]=='8'||I[prev[i6660]]=='9')) {
        tmp.push_back(prev[i6660]+1);
      } else {
        if(!( !tmp.empty() && tmp.front() == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6659=0;i6659<(int)prev.size();++i6659) {
    if( prev[i6659] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6659]);
    }
  }
  return memo[key(947,backtracking_ptr_for_packrat947)] = result;
}

deque<int> parse_INT_SUFFIX(){
  if(memo.count(key(948,i))) {
    return memo[key(948,i)];
  }
  int backtracking_ptr_for_packrat948=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6662=0;i6662<(int)prev.size();++i6662) {
      if( prev[i6662] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6662]<m&&(I[prev[i6662]]=='l'||I[prev[i6662]]=='L')) {
        tmp.push_back(prev[i6662]+1);
      } else {
        if(!( !tmp.empty() && tmp.front() == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6661=0;i6661<(int)prev.size();++i6661) {
    if( prev[i6661] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6661]);
    }
  }
  return memo[key(948,backtracking_ptr_for_packrat948)] = result;
}

deque<int> parse_FloatingPointLiteral(){
  if(memo.count(key(949,i))) {
    return memo[key(949,i)];
  }
  int backtracking_ptr_for_packrat949=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev6665;
  deque<int> prioritized_choice_final_prev6666;
  next_prev6665.clear();
  for(int i6664=0;i6664<(int)prev.size();++i6664) {
    i = prev[i6664];
    tmp = parse_slash6667();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6665.push_back(prev[i6664]); }
    for(int i6684=0;i6684<(int)tmp.size();++i6684) {
      if( tmp[i6684] != FAIL ) {
        prioritized_choice_final_prev6666.push_back(tmp[i6684]);
      }
    }
  }
  prev = next_prev6665;
  next_prev6665.clear();
  for(int i6664=0;i6664<(int)prev.size();++i6664) {
    i = prev[i6664];
    tmp = parse_slash6685();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6665.push_back(prev[i6664]); }
    for(int i6693=0;i6693<(int)tmp.size();++i6693) {
      if( tmp[i6693] != FAIL ) {
        prioritized_choice_final_prev6666.push_back(tmp[i6693]);
      }
    }
  }
  prev = next_prev6665;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev6666.empty() && prioritized_choice_final_prev6666.front() == FAIL )) {
      prioritized_choice_final_prev6666.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev6666;
  for(int i6663=0;i6663<(int)prev.size();++i6663) {
    if( prev[i6663] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6663]);
    }
  }
  return memo[key(949,backtracking_ptr_for_packrat949)] = result;
}

inline deque<int> parse_slash6667() { 
  if(memo.count(key(950,i))) {
    return memo[key(950,i)];
  }
  int backtracking_ptr_for_packrat950=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (FLOAT) */
    deque<int> next_prev6670;
    for(int i6669=0;i6669<(int)prev.size();++i6669) {
      if( prev[i6669] == FAIL ) {
        if(!(!next_prev6670.empty() && next_prev6670.front() == FAIL )) {
          next_prev6670.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6669];
      tmp = parse_FLOAT();
      
      for(int i6669=0;i6669<(int)tmp.size();++i6669) {
        if( tmp[i6669] == FAIL ) {
          if(!( !next_prev6670.empty() && next_prev6670[0] == FAIL )) {
            next_prev6670.push_front(FAIL);
          }
        } else {
          next_prev6670.push_back(tmp[i6669]);
        }
      }
    }
    prev = next_prev6670;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev6672;
    deque<int> prioritized_choice_final_prev6673;
    next_prev6672.clear();
    for(int i6671=0;i6671<(int)prev.size();++i6671) {
      i = prev[i6671];
      tmp = parse_slash6674();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6672.push_back(prev[i6671]); }
      for(int i6678=0;i6678<(int)tmp.size();++i6678) {
        if( tmp[i6678] != FAIL ) {
          prioritized_choice_final_prev6673.push_back(tmp[i6678]);
        }
      }
    }
    prev = next_prev6672;
    next_prev6672.clear();
    for(int i6671=0;i6671<(int)prev.size();++i6671) {
      i = prev[i6671];
      tmp = parse_slash6679();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6672.push_back(prev[i6671]); }
      for(int i6681=0;i6681<(int)tmp.size();++i6681) {
        if( tmp[i6681] != FAIL ) {
          prioritized_choice_final_prev6673.push_back(tmp[i6681]);
        }
      }
    }
    prev = next_prev6672;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev6673.empty() && prioritized_choice_final_prev6673.front() == FAIL )) {
        prioritized_choice_final_prev6673.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev6673;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (_) */
    deque<int> next_prev6683;
    for(int i6682=0;i6682<(int)prev.size();++i6682) {
      if( prev[i6682] == FAIL ) {
        if(!(!next_prev6683.empty() && next_prev6683.front() == FAIL )) {
          next_prev6683.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6682];
      tmp = parse__();
      
      for(int i6682=0;i6682<(int)tmp.size();++i6682) {
        if( tmp[i6682] == FAIL ) {
          if(!( !next_prev6683.empty() && next_prev6683[0] == FAIL )) {
            next_prev6683.push_front(FAIL);
          }
        } else {
          next_prev6683.push_back(tmp[i6682]);
        }
      }
    }
    prev = next_prev6683;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6668=0;i6668<(int)prev.size();++i6668) {
    if( prev[i6668] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6668]);
    }
  }
  return memo[key(950,backtracking_ptr_for_packrat950)] = result;
}

inline deque<int> parse_slash6674() { 
  if(memo.count(key(951,i))) {
    return memo[key(951,i)];
  }
  int backtracking_ptr_for_packrat951=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (FLOAT_SUFFIX) */
  deque<int> next_prev6677;
  for(int i6676=0;i6676<(int)prev.size();++i6676) {
    if( prev[i6676] == FAIL ) {
      if(!(!next_prev6677.empty() && next_prev6677.front() == FAIL )) {
        next_prev6677.push_front(FAIL);
      }
      continue;
    }
    i = prev[i6676];
    tmp = parse_FLOAT_SUFFIX();
    
    for(int i6676=0;i6676<(int)tmp.size();++i6676) {
      if( tmp[i6676] == FAIL ) {
        if(!( !next_prev6677.empty() && next_prev6677[0] == FAIL )) {
          next_prev6677.push_front(FAIL);
        }
      } else {
        next_prev6677.push_back(tmp[i6676]);
      }
    }
  }
  prev = next_prev6677;
  for(int i6675=0;i6675<(int)prev.size();++i6675) {
    if( prev[i6675] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6675]);
    }
  }
  return memo[key(951,backtracking_ptr_for_packrat951)] = result;
}

inline deque<int> parse_slash6679() { 
  if(memo.count(key(952,i))) {
    return memo[key(952,i)];
  }
  int backtracking_ptr_for_packrat952=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i6680=0;i6680<(int)prev.size();++i6680) {
    if( prev[i6680] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6680]);
    }
  }
  return memo[key(952,backtracking_ptr_for_packrat952)] = result;
}

inline deque<int> parse_slash6685() { 
  if(memo.count(key(953,i))) {
    return memo[key(953,i)];
  }
  int backtracking_ptr_for_packrat953=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (DECIMAL) */
    deque<int> next_prev6688;
    for(int i6687=0;i6687<(int)prev.size();++i6687) {
      if( prev[i6687] == FAIL ) {
        if(!(!next_prev6688.empty() && next_prev6688.front() == FAIL )) {
          next_prev6688.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6687];
      tmp = parse_DECIMAL();
      
      for(int i6687=0;i6687<(int)tmp.size();++i6687) {
        if( tmp[i6687] == FAIL ) {
          if(!( !next_prev6688.empty() && next_prev6688[0] == FAIL )) {
            next_prev6688.push_front(FAIL);
          }
        } else {
          next_prev6688.push_back(tmp[i6687]);
        }
      }
    }
    prev = next_prev6688;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (FLOAT_SUFFIX) */
    deque<int> next_prev6690;
    for(int i6689=0;i6689<(int)prev.size();++i6689) {
      if( prev[i6689] == FAIL ) {
        if(!(!next_prev6690.empty() && next_prev6690.front() == FAIL )) {
          next_prev6690.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6689];
      tmp = parse_FLOAT_SUFFIX();
      
      for(int i6689=0;i6689<(int)tmp.size();++i6689) {
        if( tmp[i6689] == FAIL ) {
          if(!( !next_prev6690.empty() && next_prev6690[0] == FAIL )) {
            next_prev6690.push_front(FAIL);
          }
        } else {
          next_prev6690.push_back(tmp[i6689]);
        }
      }
    }
    prev = next_prev6690;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (_) */
    deque<int> next_prev6692;
    for(int i6691=0;i6691<(int)prev.size();++i6691) {
      if( prev[i6691] == FAIL ) {
        if(!(!next_prev6692.empty() && next_prev6692.front() == FAIL )) {
          next_prev6692.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6691];
      tmp = parse__();
      
      for(int i6691=0;i6691<(int)tmp.size();++i6691) {
        if( tmp[i6691] == FAIL ) {
          if(!( !next_prev6692.empty() && next_prev6692[0] == FAIL )) {
            next_prev6692.push_front(FAIL);
          }
        } else {
          next_prev6692.push_back(tmp[i6691]);
        }
      }
    }
    prev = next_prev6692;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6686=0;i6686<(int)prev.size();++i6686) {
    if( prev[i6686] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6686]);
    }
  }
  return memo[key(953,backtracking_ptr_for_packrat953)] = result;
}

deque<int> parse_FLOAT(){
  if(memo.count(key(954,i))) {
    return memo[key(954,i)];
  }
  int backtracking_ptr_for_packrat954=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev6696;
  deque<int> prioritized_choice_final_prev6697;
  next_prev6696.clear();
  for(int i6695=0;i6695<(int)prev.size();++i6695) {
    i = prev[i6695];
    tmp = parse_slash6698();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6696.push_back(prev[i6695]); }
    for(int i6713=0;i6713<(int)tmp.size();++i6713) {
      if( tmp[i6713] != FAIL ) {
        prioritized_choice_final_prev6697.push_back(tmp[i6713]);
      }
    }
  }
  prev = next_prev6696;
  next_prev6696.clear();
  for(int i6695=0;i6695<(int)prev.size();++i6695) {
    i = prev[i6695];
    tmp = parse_slash6714();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6696.push_back(prev[i6695]); }
    for(int i6728=0;i6728<(int)tmp.size();++i6728) {
      if( tmp[i6728] != FAIL ) {
        prioritized_choice_final_prev6697.push_back(tmp[i6728]);
      }
    }
  }
  prev = next_prev6696;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev6697.empty() && prioritized_choice_final_prev6697.front() == FAIL )) {
      prioritized_choice_final_prev6697.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev6697;
  for(int i6694=0;i6694<(int)prev.size();++i6694) {
    if( prev[i6694] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6694]);
    }
  }
  return memo[key(954,backtracking_ptr_for_packrat954)] = result;
}

inline deque<int> parse_slash6698() { 
  if(memo.count(key(955,i))) {
    return memo[key(955,i)];
  }
  int backtracking_ptr_for_packrat955=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (FRACTION) */
    deque<int> next_prev6701;
    for(int i6700=0;i6700<(int)prev.size();++i6700) {
      if( prev[i6700] == FAIL ) {
        if(!(!next_prev6701.empty() && next_prev6701.front() == FAIL )) {
          next_prev6701.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6700];
      tmp = parse_FRACTION();
      
      for(int i6700=0;i6700<(int)tmp.size();++i6700) {
        if( tmp[i6700] == FAIL ) {
          if(!( !next_prev6701.empty() && next_prev6701[0] == FAIL )) {
            next_prev6701.push_front(FAIL);
          }
        } else {
          next_prev6701.push_back(tmp[i6700]);
        }
      }
    }
    prev = next_prev6701;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev6703;
    deque<int> prioritized_choice_final_prev6704;
    next_prev6703.clear();
    for(int i6702=0;i6702<(int)prev.size();++i6702) {
      i = prev[i6702];
      tmp = parse_slash6705();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6703.push_back(prev[i6702]); }
      for(int i6709=0;i6709<(int)tmp.size();++i6709) {
        if( tmp[i6709] != FAIL ) {
          prioritized_choice_final_prev6704.push_back(tmp[i6709]);
        }
      }
    }
    prev = next_prev6703;
    next_prev6703.clear();
    for(int i6702=0;i6702<(int)prev.size();++i6702) {
      i = prev[i6702];
      tmp = parse_slash6710();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6703.push_back(prev[i6702]); }
      for(int i6712=0;i6712<(int)tmp.size();++i6712) {
        if( tmp[i6712] != FAIL ) {
          prioritized_choice_final_prev6704.push_back(tmp[i6712]);
        }
      }
    }
    prev = next_prev6703;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev6704.empty() && prioritized_choice_final_prev6704.front() == FAIL )) {
        prioritized_choice_final_prev6704.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev6704;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6699=0;i6699<(int)prev.size();++i6699) {
    if( prev[i6699] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6699]);
    }
  }
  return memo[key(955,backtracking_ptr_for_packrat955)] = result;
}

inline deque<int> parse_slash6705() { 
  if(memo.count(key(956,i))) {
    return memo[key(956,i)];
  }
  int backtracking_ptr_for_packrat956=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (EXPONENT) */
  deque<int> next_prev6708;
  for(int i6707=0;i6707<(int)prev.size();++i6707) {
    if( prev[i6707] == FAIL ) {
      if(!(!next_prev6708.empty() && next_prev6708.front() == FAIL )) {
        next_prev6708.push_front(FAIL);
      }
      continue;
    }
    i = prev[i6707];
    tmp = parse_EXPONENT();
    
    for(int i6707=0;i6707<(int)tmp.size();++i6707) {
      if( tmp[i6707] == FAIL ) {
        if(!( !next_prev6708.empty() && next_prev6708[0] == FAIL )) {
          next_prev6708.push_front(FAIL);
        }
      } else {
        next_prev6708.push_back(tmp[i6707]);
      }
    }
  }
  prev = next_prev6708;
  for(int i6706=0;i6706<(int)prev.size();++i6706) {
    if( prev[i6706] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6706]);
    }
  }
  return memo[key(956,backtracking_ptr_for_packrat956)] = result;
}

inline deque<int> parse_slash6710() { 
  if(memo.count(key(957,i))) {
    return memo[key(957,i)];
  }
  int backtracking_ptr_for_packrat957=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i6711=0;i6711<(int)prev.size();++i6711) {
    if( prev[i6711] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6711]);
    }
  }
  return memo[key(957,backtracking_ptr_for_packrat957)] = result;
}

inline deque<int> parse_slash6714() { 
  if(memo.count(key(958,i))) {
    return memo[key(958,i)];
  }
  int backtracking_ptr_for_packrat958=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Nonterminal (DIGIT) */
      deque<int> next_prev6717;
      for(int i6716=0;i6716<(int)prev.size();++i6716) {
        if( prev[i6716] == FAIL ) {
          if(!(!next_prev6717.empty() && next_prev6717.front() == FAIL )) {
            next_prev6717.push_front(FAIL);
          }
          continue;
        }
        i = prev[i6716];
        tmp = parse_DIGIT();
        
        for(int i6716=0;i6716<(int)tmp.size();++i6716) {
          if( tmp[i6716] == FAIL ) {
            if(!( !next_prev6717.empty() && next_prev6717[0] == FAIL )) {
              next_prev6717.push_front(FAIL);
            }
          } else {
            next_prev6717.push_back(tmp[i6716]);
          }
        }
      }
      prev = next_prev6717;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Star */
      deque<int> next_prev6722;
      deque<int> star_final_prev6723;
      while(!((int)prev.size()==1&&prev.front()==FAIL)) {
        next_prev6722.clear();
        for(int i6724=0;i6724<(int)prev.size();++i6724) {
          i = prev[i6724];
          tmp = parse_while6718();
          if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
            star_final_prev6723.push_back(prev[i6724]);
          }
          for(int i6725=0;i6725<(int)tmp.size();++i6725) {
            if(tmp[i6725]==FAIL) {
              if(!( !next_prev6722.empty() && next_prev6722.front() == FAIL )) {
                next_prev6722.push_front(FAIL);
              }
            } else {
              next_prev6722.push_back(tmp[i6725]);
            }
          }
        }
        prev = next_prev6722;
      }
      prev = star_final_prev6723;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (EXPONENT) */
    deque<int> next_prev6727;
    for(int i6726=0;i6726<(int)prev.size();++i6726) {
      if( prev[i6726] == FAIL ) {
        if(!(!next_prev6727.empty() && next_prev6727.front() == FAIL )) {
          next_prev6727.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6726];
      tmp = parse_EXPONENT();
      
      for(int i6726=0;i6726<(int)tmp.size();++i6726) {
        if( tmp[i6726] == FAIL ) {
          if(!( !next_prev6727.empty() && next_prev6727[0] == FAIL )) {
            next_prev6727.push_front(FAIL);
          }
        } else {
          next_prev6727.push_back(tmp[i6726]);
        }
      }
    }
    prev = next_prev6727;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6715=0;i6715<(int)prev.size();++i6715) {
    if( prev[i6715] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6715]);
    }
  }
  return memo[key(958,backtracking_ptr_for_packrat958)] = result;
}

inline deque<int> parse_while6718() { 
  if(memo.count(key(959,i))) {
    return memo[key(959,i)];
  }
  int backtracking_ptr_for_packrat959=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (DIGIT) */
  deque<int> next_prev6721;
  for(int i6720=0;i6720<(int)prev.size();++i6720) {
    if( prev[i6720] == FAIL ) {
      if(!(!next_prev6721.empty() && next_prev6721.front() == FAIL )) {
        next_prev6721.push_front(FAIL);
      }
      continue;
    }
    i = prev[i6720];
    tmp = parse_DIGIT();
    
    for(int i6720=0;i6720<(int)tmp.size();++i6720) {
      if( tmp[i6720] == FAIL ) {
        if(!( !next_prev6721.empty() && next_prev6721[0] == FAIL )) {
          next_prev6721.push_front(FAIL);
        }
      } else {
        next_prev6721.push_back(tmp[i6720]);
      }
    }
  }
  prev = next_prev6721;
  for(int i6719=0;i6719<(int)prev.size();++i6719) {
    if( prev[i6719] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6719]);
    }
  }
  return memo[key(959,backtracking_ptr_for_packrat959)] = result;
}

deque<int> parse_FLOAT_SUFFIX(){
  if(memo.count(key(960,i))) {
    return memo[key(960,i)];
  }
  int backtracking_ptr_for_packrat960=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6730=0;i6730<(int)prev.size();++i6730) {
      if( prev[i6730] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6730]<m&&(I[prev[i6730]]=='f'||I[prev[i6730]]=='F'||I[prev[i6730]]=='d'||I[prev[i6730]]=='D')) {
        tmp.push_back(prev[i6730]+1);
      } else {
        if(!( !tmp.empty() && tmp.front() == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6729=0;i6729<(int)prev.size();++i6729) {
    if( prev[i6729] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6729]);
    }
  }
  return memo[key(960,backtracking_ptr_for_packrat960)] = result;
}

deque<int> parse_FRACTION(){
  if(memo.count(key(961,i))) {
    return memo[key(961,i)];
  }
  int backtracking_ptr_for_packrat961=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev6733;
  deque<int> prioritized_choice_final_prev6734;
  next_prev6733.clear();
  for(int i6732=0;i6732<(int)prev.size();++i6732) {
    i = prev[i6732];
    tmp = parse_slash6735();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6733.push_back(prev[i6732]); }
    for(int i6775=0;i6775<(int)tmp.size();++i6775) {
      if( tmp[i6775] != FAIL ) {
        prioritized_choice_final_prev6734.push_back(tmp[i6775]);
      }
    }
  }
  prev = next_prev6733;
  next_prev6733.clear();
  for(int i6732=0;i6732<(int)prev.size();++i6732) {
    i = prev[i6732];
    tmp = parse_slash6776();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6733.push_back(prev[i6732]); }
    for(int i6796=0;i6796<(int)tmp.size();++i6796) {
      if( tmp[i6796] != FAIL ) {
        prioritized_choice_final_prev6734.push_back(tmp[i6796]);
      }
    }
  }
  prev = next_prev6733;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev6734.empty() && prioritized_choice_final_prev6734.front() == FAIL )) {
      prioritized_choice_final_prev6734.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev6734;
  for(int i6731=0;i6731<(int)prev.size();++i6731) {
    if( prev[i6731] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6731]);
    }
  }
  return memo[key(961,backtracking_ptr_for_packrat961)] = result;
}

inline deque<int> parse_slash6735() { 
  if(memo.count(key(962,i))) {
    return memo[key(962,i)];
  }
  int backtracking_ptr_for_packrat962=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Not */
    deque<int> next_prev6741;
    for(int i6740=0;i6740<(int)prev.size();++i6740) {
      i = prev[i6740];
      tmp = parse_not6737();
      if(!tmp.empty()&&tmp.front()==FAIL) {
        next_prev6741.push_back(prev[i6740]);
      } else {
        if(!(!next_prev6741.empty()&&next_prev6741.front()==FAIL)) {
          next_prev6741.push_front(FAIL);
        }
      }
    }
    prev = next_prev6741;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev6753;
    deque<int> star_final_prev6754;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev6753.clear();
      for(int i6755=0;i6755<(int)prev.size();++i6755) {
        i = prev[i6755];
        tmp = parse_while6742();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev6754.push_back(prev[i6755]);
        }
        for(int i6756=0;i6756<(int)tmp.size();++i6756) {
          if(tmp[i6756]==FAIL) {
            if(!( !next_prev6753.empty() && next_prev6753.front() == FAIL )) {
              next_prev6753.push_front(FAIL);
            }
          } else {
            next_prev6753.push_back(tmp[i6756]);
          }
        }
      }
      prev = next_prev6753;
    }
    prev = star_final_prev6754;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6757=0;i6757<(int)prev.size();++i6757) {
      if( prev[i6757] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6757]<m&&I[prev[i6757]]=='.') {
        tmp.push_back(prev[i6757]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (DIGIT) */
    deque<int> next_prev6759;
    for(int i6758=0;i6758<(int)prev.size();++i6758) {
      if( prev[i6758] == FAIL ) {
        if(!(!next_prev6759.empty() && next_prev6759.front() == FAIL )) {
          next_prev6759.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6758];
      tmp = parse_DIGIT();
      
      for(int i6758=0;i6758<(int)tmp.size();++i6758) {
        if( tmp[i6758] == FAIL ) {
          if(!( !next_prev6759.empty() && next_prev6759[0] == FAIL )) {
            next_prev6759.push_front(FAIL);
          }
        } else {
          next_prev6759.push_back(tmp[i6758]);
        }
      }
    }
    prev = next_prev6759;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev6771;
    deque<int> star_final_prev6772;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev6771.clear();
      for(int i6773=0;i6773<(int)prev.size();++i6773) {
        i = prev[i6773];
        tmp = parse_while6760();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev6772.push_back(prev[i6773]);
        }
        for(int i6774=0;i6774<(int)tmp.size();++i6774) {
          if(tmp[i6774]==FAIL) {
            if(!( !next_prev6771.empty() && next_prev6771.front() == FAIL )) {
              next_prev6771.push_front(FAIL);
            }
          } else {
            next_prev6771.push_back(tmp[i6774]);
          }
        }
      }
      prev = next_prev6771;
    }
    prev = star_final_prev6772;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6736=0;i6736<(int)prev.size();++i6736) {
    if( prev[i6736] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6736]);
    }
  }
  return memo[key(962,backtracking_ptr_for_packrat962)] = result;
}

inline deque<int> parse_not6737() { 
  if(memo.count(key(963,i))) {
    return memo[key(963,i)];
  }
  int backtracking_ptr_for_packrat963=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i6739=0;i6739<(int)prev.size();++i6739) {
    if( prev[i6739] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i6739]<m&&I[prev[i6739]]=='_') {
      tmp.push_back(prev[i6739]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i6738=0;i6738<(int)prev.size();++i6738) {
    if( prev[i6738] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6738]);
    }
  }
  return memo[key(963,backtracking_ptr_for_packrat963)] = result;
}

inline deque<int> parse_while6742() { 
  if(memo.count(key(964,i))) {
    return memo[key(964,i)];
  }
  int backtracking_ptr_for_packrat964=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev6747;
    deque<int> star_final_prev6748;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev6747.clear();
      for(int i6749=0;i6749<(int)prev.size();++i6749) {
        i = prev[i6749];
        tmp = parse_while6744();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev6748.push_back(prev[i6749]);
        }
        for(int i6750=0;i6750<(int)tmp.size();++i6750) {
          if(tmp[i6750]==FAIL) {
            if(!( !next_prev6747.empty() && next_prev6747.front() == FAIL )) {
              next_prev6747.push_front(FAIL);
            }
          } else {
            next_prev6747.push_back(tmp[i6750]);
          }
        }
      }
      prev = next_prev6747;
    }
    prev = star_final_prev6748;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (DIGIT) */
    deque<int> next_prev6752;
    for(int i6751=0;i6751<(int)prev.size();++i6751) {
      if( prev[i6751] == FAIL ) {
        if(!(!next_prev6752.empty() && next_prev6752.front() == FAIL )) {
          next_prev6752.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6751];
      tmp = parse_DIGIT();
      
      for(int i6751=0;i6751<(int)tmp.size();++i6751) {
        if( tmp[i6751] == FAIL ) {
          if(!( !next_prev6752.empty() && next_prev6752[0] == FAIL )) {
            next_prev6752.push_front(FAIL);
          }
        } else {
          next_prev6752.push_back(tmp[i6751]);
        }
      }
    }
    prev = next_prev6752;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6743=0;i6743<(int)prev.size();++i6743) {
    if( prev[i6743] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6743]);
    }
  }
  return memo[key(964,backtracking_ptr_for_packrat964)] = result;
}

inline deque<int> parse_while6744() { 
  if(memo.count(key(965,i))) {
    return memo[key(965,i)];
  }
  int backtracking_ptr_for_packrat965=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i6746=0;i6746<(int)prev.size();++i6746) {
    if( prev[i6746] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i6746]<m&&I[prev[i6746]]=='_') {
      tmp.push_back(prev[i6746]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i6745=0;i6745<(int)prev.size();++i6745) {
    if( prev[i6745] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6745]);
    }
  }
  return memo[key(965,backtracking_ptr_for_packrat965)] = result;
}

inline deque<int> parse_while6760() { 
  if(memo.count(key(966,i))) {
    return memo[key(966,i)];
  }
  int backtracking_ptr_for_packrat966=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev6765;
    deque<int> star_final_prev6766;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev6765.clear();
      for(int i6767=0;i6767<(int)prev.size();++i6767) {
        i = prev[i6767];
        tmp = parse_while6762();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev6766.push_back(prev[i6767]);
        }
        for(int i6768=0;i6768<(int)tmp.size();++i6768) {
          if(tmp[i6768]==FAIL) {
            if(!( !next_prev6765.empty() && next_prev6765.front() == FAIL )) {
              next_prev6765.push_front(FAIL);
            }
          } else {
            next_prev6765.push_back(tmp[i6768]);
          }
        }
      }
      prev = next_prev6765;
    }
    prev = star_final_prev6766;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (DIGIT) */
    deque<int> next_prev6770;
    for(int i6769=0;i6769<(int)prev.size();++i6769) {
      if( prev[i6769] == FAIL ) {
        if(!(!next_prev6770.empty() && next_prev6770.front() == FAIL )) {
          next_prev6770.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6769];
      tmp = parse_DIGIT();
      
      for(int i6769=0;i6769<(int)tmp.size();++i6769) {
        if( tmp[i6769] == FAIL ) {
          if(!( !next_prev6770.empty() && next_prev6770[0] == FAIL )) {
            next_prev6770.push_front(FAIL);
          }
        } else {
          next_prev6770.push_back(tmp[i6769]);
        }
      }
    }
    prev = next_prev6770;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6761=0;i6761<(int)prev.size();++i6761) {
    if( prev[i6761] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6761]);
    }
  }
  return memo[key(966,backtracking_ptr_for_packrat966)] = result;
}

inline deque<int> parse_while6762() { 
  if(memo.count(key(967,i))) {
    return memo[key(967,i)];
  }
  int backtracking_ptr_for_packrat967=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i6764=0;i6764<(int)prev.size();++i6764) {
    if( prev[i6764] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i6764]<m&&I[prev[i6764]]=='_') {
      tmp.push_back(prev[i6764]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i6763=0;i6763<(int)prev.size();++i6763) {
    if( prev[i6763] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6763]);
    }
  }
  return memo[key(967,backtracking_ptr_for_packrat967)] = result;
}

inline deque<int> parse_slash6776() { 
  if(memo.count(key(968,i))) {
    return memo[key(968,i)];
  }
  int backtracking_ptr_for_packrat968=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (DIGIT) */
    deque<int> next_prev6779;
    for(int i6778=0;i6778<(int)prev.size();++i6778) {
      if( prev[i6778] == FAIL ) {
        if(!(!next_prev6779.empty() && next_prev6779.front() == FAIL )) {
          next_prev6779.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6778];
      tmp = parse_DIGIT();
      
      for(int i6778=0;i6778<(int)tmp.size();++i6778) {
        if( tmp[i6778] == FAIL ) {
          if(!( !next_prev6779.empty() && next_prev6779[0] == FAIL )) {
            next_prev6779.push_front(FAIL);
          }
        } else {
          next_prev6779.push_back(tmp[i6778]);
        }
      }
    }
    prev = next_prev6779;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev6791;
    deque<int> star_final_prev6792;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev6791.clear();
      for(int i6793=0;i6793<(int)prev.size();++i6793) {
        i = prev[i6793];
        tmp = parse_while6780();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev6792.push_back(prev[i6793]);
        }
        for(int i6794=0;i6794<(int)tmp.size();++i6794) {
          if(tmp[i6794]==FAIL) {
            if(!( !next_prev6791.empty() && next_prev6791.front() == FAIL )) {
              next_prev6791.push_front(FAIL);
            }
          } else {
            next_prev6791.push_back(tmp[i6794]);
          }
        }
      }
      prev = next_prev6791;
    }
    prev = star_final_prev6792;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6795=0;i6795<(int)prev.size();++i6795) {
      if( prev[i6795] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6795]<m&&I[prev[i6795]]=='.') {
        tmp.push_back(prev[i6795]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6777=0;i6777<(int)prev.size();++i6777) {
    if( prev[i6777] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6777]);
    }
  }
  return memo[key(968,backtracking_ptr_for_packrat968)] = result;
}

inline deque<int> parse_while6780() { 
  if(memo.count(key(969,i))) {
    return memo[key(969,i)];
  }
  int backtracking_ptr_for_packrat969=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev6785;
    deque<int> star_final_prev6786;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev6785.clear();
      for(int i6787=0;i6787<(int)prev.size();++i6787) {
        i = prev[i6787];
        tmp = parse_while6782();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev6786.push_back(prev[i6787]);
        }
        for(int i6788=0;i6788<(int)tmp.size();++i6788) {
          if(tmp[i6788]==FAIL) {
            if(!( !next_prev6785.empty() && next_prev6785.front() == FAIL )) {
              next_prev6785.push_front(FAIL);
            }
          } else {
            next_prev6785.push_back(tmp[i6788]);
          }
        }
      }
      prev = next_prev6785;
    }
    prev = star_final_prev6786;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (DIGIT) */
    deque<int> next_prev6790;
    for(int i6789=0;i6789<(int)prev.size();++i6789) {
      if( prev[i6789] == FAIL ) {
        if(!(!next_prev6790.empty() && next_prev6790.front() == FAIL )) {
          next_prev6790.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6789];
      tmp = parse_DIGIT();
      
      for(int i6789=0;i6789<(int)tmp.size();++i6789) {
        if( tmp[i6789] == FAIL ) {
          if(!( !next_prev6790.empty() && next_prev6790[0] == FAIL )) {
            next_prev6790.push_front(FAIL);
          }
        } else {
          next_prev6790.push_back(tmp[i6789]);
        }
      }
    }
    prev = next_prev6790;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6781=0;i6781<(int)prev.size();++i6781) {
    if( prev[i6781] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6781]);
    }
  }
  return memo[key(969,backtracking_ptr_for_packrat969)] = result;
}

inline deque<int> parse_while6782() { 
  if(memo.count(key(970,i))) {
    return memo[key(970,i)];
  }
  int backtracking_ptr_for_packrat970=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i6784=0;i6784<(int)prev.size();++i6784) {
    if( prev[i6784] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i6784]<m&&I[prev[i6784]]=='_') {
      tmp.push_back(prev[i6784]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i6783=0;i6783<(int)prev.size();++i6783) {
    if( prev[i6783] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6783]);
    }
  }
  return memo[key(970,backtracking_ptr_for_packrat970)] = result;
}

deque<int> parse_EXPONENT(){
  if(memo.count(key(971,i))) {
    return memo[key(971,i)];
  }
  int backtracking_ptr_for_packrat971=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6798=0;i6798<(int)prev.size();++i6798) {
      if( prev[i6798] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6798]<m&&(I[prev[i6798]]=='e'||I[prev[i6798]]=='E')) {
        tmp.push_back(prev[i6798]+1);
      } else {
        if(!( !tmp.empty() && tmp.front() == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Prioritized Choice */
    deque<int> next_prev6800;
    deque<int> prioritized_choice_final_prev6801;
    next_prev6800.clear();
    for(int i6799=0;i6799<(int)prev.size();++i6799) {
      i = prev[i6799];
      tmp = parse_slash6802();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6800.push_back(prev[i6799]); }
      for(int i6805=0;i6805<(int)tmp.size();++i6805) {
        if( tmp[i6805] != FAIL ) {
          prioritized_choice_final_prev6801.push_back(tmp[i6805]);
        }
      }
    }
    prev = next_prev6800;
    next_prev6800.clear();
    for(int i6799=0;i6799<(int)prev.size();++i6799) {
      i = prev[i6799];
      tmp = parse_slash6806();
      if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6800.push_back(prev[i6799]); }
      for(int i6808=0;i6808<(int)tmp.size();++i6808) {
        if( tmp[i6808] != FAIL ) {
          prioritized_choice_final_prev6801.push_back(tmp[i6808]);
        }
      }
    }
    prev = next_prev6800;
    if(!prev.empty()) {
      if(!(!prioritized_choice_final_prev6801.empty() && prioritized_choice_final_prev6801.front() == FAIL )) {
        prioritized_choice_final_prev6801.push_front(FAIL);
      }
    }
    prev = prioritized_choice_final_prev6801;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (DIGIT) */
    deque<int> next_prev6810;
    for(int i6809=0;i6809<(int)prev.size();++i6809) {
      if( prev[i6809] == FAIL ) {
        if(!(!next_prev6810.empty() && next_prev6810.front() == FAIL )) {
          next_prev6810.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6809];
      tmp = parse_DIGIT();
      
      for(int i6809=0;i6809<(int)tmp.size();++i6809) {
        if( tmp[i6809] == FAIL ) {
          if(!( !next_prev6810.empty() && next_prev6810[0] == FAIL )) {
            next_prev6810.push_front(FAIL);
          }
        } else {
          next_prev6810.push_back(tmp[i6809]);
        }
      }
    }
    prev = next_prev6810;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev6822;
    deque<int> star_final_prev6823;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev6822.clear();
      for(int i6824=0;i6824<(int)prev.size();++i6824) {
        i = prev[i6824];
        tmp = parse_while6811();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev6823.push_back(prev[i6824]);
        }
        for(int i6825=0;i6825<(int)tmp.size();++i6825) {
          if(tmp[i6825]==FAIL) {
            if(!( !next_prev6822.empty() && next_prev6822.front() == FAIL )) {
              next_prev6822.push_front(FAIL);
            }
          } else {
            next_prev6822.push_back(tmp[i6825]);
          }
        }
      }
      prev = next_prev6822;
    }
    prev = star_final_prev6823;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6797=0;i6797<(int)prev.size();++i6797) {
    if( prev[i6797] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6797]);
    }
  }
  return memo[key(971,backtracking_ptr_for_packrat971)] = result;
}

inline deque<int> parse_slash6802() { 
  if(memo.count(key(972,i))) {
    return memo[key(972,i)];
  }
  int backtracking_ptr_for_packrat972=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i6804=0;i6804<(int)prev.size();++i6804) {
    if( prev[i6804] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i6804]<m&&(I[prev[i6804]]=='+'||I[prev[i6804]]=='-')) {
      tmp.push_back(prev[i6804]+1);
    } else {
      if(!( !tmp.empty() && tmp.front() == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i6803=0;i6803<(int)prev.size();++i6803) {
    if( prev[i6803] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6803]);
    }
  }
  return memo[key(972,backtracking_ptr_for_packrat972)] = result;
}

inline deque<int> parse_slash6806() { 
  if(memo.count(key(973,i))) {
    return memo[key(973,i)];
  }
  int backtracking_ptr_for_packrat973=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  for(int i6807=0;i6807<(int)prev.size();++i6807) {
    if( prev[i6807] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6807]);
    }
  }
  return memo[key(973,backtracking_ptr_for_packrat973)] = result;
}

inline deque<int> parse_while6811() { 
  if(memo.count(key(974,i))) {
    return memo[key(974,i)];
  }
  int backtracking_ptr_for_packrat974=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev6816;
    deque<int> star_final_prev6817;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev6816.clear();
      for(int i6818=0;i6818<(int)prev.size();++i6818) {
        i = prev[i6818];
        tmp = parse_while6813();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev6817.push_back(prev[i6818]);
        }
        for(int i6819=0;i6819<(int)tmp.size();++i6819) {
          if(tmp[i6819]==FAIL) {
            if(!( !next_prev6816.empty() && next_prev6816.front() == FAIL )) {
              next_prev6816.push_front(FAIL);
            }
          } else {
            next_prev6816.push_back(tmp[i6819]);
          }
        }
      }
      prev = next_prev6816;
    }
    prev = star_final_prev6817;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (DIGIT) */
    deque<int> next_prev6821;
    for(int i6820=0;i6820<(int)prev.size();++i6820) {
      if( prev[i6820] == FAIL ) {
        if(!(!next_prev6821.empty() && next_prev6821.front() == FAIL )) {
          next_prev6821.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6820];
      tmp = parse_DIGIT();
      
      for(int i6820=0;i6820<(int)tmp.size();++i6820) {
        if( tmp[i6820] == FAIL ) {
          if(!( !next_prev6821.empty() && next_prev6821[0] == FAIL )) {
            next_prev6821.push_front(FAIL);
          }
        } else {
          next_prev6821.push_back(tmp[i6820]);
        }
      }
    }
    prev = next_prev6821;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6812=0;i6812<(int)prev.size();++i6812) {
    if( prev[i6812] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6812]);
    }
  }
  return memo[key(974,backtracking_ptr_for_packrat974)] = result;
}

inline deque<int> parse_while6813() { 
  if(memo.count(key(975,i))) {
    return memo[key(975,i)];
  }
  int backtracking_ptr_for_packrat975=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i6815=0;i6815<(int)prev.size();++i6815) {
    if( prev[i6815] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i6815]<m&&I[prev[i6815]]=='_') {
      tmp.push_back(prev[i6815]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i6814=0;i6814<(int)prev.size();++i6814) {
    if( prev[i6814] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6814]);
    }
  }
  return memo[key(975,backtracking_ptr_for_packrat975)] = result;
}

deque<int> parse_StringLiteral(){
  if(memo.count(key(976,i))) {
    return memo[key(976,i)];
  }
  int backtracking_ptr_for_packrat976=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6827=0;i6827<(int)prev.size();++i6827) {
      if( prev[i6827] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6827]<m&&I[prev[i6827]]=='"') {
        tmp.push_back(prev[i6827]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev6832;
    deque<int> star_final_prev6833;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev6832.clear();
      for(int i6834=0;i6834<(int)prev.size();++i6834) {
        i = prev[i6834];
        tmp = parse_while6828();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev6833.push_back(prev[i6834]);
        }
        for(int i6835=0;i6835<(int)tmp.size();++i6835) {
          if(tmp[i6835]==FAIL) {
            if(!( !next_prev6832.empty() && next_prev6832.front() == FAIL )) {
              next_prev6832.push_front(FAIL);
            }
          } else {
            next_prev6832.push_back(tmp[i6835]);
          }
        }
      }
      prev = next_prev6832;
    }
    prev = star_final_prev6833;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6836=0;i6836<(int)prev.size();++i6836) {
      if( prev[i6836] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6836]<m&&I[prev[i6836]]=='"') {
        tmp.push_back(prev[i6836]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (_) */
    deque<int> next_prev6838;
    for(int i6837=0;i6837<(int)prev.size();++i6837) {
      if( prev[i6837] == FAIL ) {
        if(!(!next_prev6838.empty() && next_prev6838.front() == FAIL )) {
          next_prev6838.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6837];
      tmp = parse__();
      
      for(int i6837=0;i6837<(int)tmp.size();++i6837) {
        if( tmp[i6837] == FAIL ) {
          if(!( !next_prev6838.empty() && next_prev6838[0] == FAIL )) {
            next_prev6838.push_front(FAIL);
          }
        } else {
          next_prev6838.push_back(tmp[i6837]);
        }
      }
    }
    prev = next_prev6838;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6826=0;i6826<(int)prev.size();++i6826) {
    if( prev[i6826] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6826]);
    }
  }
  return memo[key(976,backtracking_ptr_for_packrat976)] = result;
}

inline deque<int> parse_while6828() { 
  if(memo.count(key(977,i))) {
    return memo[key(977,i)];
  }
  int backtracking_ptr_for_packrat977=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (STRING_CONTENT) */
  deque<int> next_prev6831;
  for(int i6830=0;i6830<(int)prev.size();++i6830) {
    if( prev[i6830] == FAIL ) {
      if(!(!next_prev6831.empty() && next_prev6831.front() == FAIL )) {
        next_prev6831.push_front(FAIL);
      }
      continue;
    }
    i = prev[i6830];
    tmp = parse_STRING_CONTENT();
    
    for(int i6830=0;i6830<(int)tmp.size();++i6830) {
      if( tmp[i6830] == FAIL ) {
        if(!( !next_prev6831.empty() && next_prev6831[0] == FAIL )) {
          next_prev6831.push_front(FAIL);
        }
      } else {
        next_prev6831.push_back(tmp[i6830]);
      }
    }
  }
  prev = next_prev6831;
  for(int i6829=0;i6829<(int)prev.size();++i6829) {
    if( prev[i6829] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6829]);
    }
  }
  return memo[key(977,backtracking_ptr_for_packrat977)] = result;
}

deque<int> parse_CharacterLiteral(){
  if(memo.count(key(978,i))) {
    return memo[key(978,i)];
  }
  int backtracking_ptr_for_packrat978=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6840=0;i6840<(int)prev.size();++i6840) {
      if( prev[i6840] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6840]<m&&I[prev[i6840]]==(char)39) {
        tmp.push_back(prev[i6840]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Star */
    deque<int> next_prev6845;
    deque<int> star_final_prev6846;
    while(!((int)prev.size()==1&&prev.front()==FAIL)) {
      next_prev6845.clear();
      for(int i6847=0;i6847<(int)prev.size();++i6847) {
        i = prev[i6847];
        tmp = parse_while6841();
        if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
          star_final_prev6846.push_back(prev[i6847]);
        }
        for(int i6848=0;i6848<(int)tmp.size();++i6848) {
          if(tmp[i6848]==FAIL) {
            if(!( !next_prev6845.empty() && next_prev6845.front() == FAIL )) {
              next_prev6845.push_front(FAIL);
            }
          } else {
            next_prev6845.push_back(tmp[i6848]);
          }
        }
      }
      prev = next_prev6845;
    }
    prev = star_final_prev6846;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6849=0;i6849<(int)prev.size();++i6849) {
      if( prev[i6849] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6849]<m&&I[prev[i6849]]==(char)39) {
        tmp.push_back(prev[i6849]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (_) */
    deque<int> next_prev6851;
    for(int i6850=0;i6850<(int)prev.size();++i6850) {
      if( prev[i6850] == FAIL ) {
        if(!(!next_prev6851.empty() && next_prev6851.front() == FAIL )) {
          next_prev6851.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6850];
      tmp = parse__();
      
      for(int i6850=0;i6850<(int)tmp.size();++i6850) {
        if( tmp[i6850] == FAIL ) {
          if(!( !next_prev6851.empty() && next_prev6851[0] == FAIL )) {
            next_prev6851.push_front(FAIL);
          }
        } else {
          next_prev6851.push_back(tmp[i6850]);
        }
      }
    }
    prev = next_prev6851;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6839=0;i6839<(int)prev.size();++i6839) {
    if( prev[i6839] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6839]);
    }
  }
  return memo[key(978,backtracking_ptr_for_packrat978)] = result;
}

inline deque<int> parse_while6841() { 
  if(memo.count(key(979,i))) {
    return memo[key(979,i)];
  }
  int backtracking_ptr_for_packrat979=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Nonterminal (CHAR_CONTENT) */
  deque<int> next_prev6844;
  for(int i6843=0;i6843<(int)prev.size();++i6843) {
    if( prev[i6843] == FAIL ) {
      if(!(!next_prev6844.empty() && next_prev6844.front() == FAIL )) {
        next_prev6844.push_front(FAIL);
      }
      continue;
    }
    i = prev[i6843];
    tmp = parse_CHAR_CONTENT();
    
    for(int i6843=0;i6843<(int)tmp.size();++i6843) {
      if( tmp[i6843] == FAIL ) {
        if(!( !next_prev6844.empty() && next_prev6844[0] == FAIL )) {
          next_prev6844.push_front(FAIL);
        }
      } else {
        next_prev6844.push_back(tmp[i6843]);
      }
    }
  }
  prev = next_prev6844;
  for(int i6842=0;i6842<(int)prev.size();++i6842) {
    if( prev[i6842] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6842]);
    }
  }
  return memo[key(979,backtracking_ptr_for_packrat979)] = result;
}

deque<int> parse_STRING_CONTENT(){
  if(memo.count(key(980,i))) {
    return memo[key(980,i)];
  }
  int backtracking_ptr_for_packrat980=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev6854;
  deque<int> prioritized_choice_final_prev6855;
  next_prev6854.clear();
  for(int i6853=0;i6853<(int)prev.size();++i6853) {
    i = prev[i6853];
    tmp = parse_slash6856();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6854.push_back(prev[i6853]); }
    for(int i6860=0;i6860<(int)tmp.size();++i6860) {
      if( tmp[i6860] != FAIL ) {
        prioritized_choice_final_prev6855.push_back(tmp[i6860]);
      }
    }
  }
  prev = next_prev6854;
  next_prev6854.clear();
  for(int i6853=0;i6853<(int)prev.size();++i6853) {
    i = prev[i6853];
    tmp = parse_slash6861();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6854.push_back(prev[i6853]); }
    for(int i6869=0;i6869<(int)tmp.size();++i6869) {
      if( tmp[i6869] != FAIL ) {
        prioritized_choice_final_prev6855.push_back(tmp[i6869]);
      }
    }
  }
  prev = next_prev6854;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev6855.empty() && prioritized_choice_final_prev6855.front() == FAIL )) {
      prioritized_choice_final_prev6855.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev6855;
  for(int i6852=0;i6852<(int)prev.size();++i6852) {
    if( prev[i6852] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6852]);
    }
  }
  return memo[key(980,backtracking_ptr_for_packrat980)] = result;
}

inline deque<int> parse_slash6856() { 
  if(memo.count(key(981,i))) {
    return memo[key(981,i)];
  }
  int backtracking_ptr_for_packrat981=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ESCAPE) */
    deque<int> next_prev6859;
    for(int i6858=0;i6858<(int)prev.size();++i6858) {
      if( prev[i6858] == FAIL ) {
        if(!(!next_prev6859.empty() && next_prev6859.front() == FAIL )) {
          next_prev6859.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6858];
      tmp = parse_ESCAPE();
      
      for(int i6858=0;i6858<(int)tmp.size();++i6858) {
        if( tmp[i6858] == FAIL ) {
          if(!( !next_prev6859.empty() && next_prev6859[0] == FAIL )) {
            next_prev6859.push_front(FAIL);
          }
        } else {
          next_prev6859.push_back(tmp[i6858]);
        }
      }
    }
    prev = next_prev6859;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6857=0;i6857<(int)prev.size();++i6857) {
    if( prev[i6857] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6857]);
    }
  }
  return memo[key(981,backtracking_ptr_for_packrat981)] = result;
}

inline deque<int> parse_slash6861() { 
  if(memo.count(key(982,i))) {
    return memo[key(982,i)];
  }
  int backtracking_ptr_for_packrat982=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Not */
    deque<int> next_prev6867;
    for(int i6866=0;i6866<(int)prev.size();++i6866) {
      i = prev[i6866];
      tmp = parse_not6863();
      if(!tmp.empty()&&tmp.front()==FAIL) {
        next_prev6867.push_back(prev[i6866]);
      } else {
        if(!(!next_prev6867.empty()&&next_prev6867.front()==FAIL)) {
          next_prev6867.push_front(FAIL);
        }
      }
    }
    prev = next_prev6867;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6868=0;i6868<(int)prev.size();++i6868) {
      if( prev[i6868] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6868]<m) {//any character
        tmp.push_back(prev[i6868]+1);
      } else {
        if(!( !tmp.empty() && tmp.front() == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6862=0;i6862<(int)prev.size();++i6862) {
    if( prev[i6862] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6862]);
    }
  }
  return memo[key(982,backtracking_ptr_for_packrat982)] = result;
}

inline deque<int> parse_not6863() { 
  if(memo.count(key(983,i))) {
    return memo[key(983,i)];
  }
  int backtracking_ptr_for_packrat983=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i6865=0;i6865<(int)prev.size();++i6865) {
    if( prev[i6865] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i6865]<m&&(I[prev[i6865]]=='"'||I[prev[i6865]]==(char)10||I[prev[i6865]]==(char)92)) {
      tmp.push_back(prev[i6865]+1);
    } else {
      if(!( !tmp.empty() && tmp.front() == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i6864=0;i6864<(int)prev.size();++i6864) {
    if( prev[i6864] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6864]);
    }
  }
  return memo[key(983,backtracking_ptr_for_packrat983)] = result;
}

deque<int> parse_CHAR_CONTENT(){
  if(memo.count(key(984,i))) {
    return memo[key(984,i)];
  }
  int backtracking_ptr_for_packrat984=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev6872;
  deque<int> prioritized_choice_final_prev6873;
  next_prev6872.clear();
  for(int i6871=0;i6871<(int)prev.size();++i6871) {
    i = prev[i6871];
    tmp = parse_slash6874();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6872.push_back(prev[i6871]); }
    for(int i6878=0;i6878<(int)tmp.size();++i6878) {
      if( tmp[i6878] != FAIL ) {
        prioritized_choice_final_prev6873.push_back(tmp[i6878]);
      }
    }
  }
  prev = next_prev6872;
  next_prev6872.clear();
  for(int i6871=0;i6871<(int)prev.size();++i6871) {
    i = prev[i6871];
    tmp = parse_slash6879();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6872.push_back(prev[i6871]); }
    for(int i6887=0;i6887<(int)tmp.size();++i6887) {
      if( tmp[i6887] != FAIL ) {
        prioritized_choice_final_prev6873.push_back(tmp[i6887]);
      }
    }
  }
  prev = next_prev6872;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev6873.empty() && prioritized_choice_final_prev6873.front() == FAIL )) {
      prioritized_choice_final_prev6873.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev6873;
  for(int i6870=0;i6870<(int)prev.size();++i6870) {
    if( prev[i6870] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6870]);
    }
  }
  return memo[key(984,backtracking_ptr_for_packrat984)] = result;
}

inline deque<int> parse_slash6874() { 
  if(memo.count(key(985,i))) {
    return memo[key(985,i)];
  }
  int backtracking_ptr_for_packrat985=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (ESCAPE) */
    deque<int> next_prev6877;
    for(int i6876=0;i6876<(int)prev.size();++i6876) {
      if( prev[i6876] == FAIL ) {
        if(!(!next_prev6877.empty() && next_prev6877.front() == FAIL )) {
          next_prev6877.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6876];
      tmp = parse_ESCAPE();
      
      for(int i6876=0;i6876<(int)tmp.size();++i6876) {
        if( tmp[i6876] == FAIL ) {
          if(!( !next_prev6877.empty() && next_prev6877[0] == FAIL )) {
            next_prev6877.push_front(FAIL);
          }
        } else {
          next_prev6877.push_back(tmp[i6876]);
        }
      }
    }
    prev = next_prev6877;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6875=0;i6875<(int)prev.size();++i6875) {
    if( prev[i6875] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6875]);
    }
  }
  return memo[key(985,backtracking_ptr_for_packrat985)] = result;
}

inline deque<int> parse_slash6879() { 
  if(memo.count(key(986,i))) {
    return memo[key(986,i)];
  }
  int backtracking_ptr_for_packrat986=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Not */
    deque<int> next_prev6885;
    for(int i6884=0;i6884<(int)prev.size();++i6884) {
      i = prev[i6884];
      tmp = parse_not6881();
      if(!tmp.empty()&&tmp.front()==FAIL) {
        next_prev6885.push_back(prev[i6884]);
      } else {
        if(!(!next_prev6885.empty()&&next_prev6885.front()==FAIL)) {
          next_prev6885.push_front(FAIL);
        }
      }
    }
    prev = next_prev6885;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6886=0;i6886<(int)prev.size();++i6886) {
      if( prev[i6886] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6886]<m) {//any character
        tmp.push_back(prev[i6886]+1);
      } else {
        if(!( !tmp.empty() && tmp.front() == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6880=0;i6880<(int)prev.size();++i6880) {
    if( prev[i6880] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6880]);
    }
  }
  return memo[key(986,backtracking_ptr_for_packrat986)] = result;
}

inline deque<int> parse_not6881() { 
  if(memo.count(key(987,i))) {
    return memo[key(987,i)];
  }
  int backtracking_ptr_for_packrat987=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i6883=0;i6883<(int)prev.size();++i6883) {
    if( prev[i6883] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i6883]<m&&(I[prev[i6883]]==(char)39||I[prev[i6883]]==(char)10||I[prev[i6883]]==(char)92)) {
      tmp.push_back(prev[i6883]+1);
    } else {
      if(!( !tmp.empty() && tmp.front() == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i6882=0;i6882<(int)prev.size();++i6882) {
    if( prev[i6882] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6882]);
    }
  }
  return memo[key(987,backtracking_ptr_for_packrat987)] = result;
}

deque<int> parse_ESCAPE(){
  if(memo.count(key(988,i))) {
    return memo[key(988,i)];
  }
  int backtracking_ptr_for_packrat988=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev6890;
  deque<int> prioritized_choice_final_prev6891;
  next_prev6890.clear();
  for(int i6889=0;i6889<(int)prev.size();++i6889) {
    i = prev[i6889];
    tmp = parse_slash6892();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6890.push_back(prev[i6889]); }
    for(int i6896=0;i6896<(int)tmp.size();++i6896) {
      if( tmp[i6896] != FAIL ) {
        prioritized_choice_final_prev6891.push_back(tmp[i6896]);
      }
    }
  }
  prev = next_prev6890;
  next_prev6890.clear();
  for(int i6889=0;i6889<(int)prev.size();++i6889) {
    i = prev[i6889];
    tmp = parse_slash6897();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6890.push_back(prev[i6889]); }
    for(int i6901=0;i6901<(int)tmp.size();++i6901) {
      if( tmp[i6901] != FAIL ) {
        prioritized_choice_final_prev6891.push_back(tmp[i6901]);
      }
    }
  }
  prev = next_prev6890;
  next_prev6890.clear();
  for(int i6889=0;i6889<(int)prev.size();++i6889) {
    i = prev[i6889];
    tmp = parse_slash6902();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6890.push_back(prev[i6889]); }
    for(int i6906=0;i6906<(int)tmp.size();++i6906) {
      if( tmp[i6906] != FAIL ) {
        prioritized_choice_final_prev6891.push_back(tmp[i6906]);
      }
    }
  }
  prev = next_prev6890;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev6891.empty() && prioritized_choice_final_prev6891.front() == FAIL )) {
      prioritized_choice_final_prev6891.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev6891;
  for(int i6888=0;i6888<(int)prev.size();++i6888) {
    if( prev[i6888] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6888]);
    }
  }
  return memo[key(988,backtracking_ptr_for_packrat988)] = result;
}

inline deque<int> parse_slash6892() { 
  if(memo.count(key(989,i))) {
    return memo[key(989,i)];
  }
  int backtracking_ptr_for_packrat989=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (SIMPLE_ESCAPE) */
    deque<int> next_prev6895;
    for(int i6894=0;i6894<(int)prev.size();++i6894) {
      if( prev[i6894] == FAIL ) {
        if(!(!next_prev6895.empty() && next_prev6895.front() == FAIL )) {
          next_prev6895.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6894];
      tmp = parse_SIMPLE_ESCAPE();
      
      for(int i6894=0;i6894<(int)tmp.size();++i6894) {
        if( tmp[i6894] == FAIL ) {
          if(!( !next_prev6895.empty() && next_prev6895[0] == FAIL )) {
            next_prev6895.push_front(FAIL);
          }
        } else {
          next_prev6895.push_back(tmp[i6894]);
        }
      }
    }
    prev = next_prev6895;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6893=0;i6893<(int)prev.size();++i6893) {
    if( prev[i6893] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6893]);
    }
  }
  return memo[key(989,backtracking_ptr_for_packrat989)] = result;
}

inline deque<int> parse_slash6897() { 
  if(memo.count(key(990,i))) {
    return memo[key(990,i)];
  }
  int backtracking_ptr_for_packrat990=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (OCTAL_ESCAPE) */
    deque<int> next_prev6900;
    for(int i6899=0;i6899<(int)prev.size();++i6899) {
      if( prev[i6899] == FAIL ) {
        if(!(!next_prev6900.empty() && next_prev6900.front() == FAIL )) {
          next_prev6900.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6899];
      tmp = parse_OCTAL_ESCAPE();
      
      for(int i6899=0;i6899<(int)tmp.size();++i6899) {
        if( tmp[i6899] == FAIL ) {
          if(!( !next_prev6900.empty() && next_prev6900[0] == FAIL )) {
            next_prev6900.push_front(FAIL);
          }
        } else {
          next_prev6900.push_back(tmp[i6899]);
        }
      }
    }
    prev = next_prev6900;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6898=0;i6898<(int)prev.size();++i6898) {
    if( prev[i6898] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6898]);
    }
  }
  return memo[key(990,backtracking_ptr_for_packrat990)] = result;
}

inline deque<int> parse_slash6902() { 
  if(memo.count(key(991,i))) {
    return memo[key(991,i)];
  }
  int backtracking_ptr_for_packrat991=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (HEX_ESCAPE) */
    deque<int> next_prev6905;
    for(int i6904=0;i6904<(int)prev.size();++i6904) {
      if( prev[i6904] == FAIL ) {
        if(!(!next_prev6905.empty() && next_prev6905.front() == FAIL )) {
          next_prev6905.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6904];
      tmp = parse_HEX_ESCAPE();
      
      for(int i6904=0;i6904<(int)tmp.size();++i6904) {
        if( tmp[i6904] == FAIL ) {
          if(!( !next_prev6905.empty() && next_prev6905[0] == FAIL )) {
            next_prev6905.push_front(FAIL);
          }
        } else {
          next_prev6905.push_back(tmp[i6904]);
        }
      }
    }
    prev = next_prev6905;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6903=0;i6903<(int)prev.size();++i6903) {
    if( prev[i6903] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6903]);
    }
  }
  return memo[key(991,backtracking_ptr_for_packrat991)] = result;
}

deque<int> parse_SIMPLE_ESCAPE(){
  if(memo.count(key(992,i))) {
    return memo[key(992,i)];
  }
  int backtracking_ptr_for_packrat992=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6908=0;i6908<(int)prev.size();++i6908) {
      if( prev[i6908] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6908]<m&&I[prev[i6908]]==(char)92) {
        tmp.push_back(prev[i6908]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6909=0;i6909<(int)prev.size();++i6909) {
      if( prev[i6909] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6909]<m&&(I[prev[i6909]]==(char)39||I[prev[i6909]]=='"'||I[prev[i6909]]==(char)92||I[prev[i6909]]=='b'||I[prev[i6909]]=='f'||I[prev[i6909]]=='n'||I[prev[i6909]]=='r'||I[prev[i6909]]=='t')) {
        tmp.push_back(prev[i6909]+1);
      } else {
        if(!( !tmp.empty() && tmp.front() == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6907=0;i6907<(int)prev.size();++i6907) {
    if( prev[i6907] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6907]);
    }
  }
  return memo[key(992,backtracking_ptr_for_packrat992)] = result;
}

deque<int> parse_OCTAL_ESCAPE(){
  if(memo.count(key(993,i))) {
    return memo[key(993,i)];
  }
  int backtracking_ptr_for_packrat993=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  /* Prioritized Choice */
  deque<int> next_prev6912;
  deque<int> prioritized_choice_final_prev6913;
  next_prev6912.clear();
  for(int i6911=0;i6911<(int)prev.size();++i6911) {
    i = prev[i6911];
    tmp = parse_slash6914();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6912.push_back(prev[i6911]); }
    for(int i6920=0;i6920<(int)tmp.size();++i6920) {
      if( tmp[i6920] != FAIL ) {
        prioritized_choice_final_prev6913.push_back(tmp[i6920]);
      }
    }
  }
  prev = next_prev6912;
  next_prev6912.clear();
  for(int i6911=0;i6911<(int)prev.size();++i6911) {
    i = prev[i6911];
    tmp = parse_slash6921();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6912.push_back(prev[i6911]); }
    for(int i6926=0;i6926<(int)tmp.size();++i6926) {
      if( tmp[i6926] != FAIL ) {
        prioritized_choice_final_prev6913.push_back(tmp[i6926]);
      }
    }
  }
  prev = next_prev6912;
  next_prev6912.clear();
  for(int i6911=0;i6911<(int)prev.size();++i6911) {
    i = prev[i6911];
    tmp = parse_slash6927();
    if(!tmp.empty()&&tmp[0]==FAIL) { next_prev6912.push_back(prev[i6911]); }
    for(int i6931=0;i6931<(int)tmp.size();++i6931) {
      if( tmp[i6931] != FAIL ) {
        prioritized_choice_final_prev6913.push_back(tmp[i6931]);
      }
    }
  }
  prev = next_prev6912;
  if(!prev.empty()) {
    if(!(!prioritized_choice_final_prev6913.empty() && prioritized_choice_final_prev6913.front() == FAIL )) {
      prioritized_choice_final_prev6913.push_front(FAIL);
    }
  }
  prev = prioritized_choice_final_prev6913;
  for(int i6910=0;i6910<(int)prev.size();++i6910) {
    if( prev[i6910] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6910]);
    }
  }
  return memo[key(993,backtracking_ptr_for_packrat993)] = result;
}

inline deque<int> parse_slash6914() { 
  if(memo.count(key(994,i))) {
    return memo[key(994,i)];
  }
  int backtracking_ptr_for_packrat994=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6916=0;i6916<(int)prev.size();++i6916) {
      if( prev[i6916] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6916]<m&&I[prev[i6916]]==(char)92) {
        tmp.push_back(prev[i6916]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6917=0;i6917<(int)prev.size();++i6917) {
      if( prev[i6917] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6917]<m&&(I[prev[i6917]]=='0'||I[prev[i6917]]=='1'||I[prev[i6917]]=='2'||I[prev[i6917]]=='3')) {
        tmp.push_back(prev[i6917]+1);
      } else {
        if(!( !tmp.empty() && tmp.front() == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6918=0;i6918<(int)prev.size();++i6918) {
      if( prev[i6918] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6918]<m&&(I[prev[i6918]]=='0'||I[prev[i6918]]=='1'||I[prev[i6918]]=='2'||I[prev[i6918]]=='3'||I[prev[i6918]]=='4'||I[prev[i6918]]=='5'||I[prev[i6918]]=='6'||I[prev[i6918]]=='7')) {
        tmp.push_back(prev[i6918]+1);
      } else {
        if(!( !tmp.empty() && tmp.front() == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6919=0;i6919<(int)prev.size();++i6919) {
      if( prev[i6919] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6919]<m&&(I[prev[i6919]]=='0'||I[prev[i6919]]=='1'||I[prev[i6919]]=='2'||I[prev[i6919]]=='3'||I[prev[i6919]]=='4'||I[prev[i6919]]=='5'||I[prev[i6919]]=='6'||I[prev[i6919]]=='7')) {
        tmp.push_back(prev[i6919]+1);
      } else {
        if(!( !tmp.empty() && tmp.front() == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6915=0;i6915<(int)prev.size();++i6915) {
    if( prev[i6915] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6915]);
    }
  }
  return memo[key(994,backtracking_ptr_for_packrat994)] = result;
}

inline deque<int> parse_slash6921() { 
  if(memo.count(key(995,i))) {
    return memo[key(995,i)];
  }
  int backtracking_ptr_for_packrat995=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6923=0;i6923<(int)prev.size();++i6923) {
      if( prev[i6923] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6923]<m&&I[prev[i6923]]==(char)92) {
        tmp.push_back(prev[i6923]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6924=0;i6924<(int)prev.size();++i6924) {
      if( prev[i6924] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6924]<m&&(I[prev[i6924]]=='0'||I[prev[i6924]]=='1'||I[prev[i6924]]=='2'||I[prev[i6924]]=='3'||I[prev[i6924]]=='4'||I[prev[i6924]]=='5'||I[prev[i6924]]=='6'||I[prev[i6924]]=='7')) {
        tmp.push_back(prev[i6924]+1);
      } else {
        if(!( !tmp.empty() && tmp.front() == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6925=0;i6925<(int)prev.size();++i6925) {
      if( prev[i6925] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6925]<m&&(I[prev[i6925]]=='0'||I[prev[i6925]]=='1'||I[prev[i6925]]=='2'||I[prev[i6925]]=='3'||I[prev[i6925]]=='4'||I[prev[i6925]]=='5'||I[prev[i6925]]=='6'||I[prev[i6925]]=='7')) {
        tmp.push_back(prev[i6925]+1);
      } else {
        if(!( !tmp.empty() && tmp.front() == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6922=0;i6922<(int)prev.size();++i6922) {
    if( prev[i6922] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6922]);
    }
  }
  return memo[key(995,backtracking_ptr_for_packrat995)] = result;
}

inline deque<int> parse_slash6927() { 
  if(memo.count(key(996,i))) {
    return memo[key(996,i)];
  }
  int backtracking_ptr_for_packrat996=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6929=0;i6929<(int)prev.size();++i6929) {
      if( prev[i6929] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6929]<m&&I[prev[i6929]]==(char)92) {
        tmp.push_back(prev[i6929]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6930=0;i6930<(int)prev.size();++i6930) {
      if( prev[i6930] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6930]<m&&(I[prev[i6930]]=='0'||I[prev[i6930]]=='1'||I[prev[i6930]]=='2'||I[prev[i6930]]=='3'||I[prev[i6930]]=='4'||I[prev[i6930]]=='5'||I[prev[i6930]]=='6'||I[prev[i6930]]=='7')) {
        tmp.push_back(prev[i6930]+1);
      } else {
        if(!( !tmp.empty() && tmp.front() == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6928=0;i6928<(int)prev.size();++i6928) {
    if( prev[i6928] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6928]);
    }
  }
  return memo[key(996,backtracking_ptr_for_packrat996)] = result;
}

deque<int> parse_HEX_ESCAPE(){
  if(memo.count(key(997,i))) {
    return memo[key(997,i)];
  }
  int backtracking_ptr_for_packrat997=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    tmp.clear();
    for(int i6933=0;i6933<(int)prev.size();++i6933) {
      if( prev[i6933] == FAIL ) {
        if(!(!tmp.empty()&&tmp.front()==FAIL)) {
          tmp.push_front(FAIL);
        }
        continue;
      }
      if(prev[i6933]<m&&I[prev[i6933]]==(char)92) {
        tmp.push_back(prev[i6933]+1);
      } else {
        if(!( !tmp.empty() && tmp[0] == FAIL )){
          tmp.push_front(FAIL);
        }
      }
    }
    prev = tmp;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      tmp.clear();
      for(int i6934=0;i6934<(int)prev.size();++i6934) {
        if( prev[i6934] == FAIL ) {
          if(!(!tmp.empty()&&tmp.front()==FAIL)) {
            tmp.push_front(FAIL);
          }
          continue;
        }
        if(prev[i6934]<m&&I[prev[i6934]]=='u') {
          tmp.push_back(prev[i6934]+1);
        } else {
          if(!( !tmp.empty() && tmp[0] == FAIL )){
            tmp.push_front(FAIL);
          }
        }
      }
      prev = tmp;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    if(!((int)prev.size()==1&&prev.front()==FAIL)) {
      /* Star */
      deque<int> next_prev6938;
      deque<int> star_final_prev6939;
      while(!((int)prev.size()==1&&prev.front()==FAIL)) {
        next_prev6938.clear();
        for(int i6940=0;i6940<(int)prev.size();++i6940) {
          i = prev[i6940];
          tmp = parse_while6935();
          if( (int)tmp.size() == 1 && tmp.front() == FAIL ) {
            star_final_prev6939.push_back(prev[i6940]);
          }
          for(int i6941=0;i6941<(int)tmp.size();++i6941) {
            if(tmp[i6941]==FAIL) {
              if(!( !next_prev6938.empty() && next_prev6938.front() == FAIL )) {
                next_prev6938.push_front(FAIL);
              }
            } else {
              next_prev6938.push_back(tmp[i6941]);
            }
          }
        }
        prev = next_prev6938;
      }
      prev = star_final_prev6939;
      sort(prev.begin(),prev.end());
      prev.erase(unique(prev.begin(),prev.end()),prev.end());
    }
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (HEX4) */
    deque<int> next_prev6943;
    for(int i6942=0;i6942<(int)prev.size();++i6942) {
      if( prev[i6942] == FAIL ) {
        if(!(!next_prev6943.empty() && next_prev6943.front() == FAIL )) {
          next_prev6943.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6942];
      tmp = parse_HEX4();
      
      for(int i6942=0;i6942<(int)tmp.size();++i6942) {
        if( tmp[i6942] == FAIL ) {
          if(!( !next_prev6943.empty() && next_prev6943[0] == FAIL )) {
            next_prev6943.push_front(FAIL);
          }
        } else {
          next_prev6943.push_back(tmp[i6942]);
        }
      }
    }
    prev = next_prev6943;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6932=0;i6932<(int)prev.size();++i6932) {
    if( prev[i6932] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6932]);
    }
  }
  return memo[key(997,backtracking_ptr_for_packrat997)] = result;
}

inline deque<int> parse_while6935() { 
  if(memo.count(key(998,i))) {
    return memo[key(998,i)];
  }
  int backtracking_ptr_for_packrat998=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  tmp.clear();
  for(int i6937=0;i6937<(int)prev.size();++i6937) {
    if( prev[i6937] == FAIL ) {
      if(!(!tmp.empty()&&tmp.front()==FAIL)) {
        tmp.push_front(FAIL);
      }
      continue;
    }
    if(prev[i6937]<m&&I[prev[i6937]]=='u') {
      tmp.push_back(prev[i6937]+1);
    } else {
      if(!( !tmp.empty() && tmp[0] == FAIL )){
        tmp.push_front(FAIL);
      }
    }
  }
  prev = tmp;
  for(int i6936=0;i6936<(int)prev.size();++i6936) {
    if( prev[i6936] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6936]);
    }
  }
  return memo[key(998,backtracking_ptr_for_packrat998)] = result;
}

deque<int> parse_HEX4(){
  if(memo.count(key(999,i))) {
    return memo[key(999,i)];
  }
  int backtracking_ptr_for_packrat999=i;
  deque<int> result; // we use -1 to denote failure
  deque<int> tmp;
  deque<int> prev; //ちょうど今失敗せずに残っているポインタ
  prev.push_back(i);
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (HEX) */
    deque<int> next_prev6946;
    for(int i6945=0;i6945<(int)prev.size();++i6945) {
      if( prev[i6945] == FAIL ) {
        if(!(!next_prev6946.empty() && next_prev6946.front() == FAIL )) {
          next_prev6946.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6945];
      tmp = parse_HEX();
      
      for(int i6945=0;i6945<(int)tmp.size();++i6945) {
        if( tmp[i6945] == FAIL ) {
          if(!( !next_prev6946.empty() && next_prev6946[0] == FAIL )) {
            next_prev6946.push_front(FAIL);
          }
        } else {
          next_prev6946.push_back(tmp[i6945]);
        }
      }
    }
    prev = next_prev6946;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (HEX) */
    deque<int> next_prev6948;
    for(int i6947=0;i6947<(int)prev.size();++i6947) {
      if( prev[i6947] == FAIL ) {
        if(!(!next_prev6948.empty() && next_prev6948.front() == FAIL )) {
          next_prev6948.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6947];
      tmp = parse_HEX();
      
      for(int i6947=0;i6947<(int)tmp.size();++i6947) {
        if( tmp[i6947] == FAIL ) {
          if(!( !next_prev6948.empty() && next_prev6948[0] == FAIL )) {
            next_prev6948.push_front(FAIL);
          }
        } else {
          next_prev6948.push_back(tmp[i6947]);
        }
      }
    }
    prev = next_prev6948;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (HEX) */
    deque<int> next_prev6950;
    for(int i6949=0;i6949<(int)prev.size();++i6949) {
      if( prev[i6949] == FAIL ) {
        if(!(!next_prev6950.empty() && next_prev6950.front() == FAIL )) {
          next_prev6950.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6949];
      tmp = parse_HEX();
      
      for(int i6949=0;i6949<(int)tmp.size();++i6949) {
        if( tmp[i6949] == FAIL ) {
          if(!( !next_prev6950.empty() && next_prev6950[0] == FAIL )) {
            next_prev6950.push_front(FAIL);
          }
        } else {
          next_prev6950.push_back(tmp[i6949]);
        }
      }
    }
    prev = next_prev6950;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  if(!((int)prev.size()==1&&prev.front()==FAIL)) {
    /* Nonterminal (HEX) */
    deque<int> next_prev6952;
    for(int i6951=0;i6951<(int)prev.size();++i6951) {
      if( prev[i6951] == FAIL ) {
        if(!(!next_prev6952.empty() && next_prev6952.front() == FAIL )) {
          next_prev6952.push_front(FAIL);
        }
        continue;
      }
      i = prev[i6951];
      tmp = parse_HEX();
      
      for(int i6951=0;i6951<(int)tmp.size();++i6951) {
        if( tmp[i6951] == FAIL ) {
          if(!( !next_prev6952.empty() && next_prev6952[0] == FAIL )) {
            next_prev6952.push_front(FAIL);
          }
        } else {
          next_prev6952.push_back(tmp[i6951]);
        }
      }
    }
    prev = next_prev6952;
    sort(prev.begin(),prev.end());
    prev.erase(unique(prev.begin(),prev.end()),prev.end());
  }
  for(int i6944=0;i6944<(int)prev.size();++i6944) {
    if( prev[i6944] == FAIL ) {
      if(!( !result.empty() && result[0] == FAIL )) {
        result.push_front(FAIL);
      }
    } else {
      result.push_back(prev[i6944]);
    }
  }
  return memo[key(999,backtracking_ptr_for_packrat999)] = result;
}


int main() {
  string tmp;
  while( getline(cin,tmp) ) I += (tmp+"\n");
  m = (int)I.size();
  auto sum = 0;
  long long maxi = -LLONG_MAX;
  long long mini = LLONG_MAX;
  int cnt = 10;
  for(int loop=0;loop<cnt;++loop) {
    i=0;
    memo.clear();
    auto st = chrono::system_clock::now();
    deque<int> result = parse_File();
    auto ed = chrono::system_clock::now();
    sort(result.begin(),result.end());
    result.erase(unique(result.begin(),result.end()),result.end());
    if(!( result.size() == 1 && result[0] == FAIL )) {
      puts("success");
      for(int i=0;i<(int)result.size();++i) {
	if(result[i] == -1) continue;
	cout << "consumed :: [" << result[i] << "/" << m << "]" << endl;
      }
    } else {
      puts("fail");
      return 0;
    }
    auto diff = chrono::duration_cast<chrono::milliseconds>(ed-st).count(); 
    maxi = max(maxi,diff);
    mini = min(mini,diff);
    sum += diff;
    cout << "matching time :: " << diff << "msec" << endl;
    cout << "the number of elements in memo :: " << memo.size() << endl;
  }
  printf("%.10f\n",(sum-maxi-mini) / (double)8.0);
  return 0;
}
